{
	"info": {
		"_postman_id": "71f1a4af-7229-4b88-843e-47a671b8a56e",
		"name": "AdministratorAdministration+testcases",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "UserInput",
			"item": [
				{
					"name": "for loading user input",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"\\n\\n\\n===========================================================================================\");\r",
									"console.log(\"====================================== Administrator Administration ====================================\");\r",
									"console.log(\"==========================================================================================\");\r",
									"/****************************************************************************************\r",
									"* Loading Input Data from File\r",
									"****************************************************************************************/\r",
									"try {\r",
									"    var inputFromFile;\r",
									"    inputFromFile = data;\r",
									"\r",
									"} catch (error) {\r",
									"    console.log(\"! Input data could not be loaded.\");\r",
									"}\r",
									"\r",
									"/****************************************************************************************\r",
									"* Defining constants \r",
									"****************************************************************************************/\r",
									"const RETRY_MAXCOUNT = 3;\r",
									"const RETRY_WAITING_PERIRD = 3*1000;\r",
									"\r",
									"/****************************************************************************************\r",
									"* Setting Environmental Variables \r",
									"****************************************************************************************/\r",
									"try {\r",
									"    pm.environment.clear();\r",
									"\r",
									"    let TYPE_OF_TESTING;\r",
									"    TYPE_OF_TESTING = inputFromFile.typeOfTesting;  // Data file should contain either \"Acceptance\" or \"Continuous Integration\".\r",
									"                                                    // In case of \"Acceptance\", Continuous Integration test cases would be executed, too.\r",
									"\r",
									"    let APPLICATION;\r",
									"    APPLICATION = inputFromFile.application;\r",
									"\r",
									"    let DUMMY_URI;\r",
									"    DUMMY_URI = inputFromFile.dummyUrl;\r",
									"\r",
									"    pm.environment.set(\"typeOfTesting\", TYPE_OF_TESTING);\r",
									"    pm.environment.set(\"application\", APPLICATION);\r",
									"    pm.environment.set(\"dummyUri\", DUMMY_URI);\r",
									"    \r",
									"    pm.environment.set(\"retryMaxCount\", RETRY_MAXCOUNT);\r",
									"    pm.environment.set(\"retryWaitingPeriod\", RETRY_WAITING_PERIRD);\r",
									"\r",
									"} catch (error) {\r",
									"    console.log(\"! Environment variables could not be set.\");\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Setting Collection Variables \r",
									"****************************************************************************************/\r",
									"try {\r",
									"    pm.collectionVariables.clear();\r",
									"\r",
									"} catch (error) {\r",
									"    console.log(\"! Collection variables could not be set.\");\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Setting Local Variables and Preparing the Request\r",
									"****************************************************************************************/\r",
									"try {\r",
									"    pm.variables.clear();\r",
									"\r",
									"    let URI;\r",
									"    URI = pm.environment.get(\"dummyUri\");\r",
									"\r",
									"    pm.variables.set(\"uri\", URI);\r",
									"    pm.request.headers.upsert({ key: \"Authorization\", value: \"\" });\r",
									"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
									"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" });\r",
									"\r",
									"} catch (error) {\r",
									"    console.log(\"! Local variables could not be set.\");\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Functions\r",
									"****************************************************************************************/\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{uri}}",
							"host": [
								"{{uri}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "functions()",
			"item": []
		},
		{
			"name": "ServiceLayer",
			"item": [
				{
					"name": "IndividualPart",
					"item": [
						{
							"name": "/v1/regard-application",
							"item": [
								{
									"name": "Continuous Integration",
									"item": [
										{
											"name": "Service Idempotent?",
											"item": [
												{
													"name": "reference /core-model-1-4:control-construct",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n-----  /v1/regard-application integration -- is service idempotent? -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Environment variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY = \"\";\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var ltpList;\r",
																	"var fcList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    let responseCode;\r",
																	"    responseCode = parseInt(response.code);\r",
																	"    \r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        let responseObject;\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																	"        fcList = responseObject[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
																	"\r",
																	"    } else {\r",
																	"        ltpList = [];\r",
																	"        fcList = [];\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! ltpList could not be extracted.\");\r",
																	"}\r",
																	"\r",
																	"var currentOperationServer;\r",
																	"var httpClientLtp;\r",
																	"var tcpClientLtp;\r",
																	"try {\r",
																	"    currentOperationServer = FindOperationServer(\"/v1/regard-application\", ltpList);\r",
																	"\r",
																	"    //Inquiring OAM approvals\r",
																	"    let outputFcPortListInquireOamRequestApprovals;\r",
																	"    outputFcPortListInquireOamRequestApprovals = FindOutputFcPortList(\"NewApplicationCausesRequestForInquiringOamRequestApprovals\", fcList);\r",
																	"    let ltpInstance = FindRandomLtpInstancesFromFc(outputFcPortListInquireOamRequestApprovals, ltpList)\r",
																	"    httpClientLtp = ltpInstance.httpClientLtp;\r",
																	"    tcpClientLtp = FindServingLtp(httpClientLtp, ltpList);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Reference objects could not be extracted.\");\r",
																	"} \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.clear();\r",
																	"    \r",
																	"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																	"    pm.collectionVariables.set(\"httpClientLtp\", httpClientLtp);\r",
																	"    pm.collectionVariables.set(\"tcpClientLtp\", tcpClientLtp);\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function FindOperationServer(operationName, ltpList) {\r",
																	"    let operationServer;\r",
																	"    operationServer = \"\";\r",
																	"    try {\r",
																	"        let sampleUuid;\r",
																	"        for(let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"op-s-\")) {\r",
																	"                let sampleOperationName;\r",
																	"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																	"                if(sampleOperationName == operationName) {\r",
																	"                    operationServer = ltpList[i];\r",
																	"                    return operationServer;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																	"    }\r",
																	"    return operationServer;\r",
																	"}\r",
																	"\r",
																	"function FindRandomLtpInstancesFromFc(outputFcPortList, ltpList) {\r",
																	"    let ltpInstance = {};\r",
																	"    try {\r",
																	"        for ( let i=0; i<outputFcPortList.length; i++ ) {\r",
																	"            let randomOutputFcPort = outputFcPortList[Math.floor(Math.random() * outputFcPortList.length)];\r",
																	"            let outputLtpUuid = randomOutputFcPort[\"logical-termination-point\"];\r",
																	"            let operationClientLtp = FindActualInstanceByUuid(outputLtpUuid, ltpList);\r",
																	"\r",
																	"            let httpClientLtp = FindServingLtp(operationClientLtp, ltpList);\r",
																	"            let sampleApplicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																	"\r",
																	"            if (sampleApplicationName != \"AdministratorAdministration\") {\r",
																	"\t\t\t\tltpInstance = { httpClientLtp, operationClientLtp };\r",
																	"                break;\r",
																	"            }\r",
																	"        }\r",
																	"    } catch(error) {\r",
																	"        console.log(error);\r",
																	"        console.log(\"! Exception in function : FindRandomLtpInstancesFromFc. \")\r",
																	"    } \r",
																	"    return ltpInstance;\r",
																	"}\r",
																	"\r",
																	"function FindOutputFcPortList(forwardingName, fcList) {\r",
																	"    let outputFcPortList;\r",
																	"    outputFcPortList = [];\r",
																	"    try {\r",
																	"        for( let i=0; i<fcList.length; i++ ) {\r",
																	"            for(let j=0; j<fcList[i][\"name\"].length; j++) {               \r",
																	"                if(fcList[i][\"name\"][j][\"value\"] == forwardingName) {\r",
																	"                    fcPortList = fcList[i][\"fc-port\"];\r",
																	"                    for(let k=0;k<fcPortList.length;k++) {\r",
																	"                        if(fcPortList[k][\"port-direction\"] == \"core-model-1-4:PORT_DIRECTION_TYPE_OUTPUT\") {\r",
																	"                            outputFcPortList.push(fcPortList[k]);\r",
																	"                        }\r",
																	"                    }\r",
																	"                    return outputFcPortList;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																	"    }\r",
																	"    return outputFcPortList;\r",
																	"}\r",
																	"\r",
																	"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
																	"    let actualInstance;\r",
																	"    actualInstance = {};\r",
																	"    try {\r",
																	"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
																	"            let sampleUuid;\r",
																	"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
																	"            if( sampleUuid == expectedUuid ) {\r",
																	"                actualInstance = actualLtpList[i];\r",
																	"                return actualInstance;\r",
																	"            }\r",
																	"        }\r",
																	"\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																	"    }\r",
																	"    return undefined;\r",
																	"}\r",
																	"\r",
																	"function FindServingLtp(clientLtp, ltpList) {\r",
																	"    let servingLtp;\r",
																	"    servingLtp = {};\r",
																	"    try{\r",
																	"        let serverLtpUuid;\r",
																	"        serverLtpUuid = clientLtp[\"server-ltp\"][0];\r",
																	"        for( let i=0; i<ltpList.length; i++ ) {\r",
																	"            let sampleUuid;\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if( sampleUuid == serverLtpUuid ) {\r",
																	"                servingLtp = ltpList[i];\r",
																	"                return servingLtp;\r",
																	"            }\r",
																	"        }\r",
																	"    } catch(error) {\r",
																	"        console.log(error);\r",
																	"        console.log(\"! Exception in function : FindServingLtp. \")\r",
																	"    }\r",
																	"    return servingLtp;\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected  /v1/regard-application - service idempotent?",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"var applicationName;\r",
																	"var releaseNumber;\r",
																	"var protocol;\r",
																	"var address;\r",
																	"var port;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"    \r",
																	"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"\r",
																	"    let httpClientLtp;\r",
																	"    httpClientLtp = pm.collectionVariables.get(\"httpClientLtp\");\r",
																	"\r",
																	"    applicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																	"    releaseNumber = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																	"\r",
																	"    let tcpClientLtp;\r",
																	"    tcpClientLtp = pm.collectionVariables.get(\"tcpClientLtp\");\r",
																	"\r",
																	"    protocol = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																	"    protocol = protocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																	"\r",
																	"    address = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																	"    port = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"        + '\"application-name\" : ' + '\"' + applicationName + '\",'\r",
																	"        + '\"release-number\" : ' + '\"' + releaseNumber + '\",'\r",
																	"        + '\"protocol\" : ' + '\"' + protocol + '\",'\r",
																	"        + '\"address\" : ' + JSON.stringify(address) + ','\r",
																	"        + '\"port\" : ' + port\r",
																	"    +'}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/regard-application\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"POST /v1/regard-application responds 204\", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(204);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "204",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"description": "## Is service idempotent?\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for op-s of /v1/regard-application, storing operation-key\n  - searching CC for output fc-port of NewApplicationCausesRequestForInquiringOamRequestApprovals, find corresponding op-c, http-c and tcp-c, store them\n- POST /v1/regard-application\n  - all attributes according to chosen http-c, tcp-c\n  - operation-key from above\n  - reasonable parameters\n\n#### Testing:\n- checking for ResponseCode==204 (not 400 because of idempotence)\n\n#### Clearing:\n- not applicable"
										},
										{
											"name": "request header parameter completeness",
											"item": [
												{
													"name": "reference /core-model-1-4:control-construct",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var ltpList;\r",
																	"var fcList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    let responseCode;\r",
																	"    responseCode = parseInt(response.code);\r",
																	"    \r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        let responseObject;\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																	"        fcList = responseObject[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
																	"\r",
																	"    } else {\r",
																	"        ltpList = [];\r",
																	"        fcList = [];\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! ltpList could not be extracted.\");\r",
																	"}\r",
																	"\r",
																	"var currentOperationServer;\r",
																	"var httpClientLtp;\r",
																	"var tcpClientLtp;\r",
																	"try {\r",
																	"    currentOperationServer = FindOperationServer(\"/v1/regard-application\", ltpList);\r",
																	"\r",
																	"    //Inquiring OAM approvals\r",
																	"    let outputFcPortListInquireOamRequestApprovals;\r",
																	"    outputFcPortListInquireOamRequestApprovals = FindOutputFcPortList(\"NewApplicationCausesRequestForInquiringOamRequestApprovals\", fcList);\r",
																	"    let ltpInstance = FindRandomLtpInstancesFromFc(outputFcPortListInquireOamRequestApprovals, ltpList)\r",
																	"    httpClientLtp = ltpInstance.httpClientLtp;\r",
																	"    tcpClientLtp = FindServingLtp(httpClientLtp, ltpList);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Reference objects could not be extracted.\");\r",
																	"} \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.clear();\r",
																	"    \r",
																	"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																	"    pm.collectionVariables.set(\"httpClientLtp\", httpClientLtp);\r",
																	"    pm.collectionVariables.set(\"tcpClientLtp\", tcpClientLtp);\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function FindOperationServer(operationName, ltpList) {\r",
																	"    let operationServer;\r",
																	"    operationServer = \"\";\r",
																	"    try {\r",
																	"        let sampleUuid;\r",
																	"        for(let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"op-s-\")) {\r",
																	"                let sampleOperationName;\r",
																	"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																	"                if(sampleOperationName == operationName) {\r",
																	"                    operationServer = ltpList[i];\r",
																	"                    return operationServer;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																	"    }\r",
																	"    return operationServer;\r",
																	"}\r",
																	"\r",
																	"function FindRandomLtpInstancesFromFc(outputFcPortList, ltpList) {\r",
																	"    let ltpInstance = {};\r",
																	"    try {\r",
																	"        for ( let i=0; i<outputFcPortList.length; i++ ) {\r",
																	"            let randomOutputFcPort = outputFcPortList[Math.floor(Math.random() * outputFcPortList.length)];\r",
																	"            let outputLtpUuid = randomOutputFcPort[\"logical-termination-point\"];\r",
																	"            let operationClientLtp = FindActualInstanceByUuid(outputLtpUuid, ltpList);\r",
																	"\r",
																	"            let httpClientLtp = FindServingLtp(operationClientLtp, ltpList);\r",
																	"            let sampleApplicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																	"\r",
																	"            if (sampleApplicationName != \"AdministratorAdministration\") {\r",
																	"\t\t\t\tltpInstance = { httpClientLtp, operationClientLtp };\r",
																	"                break;\r",
																	"            }\r",
																	"        }\r",
																	"    } catch(error) {\r",
																	"        console.log(error);\r",
																	"        console.log(\"! Exception in function : FindRandomLtpInstancesFromFc. \")\r",
																	"    } \r",
																	"    return ltpInstance;\r",
																	"}\r",
																	"\r",
																	"function FindOutputFcPortList(forwardingName, fcList) {\r",
																	"    let outputFcPortList;\r",
																	"    outputFcPortList = [];\r",
																	"    try {\r",
																	"        for( let i=0; i<fcList.length; i++ ) {\r",
																	"            for(let j=0; j<fcList[i][\"name\"].length; j++) {               \r",
																	"                if(fcList[i][\"name\"][j][\"value\"] == forwardingName) {\r",
																	"                    fcPortList = fcList[i][\"fc-port\"];\r",
																	"                    for(let k=0;k<fcPortList.length;k++) {\r",
																	"                        if(fcPortList[k][\"port-direction\"] == \"core-model-1-4:PORT_DIRECTION_TYPE_OUTPUT\") {\r",
																	"                            outputFcPortList.push(fcPortList[k]);\r",
																	"                        }\r",
																	"                    }\r",
																	"                    return outputFcPortList;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																	"    }\r",
																	"    return outputFcPortList;\r",
																	"}\r",
																	"\r",
																	"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
																	"    let actualInstance;\r",
																	"    actualInstance = {};\r",
																	"    try {\r",
																	"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
																	"            let sampleUuid;\r",
																	"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
																	"            if( sampleUuid == expectedUuid ) {\r",
																	"                actualInstance = actualLtpList[i];\r",
																	"                return actualInstance;\r",
																	"            }\r",
																	"        }\r",
																	"\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																	"    }\r",
																	"    return undefined;\r",
																	"}\r",
																	"\r",
																	"function FindServingLtp(clientLtp, ltpList) {\r",
																	"    let servingLtp;\r",
																	"    servingLtp = {};\r",
																	"    try{\r",
																	"        let serverLtpUuid;\r",
																	"        serverLtpUuid = clientLtp[\"server-ltp\"][0];\r",
																	"        for( let i=0; i<ltpList.length; i++ ) {\r",
																	"            let sampleUuid;\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if( sampleUuid == serverLtpUuid ) {\r",
																	"                servingLtp = ltpList[i];\r",
																	"                return servingLtp;\r",
																	"            }\r",
																	"        }\r",
																	"    } catch(error) {\r",
																	"        console.log(error);\r",
																	"        console.log(\"! Exception in function : FindServingLtp. \")\r",
																	"    }\r",
																	"    return servingLtp;\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n-----  /v1/regard-application integration -- request headers parameters completeness -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Environment variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY = \"\";\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected  /v1/regard-application - request header parameter completeness",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"var applicationName;\r",
																	"var releaseNumber;\r",
																	"var protocol;\r",
																	"var address;\r",
																	"var port;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"    \r",
																	"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"\r",
																	"    let httpClientLtp;\r",
																	"    httpClientLtp = pm.collectionVariables.get(\"httpClientLtp\");\r",
																	"\r",
																	"    applicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																	"    releaseNumber = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																	"\r",
																	"    let tcpClientLtp;\r",
																	"    tcpClientLtp = pm.collectionVariables.get(\"tcpClientLtp\");\r",
																	"\r",
																	"    protocol = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																	"    protocol = protocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																	"\r",
																	"    address = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																	"    port = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"        + '\"application-name\" : ' + '\"' + applicationName + '\",'\r",
																	"        + '\"release-number\" : ' + '\"' + releaseNumber + '\",'\r",
																	"        + '\"protocol\" : ' + '\"' + protocol + '\",'\r",
																	"        + '\"address\" : ' + JSON.stringify(address) + ','\r",
																	"        + '\"port\" : ' + port\r",
																	"    +'}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/regard-application\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    let parameters;\r",
																	"    parameters = [\"user\", \"originator\", \"x-correlator\", \"trace-indicator\", \"customer-journey\"];\r",
																	"\r",
																	"    let missingParameter;\r",
																	"    missingParameter = GetMissingParameter(parameters);\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"    pm.request.headers.remove(missingParameter);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	"\r",
																	"function GetMissingParameter(parameters) {\r",
																	"    let missingParameter;\r",
																	"    missingParameter = parameters[Math.floor(Math.random()*parameters.length)];\r",
																	"    return missingParameter;\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"As expected, POST /v1/regard-application responds 400, because of missing parameter\", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "400",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"description": "## Get parameters checked for completeness?\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for op-s of /v1/regard-application, storing operation-key\n  - searching CC for output fc-port of NewApplicationCausesRequestForInquiringOamRequestApprovals, find corresponding op-c, http-c and tcp-c, store them\n- POST /v1/regard-application\n  - all attributes according to chosen http-c, tcp-c\n  - operation-key from above\n  -  BUT one randomly chosen parameter (user, originator, x-correlator, trace-indicator or customer-journey) missing (not empty string!)\n\n#### Testing:\n- checking for ResponseCode == 400\n\n#### Clearing:\n- not applicable"
										},
										{
											"name": "originator parameter correctness",
											"item": [
												{
													"name": "reference /core-model-1-4:control-construct",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n-----  /v1/regard-application integration -- originator correctness check -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Environment variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY = \"\";\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var ltpList;\r",
																	"var fcList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    let responseCode;\r",
																	"    responseCode = parseInt(response.code);\r",
																	"    \r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        let responseObject;\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																	"        fcList = responseObject[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
																	"\r",
																	"    } else {\r",
																	"        ltpList = [];\r",
																	"        fcList = [];\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! ltpList could not be extracted.\");\r",
																	"}\r",
																	"\r",
																	"var currentOperationServer;\r",
																	"var httpClientLtp;\r",
																	"var tcpClientLtp;\r",
																	"try {\r",
																	"    currentOperationServer = FindOperationServer(\"/v1/regard-application\", ltpList);\r",
																	"\r",
																	"    //Inquiring OAM approvals\r",
																	"    let outputFcPortListInquireOamRequestApprovals;\r",
																	"    outputFcPortListInquireOamRequestApprovals = FindOutputFcPortList(\"NewApplicationCausesRequestForInquiringOamRequestApprovals\", fcList);\r",
																	"    let ltpInstance = FindRandomLtpInstancesFromFc(outputFcPortListInquireOamRequestApprovals, ltpList)\r",
																	"    httpClientLtp = ltpInstance.httpClientLtp;\r",
																	"    tcpClientLtp = FindServingLtp(httpClientLtp, ltpList);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Reference objects could not be extracted.\");\r",
																	"} \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.clear();\r",
																	"    \r",
																	"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																	"    pm.collectionVariables.set(\"httpClientLtp\", httpClientLtp);\r",
																	"    pm.collectionVariables.set(\"tcpClientLtp\", tcpClientLtp);\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function FindOperationServer(operationName, ltpList) {\r",
																	"    let operationServer;\r",
																	"    operationServer = \"\";\r",
																	"    try {\r",
																	"        let sampleUuid;\r",
																	"        for(let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"op-s-\")) {\r",
																	"                let sampleOperationName;\r",
																	"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																	"                if(sampleOperationName == operationName) {\r",
																	"                    operationServer = ltpList[i];\r",
																	"                    return operationServer;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																	"    }\r",
																	"    return operationServer;\r",
																	"}\r",
																	"\r",
																	"function FindRandomLtpInstancesFromFc(outputFcPortList, ltpList) {\r",
																	"    let ltpInstance = {};\r",
																	"    try {\r",
																	"        for ( let i=0; i<outputFcPortList.length; i++ ) {\r",
																	"            let randomOutputFcPort = outputFcPortList[Math.floor(Math.random() * outputFcPortList.length)];\r",
																	"            let outputLtpUuid = randomOutputFcPort[\"logical-termination-point\"];\r",
																	"            let operationClientLtp = FindActualInstanceByUuid(outputLtpUuid, ltpList);\r",
																	"\r",
																	"            let httpClientLtp = FindServingLtp(operationClientLtp, ltpList);\r",
																	"            let sampleApplicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																	"\r",
																	"            if (sampleApplicationName != \"AdministratorAdministration\") {\r",
																	"\t\t\t\tltpInstance = { httpClientLtp, operationClientLtp };\r",
																	"                break;\r",
																	"            }\r",
																	"        }\r",
																	"    } catch(error) {\r",
																	"        console.log(error);\r",
																	"        console.log(\"! Exception in function : FindRandomLtpInstancesFromFc. \")\r",
																	"    } \r",
																	"    return ltpInstance;\r",
																	"}\r",
																	"\r",
																	"function FindOutputFcPortList(forwardingName, fcList) {\r",
																	"    let outputFcPortList;\r",
																	"    outputFcPortList = [];\r",
																	"    try {\r",
																	"        for( let i=0; i<fcList.length; i++ ) {\r",
																	"            for(let j=0; j<fcList[i][\"name\"].length; j++) {               \r",
																	"                if(fcList[i][\"name\"][j][\"value\"] == forwardingName) {\r",
																	"                    fcPortList = fcList[i][\"fc-port\"];\r",
																	"                    for(let k=0;k<fcPortList.length;k++) {\r",
																	"                        if(fcPortList[k][\"port-direction\"] == \"core-model-1-4:PORT_DIRECTION_TYPE_OUTPUT\") {\r",
																	"                            outputFcPortList.push(fcPortList[k]);\r",
																	"                        }\r",
																	"                    }\r",
																	"                    return outputFcPortList;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																	"    }\r",
																	"    return outputFcPortList;\r",
																	"}\r",
																	"\r",
																	"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
																	"    let actualInstance;\r",
																	"    actualInstance = {};\r",
																	"    try {\r",
																	"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
																	"            let sampleUuid;\r",
																	"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
																	"            if( sampleUuid == expectedUuid ) {\r",
																	"                actualInstance = actualLtpList[i];\r",
																	"                return actualInstance;\r",
																	"            }\r",
																	"        }\r",
																	"\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																	"    }\r",
																	"    return undefined;\r",
																	"}\r",
																	"\r",
																	"function FindServingLtp(clientLtp, ltpList) {\r",
																	"    let servingLtp;\r",
																	"    servingLtp = {};\r",
																	"    try{\r",
																	"        let serverLtpUuid;\r",
																	"        serverLtpUuid = clientLtp[\"server-ltp\"][0];\r",
																	"        for( let i=0; i<ltpList.length; i++ ) {\r",
																	"            let sampleUuid;\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if( sampleUuid == serverLtpUuid ) {\r",
																	"                servingLtp = ltpList[i];\r",
																	"                return servingLtp;\r",
																	"            }\r",
																	"        }\r",
																	"    } catch(error) {\r",
																	"        console.log(error);\r",
																	"        console.log(\"! Exception in function : FindServingLtp. \")\r",
																	"    }\r",
																	"    return servingLtp;\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected  /v1/regard-application too short originator",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n----- originator parameter correctness check - length too short -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"var applicationName;\r",
																	"var releaseNumber;\r",
																	"var protocol;\r",
																	"var address;\r",
																	"var port;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"    \r",
																	"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"\r",
																	"    let httpClientLtp;\r",
																	"    httpClientLtp = pm.collectionVariables.get(\"httpClientLtp\");\r",
																	"\r",
																	"    applicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																	"    releaseNumber = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																	"\r",
																	"    let tcpClientLtp;\r",
																	"    tcpClientLtp = pm.collectionVariables.get(\"tcpClientLtp\");\r",
																	"\r",
																	"    protocol = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																	"    protocol = protocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																	"\r",
																	"    address = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																	"    port = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var FAULTY_ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    FAULTY_ORIGINATOR = GenerateFaultyOriginator();\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"        + '\"application-name\" : ' + '\"' + applicationName + '\",'\r",
																	"        + '\"release-number\" : ' + '\"' + releaseNumber + '\",'\r",
																	"        + '\"protocol\" : ' + '\"' + protocol + '\",'\r",
																	"        + '\"address\" : ' + JSON.stringify(address) + ','\r",
																	"        + '\"port\" : ' + port\r",
																	"    +'}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/regard-application\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:FAULTY_ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"function GenerateFaultyOriginator() {\r",
																	"    let faultyOriginator;\r",
																	"    let length;\r",
																	"    let minLength;\r",
																	"    minLength = 0;\r",
																	"    let maxLength;\r",
																	"    maxLength = 2;\r",
																	"    length = Math.floor(Math.random() * maxLength) + minLength;\r",
																	"    faultyOriginator = GenerateRandomString(length);\r",
																	"    return faultyOriginator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomString(length) {\r",
																	"    let randomString;\r",
																	"    randomString = \"\";\r",
																	"    try {\r",
																	"        let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r",
																	"        let charactersLength = characters.length;\r",
																	"        for (let i = 0; i < length; i++) {\r",
																	"            randomString += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Could not generate random string. \");\r",
																	"    }\r",
																	"    return randomString;\r",
																	"}\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"As expected, POST /v1/regard-application responds 400, because of faulty originator parameter(too short string)\", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "400",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"description": "## Gets originator checked for compliance with specification?\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for op-s of /v1/regard-application, storing operation-key\n  - searching CC for output fc-port of NewApplicationCausesRequestForInquiringOamRequestApprovals, find corresponding op-c, http-c and tcp-c, store them\n- POST /v1/regard-application\n   - all attributes according to chosen http-c, tcp-c\n   - all parameters with realistic values, BUT originator set to be a string of 0, 1 or 2 (random) letters length (too short)..\n\n#### Testing:\n- checking for ResponseCode==400\n\n#### Clearing:\n- not applicable"
										},
										{
											"name": "x-correlator pattern",
											"item": [
												{
													"name": "reference /core-model-1-4:control-construct",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n----- /v1/regard-application integration -- x-correlator pattern correctness check -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Environment variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY = \"\";\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var ltpList;\r",
																	"var fcList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    let responseCode;\r",
																	"    responseCode = parseInt(response.code);\r",
																	"    \r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        let responseObject;\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																	"        fcList = responseObject[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
																	"\r",
																	"    } else {\r",
																	"        ltpList = [];\r",
																	"        fcList = [];\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! ltpList could not be extracted.\");\r",
																	"}\r",
																	"\r",
																	"var currentOperationServer;\r",
																	"var httpClientLtp;\r",
																	"var tcpClientLtp;\r",
																	"try {\r",
																	"    currentOperationServer = FindOperationServer(\"/v1/regard-application\", ltpList);\r",
																	"\r",
																	"    //Inquiring OAM approvals\r",
																	"    let outputFcPortListInquireOamRequestApprovals;\r",
																	"    outputFcPortListInquireOamRequestApprovals = FindOutputFcPortList(\"NewApplicationCausesRequestForInquiringOamRequestApprovals\", fcList);\r",
																	"    let ltpInstance = FindRandomLtpInstancesFromFc(outputFcPortListInquireOamRequestApprovals, ltpList)\r",
																	"    httpClientLtp = ltpInstance.httpClientLtp;\r",
																	"    tcpClientLtp = FindServingLtp(httpClientLtp, ltpList);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Reference objects could not be extracted.\");\r",
																	"} \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.clear();\r",
																	"    \r",
																	"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																	"    pm.collectionVariables.set(\"httpClientLtp\", httpClientLtp);\r",
																	"    pm.collectionVariables.set(\"tcpClientLtp\", tcpClientLtp);\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function FindOperationServer(operationName, ltpList) {\r",
																	"    let operationServer;\r",
																	"    operationServer = \"\";\r",
																	"    try {\r",
																	"        let sampleUuid;\r",
																	"        for(let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"op-s-\")) {\r",
																	"                let sampleOperationName;\r",
																	"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																	"                if(sampleOperationName == operationName) {\r",
																	"                    operationServer = ltpList[i];\r",
																	"                    return operationServer;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																	"    }\r",
																	"    return operationServer;\r",
																	"}\r",
																	"\r",
																	"function FindRandomLtpInstancesFromFc(outputFcPortList, ltpList) {\r",
																	"    let ltpInstance = {};\r",
																	"    try {\r",
																	"        for ( let i=0; i<outputFcPortList.length; i++ ) {\r",
																	"            let randomOutputFcPort = outputFcPortList[Math.floor(Math.random() * outputFcPortList.length)];\r",
																	"            let outputLtpUuid = randomOutputFcPort[\"logical-termination-point\"];\r",
																	"            let operationClientLtp = FindActualInstanceByUuid(outputLtpUuid, ltpList);\r",
																	"\r",
																	"            let httpClientLtp = FindServingLtp(operationClientLtp, ltpList);\r",
																	"            let sampleApplicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																	"\r",
																	"            if (sampleApplicationName != \"AdministratorAdministration\") {\r",
																	"\t\t\t\tltpInstance = { httpClientLtp, operationClientLtp };\r",
																	"                break;\r",
																	"            }\r",
																	"        }\r",
																	"    } catch(error) {\r",
																	"        console.log(error);\r",
																	"        console.log(\"! Exception in function : FindRandomLtpInstancesFromFc. \")\r",
																	"    } \r",
																	"    return ltpInstance;\r",
																	"}\r",
																	"\r",
																	"function FindOutputFcPortList(forwardingName, fcList) {\r",
																	"    let outputFcPortList;\r",
																	"    outputFcPortList = [];\r",
																	"    try {\r",
																	"        for( let i=0; i<fcList.length; i++ ) {\r",
																	"            for(let j=0; j<fcList[i][\"name\"].length; j++) {               \r",
																	"                if(fcList[i][\"name\"][j][\"value\"] == forwardingName) {\r",
																	"                    fcPortList = fcList[i][\"fc-port\"];\r",
																	"                    for(let k=0;k<fcPortList.length;k++) {\r",
																	"                        if(fcPortList[k][\"port-direction\"] == \"core-model-1-4:PORT_DIRECTION_TYPE_OUTPUT\") {\r",
																	"                            outputFcPortList.push(fcPortList[k]);\r",
																	"                        }\r",
																	"                    }\r",
																	"                    return outputFcPortList;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																	"    }\r",
																	"    return outputFcPortList;\r",
																	"}\r",
																	"\r",
																	"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
																	"    let actualInstance;\r",
																	"    actualInstance = {};\r",
																	"    try {\r",
																	"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
																	"            let sampleUuid;\r",
																	"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
																	"            if( sampleUuid == expectedUuid ) {\r",
																	"                actualInstance = actualLtpList[i];\r",
																	"                return actualInstance;\r",
																	"            }\r",
																	"        }\r",
																	"\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																	"    }\r",
																	"    return undefined;\r",
																	"}\r",
																	"\r",
																	"function FindServingLtp(clientLtp, ltpList) {\r",
																	"    let servingLtp;\r",
																	"    servingLtp = {};\r",
																	"    try{\r",
																	"        let serverLtpUuid;\r",
																	"        serverLtpUuid = clientLtp[\"server-ltp\"][0];\r",
																	"        for( let i=0; i<ltpList.length; i++ ) {\r",
																	"            let sampleUuid;\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if( sampleUuid == serverLtpUuid ) {\r",
																	"                servingLtp = ltpList[i];\r",
																	"                return servingLtp;\r",
																	"            }\r",
																	"        }\r",
																	"    } catch(error) {\r",
																	"        console.log(error);\r",
																	"        console.log(\"! Exception in function : FindServingLtp. \")\r",
																	"    }\r",
																	"    return servingLtp;\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected /v1/regard-application with Too short x-correlator",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n----- x-correlator parameter correctness check - too short -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"var applicationName;\r",
																	"var releaseNumber;\r",
																	"var protocol;\r",
																	"var address;\r",
																	"var port;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"    \r",
																	"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"\r",
																	"    let httpClientLtp;\r",
																	"    httpClientLtp = pm.collectionVariables.get(\"httpClientLtp\");\r",
																	"\r",
																	"    applicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																	"    releaseNumber = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																	"\r",
																	"    let tcpClientLtp;\r",
																	"    tcpClientLtp = pm.collectionVariables.get(\"tcpClientLtp\");\r",
																	"\r",
																	"    protocol = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																	"    protocol = protocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																	"\r",
																	"    address = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																	"    port = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var FAULTY_X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    FAULTY_X_CORRELATOR = GenerateFaultyXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(error)\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"        + '\"application-name\" : ' + '\"' + applicationName + '\",'\r",
																	"        + '\"release-number\" : ' + '\"' + releaseNumber + '\",'\r",
																	"        + '\"protocol\" : ' + '\"' + protocol + '\",'\r",
																	"        + '\"address\" : ' + JSON.stringify(address) + ','\r",
																	"        + '\"port\" : ' + port\r",
																	"    +'}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/regard-application\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:FAULTY_X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function GenerateFaultyXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"As expected, POST /v1/regard-application responds 400, because of too short x-correlator value \", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "400",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected  /v1/regard-application with Too long x-correlator",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n----- x-correlator parameter correctness check - too long -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"var applicationName;\r",
																	"var releaseNumber;\r",
																	"var protocol;\r",
																	"var address;\r",
																	"var port;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"    \r",
																	"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"\r",
																	"    let httpClientLtp;\r",
																	"    httpClientLtp = pm.collectionVariables.get(\"httpClientLtp\");\r",
																	"\r",
																	"    applicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																	"    releaseNumber = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																	"\r",
																	"    let tcpClientLtp;\r",
																	"    tcpClientLtp = pm.collectionVariables.get(\"tcpClientLtp\");\r",
																	"\r",
																	"    protocol = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																	"    protocol = protocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																	"\r",
																	"    address = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																	"    port = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var FAULTY_X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    FAULTY_X_CORRELATOR = GenerateFaultyXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(error)\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"        + '\"application-name\" : ' + '\"' + applicationName + '\",'\r",
																	"        + '\"release-number\" : ' + '\"' + releaseNumber + '\",'\r",
																	"        + '\"protocol\" : ' + '\"' + protocol + '\",'\r",
																	"        + '\"address\" : ' + JSON.stringify(address) + ','\r",
																	"        + '\"port\" : ' + port\r",
																	"    +'}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/regard-application\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:FAULTY_X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function GenerateFaultyXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"As expected, POST /v1/regard-application responds 400, because of too long x-correlator value \", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "400",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected /v1/regard-application with incorrect characters count x-correlator",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n----- x-correlator parameter correctness check - incorrect characters count -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"var applicationName;\r",
																	"var releaseNumber;\r",
																	"var protocol;\r",
																	"var address;\r",
																	"var port;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"    \r",
																	"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"\r",
																	"    let httpClientLtp;\r",
																	"    httpClientLtp = pm.collectionVariables.get(\"httpClientLtp\");\r",
																	"\r",
																	"    applicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																	"    releaseNumber = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																	"\r",
																	"    let tcpClientLtp;\r",
																	"    tcpClientLtp = pm.collectionVariables.get(\"tcpClientLtp\");\r",
																	"\r",
																	"    protocol = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																	"    protocol = protocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																	"\r",
																	"    address = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																	"    port = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var FAULTY_X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    FAULTY_X_CORRELATOR = GenerateFaultyXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(error)\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"        + '\"application-name\" : ' + '\"' + applicationName + '\",'\r",
																	"        + '\"release-number\" : ' + '\"' + releaseNumber + '\",'\r",
																	"        + '\"protocol\" : ' + '\"' + protocol + '\",'\r",
																	"        + '\"address\" : ' + JSON.stringify(address) + ','\r",
																	"        + '\"port\" : ' + port\r",
																	"    +'}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/regard-application\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:FAULTY_X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function GenerateFaultyXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"\r",
																	"    let faultyElementLength;\r",
																	"    faultyElementLength = Math.floor(Math.random() * 3) + 1;\r",
																	"    let faultyElement;\r",
																	"    faultyElement = GenerateRandomHexString(faultyElementLength);\r",
																	"\r",
																	"    let xCorrelatorParts;\r",
																	"    xCorrelatorParts = xCorrelator.split(\"-\");\r",
																	"    let faultyXCorrelatorPart;\r",
																	"    faultyXCorrelatorPart = Math.floor(Math.random() * xCorrelatorParts.length);\r",
																	"\r",
																	"    xCorrelatorParts[faultyXCorrelatorPart] = faultyElement;\r",
																	"    xCorrelator = xCorrelatorParts.join(\"-\");\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"As expected, POST /v1/regard-application responds 400, because of incorrect character count of x-correlator value \", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "400",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected /v1/regard-application with incorrect separator x-correlator",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n----- x-correlator parameter correctness check - incorrect separator -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"var applicationName;\r",
																	"var releaseNumber;\r",
																	"var protocol;\r",
																	"var address;\r",
																	"var port;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"    \r",
																	"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"\r",
																	"    let httpClientLtp;\r",
																	"    httpClientLtp = pm.collectionVariables.get(\"httpClientLtp\");\r",
																	"\r",
																	"    applicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																	"    releaseNumber = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																	"\r",
																	"    let tcpClientLtp;\r",
																	"    tcpClientLtp = pm.collectionVariables.get(\"tcpClientLtp\");\r",
																	"\r",
																	"    protocol = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																	"    protocol = protocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																	"\r",
																	"    address = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																	"    port = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var FAULTY_X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    FAULTY_X_CORRELATOR = GenerateFaultyXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(error)\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"        + '\"application-name\" : ' + '\"' + applicationName + '\",'\r",
																	"        + '\"release-number\" : ' + '\"' + releaseNumber + '\",'\r",
																	"        + '\"protocol\" : ' + '\"' + protocol + '\",'\r",
																	"        + '\"address\" : ' + JSON.stringify(address) + ','\r",
																	"        + '\"port\" : ' + port\r",
																	"    +'}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/regard-application\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:FAULTY_X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function GenerateFaultyXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"\r",
																	"    let separators;\r",
																	"    separators = \".:;/\";\r",
																	"    let separatorsLength;\r",
																	"    separatorsLength = separators.length;\r",
																	"\r",
																	"    let faultySeparator;\r",
																	"    faultySeparator = separators.charAt(Math.floor(Math.random() * separatorsLength));\r",
																	"\r",
																	"    xCorrelator += GenerateRandomHexString(8) + faultySeparator;\r",
																	"    xCorrelator += GenerateRandomHexString(4) + faultySeparator;\r",
																	"    xCorrelator += GenerateRandomHexString(4) + faultySeparator;\r",
																	"    xCorrelator += GenerateRandomHexString(4) + faultySeparator;\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"As expected, POST /v1/regard-application responds 400, because of incorrect separator in x-correlator value \", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "400",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"description": "## Gets x-correlator checked for complying the pattern?\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for op-s of /v1/regard-application, storing operation-key\n  - searching CC for output fc-port of NewApplicationCausesRequestForInquiringOamRequestApprovals, find corresponding op-c, http-c and tcp-c, store them\n- POST /v1/regard-application\n  - all attributes according to chosen http-c, tcp-c\n  - operation-key from above\n  - reasonable parameters, BUT dummyXCorrelators differing from the pattern in various ways (e.g. empty string)\n\n#### Testing:\n- checking for ResponseCode==400\n\n#### Clearing:\n- not applicable"
										},
										{
											"name": "trace-indicator pattern",
											"item": [
												{
													"name": "reference /core-model-1-4:control-construct",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n----- /v1/regard-application integration -- trace-indicator pattern correctness check -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Environment variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY = \"\";\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var ltpList;\r",
																	"var fcList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    let responseCode;\r",
																	"    responseCode = parseInt(response.code);\r",
																	"    \r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        let responseObject;\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																	"        fcList = responseObject[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
																	"\r",
																	"    } else {\r",
																	"        ltpList = [];\r",
																	"        fcList = [];\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! ltpList could not be extracted.\");\r",
																	"}\r",
																	"\r",
																	"var currentOperationServer;\r",
																	"var httpClientLtp;\r",
																	"var tcpClientLtp;\r",
																	"try {\r",
																	"    currentOperationServer = FindOperationServer(\"/v1/regard-application\", ltpList);\r",
																	"\r",
																	"    //Inquiring OAM approvals\r",
																	"    let outputFcPortListInquireOamRequestApprovals;\r",
																	"    outputFcPortListInquireOamRequestApprovals = FindOutputFcPortList(\"NewApplicationCausesRequestForInquiringOamRequestApprovals\", fcList);\r",
																	"    let ltpInstance = FindRandomLtpInstancesFromFc(outputFcPortListInquireOamRequestApprovals, ltpList)\r",
																	"    httpClientLtp = ltpInstance.httpClientLtp;\r",
																	"    tcpClientLtp = FindServingLtp(httpClientLtp, ltpList);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Reference objects could not be extracted.\");\r",
																	"} \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.clear();\r",
																	"    \r",
																	"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																	"    pm.collectionVariables.set(\"httpClientLtp\", httpClientLtp);\r",
																	"    pm.collectionVariables.set(\"tcpClientLtp\", tcpClientLtp);\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function FindOperationServer(operationName, ltpList) {\r",
																	"    let operationServer;\r",
																	"    operationServer = \"\";\r",
																	"    try {\r",
																	"        let sampleUuid;\r",
																	"        for(let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"op-s-\")) {\r",
																	"                let sampleOperationName;\r",
																	"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																	"                if(sampleOperationName == operationName) {\r",
																	"                    operationServer = ltpList[i];\r",
																	"                    return operationServer;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																	"    }\r",
																	"    return operationServer;\r",
																	"}\r",
																	"\r",
																	"function FindRandomLtpInstancesFromFc(outputFcPortList, ltpList) {\r",
																	"    let ltpInstance = {};\r",
																	"    try {\r",
																	"        for ( let i=0; i<outputFcPortList.length; i++ ) {\r",
																	"            let randomOutputFcPort = outputFcPortList[Math.floor(Math.random() * outputFcPortList.length)];\r",
																	"            let outputLtpUuid = randomOutputFcPort[\"logical-termination-point\"];\r",
																	"            let operationClientLtp = FindActualInstanceByUuid(outputLtpUuid, ltpList);\r",
																	"\r",
																	"            let httpClientLtp = FindServingLtp(operationClientLtp, ltpList);\r",
																	"            let sampleApplicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																	"\r",
																	"            if (sampleApplicationName != \"AdministratorAdministration\") {\r",
																	"\t\t\t\tltpInstance = { httpClientLtp, operationClientLtp };\r",
																	"                break;\r",
																	"            }\r",
																	"        }\r",
																	"    } catch(error) {\r",
																	"        console.log(error);\r",
																	"        console.log(\"! Exception in function : FindRandomLtpInstancesFromFc. \")\r",
																	"    } \r",
																	"    return ltpInstance;\r",
																	"}\r",
																	"\r",
																	"function FindOutputFcPortList(forwardingName, fcList) {\r",
																	"    let outputFcPortList;\r",
																	"    outputFcPortList = [];\r",
																	"    try {\r",
																	"        for( let i=0; i<fcList.length; i++ ) {\r",
																	"            for(let j=0; j<fcList[i][\"name\"].length; j++) {               \r",
																	"                if(fcList[i][\"name\"][j][\"value\"] == forwardingName) {\r",
																	"                    fcPortList = fcList[i][\"fc-port\"];\r",
																	"                    for(let k=0;k<fcPortList.length;k++) {\r",
																	"                        if(fcPortList[k][\"port-direction\"] == \"core-model-1-4:PORT_DIRECTION_TYPE_OUTPUT\") {\r",
																	"                            outputFcPortList.push(fcPortList[k]);\r",
																	"                        }\r",
																	"                    }\r",
																	"                    return outputFcPortList;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																	"    }\r",
																	"    return outputFcPortList;\r",
																	"}\r",
																	"\r",
																	"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
																	"    let actualInstance;\r",
																	"    actualInstance = {};\r",
																	"    try {\r",
																	"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
																	"            let sampleUuid;\r",
																	"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
																	"            if( sampleUuid == expectedUuid ) {\r",
																	"                actualInstance = actualLtpList[i];\r",
																	"                return actualInstance;\r",
																	"            }\r",
																	"        }\r",
																	"\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																	"    }\r",
																	"    return undefined;\r",
																	"}\r",
																	"\r",
																	"function FindServingLtp(clientLtp, ltpList) {\r",
																	"    let servingLtp;\r",
																	"    servingLtp = {};\r",
																	"    try{\r",
																	"        let serverLtpUuid;\r",
																	"        serverLtpUuid = clientLtp[\"server-ltp\"][0];\r",
																	"        for( let i=0; i<ltpList.length; i++ ) {\r",
																	"            let sampleUuid;\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if( sampleUuid == serverLtpUuid ) {\r",
																	"                servingLtp = ltpList[i];\r",
																	"                return servingLtp;\r",
																	"            }\r",
																	"        }\r",
																	"    } catch(error) {\r",
																	"        console.log(error);\r",
																	"        console.log(\"! Exception in function : FindServingLtp. \")\r",
																	"    }\r",
																	"    return servingLtp;\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected /v1/regard-application with letters in trace-indicator",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n----- trace-indicator parameter correctness check - presence of letters -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"var applicationName;\r",
																	"var releaseNumber;\r",
																	"var protocol;\r",
																	"var address;\r",
																	"var port;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"    \r",
																	"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"\r",
																	"    let httpClientLtp;\r",
																	"    httpClientLtp = pm.collectionVariables.get(\"httpClientLtp\");\r",
																	"\r",
																	"    applicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																	"    releaseNumber = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																	"\r",
																	"    let tcpClientLtp;\r",
																	"    tcpClientLtp = pm.collectionVariables.get(\"tcpClientLtp\");\r",
																	"\r",
																	"    protocol = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																	"    protocol = protocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																	"\r",
																	"    address = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																	"    port = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var FAULTY_TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    FAULTY_TRACE_INDICATOR = GenerateFaultyTraceIndicator();\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(error)\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"        + '\"application-name\" : ' + '\"' + applicationName + '\",'\r",
																	"        + '\"release-number\" : ' + '\"' + releaseNumber + '\",'\r",
																	"        + '\"protocol\" : ' + '\"' + protocol + '\",'\r",
																	"        + '\"address\" : ' + JSON.stringify(address) + ','\r",
																	"        + '\"port\" : ' + port\r",
																	"    +'}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/regard-application\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:FAULTY_TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"function GenerateFaultyTraceIndicator() {\r",
																	"    let traceIndicator;\r",
																	"    traceIndicator = \"\";\r",
																	"\r",
																	"    let traceIndicatorParts;\r",
																	"    traceIndicatorParts = [];\r",
																	"    for(let i=0; i<3; i++) {\r",
																	"        traceIndicatorParts[i] = Math.floor(Math.random() * 10);\r",
																	"    }\r",
																	"    let characters;\r",
																	"    characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r",
																	"    let charactersLength;\r",
																	"    charactersLength = characters.length;\r",
																	"    let faultyElement;\r",
																	"    faultyElement = characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																	"\r",
																	"    let faultyTraceIndicatorPart;\r",
																	"    faultyTraceIndicatorPart = Math.floor(Math.random() * 3);\r",
																	"\r",
																	"    traceIndicatorParts[faultyTraceIndicatorPart] = faultyElement;\r",
																	"    traceIndicator = traceIndicatorParts.join(\".\");\r",
																	"\r",
																	"    return traceIndicator;\r",
																	"}\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"As expected, POST /v1/regard-application responds 400, because of presence of letters in trace-indicator value \", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "400",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected /v1/regard-application with incorrect separator trace-indicator",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n----- trace-indicator parameter correctness check - incorrect separator -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"var applicationName;\r",
																	"var releaseNumber;\r",
																	"var protocol;\r",
																	"var address;\r",
																	"var port;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"    \r",
																	"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"\r",
																	"    let httpClientLtp;\r",
																	"    httpClientLtp = pm.collectionVariables.get(\"httpClientLtp\");\r",
																	"\r",
																	"    applicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																	"    releaseNumber = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																	"\r",
																	"    let tcpClientLtp;\r",
																	"    tcpClientLtp = pm.collectionVariables.get(\"tcpClientLtp\");\r",
																	"\r",
																	"    protocol = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																	"    protocol = protocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																	"\r",
																	"    address = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																	"    port = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var FAULTY_TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    FAULTY_TRACE_INDICATOR = GenerateFaultyTraceIndicator();\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(error)\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"        + '\"application-name\" : ' + '\"' + applicationName + '\",'\r",
																	"        + '\"release-number\" : ' + '\"' + releaseNumber + '\",'\r",
																	"        + '\"protocol\" : ' + '\"' + protocol + '\",'\r",
																	"        + '\"address\" : ' + JSON.stringify(address) + ','\r",
																	"        + '\"port\" : ' + port\r",
																	"    +'}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/regard-application\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:FAULTY_TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"function GenerateFaultyTraceIndicator() {\r",
																	"    let traceIndicator;\r",
																	"    traceIndicator = \"\";\r",
																	"\r",
																	"    let traceIndicatorParts;\r",
																	"    traceIndicatorParts = [];\r",
																	"    for(let i=0; i<3; i++) {\r",
																	"        traceIndicatorParts[i] = Math.floor(Math.random() * 10);\r",
																	"    }\r",
																	"    let separators;\r",
																	"    separators = \"-:;/\";\r",
																	"    let separatorsLength;\r",
																	"    separatorsLength = separators.length;\r",
																	"\r",
																	"    let faultySeparator;\r",
																	"    faultySeparator = separators.charAt(Math.floor(Math.random() * separatorsLength));\r",
																	"\r",
																	"    traceIndicator = traceIndicatorParts.join(faultySeparator);\r",
																	"\r",
																	"    return traceIndicator;\r",
																	"}\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"As expected, POST /v1/regard-application responds 400, because of incorrect separator in trace-indicator value \", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "400",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"description": "## Gets trace-indicator checked for complying the pattern?\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for op-s of /v1/regard-application, storing operation-key\n  - searching CC for output fc-port of NewApplicationCausesRequestForInquiringOamRequestApprovals, find corresponding op-c, http-c and tcp-c, store them\n- POST /v1/regard-application\n  - all attributes according to chosen http-c, tcp-c\n  - operation-key from above\n  - reasonable parameters,BUT dummyTraceIndicator differing from the pattern in various ways (e.g. empty string)\n\n#### Testing:\n- checking for ResponseCode==400\n\n#### Clearing:\n- not applicable"
										},
										{
											"name": "security key missing?",
											"item": [
												{
													"name": "reference /core-model-1-4:control-construct",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n----- /v1/regard-application integration -- securitykey missing? -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Environment variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY = \"\";\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var ltpList;\r",
																	"var fcList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    let responseCode;\r",
																	"    responseCode = parseInt(response.code);\r",
																	"    \r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        let responseObject;\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																	"        fcList = responseObject[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
																	"\r",
																	"    } else {\r",
																	"        ltpList = [];\r",
																	"        fcList = [];\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! ltpList could not be extracted.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"var httpClientLtp;\r",
																	"var tcpClientLtp;\r",
																	"try {\r",
																	"\r",
																	"    //Inquiring OAM approvals\r",
																	"    let outputFcPortListInquireOamRequestApprovals;\r",
																	"    outputFcPortListInquireOamRequestApprovals = FindOutputFcPortList(\"NewApplicationCausesRequestForInquiringOamRequestApprovals\", fcList);\r",
																	"    let ltpInstance = FindRandomLtpInstancesFromFc(outputFcPortListInquireOamRequestApprovals, ltpList)\r",
																	"    httpClientLtp = ltpInstance.httpClientLtp;\r",
																	"    tcpClientLtp = FindServingLtp(httpClientLtp, ltpList);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Reference objects could not be extracted.\");\r",
																	"} \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.clear();\r",
																	"    \r",
																	"    pm.collectionVariables.set(\"httpClientLtp\", httpClientLtp);\r",
																	"    pm.collectionVariables.set(\"tcpClientLtp\", tcpClientLtp);\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function FindOperationServer(operationName, ltpList) {\r",
																	"    let operationServer;\r",
																	"    operationServer = \"\";\r",
																	"    try {\r",
																	"        let sampleUuid;\r",
																	"        for(let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"op-s-\")) {\r",
																	"                let sampleOperationName;\r",
																	"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																	"                if(sampleOperationName == operationName) {\r",
																	"                    operationServer = ltpList[i];\r",
																	"                    return operationServer;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																	"    }\r",
																	"    return operationServer;\r",
																	"}\r",
																	"\r",
																	"function FindRandomLtpInstancesFromFc(outputFcPortList, ltpList) {\r",
																	"    let ltpInstance = {};\r",
																	"    try {\r",
																	"        for ( let i=0; i<outputFcPortList.length; i++ ) {\r",
																	"            let randomOutputFcPort = outputFcPortList[Math.floor(Math.random() * outputFcPortList.length)];\r",
																	"            let outputLtpUuid = randomOutputFcPort[\"logical-termination-point\"];\r",
																	"            let operationClientLtp = FindActualInstanceByUuid(outputLtpUuid, ltpList);\r",
																	"\r",
																	"            let httpClientLtp = FindServingLtp(operationClientLtp, ltpList);\r",
																	"            let sampleApplicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																	"\r",
																	"            if (sampleApplicationName != \"AdministratorAdministration\") {\r",
																	"\t\t\t\tltpInstance = { httpClientLtp, operationClientLtp };\r",
																	"                break;\r",
																	"            }\r",
																	"        }\r",
																	"    } catch(error) {\r",
																	"        console.log(error);\r",
																	"        console.log(\"! Exception in function : FindRandomLtpInstancesFromFc. \")\r",
																	"    } \r",
																	"    return ltpInstance;\r",
																	"}\r",
																	"\r",
																	"function FindOutputFcPortList(forwardingName, fcList) {\r",
																	"    let outputFcPortList;\r",
																	"    outputFcPortList = [];\r",
																	"    try {\r",
																	"        for( let i=0; i<fcList.length; i++ ) {\r",
																	"            for(let j=0; j<fcList[i][\"name\"].length; j++) {               \r",
																	"                if(fcList[i][\"name\"][j][\"value\"] == forwardingName) {\r",
																	"                    fcPortList = fcList[i][\"fc-port\"];\r",
																	"                    for(let k=0;k<fcPortList.length;k++) {\r",
																	"                        if(fcPortList[k][\"port-direction\"] == \"core-model-1-4:PORT_DIRECTION_TYPE_OUTPUT\") {\r",
																	"                            outputFcPortList.push(fcPortList[k]);\r",
																	"                        }\r",
																	"                    }\r",
																	"                    return outputFcPortList;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																	"    }\r",
																	"    return outputFcPortList;\r",
																	"}\r",
																	"\r",
																	"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
																	"    let actualInstance;\r",
																	"    actualInstance = {};\r",
																	"    try {\r",
																	"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
																	"            let sampleUuid;\r",
																	"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
																	"            if( sampleUuid == expectedUuid ) {\r",
																	"                actualInstance = actualLtpList[i];\r",
																	"                return actualInstance;\r",
																	"            }\r",
																	"        }\r",
																	"\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																	"    }\r",
																	"    return undefined;\r",
																	"}\r",
																	"\r",
																	"function FindServingLtp(clientLtp, ltpList) {\r",
																	"    let servingLtp;\r",
																	"    servingLtp = {};\r",
																	"    try{\r",
																	"        let serverLtpUuid;\r",
																	"        serverLtpUuid = clientLtp[\"server-ltp\"][0];\r",
																	"        for( let i=0; i<ltpList.length; i++ ) {\r",
																	"            let sampleUuid;\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if( sampleUuid == serverLtpUuid ) {\r",
																	"                servingLtp = ltpList[i];\r",
																	"                return servingLtp;\r",
																	"            }\r",
																	"        }\r",
																	"    } catch(error) {\r",
																	"        console.log(error);\r",
																	"        console.log(\"! Exception in function : FindServingLtp. \")\r",
																	"    }\r",
																	"    return servingLtp;\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected  /v1/regard-application - security key missing?",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var applicationName;\r",
																	"var releaseNumber;\r",
																	"var protocol;\r",
																	"var address;\r",
																	"var port;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let httpClientLtp;\r",
																	"    httpClientLtp = pm.collectionVariables.get(\"httpClientLtp\");\r",
																	"\r",
																	"    applicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																	"    releaseNumber = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																	"\r",
																	"    let tcpClientLtp;\r",
																	"    tcpClientLtp = pm.collectionVariables.get(\"tcpClientLtp\");\r",
																	"\r",
																	"    protocol = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																	"    protocol = protocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																	"\r",
																	"    address = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																	"    port = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"        + '\"application-name\" : ' + '\"' + applicationName + '\",'\r",
																	"        + '\"release-number\" : ' + '\"' + releaseNumber + '\",'\r",
																	"        + '\"protocol\" : ' + '\"' + protocol + '\",'\r",
																	"        + '\"address\" : ' + JSON.stringify(address) + ','\r",
																	"        + '\"port\" : ' + port\r",
																	"    +'}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/regard-application\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"As expected, POST /v1/regard-application responds 401, because of missing operation-key\", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(401);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "401",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"description": "## Gets security key checked for availability?\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for output fc-port of NewApplicationCausesRequestForInquiringOamRequestApprovals, find corresponding op-c, http-c and tcp-c, store them\n- POST /v1/regard-application\n  - all attributes according to chosen http-c, tcp-c\n  - reasonable parameters\n  - BUT operationKey parameter missing (does not mean empty string)\n\n#### Testing:\n- checking for ResponseCode==401\n\n#### Clearing:\n- not applicable"
										},
										{
											"name": "security key checked?",
											"item": [
												{
													"name": "reference /core-model-1-4:control-construct",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n----- /v1/regard-application integration -- securitykey checked? -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Environment variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY = \"\";\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var ltpList;\r",
																	"var fcList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    let responseCode;\r",
																	"    responseCode = parseInt(response.code);\r",
																	"    \r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        let responseObject;\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																	"        fcList = responseObject[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
																	"\r",
																	"    } else {\r",
																	"        ltpList = [];\r",
																	"        fcList = [];\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! ltpList could not be extracted.\");\r",
																	"}\r",
																	"\r",
																	"var httpClientLtp;\r",
																	"var tcpClientLtp;\r",
																	"try {\r",
																	"\r",
																	"    //Inquiring OAM approvals\r",
																	"    let outputFcPortListInquireOamRequestApprovals;\r",
																	"    outputFcPortListInquireOamRequestApprovals = FindOutputFcPortList(\"NewApplicationCausesRequestForInquiringOamRequestApprovals\", fcList);\r",
																	"    let ltpInstance = FindRandomLtpInstancesFromFc(outputFcPortListInquireOamRequestApprovals, ltpList)\r",
																	"    httpClientLtp = ltpInstance.httpClientLtp;\r",
																	"    tcpClientLtp = FindServingLtp(httpClientLtp, ltpList);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Reference objects could not be extracted.\");\r",
																	"} \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.clear();\r",
																	"    \r",
																	"    pm.collectionVariables.set(\"httpClientLtp\", httpClientLtp);\r",
																	"    pm.collectionVariables.set(\"tcpClientLtp\", tcpClientLtp);\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function FindOperationServer(operationName, ltpList) {\r",
																	"    let operationServer;\r",
																	"    operationServer = \"\";\r",
																	"    try {\r",
																	"        let sampleUuid;\r",
																	"        for(let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"op-s-\")) {\r",
																	"                let sampleOperationName;\r",
																	"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																	"                if(sampleOperationName == operationName) {\r",
																	"                    operationServer = ltpList[i];\r",
																	"                    return operationServer;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																	"    }\r",
																	"    return operationServer;\r",
																	"}\r",
																	"\r",
																	"function FindRandomLtpInstancesFromFc(outputFcPortList, ltpList) {\r",
																	"    let ltpInstance = {};\r",
																	"    try {\r",
																	"        for ( let i=0; i<outputFcPortList.length; i++ ) {\r",
																	"            let randomOutputFcPort = outputFcPortList[Math.floor(Math.random() * outputFcPortList.length)];\r",
																	"            let outputLtpUuid = randomOutputFcPort[\"logical-termination-point\"];\r",
																	"            let operationClientLtp = FindActualInstanceByUuid(outputLtpUuid, ltpList);\r",
																	"\r",
																	"            let httpClientLtp = FindServingLtp(operationClientLtp, ltpList);\r",
																	"            let sampleApplicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																	"\r",
																	"            if (sampleApplicationName != \"AdministratorAdministration\") {\r",
																	"\t\t\t\tltpInstance = { httpClientLtp, operationClientLtp };\r",
																	"                break;\r",
																	"            }\r",
																	"        }\r",
																	"    } catch(error) {\r",
																	"        console.log(error);\r",
																	"        console.log(\"! Exception in function : FindRandomLtpInstancesFromFc. \")\r",
																	"    } \r",
																	"    return ltpInstance;\r",
																	"}\r",
																	"\r",
																	"function FindOutputFcPortList(forwardingName, fcList) {\r",
																	"    let outputFcPortList;\r",
																	"    outputFcPortList = [];\r",
																	"    try {\r",
																	"        for( let i=0; i<fcList.length; i++ ) {\r",
																	"            for(let j=0; j<fcList[i][\"name\"].length; j++) {               \r",
																	"                if(fcList[i][\"name\"][j][\"value\"] == forwardingName) {\r",
																	"                    fcPortList = fcList[i][\"fc-port\"];\r",
																	"                    for(let k=0;k<fcPortList.length;k++) {\r",
																	"                        if(fcPortList[k][\"port-direction\"] == \"core-model-1-4:PORT_DIRECTION_TYPE_OUTPUT\") {\r",
																	"                            outputFcPortList.push(fcPortList[k]);\r",
																	"                        }\r",
																	"                    }\r",
																	"                    return outputFcPortList;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																	"    }\r",
																	"    return outputFcPortList;\r",
																	"}\r",
																	"\r",
																	"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
																	"    let actualInstance;\r",
																	"    actualInstance = {};\r",
																	"    try {\r",
																	"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
																	"            let sampleUuid;\r",
																	"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
																	"            if( sampleUuid == expectedUuid ) {\r",
																	"                actualInstance = actualLtpList[i];\r",
																	"                return actualInstance;\r",
																	"            }\r",
																	"        }\r",
																	"\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																	"    }\r",
																	"    return undefined;\r",
																	"}\r",
																	"\r",
																	"function FindServingLtp(clientLtp, ltpList) {\r",
																	"    let servingLtp;\r",
																	"    servingLtp = {};\r",
																	"    try{\r",
																	"        let serverLtpUuid;\r",
																	"        serverLtpUuid = clientLtp[\"server-ltp\"][0];\r",
																	"        for( let i=0; i<ltpList.length; i++ ) {\r",
																	"            let sampleUuid;\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if( sampleUuid == serverLtpUuid ) {\r",
																	"                servingLtp = ltpList[i];\r",
																	"                return servingLtp;\r",
																	"            }\r",
																	"        }\r",
																	"    } catch(error) {\r",
																	"        console.log(error);\r",
																	"        console.log(\"! Exception in function : FindServingLtp. \")\r",
																	"    }\r",
																	"    return servingLtp;\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected  /v1/regard-application - security key checked?",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var applicationName;\r",
																	"var releaseNumber;\r",
																	"var protocol;\r",
																	"var address;\r",
																	"var port;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let httpClientLtp;\r",
																	"    httpClientLtp = pm.collectionVariables.get(\"httpClientLtp\");\r",
																	"\r",
																	"    applicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																	"    releaseNumber = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																	"\r",
																	"    let tcpClientLtp;\r",
																	"    tcpClientLtp = pm.collectionVariables.get(\"tcpClientLtp\");\r",
																	"\r",
																	"    protocol = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																	"    protocol = protocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																	"\r",
																	"    address = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																	"    port = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"        + '\"application-name\" : ' + '\"' + applicationName + '\",'\r",
																	"        + '\"release-number\" : ' + '\"' + releaseNumber + '\",'\r",
																	"        + '\"protocol\" : ' + '\"' + protocol + '\",'\r",
																	"        + '\"address\" : ' + JSON.stringify(address) + ','\r",
																	"        + '\"port\" : ' + port\r",
																	"    +'}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy security key\r",
																	"****************************************************************************************/\r",
																	"var FAULTY_OPERATION_KEY;\r",
																	"try {\r",
																	"    FAULTY_OPERATION_KEY = GenerateRandomHexString(32);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy value for operationKey. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/regard-application\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({ key: \"operation-key\", value: FAULTY_OPERATION_KEY });\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"As expected, POST /v1/regard-application responds 401, because of incorrect operation-key\", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(401);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "401",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"description": "## Gets security key checked for correctness?\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for output fc-port of NewApplicationCausesRequestForInquiringOamRequestApprovals, find corresponding op-c, http-c and tcp-c, store them\n- POST /v1/regard-application\n  - all attributes according to chosen http-c, tcp-c\n  - reasonable parameters\n  - BUT operationKey parameter with random dummy value\n\n#### Testing:\n- checking for ResponseCode==401\n\n#### Clearing:\n- not applicable"
										},
										{
											"name": "response header completeness",
											"item": [
												{
													"name": "reference /core-model-1-4:control-construct",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n----- /v1/regard-application integration -- response header completeness -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Environment variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY = \"\";\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var ltpList;\r",
																	"var fcList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    let responseCode;\r",
																	"    responseCode = parseInt(response.code);\r",
																	"    \r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        let responseObject;\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																	"        fcList = responseObject[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
																	"\r",
																	"    } else {\r",
																	"        ltpList = [];\r",
																	"        fcList = [];\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! ltpList could not be extracted.\");\r",
																	"}\r",
																	"\r",
																	"var currentOperationServer;\r",
																	"var httpClientLtp;\r",
																	"var tcpClientLtp;\r",
																	"try {\r",
																	"    currentOperationServer = FindOperationServer(\"/v1/regard-application\", ltpList);\r",
																	"\r",
																	"    //Inquiring OAM approvals\r",
																	"    let outputFcPortListInquireOamRequestApprovals;\r",
																	"    outputFcPortListInquireOamRequestApprovals = FindOutputFcPortList(\"NewApplicationCausesRequestForInquiringOamRequestApprovals\", fcList);\r",
																	"    let ltpInstance = FindRandomLtpInstancesFromFc(outputFcPortListInquireOamRequestApprovals, ltpList)\r",
																	"    httpClientLtp = ltpInstance.httpClientLtp;\r",
																	"    tcpClientLtp = FindServingLtp(httpClientLtp, ltpList);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Reference objects could not be extracted.\");\r",
																	"} \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.clear();\r",
																	"    \r",
																	"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																	"    pm.collectionVariables.set(\"httpClientLtp\", httpClientLtp);\r",
																	"    pm.collectionVariables.set(\"tcpClientLtp\", tcpClientLtp);\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function FindOperationServer(operationName, ltpList) {\r",
																	"    let operationServer;\r",
																	"    operationServer = \"\";\r",
																	"    try {\r",
																	"        let sampleUuid;\r",
																	"        for(let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"op-s-\")) {\r",
																	"                let sampleOperationName;\r",
																	"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																	"                if(sampleOperationName == operationName) {\r",
																	"                    operationServer = ltpList[i];\r",
																	"                    return operationServer;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																	"    }\r",
																	"    return operationServer;\r",
																	"}\r",
																	"\r",
																	"function FindRandomLtpInstancesFromFc(outputFcPortList, ltpList) {\r",
																	"    let ltpInstance = {};\r",
																	"    try {\r",
																	"        for ( let i=0; i<outputFcPortList.length; i++ ) {\r",
																	"            let randomOutputFcPort = outputFcPortList[Math.floor(Math.random() * outputFcPortList.length)];\r",
																	"            let outputLtpUuid = randomOutputFcPort[\"logical-termination-point\"];\r",
																	"            let operationClientLtp = FindActualInstanceByUuid(outputLtpUuid, ltpList);\r",
																	"\r",
																	"            let httpClientLtp = FindServingLtp(operationClientLtp, ltpList);\r",
																	"            let sampleApplicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																	"\r",
																	"            if (sampleApplicationName != \"AdministratorAdministration\") {\r",
																	"\t\t\t\tltpInstance = { httpClientLtp, operationClientLtp };\r",
																	"                break;\r",
																	"            }\r",
																	"        }\r",
																	"    } catch(error) {\r",
																	"        console.log(error);\r",
																	"        console.log(\"! Exception in function : FindRandomLtpInstancesFromFc. \")\r",
																	"    } \r",
																	"    return ltpInstance;\r",
																	"}\r",
																	"\r",
																	"function FindOutputFcPortList(forwardingName, fcList) {\r",
																	"    let outputFcPortList;\r",
																	"    outputFcPortList = [];\r",
																	"    try {\r",
																	"        for( let i=0; i<fcList.length; i++ ) {\r",
																	"            for(let j=0; j<fcList[i][\"name\"].length; j++) {               \r",
																	"                if(fcList[i][\"name\"][j][\"value\"] == forwardingName) {\r",
																	"                    fcPortList = fcList[i][\"fc-port\"];\r",
																	"                    for(let k=0;k<fcPortList.length;k++) {\r",
																	"                        if(fcPortList[k][\"port-direction\"] == \"core-model-1-4:PORT_DIRECTION_TYPE_OUTPUT\") {\r",
																	"                            outputFcPortList.push(fcPortList[k]);\r",
																	"                        }\r",
																	"                    }\r",
																	"                    return outputFcPortList;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																	"    }\r",
																	"    return outputFcPortList;\r",
																	"}\r",
																	"\r",
																	"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
																	"    let actualInstance;\r",
																	"    actualInstance = {};\r",
																	"    try {\r",
																	"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
																	"            let sampleUuid;\r",
																	"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
																	"            if( sampleUuid == expectedUuid ) {\r",
																	"                actualInstance = actualLtpList[i];\r",
																	"                return actualInstance;\r",
																	"            }\r",
																	"        }\r",
																	"\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																	"    }\r",
																	"    return undefined;\r",
																	"}\r",
																	"\r",
																	"function FindServingLtp(clientLtp, ltpList) {\r",
																	"    let servingLtp;\r",
																	"    servingLtp = {};\r",
																	"    try{\r",
																	"        let serverLtpUuid;\r",
																	"        serverLtpUuid = clientLtp[\"server-ltp\"][0];\r",
																	"        for( let i=0; i<ltpList.length; i++ ) {\r",
																	"            let sampleUuid;\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if( sampleUuid == serverLtpUuid ) {\r",
																	"                servingLtp = ltpList[i];\r",
																	"                return servingLtp;\r",
																	"            }\r",
																	"        }\r",
																	"    } catch(error) {\r",
																	"        console.log(error);\r",
																	"        console.log(\"! Exception in function : FindServingLtp. \")\r",
																	"    }\r",
																	"    return servingLtp;\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected /v1/regard-application response header parameter completeness",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"var applicationName;\r",
																	"var releaseNumber;\r",
																	"var protocol;\r",
																	"var address;\r",
																	"var port;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"    \r",
																	"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"\r",
																	"    let httpClientLtp;\r",
																	"    httpClientLtp = pm.collectionVariables.get(\"httpClientLtp\");\r",
																	"\r",
																	"    applicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																	"    releaseNumber = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																	"\r",
																	"    let tcpClientLtp;\r",
																	"    tcpClientLtp = pm.collectionVariables.get(\"tcpClientLtp\");\r",
																	"\r",
																	"    protocol = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																	"    protocol = protocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																	"\r",
																	"    address = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																	"    port = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"        + '\"application-name\" : ' + '\"' + applicationName + '\",'\r",
																	"        + '\"release-number\" : ' + '\"' + releaseNumber + '\",'\r",
																	"        + '\"protocol\" : ' + '\"' + protocol + '\",'\r",
																	"        + '\"address\" : ' + JSON.stringify(address) + ','\r",
																	"        + '\"port\" : ' + port\r",
																	"    +'}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/regard-application\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"var response;\r",
																	"try {\r",
																	"    response = pm.response;\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"POST /v1/regard-application responds 204\", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(204);\r",
																	"    });\r",
																	"    pm.test(\"Response headers contain 'x-correlator'\", function () {\r",
																	"        response.to.have.header(\"x-correlator\");\r",
																	"    });\r",
																	"    pm.test(\"Response headers contain 'exec-time'\", function () {\r",
																	"        response.to.have.header(\"exec-time\");\r",
																	"    });\r",
																	"    pm.test(\"Response headers contain 'backend-time'\", function () {\r",
																	"        response.to.have.header(\"backend-time\");\r",
																	"    });\r",
																	"    pm.test(\"Response headers contain 'life-cycle-state'\", function () {\r",
																	"        response.to.have.header(\"life-cycle-state\");\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "204",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"description": "## Contains response complete set of headers?\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for op-s of /v1/regard-application, storing operation-key\n  - searching CC for output fc-port of NewApplicationCausesRequestForInquiringOamRequestApprovals, find corresponding op-c, http-c and tcp-c, store them\n- POST /v1/regard-application\n  - all attributes according to chosen http-c, tcp-c\n  - operation-key from above\n  - reasonable parameters\n\n#### Testing:\n- checking for ResponseCode==204\n- checking for ResponseHeaders (x-correlator, exec-time, backend-time and life-cycle-state) being present and checking for correctness of type of each parameter.\n\n#### Clearing:\n- not applicable"
										},
										{
											"name": "x-correlator responded?",
											"item": [
												{
													"name": "reference /core-model-1-4:control-construct",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n----- /v1/regard-application integration -- x-correlator responded? -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Environment variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY = \"\";\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var ltpList;\r",
																	"var fcList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    let responseCode;\r",
																	"    responseCode = parseInt(response.code);\r",
																	"    \r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        let responseObject;\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																	"        fcList = responseObject[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
																	"\r",
																	"    } else {\r",
																	"        ltpList = [];\r",
																	"        fcList = [];\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! ltpList could not be extracted.\");\r",
																	"}\r",
																	"\r",
																	"var currentOperationServer;\r",
																	"var httpClientLtp;\r",
																	"var tcpClientLtp;\r",
																	"try {\r",
																	"    currentOperationServer = FindOperationServer(\"/v1/regard-application\", ltpList);\r",
																	"\r",
																	"    //Inquiring OAM approvals\r",
																	"    let outputFcPortListInquireOamRequestApprovals;\r",
																	"    outputFcPortListInquireOamRequestApprovals = FindOutputFcPortList(\"NewApplicationCausesRequestForInquiringOamRequestApprovals\", fcList);\r",
																	"    let ltpInstance = FindRandomLtpInstancesFromFc(outputFcPortListInquireOamRequestApprovals, ltpList)\r",
																	"    httpClientLtp = ltpInstance.httpClientLtp;\r",
																	"    tcpClientLtp = FindServingLtp(httpClientLtp, ltpList);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Reference objects could not be extracted.\");\r",
																	"} \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.clear();\r",
																	"    \r",
																	"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																	"    pm.collectionVariables.set(\"httpClientLtp\", httpClientLtp);\r",
																	"    pm.collectionVariables.set(\"tcpClientLtp\", tcpClientLtp);\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function FindOperationServer(operationName, ltpList) {\r",
																	"    let operationServer;\r",
																	"    operationServer = \"\";\r",
																	"    try {\r",
																	"        let sampleUuid;\r",
																	"        for(let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"op-s-\")) {\r",
																	"                let sampleOperationName;\r",
																	"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																	"                if(sampleOperationName == operationName) {\r",
																	"                    operationServer = ltpList[i];\r",
																	"                    return operationServer;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																	"    }\r",
																	"    return operationServer;\r",
																	"}\r",
																	"\r",
																	"function FindRandomLtpInstancesFromFc(outputFcPortList, ltpList) {\r",
																	"    let ltpInstance = {};\r",
																	"    try {\r",
																	"        for ( let i=0; i<outputFcPortList.length; i++ ) {\r",
																	"            let randomOutputFcPort = outputFcPortList[Math.floor(Math.random() * outputFcPortList.length)];\r",
																	"            let outputLtpUuid = randomOutputFcPort[\"logical-termination-point\"];\r",
																	"            let operationClientLtp = FindActualInstanceByUuid(outputLtpUuid, ltpList);\r",
																	"\r",
																	"            let httpClientLtp = FindServingLtp(operationClientLtp, ltpList);\r",
																	"            let sampleApplicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																	"\r",
																	"            if (sampleApplicationName != \"AdministratorAdministration\") {\r",
																	"\t\t\t\tltpInstance = { httpClientLtp, operationClientLtp };\r",
																	"                break;\r",
																	"            }\r",
																	"        }\r",
																	"    } catch(error) {\r",
																	"        console.log(error);\r",
																	"        console.log(\"! Exception in function : FindRandomLtpInstancesFromFc. \")\r",
																	"    } \r",
																	"    return ltpInstance;\r",
																	"}\r",
																	"\r",
																	"function FindOutputFcPortList(forwardingName, fcList) {\r",
																	"    let outputFcPortList;\r",
																	"    outputFcPortList = [];\r",
																	"    try {\r",
																	"        for( let i=0; i<fcList.length; i++ ) {\r",
																	"            for(let j=0; j<fcList[i][\"name\"].length; j++) {               \r",
																	"                if(fcList[i][\"name\"][j][\"value\"] == forwardingName) {\r",
																	"                    fcPortList = fcList[i][\"fc-port\"];\r",
																	"                    for(let k=0;k<fcPortList.length;k++) {\r",
																	"                        if(fcPortList[k][\"port-direction\"] == \"core-model-1-4:PORT_DIRECTION_TYPE_OUTPUT\") {\r",
																	"                            outputFcPortList.push(fcPortList[k]);\r",
																	"                        }\r",
																	"                    }\r",
																	"                    return outputFcPortList;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																	"    }\r",
																	"    return outputFcPortList;\r",
																	"}\r",
																	"\r",
																	"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
																	"    let actualInstance;\r",
																	"    actualInstance = {};\r",
																	"    try {\r",
																	"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
																	"            let sampleUuid;\r",
																	"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
																	"            if( sampleUuid == expectedUuid ) {\r",
																	"                actualInstance = actualLtpList[i];\r",
																	"                return actualInstance;\r",
																	"            }\r",
																	"        }\r",
																	"\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																	"    }\r",
																	"    return undefined;\r",
																	"}\r",
																	"\r",
																	"function FindServingLtp(clientLtp, ltpList) {\r",
																	"    let servingLtp;\r",
																	"    servingLtp = {};\r",
																	"    try{\r",
																	"        let serverLtpUuid;\r",
																	"        serverLtpUuid = clientLtp[\"server-ltp\"][0];\r",
																	"        for( let i=0; i<ltpList.length; i++ ) {\r",
																	"            let sampleUuid;\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if( sampleUuid == serverLtpUuid ) {\r",
																	"                servingLtp = ltpList[i];\r",
																	"                return servingLtp;\r",
																	"            }\r",
																	"        }\r",
																	"    } catch(error) {\r",
																	"        console.log(error);\r",
																	"        console.log(\"! Exception in function : FindServingLtp. \")\r",
																	"    }\r",
																	"    return servingLtp;\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected /v1/regard-application - correct x-correlator responded?",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"var applicationName;\r",
																	"var releaseNumber;\r",
																	"var protocol;\r",
																	"var address;\r",
																	"var port;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"    \r",
																	"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"\r",
																	"    let httpClientLtp;\r",
																	"    httpClientLtp = pm.collectionVariables.get(\"httpClientLtp\");\r",
																	"\r",
																	"    applicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																	"    releaseNumber = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																	"\r",
																	"    let tcpClientLtp;\r",
																	"    tcpClientLtp = pm.collectionVariables.get(\"tcpClientLtp\");\r",
																	"\r",
																	"    protocol = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																	"    protocol = protocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																	"\r",
																	"    address = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																	"    port = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"        + '\"application-name\" : ' + '\"' + applicationName + '\",'\r",
																	"        + '\"release-number\" : ' + '\"' + releaseNumber + '\",'\r",
																	"        + '\"protocol\" : ' + '\"' + protocol + '\",'\r",
																	"        + '\"address\" : ' + JSON.stringify(address) + ','\r",
																	"        + '\"port\" : ' + port\r",
																	"    +'}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.set(\"user\", USER_NAME);\r",
																	"    pm.collectionVariables.set(\"originator\", ORIGINATOR);\r",
																	"    pm.collectionVariables.set(\"xCorrelator\", X_CORRELATOR);\r",
																	"    pm.collectionVariables.set(\"traceIndicator\", TRACE_INDICATOR);\r",
																	"    pm.collectionVariables.set(\"customerJourney\", CUSTOMER_JOURNEY);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/regard-application\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var expectedXCorrelator;\r",
																	"try {\r",
																	"    expectedXCorrelator = pm.collectionVariables.get(\"xCorrelator\");\r",
																	"   \r",
																	"} catch(error) {\r",
																	"    console.log(\"! Could not load input data. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"var actualXCorrelator;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"    let RESPONSE_HEADERS;\r",
																	"    RESPONSE_HEADERS = pm.response.headers;  \r",
																	"    \r",
																	"    actualXCorrelator = RESPONSE_HEADERS.get(\"x-correlator\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"POST /v1/regard-application responds 204\", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(204);\r",
																	"    });\r",
																	"    pm.test(\"Provides expected x-correlator: \" + expectedXCorrelator, function () {\r",
																	"        pm.expect(actualXCorrelator).to.equal(expectedXCorrelator);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "204",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"description": "## Is the initial x-correlator ín the response?\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for op-s of /v1/regard-application, storing operation-key\n  - searching CC for output fc-port of NewApplicationCausesRequestForInquiringOamRequestApprovals, find corresponding op-c, http-c and tcp-c, store them\n- POST /v1/regard-application\n    - all attributes according to chosen http-c, tcp-c\n    -operation-key from above\n    - reasonable parameters\n\n#### Testing:\n- checking for ResponseCode==204\n- checking for response headers containing x-correlator==dummyXCorrelator\n\n#### Clearing:\n- not applicable"
										},
										{
											"name": "life-cycle-state responded?",
											"item": [
												{
													"name": "reference /core-model-1-4:control-construct",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n----- /v1/regard-application integration -- life-cycle-state responded? -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Environment variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY = \"\";\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var ltpList;\r",
																	"var fcList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    let responseCode;\r",
																	"    responseCode = parseInt(response.code);\r",
																	"    \r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        let responseObject;\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																	"        fcList = responseObject[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
																	"\r",
																	"    } else {\r",
																	"        ltpList = [];\r",
																	"        fcList = [];\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! ltpList could not be extracted.\");\r",
																	"}\r",
																	"\r",
																	"var currentOperationServer;\r",
																	"var httpClientLtp;\r",
																	"var tcpClientLtp;\r",
																	"try {\r",
																	"    currentOperationServer = FindOperationServer(\"/v1/regard-application\", ltpList);\r",
																	"\r",
																	"    //Inquiring OAM approvals\r",
																	"    let outputFcPortListInquireOamRequestApprovals;\r",
																	"    outputFcPortListInquireOamRequestApprovals = FindOutputFcPortList(\"NewApplicationCausesRequestForInquiringOamRequestApprovals\", fcList);\r",
																	"    let ltpInstance = FindRandomLtpInstancesFromFc(outputFcPortListInquireOamRequestApprovals, ltpList)\r",
																	"    httpClientLtp = ltpInstance.httpClientLtp;\r",
																	"    tcpClientLtp = FindServingLtp(httpClientLtp, ltpList);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Reference objects could not be extracted.\");\r",
																	"} \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.clear();\r",
																	"    \r",
																	"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																	"    pm.collectionVariables.set(\"httpClientLtp\", httpClientLtp);\r",
																	"    pm.collectionVariables.set(\"tcpClientLtp\", tcpClientLtp);\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function FindOperationServer(operationName, ltpList) {\r",
																	"    let operationServer;\r",
																	"    operationServer = \"\";\r",
																	"    try {\r",
																	"        let sampleUuid;\r",
																	"        for(let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"op-s-\")) {\r",
																	"                let sampleOperationName;\r",
																	"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																	"                if(sampleOperationName == operationName) {\r",
																	"                    operationServer = ltpList[i];\r",
																	"                    return operationServer;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																	"    }\r",
																	"    return operationServer;\r",
																	"}\r",
																	"\r",
																	"function FindRandomLtpInstancesFromFc(outputFcPortList, ltpList) {\r",
																	"    let ltpInstance = {};\r",
																	"    try {\r",
																	"        for ( let i=0; i<outputFcPortList.length; i++ ) {\r",
																	"            let randomOutputFcPort = outputFcPortList[Math.floor(Math.random() * outputFcPortList.length)];\r",
																	"            let outputLtpUuid = randomOutputFcPort[\"logical-termination-point\"];\r",
																	"            let operationClientLtp = FindActualInstanceByUuid(outputLtpUuid, ltpList);\r",
																	"\r",
																	"            let httpClientLtp = FindServingLtp(operationClientLtp, ltpList);\r",
																	"            let sampleApplicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																	"\r",
																	"            if (sampleApplicationName != \"AdministratorAdministration\") {\r",
																	"\t\t\t\tltpInstance = { httpClientLtp, operationClientLtp };\r",
																	"                break;\r",
																	"            }\r",
																	"        }\r",
																	"    } catch(error) {\r",
																	"        console.log(error);\r",
																	"        console.log(\"! Exception in function : FindRandomLtpInstancesFromFc. \")\r",
																	"    } \r",
																	"    return ltpInstance;\r",
																	"}\r",
																	"\r",
																	"function FindOutputFcPortList(forwardingName, fcList) {\r",
																	"    let outputFcPortList;\r",
																	"    outputFcPortList = [];\r",
																	"    try {\r",
																	"        for( let i=0; i<fcList.length; i++ ) {\r",
																	"            for(let j=0; j<fcList[i][\"name\"].length; j++) {               \r",
																	"                if(fcList[i][\"name\"][j][\"value\"] == forwardingName) {\r",
																	"                    fcPortList = fcList[i][\"fc-port\"];\r",
																	"                    for(let k=0;k<fcPortList.length;k++) {\r",
																	"                        if(fcPortList[k][\"port-direction\"] == \"core-model-1-4:PORT_DIRECTION_TYPE_OUTPUT\") {\r",
																	"                            outputFcPortList.push(fcPortList[k]);\r",
																	"                        }\r",
																	"                    }\r",
																	"                    return outputFcPortList;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																	"    }\r",
																	"    return outputFcPortList;\r",
																	"}\r",
																	"\r",
																	"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
																	"    let actualInstance;\r",
																	"    actualInstance = {};\r",
																	"    try {\r",
																	"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
																	"            let sampleUuid;\r",
																	"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
																	"            if( sampleUuid == expectedUuid ) {\r",
																	"                actualInstance = actualLtpList[i];\r",
																	"                return actualInstance;\r",
																	"            }\r",
																	"        }\r",
																	"\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																	"    }\r",
																	"    return undefined;\r",
																	"}\r",
																	"\r",
																	"function FindServingLtp(clientLtp, ltpList) {\r",
																	"    let servingLtp;\r",
																	"    servingLtp = {};\r",
																	"    try{\r",
																	"        let serverLtpUuid;\r",
																	"        serverLtpUuid = clientLtp[\"server-ltp\"][0];\r",
																	"        for( let i=0; i<ltpList.length; i++ ) {\r",
																	"            let sampleUuid;\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if( sampleUuid == serverLtpUuid ) {\r",
																	"                servingLtp = ltpList[i];\r",
																	"                return servingLtp;\r",
																	"            }\r",
																	"        }\r",
																	"    } catch(error) {\r",
																	"        console.log(error);\r",
																	"        console.log(\"! Exception in function : FindServingLtp. \")\r",
																	"    }\r",
																	"    return servingLtp;\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected  /v1/regard-application correct life-cycle-state responded?",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"var applicationName;\r",
																	"var releaseNumber;\r",
																	"var protocol;\r",
																	"var address;\r",
																	"var port;\r",
																	"var LIFE_CYCLE_STATE;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"    \r",
																	"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"\r",
																	"    let httpClientLtp;\r",
																	"    httpClientLtp = pm.collectionVariables.get(\"httpClientLtp\");\r",
																	"\r",
																	"    applicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																	"    releaseNumber = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																	"\r",
																	"    let tcpClientLtp;\r",
																	"    tcpClientLtp = pm.collectionVariables.get(\"tcpClientLtp\");\r",
																	"\r",
																	"    protocol = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																	"    protocol = protocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																	"\r",
																	"    address = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																	"    port = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																	"\r",
																	"    let lifeCycleState;\r",
																	"    lifeCycleState = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"life-cycle-state\"];\r",
																	"    let prefixLength = ('operation-server-interface-1-0:LIFE_CYCLE_STATE_TYPE_').length;     \r",
																	"    LIFE_CYCLE_STATE = lifeCycleState.substring(prefixLength);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"        + '\"application-name\" : ' + '\"' + applicationName + '\",'\r",
																	"        + '\"release-number\" : ' + '\"' + releaseNumber + '\",'\r",
																	"        + '\"protocol\" : ' + '\"' + protocol + '\",'\r",
																	"        + '\"address\" : ' + JSON.stringify(address) + ','\r",
																	"        + '\"port\" : ' + port\r",
																	"    +'}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.set(\"expectedLifeCycleState\", LIFE_CYCLE_STATE);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/regard-application\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var expectedLifeCycleState;\r",
																	"try {\r",
																	"    expectedLifeCycleState = pm.collectionVariables.get(\"expectedLifeCycleState\");\r",
																	"   \r",
																	"} catch(error) {\r",
																	"    console.log(\"! Could not load input data. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"var actualLifeCycleState;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"    let RESPONSE_HEADERS;\r",
																	"    RESPONSE_HEADERS = pm.response.headers;  \r",
																	"    \r",
																	"    actualLifeCycleState = RESPONSE_HEADERS.get(\"life-cycle-state\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"POST /v1/regard-application responds 204\", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(204);\r",
																	"    });\r",
																	"    pm.test(\"Provides expected life-cycle-state: \" + expectedLifeCycleState, function () {\r",
																	"        pm.expect(actualLifeCycleState).to.equal(expectedLifeCycleState);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "204",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"description": "## Is the correct life-cycle-state ín the response?\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for op-s of /v1/regard-application, storing operation-key\n  - searching CC for output fc-port of NewApplicationCausesRequestForInquiringOamRequestApprovals, find corresponding op-c, http-c and tcp-c, store them\n- POST /v1/regard-application\n  - all attributes according to chosen http-c, tcp-c\n  - operation-key from above\n  - reasonable parameters\n\n#### Testing:\n- checking for ResponseCode==204\n- checking for response headers containing life-cycle-state is equal to the value as present in the control-construct for /v1/regard-application/configuration/life-cycle-state\n\n#### Clearing:\n- not applicable"
										},
										{
											"name": "Request notified?",
											"item": [
												{
													"name": "reference /core-model-1-4:control-construct",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n-----  /v1/regard-application integration -- request notified? -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Environment variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY = \"\";\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var ltpList;\r",
																	"var fcList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    let responseCode;\r",
																	"    responseCode = parseInt(response.code);\r",
																	"    \r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        let responseObject;\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																	"        fcList = responseObject[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
																	"\r",
																	"    } else {\r",
																	"        ltpList = [];\r",
																	"        fcList = [];\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! ltpList could not be extracted.\");\r",
																	"}\r",
																	"\r",
																	"var currentOperationServer;\r",
																	"var executionAndTraceLogHttpClientLtp;\r",
																	"var executionAndTraceLogTcpClientLtp;\r",
																	"var httpServerLtp;\r",
																	"var httpClientLtp;\r",
																	"var tcpClientLtp;\r",
																	"\r",
																	"try {\r",
																	"    currentOperationServer = FindOperationServer(\"/v1/regard-application\", ltpList);\r",
																	"    httpServerLtp = FindHttpServerLtp(ltpList);\r",
																	"\r",
																	"    //Execution And Trace Log\r",
																	"    let recordServiceRequestOperationClientLtp = FindOperationClientUsingCallback(\"ServiceRequestCausesLoggingRequest\", fcList, ltpList)\r",
																	"    executionAndTraceLogHttpClientLtp = FindServingLtp(recordServiceRequestOperationClientLtp, ltpList);\r",
																	"    executionAndTraceLogTcpClientLtp = FindServingLtp(executionAndTraceLogHttpClientLtp, ltpList);\r",
																	"\r",
																	"     //Inquiring OAM approvals\r",
																	"    let outputFcPortListInquireOamRequestApprovals;\r",
																	"    outputFcPortListInquireOamRequestApprovals = FindOutputFcPortList(\"NewApplicationCausesRequestForInquiringOamRequestApprovals\", fcList);\r",
																	"    let ltpInstance = FindRandomLtpInstancesFromFc(outputFcPortListInquireOamRequestApprovals, ltpList)\r",
																	"    httpClientLtp = ltpInstance.httpClientLtp;\r",
																	"    tcpClientLtp = FindServingLtp(httpClientLtp, ltpList);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Reference objects could not be extracted.\");\r",
																	"} \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"   pm.collectionVariables.clear();\r",
																	"    \r",
																	"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																	"    pm.collectionVariables.set(\"httpServerLtp\", httpServerLtp);\r",
																	"    \r",
																	"    pm.collectionVariables.set(\"executionAndTraceLogHttpClientLtp\", executionAndTraceLogHttpClientLtp);\r",
																	"    pm.collectionVariables.set(\"executionAndTraceLogTcpClientLtp\", executionAndTraceLogTcpClientLtp);\r",
																	"    \r",
																	"    pm.collectionVariables.set(\"httpClientLtp\", httpClientLtp);\r",
																	"    pm.collectionVariables.set(\"tcpClientLtp\", tcpClientLtp);\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function FindOperationServer(operationName, ltpList) {\r",
																	"    let operationServer;\r",
																	"    operationServer = \"\";\r",
																	"    try {\r",
																	"        let sampleUuid;\r",
																	"        for(let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"op-s-\")) {\r",
																	"                let sampleOperationName;\r",
																	"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																	"                if(sampleOperationName == operationName) {\r",
																	"                    operationServer = ltpList[i];\r",
																	"                    return operationServer;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																	"    }\r",
																	"    return operationServer;\r",
																	"}\r",
																	"\r",
																	"\r",
																	"function FindRandomLtpInstancesFromFc(outputFcPortList, ltpList) {\r",
																	"    let ltpInstance = {};\r",
																	"    try {\r",
																	"        for ( let i=0; i<outputFcPortList.length; i++ ) {\r",
																	"            let randomOutputFcPort = outputFcPortList[Math.floor(Math.random() * outputFcPortList.length)];\r",
																	"            let outputLtpUuid = randomOutputFcPort[\"logical-termination-point\"];\r",
																	"            let operationClientLtp = FindActualInstanceByUuid(outputLtpUuid, ltpList);\r",
																	"\r",
																	"            let httpClientLtp = FindServingLtp(operationClientLtp, ltpList);\r",
																	"            let sampleApplicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																	"\r",
																	"            if (sampleApplicationName != \"AdministratorAdministration\") {\r",
																	"\t\t\t\tltpInstance = { httpClientLtp, operationClientLtp };\r",
																	"                break;\r",
																	"            }\r",
																	"        }\r",
																	"    } catch(error) {\r",
																	"        console.log(error);\r",
																	"        console.log(\"! Exception in function : FindRandomLtpInstancesFromFc. \")\r",
																	"    } \r",
																	"    return ltpInstance;\r",
																	"}\r",
																	"\r",
																	"\r",
																	"function FindOutputFcPortList(forwardingName, fcList) {\r",
																	"    let outputFcPortList;\r",
																	"    outputFcPortList = [];\r",
																	"    try {\r",
																	"        for( let i=0; i<fcList.length; i++ ) {\r",
																	"            for(let j=0; j<fcList[i][\"name\"].length; j++) {               \r",
																	"                if(fcList[i][\"name\"][j][\"value\"] == forwardingName) {\r",
																	"                    fcPortList = fcList[i][\"fc-port\"];\r",
																	"                    for(let k=0;k<fcPortList.length;k++) {\r",
																	"                        if(fcPortList[k][\"port-direction\"] == \"core-model-1-4:PORT_DIRECTION_TYPE_OUTPUT\") {\r",
																	"                            outputFcPortList.push(fcPortList[k]);\r",
																	"                        }\r",
																	"                    }\r",
																	"                    return outputFcPortList;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																	"    }\r",
																	"    return outputFcPortList;\r",
																	"}\r",
																	"\r",
																	"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
																	"    let actualInstance;\r",
																	"    actualInstance = {};\r",
																	"    try {\r",
																	"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
																	"            let sampleUuid;\r",
																	"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
																	"            if( sampleUuid == expectedUuid ) {\r",
																	"                actualInstance = actualLtpList[i];\r",
																	"                return actualInstance;\r",
																	"            }\r",
																	"        }\r",
																	"\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																	"    }\r",
																	"    return undefined;\r",
																	"}\r",
																	"\r",
																	"function FindServingLtp(clientLtp, ltpList) {\r",
																	"    let servingLtp;\r",
																	"    servingLtp = {};\r",
																	"    try{\r",
																	"        let serverLtpUuid;\r",
																	"        serverLtpUuid = clientLtp[\"server-ltp\"][0];\r",
																	"        for( let i=0; i<ltpList.length; i++ ) {\r",
																	"            let sampleUuid;\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if( sampleUuid == serverLtpUuid ) {\r",
																	"                servingLtp = ltpList[i];\r",
																	"                return servingLtp;\r",
																	"            }\r",
																	"        }\r",
																	"    } catch(error) {\r",
																	"        console.log(error);\r",
																	"        console.log(\"! Exception in function : FindServingLtp. \")\r",
																	"    }\r",
																	"    return servingLtp;\r",
																	"}\r",
																	"\r",
																	"function FindHttpServerLtp(ltpList) {\r",
																	"    let httpServerLtp;\r",
																	"    httpServerLtp = {};\r",
																	"    try {\r",
																	"        for( let i=0; i<ltpList.length; i++ ) {\r",
																	"            let sampleUuid;\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"http-s-\")) {\r",
																	"                httpServerLtp = ltpList[i];\r",
																	"                return httpServerLtp;\r",
																	"            }\r",
																	"        } \r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function : FindHttpServerLtp. \");\r",
																	"    }\r",
																	"    return httpServerLtp;\r",
																	"}\r",
																	"\r",
																	"\r",
																	"function FindOperationClientUsingCallback(callback, fcList, ltpList) {\r",
																	"    let operationClientLtp\r",
																	"    try {\r",
																	"        let outputFcPortList = FindOutputFcPortList(callback, fcList);\r",
																	"        let randomOutputFcPort = outputFcPortList[Math.floor(Math.random() * outputFcPortList.length)];\r",
																	"        let outputLtpUuid = randomOutputFcPort[\"logical-termination-point\"];\r",
																	"        operationClientLtp = FindActualInstanceByUuid(outputLtpUuid, ltpList);\r",
																	"    } catch (error) {\r",
																	"        console.log(error);\r",
																	"        console.log(\"! Exception in function FindOperationClientUsingCallback. \");\r",
																	"    }\r",
																	"    return  operationClientLtp\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "reference ExecutionAndTraceLog/core-model-1-4:control-construct",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var AUTHORIZATION;\r",
																	"var applicationProtocol;\r",
																	"var applicationAddress;\r",
																	"var applicationPort;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let executionAndTraceLogTcpClientLtp;\r",
																	"    executionAndTraceLogTcpClientLtp = pm.collectionVariables.get(\"executionAndTraceLogTcpClientLtp\");\r",
																	"\r",
																	"    applicationProtocol = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																	"    applicationProtocol = applicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																	"    \r",
																	"    applicationAddress = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																	"    if(applicationAddress.hasOwnProperty(\"ip-address\")) {\r",
																	"        applicationAddress = applicationAddress[\"ip-address\"][\"ipv-4-address\"];\r",
																	"    } else {\r",
																	"        applicationAddress = applicationAddress[\"domain-name\"];\r",
																	"    }\r",
																	"    applicationPort = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																	" \r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Environment variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = \"\";\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = applicationProtocol + \"://\" + applicationAddress + \":\" + applicationPort + \"/core-model-1-4:control-construct\";\r",
																	"    //URI = \"http://9d098835-4e91-48f3-9761-04a82ff2843e.mock.pstmn.io\" + \"/core-model-1-4:control-construct\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var ltpList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    let responseCode;\r",
																	"    responseCode = parseInt(response.code);\r",
																	"    \r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        let responseObject;\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																	"\r",
																	"    } else {\r",
																	"        ltpList = [];\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! ltpList could not be extracted.\");\r",
																	"}\r",
																	"\r",
																	"var listRecordsOfFlowOperationKey;\r",
																	"try {\r",
																	"    listRecordsOfFlowOperationKey = FindOperationKeyForOperationName(\"/v1/list-records-of-flow\", ltpList);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Reference objects could not be extracted.\");\r",
																	"} \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.set(\"listRecordsOfFlowOperationKey\", listRecordsOfFlowOperationKey);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"function FindOperationKeyForOperationName(operationName, ltpList) {\r",
																	"    let operationKey;\r",
																	"    operationKey = \"\";\r",
																	"    try {\r",
																	"         let sampleUuid;\r",
																	"         for ( let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"op-s-\")){\r",
																	"                let sampleOperationName;\r",
																	"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																	"                if(sampleOperationName == operationName) {\r",
																	"                    operationKey = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"                    return operationKey; \r",
																	"                }\r",
																	"            }\r",
																	"         }\r",
																	"\r",
																	"    } catch (error) {\r",
																	"        console.log(\" ! Exception in function : FindOperationKeyForOperationName\")\r",
																	"    }\r",
																	"    return operationKey;\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "sampling  /v1/regard-application",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"var applicationName;\r",
																	"var releaseNumber;\r",
																	"var protocol;\r",
																	"var address;\r",
																	"var port;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"    \r",
																	"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"\r",
																	"    let httpClientLtp;\r",
																	"    httpClientLtp = pm.collectionVariables.get(\"httpClientLtp\");\r",
																	"\r",
																	"    applicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																	"    releaseNumber = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																	"\r",
																	"    let tcpClientLtp;\r",
																	"    tcpClientLtp = pm.collectionVariables.get(\"tcpClientLtp\");\r",
																	"\r",
																	"    protocol = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																	"    protocol = protocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																	"\r",
																	"    address = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																	"    port = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"        + '\"application-name\" : ' + '\"' + applicationName + '\",'\r",
																	"        + '\"release-number\" : ' + '\"' + releaseNumber + '\",'\r",
																	"        + '\"protocol\" : ' + '\"' + protocol + '\",'\r",
																	"        + '\"address\" : ' + JSON.stringify(address) + ','\r",
																	"        + '\"port\" : ' + port\r",
																	"    +'}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.set(\"user\", USER_NAME);\r",
																	"    pm.collectionVariables.set(\"originator\", ORIGINATOR);\r",
																	"    pm.collectionVariables.set(\"xCorrelator\", X_CORRELATOR);\r",
																	"    pm.collectionVariables.set(\"traceIndicator\", TRACE_INDICATOR);\r",
																	"    pm.collectionVariables.set(\"customerJourney\", CUSTOMER_JOURNEY);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/regard-application\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const currentCount = 0;\r",
																	"try {\r",
																	"\tpm.collectionVariables.set(\"currentCount\", currentCount);\r",
																	"\r",
																	"} catch(error) {\r",
																	"    console.log(\" !Could not set currentCount. \");\r",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "204",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected ExecutionAndTraceLog/v1/list-records-of-flow for /v1/regard-application:: Request notified?",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"var applicationProtocol;\r",
																	"var applicationAddress;\r",
																	"var applicationPort;\r",
																	"var xCorrelatorUnderTest;\r",
																	"var latestMatch;\r",
																	"var numberOfRecords;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let executionAndTraceLogTcpClientLtp;\r",
																	"    executionAndTraceLogTcpClientLtp = pm.collectionVariables.get(\"executionAndTraceLogTcpClientLtp\");\r",
																	"    \r",
																	"    applicationProtocol = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																	"    applicationProtocol = applicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																	"    applicationAddress = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																	"    if(applicationAddress.hasOwnProperty(\"ip-address\")) {\r",
																	"        applicationAddress = applicationAddress[\"ip-address\"][\"ipv-4-address\"];\r",
																	"    } else {\r",
																	"        applicationAddress = applicationAddress[\"domain-name\"];\r",
																	"    }\r",
																	"    applicationPort = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																	"\r",
																	"    OPERATION_KEY = pm.collectionVariables.get(\"listRecordsOfFlowOperationKey\");\r",
																	"    xCorrelatorUnderTest = pm.collectionVariables.get(\"xCorrelator\");\r",
																	"    latestMatch = 0;\r",
																	"    numberOfRecords = 100;\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error)\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"                + '\"x-correlator\": \"' + xCorrelatorUnderTest +'\",'\r",
																	"                + '\"latest-match\": ' + latestMatch + ','\r",
																	"                + '\"number-of-records\":' + numberOfRecords\r",
																	"                + '}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = applicationProtocol + \"://\" + applicationAddress + \":\" + applicationPort + \"/v1/list-records-of-flow\";\r",
																	"    //URI = \"http://9d098835-4e91-48f3-9761-04a82ff2843e.mock.pstmn.io/v1/list-records-of-flow\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0, length);\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Constant variables\r",
																	"****************************************************************************************/\r",
																	"var retryMaxCount;\r",
																	"var retryWaitingPeriod;\r",
																	"var currentCount;\r",
																	"try {\r",
																	"    retryMaxCount = pm.environment.get(\"retryMaxCount\");\r",
																	"    retryWaitingPeriod = pm.environment.get(\"retryWaitingPeriod\");\r",
																	"    currentCount = pm.collectionVariables.get(\"currentCount\");\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not load constant variables Data. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var expectedXCorrelator;\r",
																	"var expectedUser;\r",
																	"var expectedOriginator;\r",
																	"var expectedTraceIndicator;\r",
																	"var expectedApplicationName;\r",
																	"var expectedReleaseNumber;\r",
																	"var expectedOperationName;\r",
																	"try {\r",
																	"    expectedXCorrelator = pm.collectionVariables.get(\"xCorrelator\");\r",
																	"    expectedUser = pm.collectionVariables.get(\"user\");\r",
																	"    expectedOriginator = pm.collectionVariables.get(\"originator\");\r",
																	"    expectedTraceIndicator = pm.collectionVariables.get(\"traceIndicator\");\r",
																	"\r",
																	"    let expectedHttpServerLtp;\r",
																	"    expectedHttpServerLtp = pm.collectionVariables.get(\"httpServerLtp\");\r",
																	"    expectedApplicationName = expectedHttpServerLtp[\"layer-protocol\"][0][\"http-server-interface-1-0:http-server-interface-pac\"][\"http-server-interface-capability\"][\"application-name\"];\r",
																	"    expectedReleaseNumber = expectedHttpServerLtp[\"layer-protocol\"][0][\"http-server-interface-1-0:http-server-interface-pac\"][\"http-server-interface-capability\"][\"release-number\"];\r",
																	"\r",
																	"    let expectedOperationServer;\r",
																	"    expectedOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"    expectedOperationName = expectedOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not load Input Data. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"var serviceRecordList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"    if(Math.floor(RESPONSE_CODE/100) === 2) {\r",
																	"        serviceRecordList = JSON.parse(response.stream);\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"POST ExecutionAndTraceLog/v1/list-records-of-flow responds 200\", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(200);\r",
																	"    });\r",
																	"\r",
																	"    let foundAnEntryWithTheExpectedHeaderValuesInEatl;\r",
																	"    foundAnEntryWithTheExpectedHeaderValuesInEatl = false;\r",
																	"    let responseCodeofTriggeredForwarding;\r",
																	"    responseCodeofTriggeredForwarding = 0;\r",
																	"    for(let i=0; i<serviceRecordList.length; i++)  {\r",
																	"        if( serviceRecordList[i][\"application-name\"] == expectedApplicationName\r",
																	"                && serviceRecordList[i][\"release-number\"] == expectedReleaseNumber\r",
																	"                && serviceRecordList[i][\"operation-name\"] == expectedOperationName\r",
																	"                && serviceRecordList[i][\"x-correlator\"] == expectedXCorrelator\r",
																	"                && serviceRecordList[i][\"user\"] == expectedUser\r",
																	"                && serviceRecordList[i][\"originator\"] == expectedOriginator\r",
																	"                && serviceRecordList[i][\"trace-indicator\"] == expectedTraceIndicator ) {\r",
																	"\r",
																	"            foundAnEntryWithTheExpectedHeaderValuesInEatl = true;\r",
																	"            responseCodeofTriggeredForwarding =  serviceRecordList[i][\"response-code\"];\r",
																	"            break;\r",
																	"        }\r",
																	"    }\r",
																	"\r",
																	"    if (foundAnEntryWithTheExpectedHeaderValuesInEatl == false) {\r",
																	"        if( (currentCount < retryMaxCount) ) {\r",
																	"            setTimeout(()=>{\r",
																	"                postman.setNextRequest(request.name);\r",
																	"                currentCount = currentCount + 1;\r",
																	"                pm.collectionVariables.set(\"currentCount\", currentCount);\r",
																	"            }, retryWaitingPeriod);\r",
																	"        } else {\r",
																	"            pm.test(\"The request has been notified and the Parameter values have been processed\", function () {\r",
																	"                pm.expect(foundAnEntryWithTheExpectedHeaderValuesInEatl).to.be.true;        \r",
																	"            });\r",
																	"        }\r",
																	"    } else {\r",
																	"        pm.test(\"The request has been notified and the Parameter values have been processed with response-code 204\", function () {\r",
																	"            pm.expect(responseCodeofTriggeredForwarding).to.equal(204);    \r",
																	"        });\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"description": "## Gets the service consumption indicated to EaTL and the Parameters of the request processed?\n\n#### Requires:\n- ExecutionAndTraceLog server to operate\n\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - search CC for output fc-port of ServiceRequestCausesLoggingRequest, \nits corresponding op-c, http-c and tcp-c, storing them for later verification request\n  - searching CC for op-s of /v1/regard-application, storing operation-key\n  - searching CC for output fc-port of NewApplicationCausesRequestForInquiringOamRequestApprovals, find corresponding op-c, http-c and tcp-c, store them\n- GETting EaTL/CC (while using IP, protocol and port from above)\n  - searching CC for op-c of /v1/list-records-of-flow, storing operation-key\n- POST /v1/regard-application\n   - all attributes according to chosen http-c, tcp-c\n   - operation-key from above\n   - reasonable parameters\n\n#### Testing:\n- POST ExecutionAndTraceLog/v1/list-records-of-flow with \n   - IP, protocol and port from above\n   - operation-key from above\n   - DummyValue of x-correlator\n   - checking response for entry with application-name==AA and operation-name==/v1/regard-application\n   - checking same record for containing DummyXCorrelator &DummyTraceIndicator\n\n#### Clearing:\n- not applicable"
										}
									]
								},
								{
									"name": "Gate",
									"item": [
										{
											"name": "for gating /v1/regard-application to acceptance testing",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var TYPE_OF_TESTING;\r",
															"var URI;\r",
															"try {\r",
															"    TYPE_OF_TESTING = pm.environment.get(\"typeOfTesting\");\r",
															"    URI = pm.environment.get(\"dummyUri\");\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Loading Input Data failed.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Updating Environmental Variables and Determining the next Step\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    if ( TYPE_OF_TESTING === \"Acceptance\" ) {\r",
															"        postman.setNextRequest();\r",
															"    } else {\r",
															"        postman.setNextRequest(\"for exiting /v1/regard-application\");\r",
															"    }\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Updating Environmental Variables and Determining the next Step failed.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    pm.variables.clear();\r",
															"\r",
															"    let REQUEST_BODY;\r",
															"    REQUEST_BODY = \"\";\r",
															"\r",
															"    let AUTHORIZATION;\r",
															"    AUTHORIZATION = \"\";\r",
															"\r",
															"    let OPERATION_KEY;\r",
															"    OPERATION_KEY = \"\";\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
															"    pm.request.headers.upsert({key:\"operationKey\", value:OPERATION_KEY});\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:\"application/json\"});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Setting Local Variables and Preparing the Request failed.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Acceptance",
									"item": [
										{
											"name": "life-cycle-state propogated?",
											"item": [
												{
													"name": "reference /core-model-1-4:control-construct",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n----- /v1/regard-application acceptance -- life-cycle-state propogated? -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Environment variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY = \"\";\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var ltpList;\r",
																	"var fcList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    let responseCode;\r",
																	"    responseCode = parseInt(response.code);\r",
																	"    \r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        let responseObject;\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																	"        fcList = responseObject[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
																	"\r",
																	"    } else {\r",
																	"        ltpList = [];\r",
																	"        fcList = [];\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! ltpList could not be extracted.\");\r",
																	"}\r",
																	"\r",
																	"var currentOperationServer;\r",
																	"var httpClientLtp;\r",
																	"var tcpClientLtp;\r",
																	"try {\r",
																	"    currentOperationServer = FindOperationServer(\"/v1/regard-application\", ltpList);\r",
																	"\r",
																	"    //Inquiring OAM approvals\r",
																	"    let outputFcPortListInquireOamRequestApprovals;\r",
																	"    outputFcPortListInquireOamRequestApprovals = FindOutputFcPortList(\"NewApplicationCausesRequestForInquiringOamRequestApprovals\", fcList);\r",
																	"    let ltpInstance = FindRandomLtpInstancesFromFc(outputFcPortListInquireOamRequestApprovals, ltpList)\r",
																	"    httpClientLtp = ltpInstance.httpClientLtp;\r",
																	"    tcpClientLtp = FindServingLtp(httpClientLtp, ltpList);\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Reference objects could not be extracted.\");\r",
																	"} \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.clear();\r",
																	"    \r",
																	"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																	"    pm.collectionVariables.set(\"httpClientLtp\", httpClientLtp);\r",
																	"    pm.collectionVariables.set(\"tcpClientLtp\", tcpClientLtp);\r",
																	"\r",
																	"    pm.collectionVariables.set(\"ltpList\", ltpList);\r",
																	"    pm.collectionVariables.set(\"fcList\", fcList);\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function FindOperationServer(operationName, ltpList) {\r",
																	"    let operationServer;\r",
																	"    operationServer = \"\";\r",
																	"    try {\r",
																	"        let sampleUuid;\r",
																	"        for(let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"op-s-\")) {\r",
																	"                let sampleOperationName;\r",
																	"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																	"                if(sampleOperationName == operationName) {\r",
																	"                    operationServer = ltpList[i];\r",
																	"                    return operationServer;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																	"    }\r",
																	"    return operationServer;\r",
																	"}\r",
																	"\r",
																	"function FindRandomLtpInstancesFromFc(outputFcPortList, ltpList) {\r",
																	"    let ltpInstance = {};\r",
																	"    try {\r",
																	"        for ( let i=0; i<outputFcPortList.length; i++ ) {\r",
																	"            let randomOutputFcPort = outputFcPortList[Math.floor(Math.random() * outputFcPortList.length)];\r",
																	"            let outputLtpUuid = randomOutputFcPort[\"logical-termination-point\"];\r",
																	"            let operationClientLtp = FindActualInstanceByUuid(outputLtpUuid, ltpList);\r",
																	"\r",
																	"            let httpClientLtp = FindServingLtp(operationClientLtp, ltpList);\r",
																	"            let sampleApplicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																	"\r",
																	"            if (sampleApplicationName != \"AdministratorAdministration\") {\r",
																	"\t\t\t\tltpInstance = { httpClientLtp, operationClientLtp };\r",
																	"                break;\r",
																	"            }\r",
																	"        }\r",
																	"    } catch(error) {\r",
																	"        console.log(error);\r",
																	"        console.log(\"! Exception in function : FindRandomLtpInstancesFromFc. \")\r",
																	"    } \r",
																	"    return ltpInstance;\r",
																	"}\r",
																	"\r",
																	"function FindOutputFcPortList(forwardingName, fcList) {\r",
																	"    let outputFcPortList;\r",
																	"    outputFcPortList = [];\r",
																	"    try {\r",
																	"        for( let i=0; i<fcList.length; i++ ) {\r",
																	"            for(let j=0; j<fcList[i][\"name\"].length; j++) {               \r",
																	"                if(fcList[i][\"name\"][j][\"value\"] == forwardingName) {\r",
																	"                    fcPortList = fcList[i][\"fc-port\"];\r",
																	"                    for(let k=0;k<fcPortList.length;k++) {\r",
																	"                        if(fcPortList[k][\"port-direction\"] == \"core-model-1-4:PORT_DIRECTION_TYPE_OUTPUT\") {\r",
																	"                            outputFcPortList.push(fcPortList[k]);\r",
																	"                        }\r",
																	"                    }\r",
																	"                    return outputFcPortList;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function FindOutputFcPortList. \");\r",
																	"    }\r",
																	"    return outputFcPortList;\r",
																	"}\r",
																	"\r",
																	"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
																	"    let actualInstance;\r",
																	"    actualInstance = {};\r",
																	"    try {\r",
																	"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
																	"            let sampleUuid;\r",
																	"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
																	"            if( sampleUuid == expectedUuid ) {\r",
																	"                actualInstance = actualLtpList[i];\r",
																	"                return actualInstance;\r",
																	"            }\r",
																	"        }\r",
																	"\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																	"    }\r",
																	"    return undefined;\r",
																	"}\r",
																	"\r",
																	"function FindServingLtp(clientLtp, ltpList) {\r",
																	"    let servingLtp;\r",
																	"    servingLtp = {};\r",
																	"    try{\r",
																	"        let serverLtpUuid;\r",
																	"        serverLtpUuid = clientLtp[\"server-ltp\"][0];\r",
																	"        for( let i=0; i<ltpList.length; i++ ) {\r",
																	"            let sampleUuid;\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if( sampleUuid == serverLtpUuid ) {\r",
																	"                servingLtp = ltpList[i];\r",
																	"                return servingLtp;\r",
																	"            }\r",
																	"        }\r",
																	"    } catch(error) {\r",
																	"        console.log(error);\r",
																	"        console.log(\"! Exception in function : FindServingLtp. \")\r",
																	"    }\r",
																	"    return servingLtp;\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "dummy life-cycle-state",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var operationServerUuid;\r",
																	"var dummyLifeCycleState;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"    \r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"\r",
																	"    operationServerUuid = currentOperationServer[\"uuid\"];\r",
																	"\r",
																	"    currentLifeCycleState = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"life-cycle-state\"];\r",
																	"\r",
																	"    dummyLifeCycleState = GenerateDummyLifeCycleState(currentLifeCycleState);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.set(\"dummyLifeCycleState\", dummyLifeCycleState);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl \r",
																	"            + \"/core-model-1-4:control-construct/logical-termination-point=\"\r",
																	"            + operationServerUuid\r",
																	"            + \"/layer-protocol=0/operation-server-interface-1-0:operation-server-interface-pac/operation-server-interface-configuration/life-cycle-state\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY = '{ '\r",
																	"                    +   '\"operation-server-interface-1-0:life-cycle-state\": \"' + dummyLifeCycleState + '\"'\r",
																	"                    + ' }';\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error)\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"function GenerateDummyLifeCycleState(currentLifeCycleState) {\r",
																	"    let alternativeLifeCycleStateTypeList;\r",
																	"    alternativeLifeCycleStateTypeList = [  \"operation-server-interface-1-0:LIFE_CYCLE_STATE_TYPE_EXPERIMENTAL\",\r",
																	"                                            \"operation-server-interface-1-0:LIFE_CYCLE_STATE_TYPE_OPERATIONAL\",\r",
																	"                                            \"operation-server-interface-1-0:LIFE_CYCLE_STATE_TYPE_DEPRECATED\", \r",
																	"                                            \"operation-server-interface-1-0:LIFE_CYCLE_STATE_TYPE_OBSOLETE\",\r",
																	"                                            \"operation-server-interface-1-0:LIFE_CYCLE_STATE_TYPE_UNKNOWN\",\r",
																	"                                            \"operation-server-interface-1-0:LIFE_CYCLE_STATE_TYPE_NOT_YET_DEFINED\"\r",
																	"                                        ];\r",
																	"    let indexOfCurrentLifeCycleState;\r",
																	"    indexOfCurrentLifeCycleState = alternativeLifeCycleStateTypeList.indexOf(currentLifeCycleState);\r",
																	"    if (indexOfCurrentLifeCycleState > -1) {\r",
																	"        alternativeLifeCycleStateTypeList.splice(indexOfCurrentLifeCycleState, 1);\r",
																	"    }\r",
																	"\r",
																	"    let alternativeLifeCycleState;\r",
																	"    let alternativeLifeCycleStateTypeIndex;\r",
																	"    alternativeLifeCycleStateTypeIndex = Math.floor(Math.random() * alternativeLifeCycleStateTypeList.length);\r",
																	"    alternativeLifeCycleState = alternativeLifeCycleStateTypeList[alternativeLifeCycleStateTypeIndex]; \r",
																	"\r",
																	"    return alternativeLifeCycleState;\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"PUT dummy life-cycle-state responds 204\", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(204);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "204",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected /v1/regard-application",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"var applicationName;\r",
																	"var releaseNumber;\r",
																	"var protocol;\r",
																	"var address;\r",
																	"var port;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"    \r",
																	"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"\r",
																	"    let httpClientLtp;\r",
																	"    httpClientLtp = pm.collectionVariables.get(\"httpClientLtp\");\r",
																	"\r",
																	"    applicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																	"    releaseNumber = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																	"\r",
																	"    let tcpClientLtp;\r",
																	"    tcpClientLtp = pm.collectionVariables.get(\"tcpClientLtp\");\r",
																	"\r",
																	"    protocol = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																	"    protocol = protocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																	"\r",
																	"    address = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																	"    port = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"        + '\"application-name\" : ' + '\"' + applicationName + '\",'\r",
																	"        + '\"release-number\" : ' + '\"' + releaseNumber + '\",'\r",
																	"        + '\"protocol\" : ' + '\"' + protocol + '\",'\r",
																	"        + '\"address\" : ' + JSON.stringify(address) + ','\r",
																	"        + '\"port\" : ' + port\r",
																	"    +'}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/regard-application\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var expectedLifeCycleState;\r",
																	"try {\r",
																	"    let dummyLifeCycleState;\r",
																	"    dummyLifeCycleState = pm.collectionVariables.get(\"dummyLifeCycleState\");\r",
																	"\r",
																	"    let prefixLength = ('operation-server-interface-1-0:LIFE_CYCLE_STATE_TYPE_').length;     \r",
																	"    expectedLifeCycleState = dummyLifeCycleState.substring(prefixLength);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not load Input Data. \");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"var actualLifeCycleState;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"    let RESPONSE_HEADERS;\r",
																	"    RESPONSE_HEADERS = pm.response.headers;  \r",
																	"\r",
																	"    actualLifeCycleState = RESPONSE_HEADERS.get(\"life-cycle-state\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"Provides dummy life-cycle-state in the header of the response: '\" + expectedLifeCycleState + \"' \", function () {\r",
																	"        pm.expect(actualLifeCycleState).to.equal(expectedLifeCycleState);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "204",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Initial life-cycle-state",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var operationServerUuid;\r",
																	"var initialLifeCycleState;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"\r",
																	"    operationServerUuid = currentOperationServer[\"uuid\"];\r",
																	"\r",
																	"    initialLifeCycleState = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"life-cycle-state\"];\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl \r",
																	"            + \"/core-model-1-4:control-construct/logical-termination-point=\"\r",
																	"            + operationServerUuid\r",
																	"            + \"/layer-protocol=0/operation-server-interface-1-0:operation-server-interface-pac/operation-server-interface-configuration/life-cycle-state\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY =   '{ '\r",
																	"                    +   '\"operation-server-interface-1-0:life-cycle-state\": \"' + initialLifeCycleState + '\"'\r",
																	"                    + ' }';\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"    \r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});  \r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"PUT Initial life-cycle-state responds 204 \", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(204);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "204",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"description": "## Gets lifeCycleState propagated?\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for op-s of /v1/regard-application, storing operation-key\n  - searching CC for output fc-port of NewApplicationCausesRequestForInquiringOamRequestApprovals, find corresponding op-c, http-c and tcp-c, store them.\n- PUTting op-s-configuration/life-cycle-state with random alternative value\n- POST /v1/regard-application\n  - all attributes according to chosen http-c and tcp-c\n  - operation-key from above\n  - reasonable parameters\n\n#### Testing:\n- checking for ResponseCode==204\n- checking for lifeCycleState being identical with alternative op-s-configuration/life-cycle-state\n\n#### Clearing:\n- PUTting op-s-configuration/life-cycle-state back to original value"
										},
										{
											"name": "Attribute completeness",
											"item": [
												{
													"name": "reference /core-model-1-4:control-construct",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n-----  /v1/regard-application acceptance -- attribute completeness -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Environment variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY = \"\";\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var ltpList;\r",
																	"var fcList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    let responseCode;\r",
																	"    responseCode = parseInt(response.code);\r",
																	"    \r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        let responseObject;\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																	"        fcList = responseObject[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
																	"\r",
																	"    } else {\r",
																	"        ltpList = [];\r",
																	"        fcList = [];\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! ltpList could not be extracted.\");\r",
																	"}\r",
																	"\r",
																	"var currentOperationServer;\r",
																	"var httpClientLtp;\r",
																	"var tcpClientLtp;\r",
																	"try {\r",
																	"    currentOperationServer = FindOperationServer(\"/v1/regard-application\", ltpList);\r",
																	"\r",
																	"    //Inquiring OAM approvals\r",
																	"    let outputFcPortListInquireOamRequestApprovals;\r",
																	"    outputFcPortListInquireOamRequestApprovals = FindOutputFcPortList(\"NewApplicationCausesRequestForInquiringOamRequestApprovals\", fcList);\r",
																	"    let ltpInstance = FindRandomLtpInstancesFromFc(outputFcPortListInquireOamRequestApprovals, ltpList)\r",
																	"    httpClientLtp = ltpInstance.httpClientLtp;\r",
																	"    tcpClientLtp = FindServingLtp(httpClientLtp, ltpList);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Reference objects could not be extracted.\");\r",
																	"} \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.clear();\r",
																	"    \r",
																	"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																	"    pm.collectionVariables.set(\"httpClientLtp\", httpClientLtp);\r",
																	"    pm.collectionVariables.set(\"tcpClientLtp\", tcpClientLtp);\r",
																	"\r",
																	"    pm.collectionVariables.set(\"ltpList\", ltpList);\r",
																	"    pm.collectionVariables.set(\"fcList\", fcList);\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function FindOperationServer(operationName, ltpList) {\r",
																	"    let operationServer;\r",
																	"    operationServer = \"\";\r",
																	"    try {\r",
																	"        let sampleUuid;\r",
																	"        for(let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"op-s-\")) {\r",
																	"                let sampleOperationName;\r",
																	"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																	"                if(sampleOperationName == operationName) {\r",
																	"                    operationServer = ltpList[i];\r",
																	"                    return operationServer;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																	"    }\r",
																	"    return operationServer;\r",
																	"}\r",
																	"\r",
																	"function FindRandomLtpInstancesFromFc(outputFcPortList, ltpList) {\r",
																	"    let ltpInstance = {};\r",
																	"    try {\r",
																	"        for ( let i=0; i<outputFcPortList.length; i++ ) {\r",
																	"            let randomOutputFcPort = outputFcPortList[Math.floor(Math.random() * outputFcPortList.length)];\r",
																	"            let outputLtpUuid = randomOutputFcPort[\"logical-termination-point\"];\r",
																	"            let operationClientLtp = FindActualInstanceByUuid(outputLtpUuid, ltpList);\r",
																	"\r",
																	"            let httpClientLtp = FindServingLtp(operationClientLtp, ltpList);\r",
																	"            let sampleApplicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																	"\r",
																	"            if (sampleApplicationName != \"AdministratorAdministration\") {\r",
																	"\t\t\t\tltpInstance = { httpClientLtp, operationClientLtp };\r",
																	"                break;\r",
																	"            }\r",
																	"        }\r",
																	"    } catch(error) {\r",
																	"        console.log(error);\r",
																	"        console.log(\"! Exception in function : FindRandomLtpInstancesFromFc. \")\r",
																	"    } \r",
																	"    return ltpInstance;\r",
																	"}\r",
																	"\r",
																	"\r",
																	"function FindOutputFcPortList(forwardingName, fcList) {\r",
																	"    let outputFcPortList;\r",
																	"    outputFcPortList = [];\r",
																	"    try {\r",
																	"        for( let i=0; i<fcList.length; i++ ) {\r",
																	"            for(let j=0; j<fcList[i][\"name\"].length; j++) {               \r",
																	"                if(fcList[i][\"name\"][j][\"value\"] == forwardingName) {\r",
																	"                    fcPortList = fcList[i][\"fc-port\"];\r",
																	"                    for(let k=0;k<fcPortList.length;k++) {\r",
																	"                        if(fcPortList[k][\"port-direction\"] == \"core-model-1-4:PORT_DIRECTION_TYPE_OUTPUT\") {\r",
																	"                            outputFcPortList.push(fcPortList[k]);\r",
																	"                        }\r",
																	"                    }\r",
																	"                    return outputFcPortList;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																	"    }\r",
																	"    return outputFcPortList;\r",
																	"}\r",
																	"\r",
																	"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
																	"    let actualInstance;\r",
																	"    actualInstance = {};\r",
																	"    try {\r",
																	"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
																	"            let sampleUuid;\r",
																	"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
																	"            if( sampleUuid == expectedUuid ) {\r",
																	"                actualInstance = actualLtpList[i];\r",
																	"                return actualInstance;\r",
																	"            }\r",
																	"        }\r",
																	"\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																	"    }\r",
																	"    return undefined;\r",
																	"}\r",
																	"\r",
																	"function FindServingLtp(clientLtp, ltpList) {\r",
																	"    let servingLtp;\r",
																	"    servingLtp = {};\r",
																	"    try{\r",
																	"        let serverLtpUuid;\r",
																	"        serverLtpUuid = clientLtp[\"server-ltp\"][0];\r",
																	"        for( let i=0; i<ltpList.length; i++ ) {\r",
																	"            let sampleUuid;\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if( sampleUuid == serverLtpUuid ) {\r",
																	"                servingLtp = ltpList[i];\r",
																	"                return servingLtp;\r",
																	"            }\r",
																	"        }\r",
																	"    } catch(error) {\r",
																	"        console.log(error);\r",
																	"        console.log(\"! Exception in function : FindServingLtp. \")\r",
																	"    }\r",
																	"    return servingLtp;\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected /v1/regard-application - attribute completeness",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"var applicationName;\r",
																	"var releaseNumber;\r",
																	"var protocol;\r",
																	"var address;\r",
																	"var port;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"    \r",
																	"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"\r",
																	"    let httpClientLtp;\r",
																	"    httpClientLtp = pm.collectionVariables.get(\"httpClientLtp\");\r",
																	"\r",
																	"    applicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																	"    releaseNumber = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																	"\r",
																	"    let tcpClientLtp;\r",
																	"    tcpClientLtp = pm.collectionVariables.get(\"tcpClientLtp\");\r",
																	"\r",
																	"    protocol = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																	"    protocol = protocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																	"\r",
																	"    address = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																	"    port = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"        + '\"application-name\" : ' + '\"' + applicationName + '\",'\r",
																	"        + '\"release-number\" : ' + '\"' + releaseNumber + '\",'\r",
																	"        + '\"protocol\" : ' + '\"' + protocol + '\",'\r",
																	"        + '\"address\" : ' + JSON.stringify(address) + ','\r",
																	"        + '\"port\" : ' + port\r",
																	"    +'}';\r",
																	"\r",
																	"    let attributes;\r",
																	"    attributes = [\"application-name\", \"release-number\", \"protocol\", \"address\", \"port\"];\r",
																	"    let missingAttribute;\r",
																	"    missingAttribute = GetMissingAttribute(attributes);\r",
																	"\r",
																	"    REQUEST_BODY = JSON.parse(REQUEST_BODY);\r",
																	"    delete REQUEST_BODY[missingAttribute];\r",
																	"    REQUEST_BODY = JSON.stringify(REQUEST_BODY);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/regard-application\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	"\r",
																	"function GetMissingAttribute(attributes) {\r",
																	"\tlet missingAttribute;\r",
																	"\tmissingAttribute = attributes[Math.floor(Math.random()*attributes.length)];\r",
																	"\treturn missingAttribute;\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"POST /v1/regard-application responds 400, because of missing attribute\", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "400",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"description": "## Get attributes checked for completeness?\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for op-s of /v1/regard-application, storing operation-key\n  - searching CC for output fc-port of NewApplicationCausesRequestForInquiringOamRequestApprovals, find corresponding op-c, http-c and tcp-c, store them\n- POST /v1/regard-application\n  - all attributes according to chosen http-c and tcp-c BUT one randomly chosen attribute missing\n  - operation-key from above\n  - reasonable parameters\n\n#### Testing:\n- checking for ResponseCode==400\n\n#### Clearing:\n- not applicable"
										},
										{
											"name": "Attribute correctness",
											"item": [
												{
													"name": "application-name checked?",
													"item": [
														{
															"name": "reference /core-model-1-4:control-construct",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"console.log(\"\\n-----  /v1/regard-application acceptance -- application-name attribute checked? -------------------------------\");\r",
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Environment variables could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																			"\r",
																			"    let REQUEST_BODY;\r",
																			"    REQUEST_BODY = \"\";\r",
																			"\r",
																			"    let AUTHORIZATION;\r",
																			"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var ltpList;\r",
																			"var fcList;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"    \r",
																			"    let responseCode;\r",
																			"    responseCode = parseInt(response.code);\r",
																			"    \r",
																			"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																			"        let responseObject;\r",
																			"        responseObject = JSON.parse(response.stream);\r",
																			"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																			"        fcList = responseObject[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
																			"\r",
																			"    } else {\r",
																			"        ltpList = [];\r",
																			"        fcList = [];\r",
																			"    }\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! ltpList could not be extracted.\");\r",
																			"}\r",
																			"\r",
																			"var currentOperationServer;\r",
																			"var httpClientLtp;\r",
																			"var tcpClientLtp;\r",
																			"try {\r",
																			"    currentOperationServer = FindOperationServer(\"/v1/regard-application\", ltpList);\r",
																			"\r",
																			"    //Inquiring OAM approvals\r",
																			"    let outputFcPortListInquireOamRequestApprovals;\r",
																			"    outputFcPortListInquireOamRequestApprovals = FindOutputFcPortList(\"NewApplicationCausesRequestForInquiringOamRequestApprovals\", fcList);\r",
																			"    let ltpInstance = FindRandomLtpInstancesFromFc(outputFcPortListInquireOamRequestApprovals, ltpList)\r",
																			"    httpClientLtp = ltpInstance.httpClientLtp;\r",
																			"    tcpClientLtp = FindServingLtp(httpClientLtp, ltpList);\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Reference objects could not be extracted.\");\r",
																			"} \r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.collectionVariables.clear();\r",
																			"    \r",
																			"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																			"    pm.collectionVariables.set(\"httpClientLtp\", httpClientLtp);\r",
																			"    pm.collectionVariables.set(\"tcpClientLtp\", tcpClientLtp);\r",
																			"\r",
																			"    pm.collectionVariables.set(\"ltpList\", ltpList);\r",
																			"    pm.collectionVariables.set(\"fcList\", fcList);\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Collection variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"function FindOperationServer(operationName, ltpList) {\r",
																			"    let operationServer;\r",
																			"    operationServer = \"\";\r",
																			"    try {\r",
																			"        let sampleUuid;\r",
																			"        for(let i=0; i<ltpList.length; i++) {\r",
																			"            sampleUuid = ltpList[i][\"uuid\"];\r",
																			"            if(sampleUuid.includes(\"op-s-\")) {\r",
																			"                let sampleOperationName;\r",
																			"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																			"                if(sampleOperationName == operationName) {\r",
																			"                    operationServer = ltpList[i];\r",
																			"                    return operationServer;\r",
																			"                }\r",
																			"            }\r",
																			"        }\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																			"    }\r",
																			"    return operationServer;\r",
																			"}\r",
																			"\r",
																			"function FindRandomLtpInstancesFromFc(outputFcPortList, ltpList) {\r",
																			"    let ltpInstance = {};\r",
																			"    try {\r",
																			"        for ( let i=0; i<outputFcPortList.length; i++ ) {\r",
																			"            let randomOutputFcPort = outputFcPortList[Math.floor(Math.random() * outputFcPortList.length)];\r",
																			"            let outputLtpUuid = randomOutputFcPort[\"logical-termination-point\"];\r",
																			"            let operationClientLtp = FindActualInstanceByUuid(outputLtpUuid, ltpList);\r",
																			"\r",
																			"            let httpClientLtp = FindServingLtp(operationClientLtp, ltpList);\r",
																			"            let sampleApplicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																			"\r",
																			"            if (sampleApplicationName != \"AdministratorAdministration\") {\r",
																			"\t\t\t\tltpInstance = { httpClientLtp, operationClientLtp };\r",
																			"                break;\r",
																			"            }\r",
																			"        }\r",
																			"    } catch(error) {\r",
																			"        console.log(error);\r",
																			"        console.log(\"! Exception in function : FindRandomLtpInstancesFromFc. \")\r",
																			"    } \r",
																			"    return ltpInstance;\r",
																			"}\r",
																			"\r",
																			"function FindOutputFcPortList(forwardingName, fcList) {\r",
																			"    let outputFcPortList;\r",
																			"    outputFcPortList = [];\r",
																			"    try {\r",
																			"        for( let i=0; i<fcList.length; i++ ) {\r",
																			"            for(let j=0; j<fcList[i][\"name\"].length; j++) {               \r",
																			"                if(fcList[i][\"name\"][j][\"value\"] == forwardingName) {\r",
																			"                    fcPortList = fcList[i][\"fc-port\"];\r",
																			"                    for(let k=0;k<fcPortList.length;k++) {\r",
																			"                        if(fcPortList[k][\"port-direction\"] == \"core-model-1-4:PORT_DIRECTION_TYPE_OUTPUT\") {\r",
																			"                            outputFcPortList.push(fcPortList[k]);\r",
																			"                        }\r",
																			"                    }\r",
																			"                    return outputFcPortList;\r",
																			"                }\r",
																			"            }\r",
																			"        }\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																			"    }\r",
																			"    return outputFcPortList;\r",
																			"}\r",
																			"\r",
																			"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
																			"    let actualInstance;\r",
																			"    actualInstance = {};\r",
																			"    try {\r",
																			"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
																			"            let sampleUuid;\r",
																			"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
																			"            if( sampleUuid == expectedUuid ) {\r",
																			"                actualInstance = actualLtpList[i];\r",
																			"                return actualInstance;\r",
																			"            }\r",
																			"        }\r",
																			"\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																			"    }\r",
																			"    return undefined;\r",
																			"}\r",
																			"\r",
																			"function FindServingLtp(clientLtp, ltpList) {\r",
																			"    let servingLtp;\r",
																			"    servingLtp = {};\r",
																			"    try{\r",
																			"        let serverLtpUuid;\r",
																			"        serverLtpUuid = clientLtp[\"server-ltp\"][0];\r",
																			"        for( let i=0; i<ltpList.length; i++ ) {\r",
																			"            let sampleUuid;\r",
																			"            sampleUuid = ltpList[i][\"uuid\"];\r",
																			"            if( sampleUuid == serverLtpUuid ) {\r",
																			"                servingLtp = ltpList[i];\r",
																			"                return servingLtp;\r",
																			"            }\r",
																			"        }\r",
																			"    } catch(error) {\r",
																			"        console.log(error);\r",
																			"        console.log(\"! Exception in function : FindServingLtp. \")\r",
																			"    }\r",
																			"    return servingLtp;\r",
																			"}\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "GET",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "200",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Expected /v1/regard-application - incorrect application-name attribute",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"var OPERATION_KEY;\r",
																			"var dummyApplicationName;\r",
																			"var releaseNumber;\r",
																			"var protocol;\r",
																			"var address;\r",
																			"var port;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"    let currentOperationServer;\r",
																			"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																			"    \r",
																			"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																			"\r",
																			"    let httpClientLtp;\r",
																			"    httpClientLtp = pm.collectionVariables.get(\"httpClientLtp\");\r",
																			"\r",
																			"    dummyApplicationName = GenerateFaultyApplicationName();\r",
																			"    releaseNumber = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																			"\r",
																			"    let tcpClientLtp;\r",
																			"    tcpClientLtp = pm.collectionVariables.get(\"tcpClientLtp\");\r",
																			"    protocol = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																			"    protocol = protocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																			"\r",
																			"    address = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																			"    port = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Input Data could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Dummy Parameters\r",
																			"****************************************************************************************/\r",
																			"var USER_NAME;\r",
																			"var ORIGINATOR;\r",
																			"var X_CORRELATOR;\r",
																			"var TRACE_INDICATOR;\r",
																			"var CUSTOMER_JOURNEY;\r",
																			"try {\r",
																			"    USER_NAME = APPLICATION.userName;\r",
																			"    ORIGINATOR = \"Postman\";\r",
																			"    X_CORRELATOR = CreateXCorrelator();\r",
																			"    TRACE_INDICATOR = \"1\";\r",
																			"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																			"    \r",
																			"} catch (error) {\r",
																			"    console.log(\"! Could not define dummy values for parameters. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Request Body\r",
																			"****************************************************************************************/\r",
																			"var REQUEST_BODY;\r",
																			"try {\r",
																			"    REQUEST_BODY = '{'\r",
																			"        + '\"application-name\" : ' + '\"' + dummyApplicationName + '\",'\r",
																			"        + '\"release-number\" : ' + '\"' + releaseNumber + '\",'\r",
																			"        + '\"protocol\" : ' + '\"' + protocol + '\",'\r",
																			"        + '\"address\" : ' + JSON.stringify(address) + ','\r",
																			"        + '\"port\" : ' + port\r",
																			"    +'}';\r",
																			"} catch (error) {\r",
																			"    console.log(\"!Could not define request body. \");\r",
																			"}\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + \"/v1/regard-application\";\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																			"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																			"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																			"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																			"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"function CreateXCorrelator() {\r",
																			"    let xCorrelator;\r",
																			"    xCorrelator = \"\";\r",
																			"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(12);\r",
																			"    return xCorrelator;\r",
																			"}\r",
																			"\r",
																			"function GenerateRandomHexString(length) {\r",
																			"    var randomRandomHexString = \"\";\r",
																			"    while (randomRandomHexString.length < length) {\r",
																			"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																			"    }\r",
																			"    return randomRandomHexString.substring(0,length);\r",
																			"}\r",
																			"\r",
																			"function GenerateRandomString(length) {\r",
																			"    let randomString;\r",
																			"    randomString = \"\";\r",
																			"    try {\r",
																			"        let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r",
																			"        let charactersLength = characters.length;\r",
																			"        for (let i = 0; i < length; i++) {\r",
																			"            randomString += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																			"        }\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Could not generate random string. \");\r",
																			"    }\r",
																			"    return randomString;\r",
																			"}\r",
																			"\r",
																			"function GenerateFaultyApplicationName() {\r",
																			"    let faultyApplicationName;\r",
																			"    let length;\r",
																			"    let minLength;\r",
																			"    minLength = 0;\r",
																			"    let maxLength;\r",
																			"    maxLength = 2;\r",
																			"    length = Math.floor(Math.random() * maxLength) + minLength;\r",
																			"    faultyApplicationName = GenerateRandomString(length);\r",
																			"    return faultyApplicationName;\r",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var RESPONSE_CODE;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"\r",
																			"    RESPONSE_CODE = parseInt(response.code);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Response Code could not be extracted.\");\r",
																			"}    \r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Testing\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.test(\"POST /v1/regard-application responds 400, because of incorrect application-name\", function () {\r",
																			"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																			"    });\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Testing could not be executed.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "400",
																		"type": "default"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														}
													],
													"description": "## Get application-name checked for correctness?\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for op-s of /v1/regard-application, storing operation-key\n  - searching CC for output fc-port of NewApplicationCausesRequestForInquiringOamRequestApprovals, find corresponding op-c, http-c and tcp-c, store them\n- POST /v1/regard-application\n  - all attributes according to chosen http-c and tcp-c BUT application-name attribute with random dummy value with length<3\n  - operation-key from above\n  - reasonable parameters\n\n#### Testing:\n- checking for ResponseCode==400\n\n#### Clearing:\n- not applicable"
												},
												{
													"name": "release-number checked?",
													"item": [
														{
															"name": "reference /core-model-1-4:control-construct",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"console.log(\"\\n----- /v1/regard-application acceptance -- release-number checked? -------------------------------\");\r",
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Environment variables could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																			"\r",
																			"    let REQUEST_BODY;\r",
																			"    REQUEST_BODY = \"\";\r",
																			"\r",
																			"    let AUTHORIZATION;\r",
																			"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var ltpList;\r",
																			"var fcList;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"    \r",
																			"    let responseCode;\r",
																			"    responseCode = parseInt(response.code);\r",
																			"    \r",
																			"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																			"        let responseObject;\r",
																			"        responseObject = JSON.parse(response.stream);\r",
																			"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																			"        fcList = responseObject[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
																			"\r",
																			"    } else {\r",
																			"        ltpList = [];\r",
																			"        fcList = [];\r",
																			"    }\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! ltpList could not be extracted.\");\r",
																			"}\r",
																			"\r",
																			"var currentOperationServer;\r",
																			"var httpClientLtp;\r",
																			"var tcpClientLtp;\r",
																			"try {\r",
																			"    currentOperationServer = FindOperationServer(\"/v1/regard-application\", ltpList);\r",
																			"\r",
																			"    //Inquiring OAM approvals\r",
																			"    let outputFcPortListInquireOamRequestApprovals;\r",
																			"    outputFcPortListInquireOamRequestApprovals = FindOutputFcPortList(\"NewApplicationCausesRequestForInquiringOamRequestApprovals\", fcList);\r",
																			"    let ltpInstance = FindRandomLtpInstancesFromFc(outputFcPortListInquireOamRequestApprovals, ltpList)\r",
																			"    httpClientLtp = ltpInstance.httpClientLtp;\r",
																			"    tcpClientLtp = FindServingLtp(httpClientLtp, ltpList);\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Reference objects could not be extracted.\");\r",
																			"} \r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.collectionVariables.clear();\r",
																			"    \r",
																			"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																			"    pm.collectionVariables.set(\"httpClientLtp\", httpClientLtp);\r",
																			"    pm.collectionVariables.set(\"tcpClientLtp\", tcpClientLtp);\r",
																			"\r",
																			"    pm.collectionVariables.set(\"ltpList\", ltpList);\r",
																			"    pm.collectionVariables.set(\"fcList\", fcList);\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Collection variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"function FindOperationServer(operationName, ltpList) {\r",
																			"    let operationServer;\r",
																			"    operationServer = \"\";\r",
																			"    try {\r",
																			"        let sampleUuid;\r",
																			"        for(let i=0; i<ltpList.length; i++) {\r",
																			"            sampleUuid = ltpList[i][\"uuid\"];\r",
																			"            if(sampleUuid.includes(\"op-s-\")) {\r",
																			"                let sampleOperationName;\r",
																			"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																			"                if(sampleOperationName == operationName) {\r",
																			"                    operationServer = ltpList[i];\r",
																			"                    return operationServer;\r",
																			"                }\r",
																			"            }\r",
																			"        }\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																			"    }\r",
																			"    return operationServer;\r",
																			"}\r",
																			"\r",
																			"function FindRandomLtpInstancesFromFc(outputFcPortList, ltpList) {\r",
																			"    let ltpInstance = {};\r",
																			"    try {\r",
																			"        for ( let i=0; i<outputFcPortList.length; i++ ) {\r",
																			"            let randomOutputFcPort = outputFcPortList[Math.floor(Math.random() * outputFcPortList.length)];\r",
																			"            let outputLtpUuid = randomOutputFcPort[\"logical-termination-point\"];\r",
																			"            let operationClientLtp = FindActualInstanceByUuid(outputLtpUuid, ltpList);\r",
																			"\r",
																			"            let httpClientLtp = FindServingLtp(operationClientLtp, ltpList);\r",
																			"            let sampleApplicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																			"\r",
																			"            if (sampleApplicationName != \"AdministratorAdministration\") {\r",
																			"\t\t\t\tltpInstance = { httpClientLtp, operationClientLtp };\r",
																			"                break;\r",
																			"            }\r",
																			"        }\r",
																			"    } catch(error) {\r",
																			"        console.log(error);\r",
																			"        console.log(\"! Exception in function : FindRandomLtpInstancesFromFc. \")\r",
																			"    } \r",
																			"    return ltpInstance;\r",
																			"}\r",
																			"\r",
																			"\r",
																			"function FindOutputFcPortList(forwardingName, fcList) {\r",
																			"    let outputFcPortList;\r",
																			"    outputFcPortList = [];\r",
																			"    try {\r",
																			"        for( let i=0; i<fcList.length; i++ ) {\r",
																			"            for(let j=0; j<fcList[i][\"name\"].length; j++) {               \r",
																			"                if(fcList[i][\"name\"][j][\"value\"] == forwardingName) {\r",
																			"                    fcPortList = fcList[i][\"fc-port\"];\r",
																			"                    for(let k=0;k<fcPortList.length;k++) {\r",
																			"                        if(fcPortList[k][\"port-direction\"] == \"core-model-1-4:PORT_DIRECTION_TYPE_OUTPUT\") {\r",
																			"                            outputFcPortList.push(fcPortList[k]);\r",
																			"                        }\r",
																			"                    }\r",
																			"                    return outputFcPortList;\r",
																			"                }\r",
																			"            }\r",
																			"        }\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																			"    }\r",
																			"    return outputFcPortList;\r",
																			"}\r",
																			"\r",
																			"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
																			"    let actualInstance;\r",
																			"    actualInstance = {};\r",
																			"    try {\r",
																			"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
																			"            let sampleUuid;\r",
																			"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
																			"            if( sampleUuid == expectedUuid ) {\r",
																			"                actualInstance = actualLtpList[i];\r",
																			"                return actualInstance;\r",
																			"            }\r",
																			"        }\r",
																			"\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																			"    }\r",
																			"    return undefined;\r",
																			"}\r",
																			"\r",
																			"function FindServingLtp(clientLtp, ltpList) {\r",
																			"    let servingLtp;\r",
																			"    servingLtp = {};\r",
																			"    try{\r",
																			"        let serverLtpUuid;\r",
																			"        serverLtpUuid = clientLtp[\"server-ltp\"][0];\r",
																			"        for( let i=0; i<ltpList.length; i++ ) {\r",
																			"            let sampleUuid;\r",
																			"            sampleUuid = ltpList[i][\"uuid\"];\r",
																			"            if( sampleUuid == serverLtpUuid ) {\r",
																			"                servingLtp = ltpList[i];\r",
																			"                return servingLtp;\r",
																			"            }\r",
																			"        }\r",
																			"    } catch(error) {\r",
																			"        console.log(error);\r",
																			"        console.log(\"! Exception in function : FindServingLtp. \")\r",
																			"    }\r",
																			"    return servingLtp;\r",
																			"}\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "GET",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "200",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Expected /v1/regard-application - too-short release-number",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"console.log(\"\\n-----  too short release-number -------------------------------\");\r",
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"var OPERATION_KEY;\r",
																			"var applicationName;\r",
																			"var dummyReleaseNumber;\r",
																			"var protocol;\r",
																			"var address;\r",
																			"var port;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"    let currentOperationServer;\r",
																			"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																			"    \r",
																			"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																			"\r",
																			"    let httpClientLtp;\r",
																			"    httpClientLtp = pm.collectionVariables.get(\"httpClientLtp\");\r",
																			"\r",
																			"    applicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																			"    dummyReleaseNumber = FaultyReleaseNumber();\r",
																			"\r",
																			"    let tcpClientLtp;\r",
																			"    tcpClientLtp = pm.collectionVariables.get(\"tcpClientLtp\");\r",
																			"    protocol = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																			"    protocol = protocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																			"\r",
																			"    address = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																			"    port = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Input Data could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Dummy Parameters\r",
																			"****************************************************************************************/\r",
																			"var USER_NAME;\r",
																			"var ORIGINATOR;\r",
																			"var X_CORRELATOR;\r",
																			"var TRACE_INDICATOR;\r",
																			"var CUSTOMER_JOURNEY;\r",
																			"try {\r",
																			"    USER_NAME = APPLICATION.userName;\r",
																			"    ORIGINATOR = \"Postman\";\r",
																			"    X_CORRELATOR = CreateXCorrelator();\r",
																			"    TRACE_INDICATOR = \"1\";\r",
																			"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																			"    \r",
																			"} catch (error) {\r",
																			"    console.log(\"! Could not define dummy values for parameters. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Request Body\r",
																			"****************************************************************************************/\r",
																			"var REQUEST_BODY;\r",
																			"try {\r",
																			"    REQUEST_BODY = '{'\r",
																			"        + '\"application-name\" : ' + '\"' + applicationName + '\",'\r",
																			"        + '\"release-number\" : ' + '\"' + dummyReleaseNumber + '\",'\r",
																			"        + '\"protocol\" : ' + '\"' + protocol + '\",'\r",
																			"        + '\"address\" : ' + JSON.stringify(address) + ','\r",
																			"        + '\"port\" : ' + port\r",
																			"    +'}';\r",
																			"} catch (error) {\r",
																			"    console.log(\"!Could not define request body. \");\r",
																			"}\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + \"/v1/regard-application\";\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																			"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																			"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																			"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																			"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"function CreateXCorrelator() {\r",
																			"    let xCorrelator;\r",
																			"    xCorrelator = \"\";\r",
																			"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(12);\r",
																			"    return xCorrelator;\r",
																			"}\r",
																			"\r",
																			"function GenerateRandomHexString(length) {\r",
																			"    var randomRandomHexString = \"\";\r",
																			"    while (randomRandomHexString.length < length) {\r",
																			"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																			"    }\r",
																			"    return randomRandomHexString.substring(0,length);\r",
																			"}\r",
																			"\r",
																			"function FaultyReleaseNumber() {\r",
																			"    let releaseNumber;\r",
																			"    let releaseNumberParts = [];\r",
																			"    for (let i = 0; i < 2; i++) {\r",
																			"        releaseNumberParts[i] = Math.floor(Math.random() * 10);\r",
																			"    }\r",
																			"    releaseNumber = releaseNumberParts[0] + \".\" + releaseNumberParts[1];\r",
																			"    return releaseNumber;\r",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var RESPONSE_CODE;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"\r",
																			"    RESPONSE_CODE = parseInt(response.code);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Response Code could not be extracted.\");\r",
																			"}    \r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Testing\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.test(\"POST /v1/regard-application responds 400, because of too short release-number\", function () {\r",
																			"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																			"    });\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Testing could not be executed.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "400",
																		"type": "default"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Expected  /v1/regard-application - too-long release-number",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"console.log(\"\\n-----  too long release-number -------------------------------\");\r",
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"var OPERATION_KEY;\r",
																			"var applicationName;\r",
																			"var dummyReleaseNumber;\r",
																			"var protocol;\r",
																			"var address;\r",
																			"var port;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"    let currentOperationServer;\r",
																			"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																			"    \r",
																			"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																			"\r",
																			"    let httpClientLtp;\r",
																			"    httpClientLtp = pm.collectionVariables.get(\"httpClientLtp\");\r",
																			"\r",
																			"    applicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																			"    dummyReleaseNumber = FaultyReleaseNumber();\r",
																			"\r",
																			"    let tcpClientLtp;\r",
																			"    tcpClientLtp = pm.collectionVariables.get(\"tcpClientLtp\");\r",
																			"\r",
																			"    protocol = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																			"    protocol = protocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																			"\r",
																			"    address = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																			"    port = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Input Data could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Dummy Parameters\r",
																			"****************************************************************************************/\r",
																			"var USER_NAME;\r",
																			"var ORIGINATOR;\r",
																			"var X_CORRELATOR;\r",
																			"var TRACE_INDICATOR;\r",
																			"var CUSTOMER_JOURNEY;\r",
																			"try {\r",
																			"    USER_NAME = APPLICATION.userName;\r",
																			"    ORIGINATOR = \"Postman\";\r",
																			"    X_CORRELATOR = CreateXCorrelator();\r",
																			"    TRACE_INDICATOR = \"1\";\r",
																			"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																			"    \r",
																			"} catch (error) {\r",
																			"    console.log(\"! Could not define dummy values for parameters. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Request Body\r",
																			"****************************************************************************************/\r",
																			"var REQUEST_BODY;\r",
																			"try {\r",
																			"    REQUEST_BODY = '{'\r",
																			"        + '\"application-name\" : ' + '\"' + applicationName + '\",'\r",
																			"        + '\"release-number\" : ' + '\"' + dummyReleaseNumber + '\",'\r",
																			"        + '\"protocol\" : ' + '\"' + protocol + '\",'\r",
																			"        + '\"address\" : ' + JSON.stringify(address) + ','\r",
																			"        + '\"port\" : ' + port\r",
																			"    +'}';\r",
																			"} catch (error) {\r",
																			"    console.log(\"!Could not define request body. \");\r",
																			"}\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + \"/v1/regard-application\";\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																			"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																			"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																			"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																			"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"function CreateXCorrelator() {\r",
																			"    let xCorrelator;\r",
																			"    xCorrelator = \"\";\r",
																			"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(12);\r",
																			"    return xCorrelator;\r",
																			"}\r",
																			"\r",
																			"function GenerateRandomHexString(length) {\r",
																			"    var randomRandomHexString = \"\";\r",
																			"    while (randomRandomHexString.length < length) {\r",
																			"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																			"    }\r",
																			"    return randomRandomHexString.substring(0,length);\r",
																			"}\r",
																			"\r",
																			"function FaultyReleaseNumber() {\r",
																			"    let releaseNumber;\r",
																			"    let releaseNumberParts = [];\r",
																			"    for (let i = 0; i < 4; i++) {\r",
																			"        releaseNumberParts[i] = Math.floor(Math.random() * 10);\r",
																			"    }\r",
																			"    releaseNumber = releaseNumberParts[0] + \".\" + releaseNumberParts[1] + \".\" + releaseNumberParts[2] + \".\" + releaseNumberParts[3];\r",
																			"    return releaseNumber;\r",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var RESPONSE_CODE;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"\r",
																			"    RESPONSE_CODE = parseInt(response.code);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Response Code could not be extracted.\");\r",
																			"}    \r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Testing\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.test(\"POST /v1/regard-application responds 400, because of too long release-number\", function () {\r",
																			"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																			"    });\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Testing could not be executed.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "400",
																		"type": "default"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Expected  /v1/regard-application - letters in release-number",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"console.log(\"\\n-----  letters in release-number -------------------------------\");\r",
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"var OPERATION_KEY;\r",
																			"var applicationName;\r",
																			"var dummyReleaseNumber;\r",
																			"var protocol;\r",
																			"var address;\r",
																			"var port;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"    let currentOperationServer;\r",
																			"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																			"    \r",
																			"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																			"\r",
																			"    let httpClientLtp;\r",
																			"    httpClientLtp = pm.collectionVariables.get(\"httpClientLtp\");\r",
																			"\r",
																			"    applicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																			"    dummyReleaseNumber = FaultyReleaseNumber();\r",
																			"\r",
																			"    let tcpClientLtp;\r",
																			"    tcpClientLtp = pm.collectionVariables.get(\"tcpClientLtp\");\r",
																			"\r",
																			"    protocol = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																			"    protocol = protocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																			"\r",
																			"    address = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																			"    port = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Input Data could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Dummy Parameters\r",
																			"****************************************************************************************/\r",
																			"var USER_NAME;\r",
																			"var ORIGINATOR;\r",
																			"var X_CORRELATOR;\r",
																			"var TRACE_INDICATOR;\r",
																			"var CUSTOMER_JOURNEY;\r",
																			"try {\r",
																			"    USER_NAME = APPLICATION.userName;\r",
																			"    ORIGINATOR = \"Postman\";\r",
																			"    X_CORRELATOR = CreateXCorrelator();\r",
																			"    TRACE_INDICATOR = \"1\";\r",
																			"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																			"    \r",
																			"} catch (error) {\r",
																			"    console.log(\"! Could not define dummy values for parameters. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Request Body\r",
																			"****************************************************************************************/\r",
																			"var REQUEST_BODY;\r",
																			"try {\r",
																			"    REQUEST_BODY = '{'\r",
																			"        + '\"application-name\" : ' + '\"' + applicationName + '\",'\r",
																			"        + '\"release-number\" : ' + '\"' + dummyReleaseNumber + '\",'\r",
																			"        + '\"protocol\" : ' + '\"' + protocol + '\",'\r",
																			"        + '\"address\" : ' + JSON.stringify(address) + ','\r",
																			"        + '\"port\" : ' + port\r",
																			"    +'}';\r",
																			"} catch (error) {\r",
																			"    console.log(\"!Could not define request body. \");\r",
																			"}\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + \"/v1/regard-application\";\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																			"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																			"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																			"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																			"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"function CreateXCorrelator() {\r",
																			"    let xCorrelator;\r",
																			"    xCorrelator = \"\";\r",
																			"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(12);\r",
																			"    return xCorrelator;\r",
																			"}\r",
																			"\r",
																			"function GenerateRandomHexString(length) {\r",
																			"    var randomRandomHexString = \"\";\r",
																			"    while (randomRandomHexString.length < length) {\r",
																			"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																			"    }\r",
																			"    return randomRandomHexString.substring(0,length);\r",
																			"}\r",
																			"\r",
																			"function FaultyReleaseNumber() {\r",
																			"    let releaseNumber;\r",
																			"    let releaseNumberParts = [];\r",
																			"    for  (let i=0; i<3 ; i++) {\r",
																			"        releaseNumberParts[i] = Math.floor(Math.random() * 10);\r",
																			"    }\r",
																			"    let characters;\r",
																			"    characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r",
																			"    let charactersLength;\r",
																			"    charactersLength = characters.length;\r",
																			"\r",
																			"    let faultyElement;\r",
																			"    faultyElement = characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																			"\r",
																			"    let faultyreleaseNumberPart;\r",
																			"    faultyreleaseNumberPart = Math.floor(Math.random() * 3);\r",
																			"    releaseNumberParts[faultyreleaseNumberPart] = faultyElement;\r",
																			"\r",
																			"    releaseNumber = releaseNumberParts[0] + \".\" + releaseNumberParts[1] + \".\" + releaseNumberParts[2];\r",
																			"    return releaseNumber;\r",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var RESPONSE_CODE;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"\r",
																			"    RESPONSE_CODE = parseInt(response.code);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Response Code could not be extracted.\");\r",
																			"}    \r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Testing\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.test(\"POST /v1/regard-application responds 400, because of letters in release-number\", function () {\r",
																			"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																			"    });\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Testing could not be executed.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "400",
																		"type": "default"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Expected  /v1/regard-application - sign in release-number",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"console.log(\"\\n-----  sign in release-number -------------------------------\");\r",
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"var OPERATION_KEY;\r",
																			"var applicationName;\r",
																			"var dummyReleaseNumber;\r",
																			"var protocol;\r",
																			"var address;\r",
																			"var port;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"    let currentOperationServer;\r",
																			"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																			"    \r",
																			"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																			"\r",
																			"    let httpClientLtp;\r",
																			"    httpClientLtp = pm.collectionVariables.get(\"httpClientLtp\");\r",
																			"\r",
																			"    applicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																			"    dummyReleaseNumber = FaultyReleaseNumber();\r",
																			"\r",
																			"    let tcpClientLtp;\r",
																			"    tcpClientLtp = pm.collectionVariables.get(\"tcpClientLtp\");\r",
																			"\r",
																			"    protocol = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																			"    protocol = protocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																			"\r",
																			"    address = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																			"    port = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Input Data could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Dummy Parameters\r",
																			"****************************************************************************************/\r",
																			"var USER_NAME;\r",
																			"var ORIGINATOR;\r",
																			"var X_CORRELATOR;\r",
																			"var TRACE_INDICATOR;\r",
																			"var CUSTOMER_JOURNEY;\r",
																			"try {\r",
																			"    USER_NAME = APPLICATION.userName;\r",
																			"    ORIGINATOR = \"Postman\";\r",
																			"    X_CORRELATOR = CreateXCorrelator();\r",
																			"    TRACE_INDICATOR = \"1\";\r",
																			"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																			"    \r",
																			"} catch (error) {\r",
																			"    console.log(\"! Could not define dummy values for parameters. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Request Body\r",
																			"****************************************************************************************/\r",
																			"var REQUEST_BODY;\r",
																			"try {\r",
																			"    REQUEST_BODY = '{'\r",
																			"        + '\"application-name\" : ' + '\"' + applicationName + '\",'\r",
																			"        + '\"release-number\" : ' + '\"' + dummyReleaseNumber + '\",'\r",
																			"        + '\"protocol\" : ' + '\"' + protocol + '\",'\r",
																			"        + '\"address\" : ' + JSON.stringify(address) + ','\r",
																			"        + '\"port\" : ' + port\r",
																			"    +'}';\r",
																			"} catch (error) {\r",
																			"    console.log(\"!Could not define request body. \");\r",
																			"}\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + \"/v1/regard-application\";\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																			"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																			"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																			"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																			"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"function CreateXCorrelator() {\r",
																			"    let xCorrelator;\r",
																			"    xCorrelator = \"\";\r",
																			"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(12);\r",
																			"    return xCorrelator;\r",
																			"}\r",
																			"\r",
																			"function GenerateRandomHexString(length) {\r",
																			"    var randomRandomHexString = \"\";\r",
																			"    while (randomRandomHexString.length < length) {\r",
																			"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																			"    }\r",
																			"    return randomRandomHexString.substring(0,length);\r",
																			"}\r",
																			"\r",
																			"function FaultyReleaseNumber() {\r",
																			"    let releaseNumber;\r",
																			"    let releaseNumberParts = [];\r",
																			"    for  (let i=0; i<3 ; i++) {\r",
																			"        releaseNumberParts[i] = Math.floor(Math.random() * 10);\r",
																			"    }\r",
																			"    let faultyElement;\r",
																			"    faultyElement = Math.random() < 0.5 ? '-' : '+' ;\r",
																			"    releaseNumber = faultyElement + releaseNumberParts[0] + \".\" + releaseNumberParts[1] + \".\" + releaseNumberParts[2];\r",
																			"    return releaseNumber;\r",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var RESPONSE_CODE;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"\r",
																			"    RESPONSE_CODE = parseInt(response.code);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Response Code could not be extracted.\");\r",
																			"}    \r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Testing\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.test(\"POST /v1/regard-application responds 400, because of sign in release-number\", function () {\r",
																			"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																			"    });\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Testing could not be executed.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "400",
																		"type": "default"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Expected  /v1/regard-application - incorrect separator in release-number",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"console.log(\"\\n-----  incorrect separators in release-number -------------------------------\");\r",
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"var OPERATION_KEY;\r",
																			"var applicationName;\r",
																			"var dummyReleaseNumber;\r",
																			"var protocol;\r",
																			"var address;\r",
																			"var port;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"    let currentOperationServer;\r",
																			"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																			"    \r",
																			"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																			"\r",
																			"    let httpClientLtp;\r",
																			"    httpClientLtp = pm.collectionVariables.get(\"httpClientLtp\");\r",
																			"\r",
																			"    applicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																			"    dummyReleaseNumber = FaultyReleaseNumber();\r",
																			"\r",
																			"    let tcpClientLtp;\r",
																			"    tcpClientLtp = pm.collectionVariables.get(\"tcpClientLtp\");\r",
																			"    protocol = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																			"    protocol = protocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																			"\r",
																			"    address = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																			"    port = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Input Data could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Dummy Parameters\r",
																			"****************************************************************************************/\r",
																			"var USER_NAME;\r",
																			"var ORIGINATOR;\r",
																			"var X_CORRELATOR;\r",
																			"var TRACE_INDICATOR;\r",
																			"var CUSTOMER_JOURNEY;\r",
																			"try {\r",
																			"    USER_NAME = APPLICATION.userName;\r",
																			"    ORIGINATOR = \"Postman\";\r",
																			"    X_CORRELATOR = CreateXCorrelator();\r",
																			"    TRACE_INDICATOR = \"1\";\r",
																			"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																			"    \r",
																			"} catch (error) {\r",
																			"    console.log(\"! Could not define dummy values for parameters. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Request Body\r",
																			"****************************************************************************************/\r",
																			"var REQUEST_BODY;\r",
																			"try {\r",
																			"    REQUEST_BODY = '{'\r",
																			"        + '\"application-name\" : ' + '\"' + applicationName + '\",'\r",
																			"        + '\"release-number\" : ' + '\"' + dummyReleaseNumber + '\",'\r",
																			"        + '\"protocol\" : ' + '\"' + protocol + '\",'\r",
																			"        + '\"address\" : ' + JSON.stringify(address) + ','\r",
																			"        + '\"port\" : ' + port\r",
																			"    +'}';\r",
																			"} catch (error) {\r",
																			"    console.log(\"!Could not define request body. \");\r",
																			"}\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + \"/v1/regard-application\";\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																			"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																			"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																			"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																			"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"function CreateXCorrelator() {\r",
																			"    let xCorrelator;\r",
																			"    xCorrelator = \"\";\r",
																			"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(12);\r",
																			"    return xCorrelator;\r",
																			"}\r",
																			"\r",
																			"function GenerateRandomHexString(length) {\r",
																			"    var randomRandomHexString = \"\";\r",
																			"    while (randomRandomHexString.length < length) {\r",
																			"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																			"    }\r",
																			"    return randomRandomHexString.substring(0,length);\r",
																			"}\r",
																			"\r",
																			"function FaultyReleaseNumber() {\r",
																			"    let releaseNumber;\r",
																			"    releaseNumber = \"\";\r",
																			"    let releaseNumberParts;\r",
																			"    releaseNumberParts = [];\r",
																			"    for(let i=0; i<3; i++) {\r",
																			"        releaseNumberParts[i] = Math.floor(Math.random() * 10);\r",
																			"    }\r",
																			"    let separators;\r",
																			"    separators = \"-:;/\";\r",
																			"    let separatorsLength;\r",
																			"    separatorsLength = separators.length;\r",
																			"    let faultySeparator;\r",
																			"    faultySeparator = separators.charAt(Math.floor(Math.random() * separatorsLength));\r",
																			"    releaseNumber = releaseNumberParts.join(faultySeparator);\r",
																			"    return releaseNumber;\r",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var RESPONSE_CODE;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"\r",
																			"    RESPONSE_CODE = parseInt(response.code);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Response Code could not be extracted.\");\r",
																			"}    \r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Testing\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.test(\"POST /v1/regard-application responds 400, because of incorrect separator in release-number\", function () {\r",
																			"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																			"    });\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Testing could not be executed.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "400",
																		"type": "default"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Expected  /v1/regard-application - multiple digit in placeholder of release-number",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"console.log(\"\\n-----  multiple digit in placeholder of release-number -------------------------------\");\r",
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"var OPERATION_KEY;\r",
																			"var applicationName;\r",
																			"var dummyReleaseNumber;\r",
																			"var protocol;\r",
																			"var address;\r",
																			"var port;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"    let currentOperationServer;\r",
																			"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																			"    \r",
																			"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																			"\r",
																			"    let httpClientLtp;\r",
																			"    httpClientLtp = pm.collectionVariables.get(\"httpClientLtp\");\r",
																			"\r",
																			"    applicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																			"    \r",
																			"    dummyReleaseNumber = FaultyReleaseNumber();\r",
																			"\r",
																			"    let tcpClientLtp;\r",
																			"    tcpClientLtp = pm.collectionVariables.get(\"tcpClientLtp\");\r",
																			"    protocol = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																			"    protocol = protocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																			"\r",
																			"    address = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																			"    port = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																			"    \r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Input Data could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Dummy Parameters\r",
																			"****************************************************************************************/\r",
																			"var USER_NAME;\r",
																			"var ORIGINATOR;\r",
																			"var X_CORRELATOR;\r",
																			"var TRACE_INDICATOR;\r",
																			"var CUSTOMER_JOURNEY;\r",
																			"try {\r",
																			"    USER_NAME = APPLICATION.userName;\r",
																			"    ORIGINATOR = \"Postman\";\r",
																			"    X_CORRELATOR = CreateXCorrelator();\r",
																			"    TRACE_INDICATOR = \"1\";\r",
																			"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																			"    \r",
																			"} catch (error) {\r",
																			"    console.log(\"! Could not define dummy values for parameters. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Request Body\r",
																			"****************************************************************************************/\r",
																			"var REQUEST_BODY;\r",
																			"try {\r",
																			"    REQUEST_BODY = '{'\r",
																			"        + '\"application-name\" : ' + '\"' + applicationName + '\",'\r",
																			"        + '\"release-number\" : ' + '\"' + dummyReleaseNumber + '\",'\r",
																			"        + '\"protocol\" : ' + '\"' + protocol + '\",'\r",
																			"        + '\"address\" : ' + JSON.stringify(address) + ','\r",
																			"        + '\"port\" : ' + port\r",
																			"    +'}';\r",
																			"} catch (error) {\r",
																			"    console.log(\"!Could not define request body. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + \"/v1/regard-application\";\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																			"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																			"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																			"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																			"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"function CreateXCorrelator() {\r",
																			"    let xCorrelator;\r",
																			"    xCorrelator = \"\";\r",
																			"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(12);\r",
																			"    return xCorrelator;\r",
																			"}\r",
																			"\r",
																			"function GenerateRandomHexString(length) {\r",
																			"    var randomRandomHexString = \"\";\r",
																			"    while (randomRandomHexString.length < length) {\r",
																			"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																			"    }\r",
																			"    return randomRandomHexString.substring(0,length);\r",
																			"}\r",
																			"\r",
																			"\r",
																			"function FaultyReleaseNumber() {\r",
																			"    let releaseNumber;\r",
																			"    releaseNumber = \"\";\r",
																			"    let releaseNumberParts;\r",
																			"    releaseNumberParts = [];\r",
																			"    for(let i=0; i<3; i++) {\r",
																			"        releaseNumberParts[i] = Math.floor(Math.random() * 10);\r",
																			"    }\r",
																			"    let randomFaultyLength = Math.floor(3 + Math.random() * 7);\r",
																			"    let faultyElement = Math.floor(Math.pow(10, randomFaultyLength-1) + Math.random() * (Math.pow(10, randomFaultyLength) - Math.pow(10, randomFaultyLength-1) - 1));\r",
																			"\r",
																			"    let faultyreleaseNumberPart;\r",
																			"    faultyreleaseNumberPart = Math.floor(Math.random() * 3);\r",
																			"    releaseNumberParts[faultyreleaseNumberPart] = faultyElement;\r",
																			"\r",
																			"    releaseNumber = releaseNumberParts[0] + \".\" + releaseNumberParts[1] + \".\" + releaseNumberParts[2];\r",
																			"    return releaseNumber;\r",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var RESPONSE_CODE;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"\r",
																			"    RESPONSE_CODE = parseInt(response.code);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Response Code could not be extracted.\");\r",
																			"}    \r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Testing\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.test(\"POST /v1/regard-application responds 400, because of multiple digit in placeholder of release-number\", function () {\r",
																			"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																			"    });\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Testing could not be executed.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "400",
																		"type": "default"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														}
													],
													"description": "## Get release-number checked for correctness?\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for op-s of /v1/regard-application, storing operation-key\n  -  searching CC for output fc-port of NewApplicationCausesRequestForInquiringOamRequestApprovals, find corresponding op-c, http-c and tcp-c, store them\n- POST /v1/regard-application\n  - all attributes according to chosen http-c and tcp-c  BUT release-number attribute with random dummy value differing from pattern in different ways\n  -boperation-key from above\n  - reasonable parameters\n\n#### Testing:\n- checking for ResponseCode==400\n\n#### Clearing:\n- not applicable"
												},
												{
													"name": "protocol checked?",
													"item": [
														{
															"name": "reference /core-model-1-4:control-construct",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"console.log(\"\\n----- /v1/regard-application acceptance -- protocol checked? -------------------------------\");\r",
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Environment variables could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																			"\r",
																			"    let REQUEST_BODY;\r",
																			"    REQUEST_BODY = \"\";\r",
																			"\r",
																			"    let AUTHORIZATION;\r",
																			"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var ltpList;\r",
																			"var fcList;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"    \r",
																			"    let responseCode;\r",
																			"    responseCode = parseInt(response.code);\r",
																			"    \r",
																			"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																			"        let responseObject;\r",
																			"        responseObject = JSON.parse(response.stream);\r",
																			"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																			"        fcList = responseObject[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
																			"\r",
																			"    } else {\r",
																			"        ltpList = [];\r",
																			"        fcList = [];\r",
																			"    }\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! ltpList could not be extracted.\");\r",
																			"}\r",
																			"\r",
																			"var currentOperationServer;\r",
																			"var httpClientLtp;\r",
																			"var tcpClientLtp;\r",
																			"try {\r",
																			"    currentOperationServer = FindOperationServer(\"/v1/regard-application\", ltpList);\r",
																			"\r",
																			"    //Inquiring OAM approvals\r",
																			"    let outputFcPortListInquireOamRequestApprovals;\r",
																			"    outputFcPortListInquireOamRequestApprovals = FindOutputFcPortList(\"NewApplicationCausesRequestForInquiringOamRequestApprovals\", fcList);\r",
																			"    let ltpInstance = FindRandomLtpInstancesFromFc(outputFcPortListInquireOamRequestApprovals, ltpList)\r",
																			"    httpClientLtp = ltpInstance.httpClientLtp;\r",
																			"    tcpClientLtp = FindServingLtp(httpClientLtp, ltpList);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Reference objects could not be extracted.\");\r",
																			"} \r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.collectionVariables.clear();\r",
																			"    \r",
																			"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																			"    pm.collectionVariables.set(\"httpClientLtp\", httpClientLtp);\r",
																			"    pm.collectionVariables.set(\"tcpClientLtp\", tcpClientLtp);\r",
																			"\r",
																			"    pm.collectionVariables.set(\"ltpList\", ltpList);\r",
																			"    pm.collectionVariables.set(\"fcList\", fcList);\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Collection variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"function FindOperationServer(operationName, ltpList) {\r",
																			"    let operationServer;\r",
																			"    operationServer = \"\";\r",
																			"    try {\r",
																			"        let sampleUuid;\r",
																			"        for(let i=0; i<ltpList.length; i++) {\r",
																			"            sampleUuid = ltpList[i][\"uuid\"];\r",
																			"            if(sampleUuid.includes(\"op-s-\")) {\r",
																			"                let sampleOperationName;\r",
																			"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																			"                if(sampleOperationName == operationName) {\r",
																			"                    operationServer = ltpList[i];\r",
																			"                    return operationServer;\r",
																			"                }\r",
																			"            }\r",
																			"        }\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																			"    }\r",
																			"    return operationServer;\r",
																			"}\r",
																			"\r",
																			"function FindRandomLtpInstancesFromFc(outputFcPortList, ltpList) {\r",
																			"    let ltpInstance = {};\r",
																			"    try {\r",
																			"        for ( let i=0; i<outputFcPortList.length; i++ ) {\r",
																			"            let randomOutputFcPort = outputFcPortList[Math.floor(Math.random() * outputFcPortList.length)];\r",
																			"            let outputLtpUuid = randomOutputFcPort[\"logical-termination-point\"];\r",
																			"            let operationClientLtp = FindActualInstanceByUuid(outputLtpUuid, ltpList);\r",
																			"\r",
																			"            let httpClientLtp = FindServingLtp(operationClientLtp, ltpList);\r",
																			"            let sampleApplicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																			"\r",
																			"            if (sampleApplicationName != \"AdministratorAdministration\") {\r",
																			"\t\t\t\tltpInstance = { httpClientLtp, operationClientLtp };\r",
																			"                break;\r",
																			"            }\r",
																			"        }\r",
																			"    } catch(error) {\r",
																			"        console.log(error);\r",
																			"        console.log(\"! Exception in function : FindRandomLtpInstancesFromFc. \")\r",
																			"    } \r",
																			"    return ltpInstance;\r",
																			"}\r",
																			"\r",
																			"\r",
																			"function FindOutputFcPortList(forwardingName, fcList) {\r",
																			"    let outputFcPortList;\r",
																			"    outputFcPortList = [];\r",
																			"    try {\r",
																			"        for( let i=0; i<fcList.length; i++ ) {\r",
																			"            for(let j=0; j<fcList[i][\"name\"].length; j++) {               \r",
																			"                if(fcList[i][\"name\"][j][\"value\"] == forwardingName) {\r",
																			"                    fcPortList = fcList[i][\"fc-port\"];\r",
																			"                    for(let k=0;k<fcPortList.length;k++) {\r",
																			"                        if(fcPortList[k][\"port-direction\"] == \"core-model-1-4:PORT_DIRECTION_TYPE_OUTPUT\") {\r",
																			"                            outputFcPortList.push(fcPortList[k]);\r",
																			"                        }\r",
																			"                    }\r",
																			"                    return outputFcPortList;\r",
																			"                }\r",
																			"            }\r",
																			"        }\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																			"    }\r",
																			"    return outputFcPortList;\r",
																			"}\r",
																			"\r",
																			"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
																			"    let actualInstance;\r",
																			"    actualInstance = {};\r",
																			"    try {\r",
																			"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
																			"            let sampleUuid;\r",
																			"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
																			"            if( sampleUuid == expectedUuid ) {\r",
																			"                actualInstance = actualLtpList[i];\r",
																			"                return actualInstance;\r",
																			"            }\r",
																			"        }\r",
																			"\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																			"    }\r",
																			"    return undefined;\r",
																			"}\r",
																			"\r",
																			"function FindServingLtp(clientLtp, ltpList) {\r",
																			"    let servingLtp;\r",
																			"    servingLtp = {};\r",
																			"    try{\r",
																			"        let serverLtpUuid;\r",
																			"        serverLtpUuid = clientLtp[\"server-ltp\"][0];\r",
																			"        for( let i=0; i<ltpList.length; i++ ) {\r",
																			"            let sampleUuid;\r",
																			"            sampleUuid = ltpList[i][\"uuid\"];\r",
																			"            if( sampleUuid == serverLtpUuid ) {\r",
																			"                servingLtp = ltpList[i];\r",
																			"                return servingLtp;\r",
																			"            }\r",
																			"        }\r",
																			"    } catch(error) {\r",
																			"        console.log(error);\r",
																			"        console.log(\"! Exception in function : FindServingLtp. \")\r",
																			"    }\r",
																			"    return servingLtp;\r",
																			"}\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "GET",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "200",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Expected /v1/regard-application - random string protocol",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"console.log(\"\\n-----  random string protocol -------------------------------\");\r",
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"var OPERATION_KEY;\r",
																			"var applicationName;\r",
																			"var releaseNumber;\r",
																			"var dummyProtocol;\r",
																			"var address;\r",
																			"var port;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"    let currentOperationServer;\r",
																			"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																			"    \r",
																			"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																			"\r",
																			"    let httpClientLtp;\r",
																			"    httpClientLtp = pm.collectionVariables.get(\"httpClientLtp\");\r",
																			"\r",
																			"    applicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																			"    releaseNumber = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																			"\r",
																			"    let tcpClientLtp;\r",
																			"    tcpClientLtp = pm.collectionVariables.get(\"tcpClientLtp\");\r",
																			"\r",
																			"    dummyProtocol = GenerateRandomString(12);\r",
																			"\r",
																			"    address = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																			"    port = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Input Data could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Dummy Parameters\r",
																			"****************************************************************************************/\r",
																			"var USER_NAME;\r",
																			"var ORIGINATOR;\r",
																			"var X_CORRELATOR;\r",
																			"var TRACE_INDICATOR;\r",
																			"var CUSTOMER_JOURNEY;\r",
																			"try {\r",
																			"    USER_NAME = APPLICATION.userName;\r",
																			"    ORIGINATOR = \"Postman\";\r",
																			"    X_CORRELATOR = CreateXCorrelator();\r",
																			"    TRACE_INDICATOR = \"1\";\r",
																			"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																			"    \r",
																			"} catch (error) {\r",
																			"    console.log(\"! Could not define dummy values for parameters. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Request Body\r",
																			"****************************************************************************************/\r",
																			"var REQUEST_BODY;\r",
																			"try {\r",
																			"    REQUEST_BODY = '{'\r",
																			"        + '\"application-name\" : ' + '\"' + applicationName + '\",'\r",
																			"        + '\"release-number\" : ' + '\"' + releaseNumber + '\",'\r",
																			"        + '\"protocol\" : ' + '\"' + dummyProtocol + '\",'\r",
																			"        + '\"address\" : ' + JSON.stringify(address) + ','\r",
																			"        + '\"port\" : ' + port\r",
																			"    +'}';\r",
																			"} catch (error) {\r",
																			"    console.log(\"!Could not define request body. \");\r",
																			"}\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + \"/v1/regard-application\";\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																			"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																			"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																			"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																			"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"function CreateXCorrelator() {\r",
																			"    let xCorrelator;\r",
																			"    xCorrelator = \"\";\r",
																			"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(12);\r",
																			"    return xCorrelator;\r",
																			"}\r",
																			"\r",
																			"function GenerateRandomHexString(length) {\r",
																			"    var randomRandomHexString = \"\";\r",
																			"    while (randomRandomHexString.length < length) {\r",
																			"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																			"    }\r",
																			"    return randomRandomHexString.substring(0,length);\r",
																			"}\r",
																			"\r",
																			"function GenerateRandomString(length) {\r",
																			"    let randomString;\r",
																			"    randomString = \"\";\r",
																			"    try {\r",
																			"        let characters = \"abcdefghijklmnopqrstuvwxyz\";\r",
																			"        let charactersLength = characters.length;\r",
																			"        for (let i = 0; i < length; i++) {\r",
																			"            randomString += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																			"        }\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Could not generate random string. \");\r",
																			"    }\r",
																			"    return randomString;\r",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var RESPONSE_CODE;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"\r",
																			"    RESPONSE_CODE = parseInt(response.code);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Response Code could not be extracted.\");\r",
																			"}    \r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Testing\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.test(\"POST /v1/regard-application responds 400, because of random string protocol\", function () {\r",
																			"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																			"    });\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Testing could not be executed.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "400",
																		"type": "default"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Expected /v1/regard-application - full form for enum value protocol",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"console.log(\"\\n-----  full form for enum value protocol -------------------------------\");\r",
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"var OPERATION_KEY;\r",
																			"var applicationName;\r",
																			"var releaseNumber;\r",
																			"var dummyProtocol;\r",
																			"var address;\r",
																			"var port;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"    let currentOperationServer;\r",
																			"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																			"    \r",
																			"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																			"\r",
																			"    let httpClientLtp;\r",
																			"    httpClientLtp = pm.collectionVariables.get(\"httpClientLtp\");\r",
																			"\r",
																			"    applicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																			"    releaseNumber = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																			"\r",
																			"    let tcpClientLtp;\r",
																			"    tcpClientLtp = pm.collectionVariables.get(\"tcpClientLtp\");\r",
																			"\r",
																			"    dummyProtocol = RandomRemoteProtocol();\r",
																			"\r",
																			"    address = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																			"    port = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Input Data could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Dummy Parameters\r",
																			"****************************************************************************************/\r",
																			"var USER_NAME;\r",
																			"var ORIGINATOR;\r",
																			"var X_CORRELATOR;\r",
																			"var TRACE_INDICATOR;\r",
																			"var CUSTOMER_JOURNEY;\r",
																			"try {\r",
																			"    USER_NAME = APPLICATION.userName;\r",
																			"    ORIGINATOR = \"Postman\";\r",
																			"    X_CORRELATOR = CreateXCorrelator();\r",
																			"    TRACE_INDICATOR = \"1\";\r",
																			"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																			"    \r",
																			"} catch (error) {\r",
																			"    console.log(\"! Could not define dummy values for parameters. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Request Body\r",
																			"****************************************************************************************/\r",
																			"var REQUEST_BODY;\r",
																			"try {\r",
																			"    REQUEST_BODY = '{'\r",
																			"        + '\"application-name\" : ' + '\"' + applicationName + '\",'\r",
																			"        + '\"release-number\" : ' + '\"' + releaseNumber + '\",'\r",
																			"        + '\"protocol\" : ' + '\"' + dummyProtocol + '\",'\r",
																			"        + '\"address\" : ' + JSON.stringify(address) + ','\r",
																			"        + '\"port\" : ' +  port\r",
																			"    +'}';\r",
																			"} catch (error) {\r",
																			"    console.log(\"!Could not define request body. \");\r",
																			"}\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + \"/v1/regard-application\";\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																			"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																			"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																			"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																			"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"function CreateXCorrelator() {\r",
																			"    let xCorrelator;\r",
																			"    xCorrelator = \"\";\r",
																			"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(12);\r",
																			"    return xCorrelator;\r",
																			"}\r",
																			"\r",
																			"function GenerateRandomHexString(length) {\r",
																			"    var randomRandomHexString = \"\";\r",
																			"    while (randomRandomHexString.length < length) {\r",
																			"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																			"    }\r",
																			"    return randomRandomHexString.substring(0,length);\r",
																			"}\r",
																			"\r",
																			"function RandomRemoteProtocol() {\r",
																			"    let protocolList;\r",
																			"    protocolList = [  \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTP\",\r",
																			"                                    \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTPS\",\r",
																			"                                    \"tcp-client-interface-1-0:PROTOCOL_TYPE_NOT_YET_DEFINED\"\r",
																			"                                ];\r",
																			"    let protocol;\r",
																			"    protocol = protocolList[Math.floor(Math.random() * protocolList.length)];\r",
																			"\r",
																			"    return protocol;\r",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var RESPONSE_CODE;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"\r",
																			"    RESPONSE_CODE = parseInt(response.code);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Response Code could not be extracted.\");\r",
																			"}    \r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Testing\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.test(\"POST /v1/regard-application responds 400, because of full form for enum value protocol\", function () {\r",
																			"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																			"    });\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Testing could not be executed.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "400",
																		"type": "default"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														}
													],
													"description": "## Get protocol checked for correctness?\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for op-s of /v1/regard-application, storing operation-key\n  -  searching CC for output fc-port of NewApplicationCausesRequestForInquiringOamRequestApprovals, find corresponding op-c, http-c and tcp-c, store them\n- POST /v1/regard-application\n  - all attributes according to chosen http-c and tcp-c  BUT protocol attribute with random dummy value (that does not comply specification).\n  - operation-key from above\n  - reasonable parameters\n\n#### Testing:\n- checking for ResponseCode==400\n\n#### Clearing:\n- not applicable"
												},
												{
													"name": "address checked?",
													"item": [
														{
															"name": "ipv-4-address checked?",
															"item": [
																{
																	"name": "reference /core-model-1-4:control-construct",
																	"event": [
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					"console.log(\"\\n----- /v1/regard-application acceptance -- address/ipv-4-address attribute checked -------------------------------\");\r",
																					"/****************************************************************************************\r",
																					"* Loading Input Data\r",
																					"****************************************************************************************/\r",
																					"var APPLICATION;\r",
																					"try {\r",
																					"    APPLICATION = pm.environment.get(\"application\");\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Environment variables could not be loaded.\");\r",
																					"}\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Setting Local Variables and Preparing the Request\r",
																					"****************************************************************************************/\r",
																					"try {\r",
																					"    let URI;\r",
																					"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																					"\r",
																					"    let REQUEST_BODY;\r",
																					"    REQUEST_BODY = \"\";\r",
																					"\r",
																					"    let AUTHORIZATION;\r",
																					"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																					"\r",
																					"    let ACCEPT;\r",
																					"    ACCEPT = \"application/json\";\r",
																					"\r",
																					"    let CONTENT_TYPE;\r",
																					"    CONTENT_TYPE = \"application/json\";\r",
																					"\r",
																					"\r",
																					"    pm.variables.clear();\r",
																					"\r",
																					"    pm.variables.set(\"uri\", URI);\r",
																					"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																					"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Local variables could not be set.\");\r",
																					"}\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Functions\r",
																					"****************************************************************************************/\r",
																					"\r",
																					""
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"/****************************************************************************************\r",
																					"* Loading Input Data\r",
																					"****************************************************************************************/\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Extracting Result\r",
																					"****************************************************************************************/\r",
																					"var ltpList;\r",
																					"var fcList;\r",
																					"try {\r",
																					"    let response;\r",
																					"    response = pm.response;\r",
																					"    \r",
																					"    let responseCode;\r",
																					"    responseCode = parseInt(response.code);\r",
																					"    \r",
																					"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																					"        let responseObject;\r",
																					"        responseObject = JSON.parse(response.stream);\r",
																					"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																					"        fcList = responseObject[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
																					"\r",
																					"    } else {\r",
																					"        ltpList = [];\r",
																					"        fcList = [];\r",
																					"    }\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! ltpList could not be extracted.\");\r",
																					"}\r",
																					"\r",
																					"var currentOperationServer;\r",
																					"var httpClientLtp;\r",
																					"var tcpClientLtp;\r",
																					"try {\r",
																					"    currentOperationServer = FindOperationServer(\"/v1/regard-application\", ltpList);\r",
																					"\r",
																					"    //Inquiring OAM approvals\r",
																					"    let outputFcPortListInquireOamRequestApprovals;\r",
																					"    outputFcPortListInquireOamRequestApprovals = FindOutputFcPortList(\"NewApplicationCausesRequestForInquiringOamRequestApprovals\", fcList);\r",
																					"    let ltpInstance = FindRandomLtpInstancesFromFc(outputFcPortListInquireOamRequestApprovals, ltpList)\r",
																					"    httpClientLtp = ltpInstance.httpClientLtp;\r",
																					"    tcpClientLtp = FindServingLtp(httpClientLtp, ltpList);\r",
																					"} catch (error) {\r",
																					"    console.log(error);\r",
																					"    console.log(\"! Reference objects could not be extracted.\");\r",
																					"} \r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Setting Collection Variables\r",
																					"****************************************************************************************/\r",
																					"try {\r",
																					"    pm.collectionVariables.clear();\r",
																					"    \r",
																					"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																					"    pm.collectionVariables.set(\"httpClientLtp\", httpClientLtp);\r",
																					"    pm.collectionVariables.set(\"tcpClientLtp\", tcpClientLtp);\r",
																					"\r",
																					"    pm.collectionVariables.set(\"ltpList\", ltpList);\r",
																					"    pm.collectionVariables.set(\"fcList\", fcList);\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Collection variables could not be set.\");\r",
																					"}\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Functions\r",
																					"****************************************************************************************/\r",
																					"\r",
																					"function FindOperationServer(operationName, ltpList) {\r",
																					"    let operationServer;\r",
																					"    operationServer = \"\";\r",
																					"    try {\r",
																					"        let sampleUuid;\r",
																					"        for(let i=0; i<ltpList.length; i++) {\r",
																					"            sampleUuid = ltpList[i][\"uuid\"];\r",
																					"            if(sampleUuid.includes(\"op-s-\")) {\r",
																					"                let sampleOperationName;\r",
																					"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																					"                if(sampleOperationName == operationName) {\r",
																					"                    operationServer = ltpList[i];\r",
																					"                    return operationServer;\r",
																					"                }\r",
																					"            }\r",
																					"        }\r",
																					"    } catch (error) {\r",
																					"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																					"    }\r",
																					"    return operationServer;\r",
																					"}\r",
																					"\r",
																					"function FindRandomLtpInstancesFromFc(outputFcPortList, ltpList) {\r",
																					"    let ltpInstance = {};\r",
																					"    try {\r",
																					"        for ( let i=0; i<outputFcPortList.length; i++ ) {\r",
																					"            let randomOutputFcPort = outputFcPortList[Math.floor(Math.random() * outputFcPortList.length)];\r",
																					"            let outputLtpUuid = randomOutputFcPort[\"logical-termination-point\"];\r",
																					"            let operationClientLtp = FindActualInstanceByUuid(outputLtpUuid, ltpList);\r",
																					"\r",
																					"            let httpClientLtp = FindServingLtp(operationClientLtp, ltpList);\r",
																					"            let sampleApplicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																					"\r",
																					"            if (sampleApplicationName != \"AdministratorAdministration\") {\r",
																					"\t\t\t\tltpInstance = { httpClientLtp, operationClientLtp };\r",
																					"                break;\r",
																					"            }\r",
																					"        }\r",
																					"    } catch(error) {\r",
																					"        console.log(error);\r",
																					"        console.log(\"! Exception in function : FindRandomLtpInstancesFromFc. \")\r",
																					"    } \r",
																					"    return ltpInstance;\r",
																					"}\r",
																					"\r",
																					"function FindOutputFcPortList(forwardingName, fcList) {\r",
																					"    let outputFcPortList;\r",
																					"    outputFcPortList = [];\r",
																					"    try {\r",
																					"        for( let i=0; i<fcList.length; i++ ) {\r",
																					"            for(let j=0; j<fcList[i][\"name\"].length; j++) {               \r",
																					"                if(fcList[i][\"name\"][j][\"value\"] == forwardingName) {\r",
																					"                    fcPortList = fcList[i][\"fc-port\"];\r",
																					"                    for(let k=0;k<fcPortList.length;k++) {\r",
																					"                        if(fcPortList[k][\"port-direction\"] == \"core-model-1-4:PORT_DIRECTION_TYPE_OUTPUT\") {\r",
																					"                            outputFcPortList.push(fcPortList[k]);\r",
																					"                        }\r",
																					"                    }\r",
																					"                    return outputFcPortList;\r",
																					"                }\r",
																					"            }\r",
																					"        }\r",
																					"    } catch (error) {\r",
																					"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																					"    }\r",
																					"    return outputFcPortList;\r",
																					"}\r",
																					"\r",
																					"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
																					"    let actualInstance;\r",
																					"    actualInstance = {};\r",
																					"    try {\r",
																					"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
																					"            let sampleUuid;\r",
																					"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
																					"            if( sampleUuid == expectedUuid ) {\r",
																					"                actualInstance = actualLtpList[i];\r",
																					"                return actualInstance;\r",
																					"            }\r",
																					"        }\r",
																					"\r",
																					"    } catch (error) {\r",
																					"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																					"    }\r",
																					"    return undefined;\r",
																					"}\r",
																					"\r",
																					"function FindServingLtp(clientLtp, ltpList) {\r",
																					"    let servingLtp;\r",
																					"    servingLtp = {};\r",
																					"    try{\r",
																					"        let serverLtpUuid;\r",
																					"        serverLtpUuid = clientLtp[\"server-ltp\"][0];\r",
																					"        for( let i=0; i<ltpList.length; i++ ) {\r",
																					"            let sampleUuid;\r",
																					"            sampleUuid = ltpList[i][\"uuid\"];\r",
																					"            if( sampleUuid == serverLtpUuid ) {\r",
																					"                servingLtp = ltpList[i];\r",
																					"                return servingLtp;\r",
																					"            }\r",
																					"        }\r",
																					"    } catch(error) {\r",
																					"        console.log(error);\r",
																					"        console.log(\"! Exception in function : FindServingLtp. \")\r",
																					"    }\r",
																					"    return servingLtp;\r",
																					"}\r",
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"protocolProfileBehavior": {
																		"disableBodyPruning": true
																	},
																	"request": {
																		"auth": {
																			"type": "noauth"
																		},
																		"method": "GET",
																		"header": [
																			{
																				"key": "x-mock-response-code",
																				"value": "200",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{{requestBody}}",
																			"options": {
																				"raw": {
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{uri}}",
																			"host": [
																				"{{uri}}"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "Expected  /v1/regard-application - too-short ipv-4-address in address",
																	"event": [
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					"console.log(\"\\n-----  too short  ipv-4-address in address -------------------------------\");\r",
																					"/****************************************************************************************\r",
																					"* Loading Input Data\r",
																					"****************************************************************************************/\r",
																					"var APPLICATION;\r",
																					"var OPERATION_KEY;\r",
																					"var applicationName;\r",
																					"var releaseNumber;\r",
																					"var protocol;\r",
																					"var dummyAddress;\r",
																					"var port;\r",
																					"try {\r",
																					"    APPLICATION = pm.environment.get(\"application\");\r",
																					"\r",
																					"    let currentOperationServer;\r",
																					"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																					"    \r",
																					"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																					"\r",
																					"    let httpClientLtp;\r",
																					"    httpClientLtp = pm.collectionVariables.get(\"httpClientLtp\");\r",
																					"\r",
																					"    applicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																					"    releaseNumber = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																					"\r",
																					"    let tcpClientLtp;\r",
																					"    tcpClientLtp = pm.collectionVariables.get(\"tcpClientLtp\");\r",
																					"\r",
																					"    protocol = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																					"    protocol = protocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																					"\r",
																					"    let dummyIpv4Address = FaultyIpAddress();\r",
																					"    dummyAddress = {\r",
																					"        \"ip-address\": {\r",
																					"            \"ipv-4-address\": dummyIpv4Address\r",
																					"        }\r",
																					"    };\r",
																					"    port = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(error);\r",
																					"    console.log(\"! Input Data could not be loaded.\");\r",
																					"}\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Defining Dummy Parameters\r",
																					"****************************************************************************************/\r",
																					"var USER_NAME;\r",
																					"var ORIGINATOR;\r",
																					"var X_CORRELATOR;\r",
																					"var TRACE_INDICATOR;\r",
																					"var CUSTOMER_JOURNEY;\r",
																					"try {\r",
																					"    USER_NAME = APPLICATION.userName;\r",
																					"    ORIGINATOR = \"Postman\";\r",
																					"    X_CORRELATOR = CreateXCorrelator();\r",
																					"    TRACE_INDICATOR = \"1\";\r",
																					"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																					"    \r",
																					"} catch (error) {\r",
																					"    console.log(\"! Could not define dummy values for parameters. \");\r",
																					"}\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Defining Request Body\r",
																					"****************************************************************************************/\r",
																					"var REQUEST_BODY;\r",
																					"try {\r",
																					"    REQUEST_BODY = '{'\r",
																					"        + '\"application-name\" : ' + '\"' + applicationName + '\",'\r",
																					"        + '\"release-number\" : ' + '\"' + releaseNumber + '\",'\r",
																					"        + '\"protocol\" : ' + '\"' + protocol + '\",'\r",
																					"        + '\"address\" : ' + JSON.stringify(dummyAddress) + ','\r",
																					"        + '\"port\" : ' +  port\r",
																					"    +'}';\r",
																					"} catch (error) {\r",
																					"    console.log(\"!Could not define request body. \");\r",
																					"}\r",
																					"/****************************************************************************************\r",
																					"* Setting Collection Variables\r",
																					"****************************************************************************************/\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Setting Local Variables and Preparing the Request\r",
																					"****************************************************************************************/\r",
																					"try {\r",
																					"    let URI;\r",
																					"    URI = APPLICATION.serverUrl + \"/v1/regard-application\";\r",
																					"\r",
																					"    let ACCEPT;\r",
																					"    ACCEPT = \"application/json\";\r",
																					"\r",
																					"    let CONTENT_TYPE;\r",
																					"    CONTENT_TYPE = \"application/json\";\r",
																					"\r",
																					"    pm.variables.clear();\r",
																					"\r",
																					"    pm.variables.set(\"uri\", URI);\r",
																					"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																					"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																					"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																					"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																					"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																					"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(error);\r",
																					"    console.log(\"! Local variables could not be set.\");\r",
																					"}\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Functions\r",
																					"****************************************************************************************/\r",
																					"\r",
																					"function CreateXCorrelator() {\r",
																					"    let xCorrelator;\r",
																					"    xCorrelator = \"\";\r",
																					"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																					"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																					"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																					"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																					"    xCorrelator += GenerateRandomHexString(12);\r",
																					"    return xCorrelator;\r",
																					"}\r",
																					"\r",
																					"function GenerateRandomHexString(length) {\r",
																					"    var randomRandomHexString = \"\";\r",
																					"    while (randomRandomHexString.length < length) {\r",
																					"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																					"    }\r",
																					"    return randomRandomHexString.substring(0,length);\r",
																					"}\r",
																					"\r",
																					"function FaultyIpAddress() {\r",
																					"    let randomAddress;\r",
																					"    let addressParts = [];\r",
																					"    for (let i = 0; i < 3; i++) {\r",
																					"        addressParts[i] = String(Math.floor(Math.random() * 256));\r",
																					"    }\r",
																					"    randomAddress = addressParts[0] + \".\" + addressParts[1] + \".\" + addressParts[2];\r",
																					"    return randomAddress;\r",
																					"}"
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"/****************************************************************************************\r",
																					"* Loading Input Data\r",
																					"****************************************************************************************/\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Extracting Result\r",
																					"****************************************************************************************/\r",
																					"var RESPONSE_CODE;\r",
																					"try {\r",
																					"    let response;\r",
																					"    response = pm.response;\r",
																					"\r",
																					"    RESPONSE_CODE = parseInt(response.code);\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Response Code could not be extracted.\");\r",
																					"}    \r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Testing\r",
																					"****************************************************************************************/\r",
																					"try {\r",
																					"    pm.test(\"POST /v1/regard-application responds 400, because of too-short ipv-4-address in address\", function () {\r",
																					"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																					"    });\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Testing could not be executed.\");\r",
																					"}\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Functions\r",
																					"****************************************************************************************/\r",
																					"\r",
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "x-mock-response-code",
																				"value": "400",
																				"type": "default"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{{requestBody}}",
																			"options": {
																				"raw": {
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{uri}}",
																			"host": [
																				"{{uri}}"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "Expected  /v1/regard-application - too-high  ipv-4-address in address",
																	"event": [
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					"console.log(\"\\n-----  too high ipv-4-address in address -------------------------------\");\r",
																					"/****************************************************************************************\r",
																					"* Loading Input Data\r",
																					"****************************************************************************************/\r",
																					"var APPLICATION;\r",
																					"var OPERATION_KEY;\r",
																					"var applicationName;\r",
																					"var releaseNumber;\r",
																					"var protocol;\r",
																					"var dummyAddress;\r",
																					"var port;\r",
																					"try {\r",
																					"    APPLICATION = pm.environment.get(\"application\");\r",
																					"\r",
																					"    let currentOperationServer;\r",
																					"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																					"    \r",
																					"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																					"\r",
																					"    let httpClientLtp;\r",
																					"    httpClientLtp = pm.collectionVariables.get(\"httpClientLtp\");\r",
																					"\r",
																					"    applicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																					"    releaseNumber = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																					"\r",
																					"    let tcpClientLtp;\r",
																					"    tcpClientLtp = pm.collectionVariables.get(\"tcpClientLtp\");\r",
																					"\r",
																					"    protocol = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																					"    protocol = protocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																					"    \r",
																					"    let dummyIpv4Address = FaultyIpAddress();\r",
																					"    dummyAddress = {\r",
																					"        \"ip-address\": {\r",
																					"            \"ipv-4-address\": dummyIpv4Address\r",
																					"        }\r",
																					"    };\r",
																					"    port = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(error);\r",
																					"    console.log(\"! Input Data could not be loaded.\");\r",
																					"}\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Defining Dummy Parameters\r",
																					"****************************************************************************************/\r",
																					"var USER_NAME;\r",
																					"var ORIGINATOR;\r",
																					"var X_CORRELATOR;\r",
																					"var TRACE_INDICATOR;\r",
																					"var CUSTOMER_JOURNEY;\r",
																					"try {\r",
																					"    USER_NAME = APPLICATION.userName;\r",
																					"    ORIGINATOR = \"Postman\";\r",
																					"    X_CORRELATOR = CreateXCorrelator();\r",
																					"    TRACE_INDICATOR = \"1\";\r",
																					"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																					"    \r",
																					"} catch (error) {\r",
																					"    console.log(\"! Could not define dummy values for parameters. \");\r",
																					"}\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Defining Request Body\r",
																					"****************************************************************************************/\r",
																					"var REQUEST_BODY;\r",
																					"try {\r",
																					"    REQUEST_BODY = '{'\r",
																					"        + '\"application-name\" : ' + '\"' + applicationName + '\",'\r",
																					"        + '\"release-number\" : ' + '\"' + releaseNumber + '\",'\r",
																					"        + '\"protocol\" : ' + '\"' + protocol + '\",'\r",
																					"        + '\"address\" : ' + JSON.stringify(dummyAddress) + ','\r",
																					"        + '\"port\" : ' +  port\r",
																					"    +'}';\r",
																					"} catch (error) {\r",
																					"    console.log(\"!Could not define request body. \");\r",
																					"}\r",
																					"/****************************************************************************************\r",
																					"* Setting Collection Variables\r",
																					"****************************************************************************************/\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Setting Local Variables and Preparing the Request\r",
																					"****************************************************************************************/\r",
																					"try {\r",
																					"    let URI;\r",
																					"    URI = APPLICATION.serverUrl + \"/v1/regard-application\";\r",
																					"\r",
																					"    let ACCEPT;\r",
																					"    ACCEPT = \"application/json\";\r",
																					"\r",
																					"    let CONTENT_TYPE;\r",
																					"    CONTENT_TYPE = \"application/json\";\r",
																					"\r",
																					"    pm.variables.clear();\r",
																					"\r",
																					"    pm.variables.set(\"uri\", URI);\r",
																					"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																					"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																					"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																					"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																					"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																					"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(error);\r",
																					"    console.log(\"! Local variables could not be set.\");\r",
																					"}\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Functions\r",
																					"****************************************************************************************/\r",
																					"\r",
																					"function CreateXCorrelator() {\r",
																					"    let xCorrelator;\r",
																					"    xCorrelator = \"\";\r",
																					"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																					"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																					"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																					"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																					"    xCorrelator += GenerateRandomHexString(12);\r",
																					"    return xCorrelator;\r",
																					"}\r",
																					"\r",
																					"function GenerateRandomHexString(length) {\r",
																					"    var randomRandomHexString = \"\";\r",
																					"    while (randomRandomHexString.length < length) {\r",
																					"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																					"    }\r",
																					"    return randomRandomHexString.substring(0,length);\r",
																					"}\r",
																					"\r",
																					"function FaultyIpAddress() {\r",
																					"    let randomAddress;\r",
																					"    let addressParts = [];\r",
																					"    for (let i = 0; i < 3; i++) {\r",
																					"        addressParts[i] = String(Math.floor(Math.random() * 256));\r",
																					"    }\r",
																					"    addressParts[3] = String( Math.floor(Math.random() * 256) + 256 );\r",
																					"    randomAddress = addressParts[0] + \".\" + addressParts[1] + \".\" + addressParts[2] + \".\" + addressParts[3];\r",
																					"    return randomAddress;\r",
																					"}"
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"/****************************************************************************************\r",
																					"* Loading Input Data\r",
																					"****************************************************************************************/\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Extracting Result\r",
																					"****************************************************************************************/\r",
																					"var RESPONSE_CODE;\r",
																					"try {\r",
																					"    let response;\r",
																					"    response = pm.response;\r",
																					"\r",
																					"    RESPONSE_CODE = parseInt(response.code);\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Response Code could not be extracted.\");\r",
																					"}    \r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Testing\r",
																					"****************************************************************************************/\r",
																					"try {\r",
																					"    pm.test(\"POST /v1/regard-application responds 400, because of too-high ipv-4-address in address\", function () {\r",
																					"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																					"    });\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Testing could not be executed.\");\r",
																					"}\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Functions\r",
																					"****************************************************************************************/\r",
																					"\r",
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "x-mock-response-code",
																				"value": "400",
																				"type": "default"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{{requestBody}}",
																			"options": {
																				"raw": {
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{uri}}",
																			"host": [
																				"{{uri}}"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "Expected  /v1/regard-application - letters in  ipv-4-address in address",
																	"event": [
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					"console.log(\"\\n-----  letters in ipv-4-address of address -------------------------------\");\r",
																					"/****************************************************************************************\r",
																					"* Loading Input Data\r",
																					"****************************************************************************************/\r",
																					"var APPLICATION;\r",
																					"var OPERATION_KEY;\r",
																					"var applicationName;\r",
																					"var releaseNumber;\r",
																					"var protocol;\r",
																					"var dummyAddress;\r",
																					"var port;\r",
																					"try {\r",
																					"    APPLICATION = pm.environment.get(\"application\");\r",
																					"\r",
																					"    let currentOperationServer;\r",
																					"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																					"    \r",
																					"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																					"\r",
																					"    let httpClientLtp;\r",
																					"    httpClientLtp = pm.collectionVariables.get(\"httpClientLtp\");\r",
																					"\r",
																					"    applicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																					"    releaseNumber = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																					"\r",
																					"    let tcpClientLtp;\r",
																					"    tcpClientLtp = pm.collectionVariables.get(\"tcpClientLtp\");\r",
																					"\r",
																					"    protocol = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																					"    protocol = protocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																					"    \r",
																					"    let dummyIpv4Address = FaultyIpAddress();\r",
																					"    dummyAddress = {\r",
																					"        \"ip-address\": {\r",
																					"            \"ipv-4-address\": dummyIpv4Address\r",
																					"        }\r",
																					"    };\r",
																					"\r",
																					"    port = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(error);\r",
																					"    console.log(\"! Input Data could not be loaded.\");\r",
																					"}\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Defining Dummy Parameters\r",
																					"****************************************************************************************/\r",
																					"var USER_NAME;\r",
																					"var ORIGINATOR;\r",
																					"var X_CORRELATOR;\r",
																					"var TRACE_INDICATOR;\r",
																					"var CUSTOMER_JOURNEY;\r",
																					"try {\r",
																					"    USER_NAME = APPLICATION.userName;\r",
																					"    ORIGINATOR = \"Postman\";\r",
																					"    X_CORRELATOR = CreateXCorrelator();\r",
																					"    TRACE_INDICATOR = \"1\";\r",
																					"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																					"    \r",
																					"} catch (error) {\r",
																					"    console.log(\"! Could not define dummy values for parameters. \");\r",
																					"}\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Defining Request Body\r",
																					"****************************************************************************************/\r",
																					"var REQUEST_BODY;\r",
																					"try {\r",
																					"    REQUEST_BODY = '{'\r",
																					"        + '\"application-name\" : ' + '\"' + applicationName + '\",'\r",
																					"        + '\"release-number\" : ' + '\"' + releaseNumber + '\",'\r",
																					"        + '\"protocol\" : ' + '\"' + protocol + '\",'\r",
																					"        + '\"address\" : ' + JSON.stringify(dummyAddress) + ','\r",
																					"        + '\"port\" : ' +  port\r",
																					"    +'}';\r",
																					"} catch (error) {\r",
																					"    console.log(\"!Could not define request body. \");\r",
																					"}\r",
																					"/****************************************************************************************\r",
																					"* Setting Collection Variables\r",
																					"****************************************************************************************/\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Setting Local Variables and Preparing the Request\r",
																					"****************************************************************************************/\r",
																					"try {\r",
																					"    let URI;\r",
																					"    URI = APPLICATION.serverUrl + \"/v1/regard-application\";\r",
																					"\r",
																					"    let ACCEPT;\r",
																					"    ACCEPT = \"application/json\";\r",
																					"\r",
																					"    let CONTENT_TYPE;\r",
																					"    CONTENT_TYPE = \"application/json\";\r",
																					"\r",
																					"    pm.variables.clear();\r",
																					"\r",
																					"    pm.variables.set(\"uri\", URI);\r",
																					"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																					"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																					"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																					"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																					"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																					"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(error);\r",
																					"    console.log(\"! Local variables could not be set.\");\r",
																					"}\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Functions\r",
																					"****************************************************************************************/\r",
																					"\r",
																					"function CreateXCorrelator() {\r",
																					"    let xCorrelator;\r",
																					"    xCorrelator = \"\";\r",
																					"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																					"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																					"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																					"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																					"    xCorrelator += GenerateRandomHexString(12);\r",
																					"    return xCorrelator;\r",
																					"}\r",
																					"\r",
																					"function GenerateRandomHexString(length) {\r",
																					"    var randomRandomHexString = \"\";\r",
																					"    while (randomRandomHexString.length < length) {\r",
																					"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																					"    }\r",
																					"    return randomRandomHexString.substring(0,length);\r",
																					"}\r",
																					"\r",
																					"function FaultyIpAddress() {\r",
																					"    let randomAddress;\r",
																					"    let addressParts = [];\r",
																					"    for (let i = 0; i < 3; i++) {\r",
																					"        addressParts[i] = String(Math.floor(Math.random() * 256));\r",
																					"    }\r",
																					"    let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r",
																					"    let charactersLength = characters.length;\r",
																					"    addressParts[3] = characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																					"    randomAddress = addressParts[0] + \".\" + addressParts[1] + \".\" + addressParts[2] + \".\" + addressParts[3];\r",
																					"    return randomAddress;\r",
																					"}"
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"/****************************************************************************************\r",
																					"* Loading Input Data\r",
																					"****************************************************************************************/\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Extracting Result\r",
																					"****************************************************************************************/\r",
																					"var RESPONSE_CODE;\r",
																					"try {\r",
																					"    let response;\r",
																					"    response = pm.response;\r",
																					"\r",
																					"    RESPONSE_CODE = parseInt(response.code);\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Response Code could not be extracted.\");\r",
																					"}    \r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Testing\r",
																					"****************************************************************************************/\r",
																					"try {\r",
																					"    pm.test(\"POST /v1/regard-application responds 400, because of letters in ipv-4-address of address\", function () {\r",
																					"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																					"    });\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Testing could not be executed.\");\r",
																					"}\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Functions\r",
																					"****************************************************************************************/\r",
																					"\r",
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "x-mock-response-code",
																				"value": "400",
																				"type": "default"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{{requestBody}}",
																			"options": {
																				"raw": {
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{uri}}",
																			"host": [
																				"{{uri}}"
																			]
																		}
																	},
																	"response": []
																}
															]
														},
														{
															"name": "domain-name checked?",
															"item": [
																{
																	"name": "reference /core-model-1-4:control-construct",
																	"event": [
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					"console.log(\"\\n----- /v1/regard-application acceptance -- address/domain-name attribute checked? -------------------------------\");\r",
																					"/****************************************************************************************\r",
																					"* Loading Input Data\r",
																					"****************************************************************************************/\r",
																					"var APPLICATION;\r",
																					"try {\r",
																					"    APPLICATION = pm.environment.get(\"application\");\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Environment variables could not be loaded.\");\r",
																					"}\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Setting Local Variables and Preparing the Request\r",
																					"****************************************************************************************/\r",
																					"try {\r",
																					"    let URI;\r",
																					"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																					"\r",
																					"    let REQUEST_BODY;\r",
																					"    REQUEST_BODY = \"\";\r",
																					"\r",
																					"    let AUTHORIZATION;\r",
																					"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																					"\r",
																					"    let ACCEPT;\r",
																					"    ACCEPT = \"application/json\";\r",
																					"\r",
																					"    let CONTENT_TYPE;\r",
																					"    CONTENT_TYPE = \"application/json\";\r",
																					"\r",
																					"\r",
																					"    pm.variables.clear();\r",
																					"\r",
																					"    pm.variables.set(\"uri\", URI);\r",
																					"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																					"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Local variables could not be set.\");\r",
																					"}\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Functions\r",
																					"****************************************************************************************/\r",
																					"\r",
																					""
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"/****************************************************************************************\r",
																					"* Loading Input Data\r",
																					"****************************************************************************************/\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Extracting Result\r",
																					"****************************************************************************************/\r",
																					"var ltpList;\r",
																					"var fcList;\r",
																					"try {\r",
																					"    let response;\r",
																					"    response = pm.response;\r",
																					"    \r",
																					"    let responseCode;\r",
																					"    responseCode = parseInt(response.code);\r",
																					"    \r",
																					"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																					"        let responseObject;\r",
																					"        responseObject = JSON.parse(response.stream);\r",
																					"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																					"        fcList = responseObject[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
																					"\r",
																					"    } else {\r",
																					"        ltpList = [];\r",
																					"        fcList = [];\r",
																					"    }\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! ltpList could not be extracted.\");\r",
																					"}\r",
																					"\r",
																					"var currentOperationServer;\r",
																					"var httpClientLtp;\r",
																					"var tcpClientLtp;\r",
																					"try {\r",
																					"    currentOperationServer = FindOperationServer(\"/v1/regard-application\", ltpList);\r",
																					"\r",
																					"    //Inquiring OAM approvals\r",
																					"    let outputFcPortListInquireOamRequestApprovals;\r",
																					"    outputFcPortListInquireOamRequestApprovals = FindOutputFcPortList(\"NewApplicationCausesRequestForInquiringOamRequestApprovals\", fcList);\r",
																					"    let ltpInstance = FindRandomLtpInstancesFromFc(outputFcPortListInquireOamRequestApprovals, ltpList)\r",
																					"    httpClientLtp = ltpInstance.httpClientLtp;\r",
																					"    tcpClientLtp = FindServingLtp(httpClientLtp, ltpList);\r",
																					"} catch (error) {\r",
																					"    console.log(error);\r",
																					"    console.log(\"! Reference objects could not be extracted.\");\r",
																					"} \r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Setting Collection Variables\r",
																					"****************************************************************************************/\r",
																					"try {\r",
																					"    pm.collectionVariables.clear();\r",
																					"    \r",
																					"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																					"    pm.collectionVariables.set(\"httpClientLtp\", httpClientLtp);\r",
																					"    pm.collectionVariables.set(\"tcpClientLtp\", tcpClientLtp);\r",
																					"\r",
																					"    pm.collectionVariables.set(\"ltpList\", ltpList);\r",
																					"    pm.collectionVariables.set(\"fcList\", fcList);\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Collection variables could not be set.\");\r",
																					"}\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Functions\r",
																					"****************************************************************************************/\r",
																					"\r",
																					"function FindOperationServer(operationName, ltpList) {\r",
																					"    let operationServer;\r",
																					"    operationServer = \"\";\r",
																					"    try {\r",
																					"        let sampleUuid;\r",
																					"        for(let i=0; i<ltpList.length; i++) {\r",
																					"            sampleUuid = ltpList[i][\"uuid\"];\r",
																					"            if(sampleUuid.includes(\"op-s-\")) {\r",
																					"                let sampleOperationName;\r",
																					"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																					"                if(sampleOperationName == operationName) {\r",
																					"                    operationServer = ltpList[i];\r",
																					"                    return operationServer;\r",
																					"                }\r",
																					"            }\r",
																					"        }\r",
																					"    } catch (error) {\r",
																					"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																					"    }\r",
																					"    return operationServer;\r",
																					"}\r",
																					"\r",
																					"function FindRandomLtpInstancesFromFc(outputFcPortList, ltpList) {\r",
																					"    let ltpInstance = {};\r",
																					"    try {\r",
																					"        for ( let i=0; i<outputFcPortList.length; i++ ) {\r",
																					"            let randomOutputFcPort = outputFcPortList[Math.floor(Math.random() * outputFcPortList.length)];\r",
																					"            let outputLtpUuid = randomOutputFcPort[\"logical-termination-point\"];\r",
																					"            let operationClientLtp = FindActualInstanceByUuid(outputLtpUuid, ltpList);\r",
																					"\r",
																					"            let httpClientLtp = FindServingLtp(operationClientLtp, ltpList);\r",
																					"            let sampleApplicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																					"\r",
																					"            if (sampleApplicationName != \"AdministratorAdministration\") {\r",
																					"\t\t\t\tltpInstance = { httpClientLtp, operationClientLtp };\r",
																					"                break;\r",
																					"            }\r",
																					"        }\r",
																					"    } catch(error) {\r",
																					"        console.log(error);\r",
																					"        console.log(\"! Exception in function : FindRandomLtpInstancesFromFc. \")\r",
																					"    } \r",
																					"    return ltpInstance;\r",
																					"}\r",
																					"\r",
																					"\r",
																					"function FindOutputFcPortList(forwardingName, fcList) {\r",
																					"    let outputFcPortList;\r",
																					"    outputFcPortList = [];\r",
																					"    try {\r",
																					"        for( let i=0; i<fcList.length; i++ ) {\r",
																					"            for(let j=0; j<fcList[i][\"name\"].length; j++) {               \r",
																					"                if(fcList[i][\"name\"][j][\"value\"] == forwardingName) {\r",
																					"                    fcPortList = fcList[i][\"fc-port\"];\r",
																					"                    for(let k=0;k<fcPortList.length;k++) {\r",
																					"                        if(fcPortList[k][\"port-direction\"] == \"core-model-1-4:PORT_DIRECTION_TYPE_OUTPUT\") {\r",
																					"                            outputFcPortList.push(fcPortList[k]);\r",
																					"                        }\r",
																					"                    }\r",
																					"                    return outputFcPortList;\r",
																					"                }\r",
																					"            }\r",
																					"        }\r",
																					"    } catch (error) {\r",
																					"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																					"    }\r",
																					"    return outputFcPortList;\r",
																					"}\r",
																					"\r",
																					"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
																					"    let actualInstance;\r",
																					"    actualInstance = {};\r",
																					"    try {\r",
																					"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
																					"            let sampleUuid;\r",
																					"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
																					"            if( sampleUuid == expectedUuid ) {\r",
																					"                actualInstance = actualLtpList[i];\r",
																					"                return actualInstance;\r",
																					"            }\r",
																					"        }\r",
																					"\r",
																					"    } catch (error) {\r",
																					"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																					"    }\r",
																					"    return undefined;\r",
																					"}\r",
																					"\r",
																					"function FindServingLtp(clientLtp, ltpList) {\r",
																					"    let servingLtp;\r",
																					"    servingLtp = {};\r",
																					"    try{\r",
																					"        let serverLtpUuid;\r",
																					"        serverLtpUuid = clientLtp[\"server-ltp\"][0];\r",
																					"        for( let i=0; i<ltpList.length; i++ ) {\r",
																					"            let sampleUuid;\r",
																					"            sampleUuid = ltpList[i][\"uuid\"];\r",
																					"            if( sampleUuid == serverLtpUuid ) {\r",
																					"                servingLtp = ltpList[i];\r",
																					"                return servingLtp;\r",
																					"            }\r",
																					"        }\r",
																					"    } catch(error) {\r",
																					"        console.log(error);\r",
																					"        console.log(\"! Exception in function : FindServingLtp. \")\r",
																					"    }\r",
																					"    return servingLtp;\r",
																					"}\r",
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"protocolProfileBehavior": {
																		"disableBodyPruning": true
																	},
																	"request": {
																		"auth": {
																			"type": "noauth"
																		},
																		"method": "GET",
																		"header": [
																			{
																				"key": "x-mock-response-code",
																				"value": "200",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{{requestBody}}",
																			"options": {
																				"raw": {
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{uri}}",
																			"host": [
																				"{{uri}}"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "Expected  /v1/regard-application - faulty separators in domain-name of address",
																	"event": [
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					"console.log(\"\\n-----  faulty separators in domain-name of address -------------------------------\");\r",
																					"/****************************************************************************************\r",
																					"* Loading Input Data\r",
																					"****************************************************************************************/\r",
																					"var APPLICATION;\r",
																					"var OPERATION_KEY;\r",
																					"var applicationName;\r",
																					"var releaseNumber;\r",
																					"var protocol;\r",
																					"var dummyAddress;\r",
																					"var port;\r",
																					"try {\r",
																					"    APPLICATION = pm.environment.get(\"application\");\r",
																					"\r",
																					"    let currentOperationServer;\r",
																					"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																					"    \r",
																					"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																					"\r",
																					"    let httpClientLtp;\r",
																					"    httpClientLtp = pm.collectionVariables.get(\"httpClientLtp\");\r",
																					"\r",
																					"    applicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																					"    releaseNumber = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																					"\r",
																					"    let tcpClientLtp;\r",
																					"    tcpClientLtp = pm.collectionVariables.get(\"tcpClientLtp\");\r",
																					"\r",
																					"    protocol = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																					"    protocol = protocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																					"   \r",
																					"    let dummyDomainName = FaultyDomainName();\r",
																					"    dummyAddress = {\r",
																					"        \"domain-name\": dummyDomainName\r",
																					"    };\r",
																					"    port = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(error);\r",
																					"    console.log(\"! Input Data could not be loaded.\");\r",
																					"}\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Defining Dummy Parameters\r",
																					"****************************************************************************************/\r",
																					"var USER_NAME;\r",
																					"var ORIGINATOR;\r",
																					"var X_CORRELATOR;\r",
																					"var TRACE_INDICATOR;\r",
																					"var CUSTOMER_JOURNEY;\r",
																					"try {\r",
																					"    USER_NAME = APPLICATION.userName;\r",
																					"    ORIGINATOR = \"Postman\";\r",
																					"    X_CORRELATOR = CreateXCorrelator();\r",
																					"    TRACE_INDICATOR = \"1\";\r",
																					"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																					"    \r",
																					"} catch (error) {\r",
																					"    console.log(\"! Could not define dummy values for parameters. \");\r",
																					"}\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Defining Request Body\r",
																					"****************************************************************************************/\r",
																					"var REQUEST_BODY;\r",
																					"try {\r",
																					"    REQUEST_BODY = '{'\r",
																					"        + '\"application-name\" : ' + '\"' + applicationName + '\",'\r",
																					"        + '\"release-number\" : ' + '\"' + releaseNumber + '\",'\r",
																					"        + '\"protocol\" : ' + '\"' + protocol + '\",'\r",
																					"        + '\"address\" : ' + JSON.stringify(dummyAddress) + ','\r",
																					"        + '\"port\" : ' +  port\r",
																					"    +'}';\r",
																					"} catch (error) {\r",
																					"    console.log(\"!Could not define request body. \");\r",
																					"}\r",
																					"/****************************************************************************************\r",
																					"* Setting Collection Variables\r",
																					"****************************************************************************************/\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Setting Local Variables and Preparing the Request\r",
																					"****************************************************************************************/\r",
																					"try {\r",
																					"    let URI;\r",
																					"    URI = APPLICATION.serverUrl + \"/v1/regard-application\";\r",
																					"\r",
																					"    let ACCEPT;\r",
																					"    ACCEPT = \"application/json\";\r",
																					"\r",
																					"    let CONTENT_TYPE;\r",
																					"    CONTENT_TYPE = \"application/json\";\r",
																					"\r",
																					"    pm.variables.clear();\r",
																					"\r",
																					"    pm.variables.set(\"uri\", URI);\r",
																					"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																					"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																					"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																					"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																					"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																					"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(error);\r",
																					"    console.log(\"! Local variables could not be set.\");\r",
																					"}\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Functions\r",
																					"****************************************************************************************/\r",
																					"\r",
																					"function CreateXCorrelator() {\r",
																					"    let xCorrelator;\r",
																					"    xCorrelator = \"\";\r",
																					"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																					"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																					"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																					"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																					"    xCorrelator += GenerateRandomHexString(12);\r",
																					"    return xCorrelator;\r",
																					"}\r",
																					"\r",
																					"function GenerateRandomHexString(length) {\r",
																					"    var randomRandomHexString = \"\";\r",
																					"    while (randomRandomHexString.length < length) {\r",
																					"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																					"    }\r",
																					"    return randomRandomHexString.substring(0,length);\r",
																					"}\r",
																					"\r",
																					"function FaultyDomainName() {\r",
																					"    let randomAddress;\r",
																					"    let dummySubdomain = GenerateRandomString(Math.floor(1 + Math.random() * 10));\r",
																					"    let randomDomainPartLength = Math.floor(2 + Math.random() * 5);\r",
																					"    let dummyDomainName = \"\";\r",
																					"    for(let i=0; i<randomDomainPartLength; i += 2 ) {\r",
																					"        dummyDomainName = dummyDomainName + GenerateRandomString(Math.floor(1 + Math.random() * 4));\r",
																					"        dummyDomainName = dummyDomainName + GenerateRandomSeparator();\r",
																					"        dummyDomainName = dummyDomainName + GenerateRandomString(Math.floor(1 + Math.random() * 4));\r",
																					"    }\r",
																					"    let dummyTopLevelDomain = GenerateRandomString(Math.floor(2 + Math.random() * 5));\r",
																					"    let faultySeparator = GenerateRandomSeparator();\r",
																					"    randomAddress = dummySubdomain + faultySeparator + dummyDomainName + faultySeparator + dummyTopLevelDomain; \r",
																					"    return randomAddress;\r",
																					"}\r",
																					"\r",
																					"function GenerateRandomString(length) {\r",
																					"    let randomString;\r",
																					"    randomString = \"\";\r",
																					"    try {\r",
																					"        let characters = \"abcdefghijklmnopqrstuvwxyz\";\r",
																					"        let charactersLength = characters.length;\r",
																					"        for (let i = 0; i < length; i++) {\r",
																					"            randomString += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																					"        }\r",
																					"    } catch (error) {\r",
																					"        console.log(\"! Could not generate random string. \");\r",
																					"    }\r",
																					"    return randomString;\r",
																					"}\r",
																					"\r",
																					"function GenerateRandomSeparator() {\r",
																					"    let separators = \"!@$^*(){}[]<>.\";\r",
																					"    let randomSeparator = separators.charAt(Math.floor(Math.random() * separators.length));\r",
																					"    return randomSeparator;\r",
																					"}\r",
																					""
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"/****************************************************************************************\r",
																					"* Loading Input Data\r",
																					"****************************************************************************************/\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Extracting Result\r",
																					"****************************************************************************************/\r",
																					"var RESPONSE_CODE;\r",
																					"try {\r",
																					"    let response;\r",
																					"    response = pm.response;\r",
																					"\r",
																					"    RESPONSE_CODE = parseInt(response.code);\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Response Code could not be extracted.\");\r",
																					"}    \r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Testing\r",
																					"****************************************************************************************/\r",
																					"try {\r",
																					"    pm.test(\"POST /v1/regard-application responds 400, because of  faulty separators in domain-name of address\", function () {\r",
																					"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																					"    });\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Testing could not be executed.\");\r",
																					"}\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Functions\r",
																					"****************************************************************************************/\r",
																					"\r",
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "x-mock-response-code",
																				"value": "400",
																				"type": "default"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{{requestBody}}",
																			"options": {
																				"raw": {
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{uri}}",
																			"host": [
																				"{{uri}}"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "Expected  /v1/regard-application - missing separators in domain-name of address",
																	"event": [
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					"console.log(\"\\n-----  missing separators in domain-name of address -------------------------------\");\r",
																					"/****************************************************************************************\r",
																					"* Loading Input Data\r",
																					"****************************************************************************************/\r",
																					"var APPLICATION;\r",
																					"var OPERATION_KEY;\r",
																					"var applicationName;\r",
																					"var releaseNumber;\r",
																					"var protocol;\r",
																					"var dummyAddress;\r",
																					"var port;\r",
																					"try {\r",
																					"    APPLICATION = pm.environment.get(\"application\");\r",
																					"\r",
																					"    let currentOperationServer;\r",
																					"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																					"    \r",
																					"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																					"\r",
																					"    let httpClientLtp;\r",
																					"    httpClientLtp = pm.collectionVariables.get(\"httpClientLtp\");\r",
																					"\r",
																					"    applicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																					"    releaseNumber = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																					"\r",
																					"    let tcpClientLtp;\r",
																					"    tcpClientLtp = pm.collectionVariables.get(\"tcpClientLtp\");\r",
																					"\r",
																					"    protocol = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																					"    protocol = protocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																					"    \r",
																					"    let dummyDomainName = FaultyDomainName();\r",
																					"    dummyAddress = {\r",
																					"        \"domain-name\": dummyDomainName\r",
																					"    };\r",
																					"\r",
																					"    port = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(error);\r",
																					"    console.log(\"! Input Data could not be loaded.\");\r",
																					"}\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Defining Dummy Parameters\r",
																					"****************************************************************************************/\r",
																					"var USER_NAME;\r",
																					"var ORIGINATOR;\r",
																					"var X_CORRELATOR;\r",
																					"var TRACE_INDICATOR;\r",
																					"var CUSTOMER_JOURNEY;\r",
																					"try {\r",
																					"    USER_NAME = APPLICATION.userName;\r",
																					"    ORIGINATOR = \"Postman\";\r",
																					"    X_CORRELATOR = CreateXCorrelator();\r",
																					"    TRACE_INDICATOR = \"1\";\r",
																					"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																					"    \r",
																					"} catch (error) {\r",
																					"    console.log(\"! Could not define dummy values for parameters. \");\r",
																					"}\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Defining Request Body\r",
																					"****************************************************************************************/\r",
																					"var REQUEST_BODY;\r",
																					"try {\r",
																					"    REQUEST_BODY = '{'\r",
																					"        + '\"application-name\" : ' + '\"' + applicationName + '\",'\r",
																					"        + '\"release-number\" : ' + '\"' + releaseNumber + '\",'\r",
																					"        + '\"protocol\" : ' + '\"' + protocol + '\",'\r",
																					"        + '\"address\" : ' + JSON.stringify(dummyAddress) + ','\r",
																					"        + '\"port\" : ' +  port\r",
																					"    +'}';\r",
																					"} catch (error) {\r",
																					"    console.log(\"!Could not define request body. \");\r",
																					"}\r",
																					"/****************************************************************************************\r",
																					"* Setting Collection Variables\r",
																					"****************************************************************************************/\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Setting Local Variables and Preparing the Request\r",
																					"****************************************************************************************/\r",
																					"try {\r",
																					"    let URI;\r",
																					"    URI = APPLICATION.serverUrl + \"/v1/regard-application\";\r",
																					"\r",
																					"    let ACCEPT;\r",
																					"    ACCEPT = \"application/json\";\r",
																					"\r",
																					"    let CONTENT_TYPE;\r",
																					"    CONTENT_TYPE = \"application/json\";\r",
																					"\r",
																					"    pm.variables.clear();\r",
																					"\r",
																					"    pm.variables.set(\"uri\", URI);\r",
																					"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																					"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																					"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																					"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																					"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																					"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(error);\r",
																					"    console.log(\"! Local variables could not be set.\");\r",
																					"}\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Functions\r",
																					"****************************************************************************************/\r",
																					"\r",
																					"function CreateXCorrelator() {\r",
																					"    let xCorrelator;\r",
																					"    xCorrelator = \"\";\r",
																					"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																					"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																					"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																					"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																					"    xCorrelator += GenerateRandomHexString(12);\r",
																					"    return xCorrelator;\r",
																					"}\r",
																					"\r",
																					"function GenerateRandomHexString(length) {\r",
																					"    var randomRandomHexString = \"\";\r",
																					"    while (randomRandomHexString.length < length) {\r",
																					"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																					"    }\r",
																					"    return randomRandomHexString.substring(0,length);\r",
																					"}\r",
																					"\r",
																					"function FaultyDomainName() {\r",
																					"    let randomAddress;\r",
																					"    let dummySubdomain = GenerateRandomString(Math.floor(1 + Math.random() * 10));\r",
																					"    let randomDomainPartLength = Math.floor(2 + Math.random() * 5);\r",
																					"    let dummyDomainName = \"\";\r",
																					"    for(let i=0; i<randomDomainPartLength; i += 2 ) {\r",
																					"        dummyDomainName = dummyDomainName + GenerateRandomString(Math.floor(1 + Math.random() * 4));\r",
																					"        dummyDomainName = dummyDomainName + GenerateRandomString(Math.floor(1 + Math.random() * 4));\r",
																					"    }\r",
																					"    let dummyTopLevelDomain = GenerateRandomString(Math.floor(2 + Math.random() * 5));\r",
																					"    randomAddress = dummySubdomain + dummyDomainName + dummyTopLevelDomain; \r",
																					"    return randomAddress;\r",
																					"}\r",
																					"\r",
																					"function GenerateRandomString(length) {\r",
																					"    let randomString;\r",
																					"    randomString = \"\";\r",
																					"    try {\r",
																					"        let characters = \"abcdefghijklmnopqrstuvwxyz\";\r",
																					"        let charactersLength = characters.length;\r",
																					"        for (let i = 0; i < length; i++) {\r",
																					"            randomString += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																					"        }\r",
																					"    } catch (error) {\r",
																					"        console.log(\"! Could not generate random string. \");\r",
																					"    }\r",
																					"    return randomString;\r",
																					"}\r",
																					""
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"/****************************************************************************************\r",
																					"* Loading Input Data\r",
																					"****************************************************************************************/\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Extracting Result\r",
																					"****************************************************************************************/\r",
																					"var RESPONSE_CODE;\r",
																					"try {\r",
																					"    let response;\r",
																					"    response = pm.response;\r",
																					"\r",
																					"    RESPONSE_CODE = parseInt(response.code);\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Response Code could not be extracted.\");\r",
																					"}    \r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Testing\r",
																					"****************************************************************************************/\r",
																					"try {\r",
																					"    pm.test(\"POST /v1/regard-application responds 400, because of  missing separators in domain-name of address\", function () {\r",
																					"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																					"    });\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Testing could not be executed.\");\r",
																					"}\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Functions\r",
																					"****************************************************************************************/\r",
																					"\r",
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "x-mock-response-code",
																				"value": "400",
																				"type": "default"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{{requestBody}}",
																			"options": {
																				"raw": {
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{uri}}",
																			"host": [
																				"{{uri}}"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "Expected  /v1/regard-application - string with spaces in domain-name of address Copy",
																	"event": [
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					"console.log(\"\\n-----  spaces in domain-name of address -------------------------------\");\r",
																					"/****************************************************************************************\r",
																					"* Loading Input Data\r",
																					"****************************************************************************************/\r",
																					"var APPLICATION;\r",
																					"var OPERATION_KEY;\r",
																					"var applicationName;\r",
																					"var releaseNumber;\r",
																					"var protocol;\r",
																					"var dummyAddress;\r",
																					"var port;\r",
																					"try {\r",
																					"    APPLICATION = pm.environment.get(\"application\");\r",
																					"\r",
																					"    let currentOperationServer;\r",
																					"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																					"    \r",
																					"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																					"\r",
																					"    let httpClientLtp;\r",
																					"    httpClientLtp = pm.collectionVariables.get(\"httpClientLtp\");\r",
																					"\r",
																					"    applicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																					"    releaseNumber = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																					"\r",
																					"    let tcpClientLtp;\r",
																					"    tcpClientLtp = pm.collectionVariables.get(\"tcpClientLtp\");\r",
																					"\r",
																					"    protocol = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																					"    protocol = protocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																					"    \r",
																					"    let dummyDomainName = FaultyDomainName();\r",
																					"    dummyAddress = {\r",
																					"        \"domain-name\": dummyDomainName\r",
																					"    };\r",
																					"    \r",
																					"    port = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																					"} catch (error) {\r",
																					"    console.log(error);\r",
																					"    console.log(\"! Input Data could not be loaded.\");\r",
																					"}\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Defining Dummy Parameters\r",
																					"****************************************************************************************/\r",
																					"var USER_NAME;\r",
																					"var ORIGINATOR;\r",
																					"var X_CORRELATOR;\r",
																					"var TRACE_INDICATOR;\r",
																					"var CUSTOMER_JOURNEY;\r",
																					"try {\r",
																					"    USER_NAME = APPLICATION.userName;\r",
																					"    ORIGINATOR = \"Postman\";\r",
																					"    X_CORRELATOR = CreateXCorrelator();\r",
																					"    TRACE_INDICATOR = \"1\";\r",
																					"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																					"    \r",
																					"} catch (error) {\r",
																					"    console.log(\"! Could not define dummy values for parameters. \");\r",
																					"}\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Defining Request Body\r",
																					"****************************************************************************************/\r",
																					"var REQUEST_BODY;\r",
																					"try {\r",
																					"    REQUEST_BODY = '{'\r",
																					"        + '\"application-name\" : ' + '\"' + applicationName + '\",'\r",
																					"        + '\"release-number\" : ' + '\"' + releaseNumber + '\",'\r",
																					"        + '\"protocol\" : ' + '\"' + protocol + '\",'\r",
																					"        + '\"address\" : ' + JSON.stringify(dummyAddress) + ','\r",
																					"        + '\"port\" : ' +  port\r",
																					"    +'}';\r",
																					"} catch (error) {\r",
																					"    console.log(\"!Could not define request body. \");\r",
																					"}\r",
																					"/****************************************************************************************\r",
																					"* Setting Collection Variables\r",
																					"****************************************************************************************/\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Setting Local Variables and Preparing the Request\r",
																					"****************************************************************************************/\r",
																					"try {\r",
																					"    let URI;\r",
																					"    URI = APPLICATION.serverUrl + \"/v1/regard-application\";\r",
																					"\r",
																					"    let ACCEPT;\r",
																					"    ACCEPT = \"application/json\";\r",
																					"\r",
																					"    let CONTENT_TYPE;\r",
																					"    CONTENT_TYPE = \"application/json\";\r",
																					"\r",
																					"    pm.variables.clear();\r",
																					"\r",
																					"    pm.variables.set(\"uri\", URI);\r",
																					"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																					"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																					"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																					"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																					"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																					"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(error);\r",
																					"    console.log(\"! Local variables could not be set.\");\r",
																					"}\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Functions\r",
																					"****************************************************************************************/\r",
																					"\r",
																					"function CreateXCorrelator() {\r",
																					"    let xCorrelator;\r",
																					"    xCorrelator = \"\";\r",
																					"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																					"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																					"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																					"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																					"    xCorrelator += GenerateRandomHexString(12);\r",
																					"    return xCorrelator;\r",
																					"}\r",
																					"\r",
																					"function GenerateRandomHexString(length) {\r",
																					"    var randomRandomHexString = \"\";\r",
																					"    while (randomRandomHexString.length < length) {\r",
																					"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																					"    }\r",
																					"    return randomRandomHexString.substring(0,length);\r",
																					"}\r",
																					"\r",
																					"function FaultyDomainName() {\r",
																					"    let randomAddress;\r",
																					"    let dummySubdomain = GenerateRandomString(Math.floor(1 + Math.random() * 10));\r",
																					"    let randomDomainPartLength = Math.floor(2 + Math.random() * 5);\r",
																					"    let dummyDomainName = \"\";\r",
																					"    for(let i=0; i<randomDomainPartLength; i += 2 ) {\r",
																					"        dummyDomainName = dummyDomainName + GenerateRandomString(Math.floor(1 + Math.random() * 4));\r",
																					"        dummyDomainName = dummyDomainName + GenerateRandomString(Math.floor(1 + Math.random() * 4));\r",
																					"    }\r",
																					"    let dummyTopLevelDomain = GenerateRandomString(Math.floor(2 + Math.random() * 5));\r",
																					"    randomAddress = dummySubdomain + \" \" + dummyDomainName + \" \" + dummyTopLevelDomain; \r",
																					"    return randomAddress;\r",
																					"}\r",
																					"\r",
																					"function GenerateRandomString(length) {\r",
																					"    let randomString;\r",
																					"    randomString = \"\";\r",
																					"    try {\r",
																					"        let characters = \"abcdefghijklmnopqrstuvwxyz\";\r",
																					"        let charactersLength = characters.length;\r",
																					"        for (let i = 0; i < length; i++) {\r",
																					"            randomString += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																					"        }\r",
																					"    } catch (error) {\r",
																					"        console.log(\"! Could not generate random string. \");\r",
																					"    }\r",
																					"    return randomString;\r",
																					"}"
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"/****************************************************************************************\r",
																					"* Loading Input Data\r",
																					"****************************************************************************************/\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Extracting Result\r",
																					"****************************************************************************************/\r",
																					"var RESPONSE_CODE;\r",
																					"try {\r",
																					"    let response;\r",
																					"    response = pm.response;\r",
																					"\r",
																					"    RESPONSE_CODE = parseInt(response.code);\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Response Code could not be extracted.\");\r",
																					"}    \r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Testing\r",
																					"****************************************************************************************/\r",
																					"try {\r",
																					"    pm.test(\"POST /v1/regard-application responds 400, because of  spaces in domain-name of address\", function () {\r",
																					"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																					"    });\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Testing could not be executed.\");\r",
																					"}\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Functions\r",
																					"****************************************************************************************/\r",
																					"\r",
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "x-mock-response-code",
																				"value": "400",
																				"type": "default"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{{requestBody}}",
																			"options": {
																				"raw": {
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{uri}}",
																			"host": [
																				"{{uri}}"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "Expected  /v1/regard-application - numbers in TLD of domain-name of address",
																	"event": [
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					"console.log(\"\\n-----  numbers in Top-lebvel-domain component of domain-name of address -------------------------------\");\r",
																					"/****************************************************************************************\r",
																					"* Loading Input Data\r",
																					"****************************************************************************************/\r",
																					"var APPLICATION;\r",
																					"var OPERATION_KEY;\r",
																					"var applicationName;\r",
																					"var releaseNumber;\r",
																					"var protocol;\r",
																					"var dummyAddress;\r",
																					"var port;\r",
																					"try {\r",
																					"    APPLICATION = pm.environment.get(\"application\");\r",
																					"\r",
																					"    let currentOperationServer;\r",
																					"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																					"    \r",
																					"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																					"\r",
																					"    let httpClientLtp;\r",
																					"    httpClientLtp = pm.collectionVariables.get(\"httpClientLtp\");\r",
																					"\r",
																					"    applicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																					"    releaseNumber = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																					"\r",
																					"    let tcpClientLtp;\r",
																					"    tcpClientLtp = pm.collectionVariables.get(\"tcpClientLtp\");\r",
																					"\r",
																					"    protocol = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																					"    protocol = protocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																					"        \r",
																					"    let dummyDomainName = FaultyDomainName();\r",
																					"    dummyAddress = {\r",
																					"        \"domain-name\": dummyDomainName\r",
																					"    };\r",
																					"    \r",
																					"    port = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																					"} catch (error) {\r",
																					"    console.log(error);\r",
																					"    console.log(\"! Input Data could not be loaded.\");\r",
																					"}\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Defining Dummy Parameters\r",
																					"****************************************************************************************/\r",
																					"var USER_NAME;\r",
																					"var ORIGINATOR;\r",
																					"var X_CORRELATOR;\r",
																					"var TRACE_INDICATOR;\r",
																					"var CUSTOMER_JOURNEY;\r",
																					"try {\r",
																					"    USER_NAME = APPLICATION.userName;\r",
																					"    ORIGINATOR = \"Postman\";\r",
																					"    X_CORRELATOR = CreateXCorrelator();\r",
																					"    TRACE_INDICATOR = \"1\";\r",
																					"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																					"    \r",
																					"} catch (error) {\r",
																					"    console.log(\"! Could not define dummy values for parameters. \");\r",
																					"}\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Defining Request Body\r",
																					"****************************************************************************************/\r",
																					"var REQUEST_BODY;\r",
																					"try {\r",
																					"    REQUEST_BODY = '{'\r",
																					"        + '\"application-name\" : ' + '\"' + applicationName + '\",'\r",
																					"        + '\"release-number\" : ' + '\"' + releaseNumber + '\",'\r",
																					"        + '\"protocol\" : ' + '\"' + protocol + '\",'\r",
																					"        + '\"address\" : ' + JSON.stringify(dummyAddress) + ','\r",
																					"        + '\"port\" : ' +  port\r",
																					"    +'}';\r",
																					"} catch (error) {\r",
																					"    console.log(\"!Could not define request body. \");\r",
																					"}\r",
																					"/****************************************************************************************\r",
																					"* Setting Collection Variables\r",
																					"****************************************************************************************/\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Setting Local Variables and Preparing the Request\r",
																					"****************************************************************************************/\r",
																					"try {\r",
																					"    let URI;\r",
																					"    URI = APPLICATION.serverUrl + \"/v1/regard-application\";\r",
																					"\r",
																					"    let ACCEPT;\r",
																					"    ACCEPT = \"application/json\";\r",
																					"\r",
																					"    let CONTENT_TYPE;\r",
																					"    CONTENT_TYPE = \"application/json\";\r",
																					"\r",
																					"    pm.variables.clear();\r",
																					"\r",
																					"    pm.variables.set(\"uri\", URI);\r",
																					"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																					"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																					"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																					"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																					"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																					"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(error);\r",
																					"    console.log(\"! Local variables could not be set.\");\r",
																					"}\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Functions\r",
																					"****************************************************************************************/\r",
																					"\r",
																					"function CreateXCorrelator() {\r",
																					"    let xCorrelator;\r",
																					"    xCorrelator = \"\";\r",
																					"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																					"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																					"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																					"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																					"    xCorrelator += GenerateRandomHexString(12);\r",
																					"    return xCorrelator;\r",
																					"}\r",
																					"\r",
																					"function GenerateRandomHexString(length) {\r",
																					"    var randomRandomHexString = \"\";\r",
																					"    while (randomRandomHexString.length < length) {\r",
																					"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																					"    }\r",
																					"    return randomRandomHexString.substring(0,length);\r",
																					"}\r",
																					"\r",
																					"function FaultyDomainName() {\r",
																					"    let randomAddress;\r",
																					"    let dummySubdomain = GenerateRandomString(Math.floor(1 + Math.random() * 10));\r",
																					"    let randomDomainPartLength = Math.floor(2 + Math.random() * 5);\r",
																					"    let dummyDomainName = \"\";\r",
																					"    for(let i=0; i<randomDomainPartLength; i += 2 ) {\r",
																					"        dummyDomainName = dummyDomainName + GenerateRandomString(Math.floor(1 + Math.random() * 4));\r",
																					"        dummyDomainName = dummyDomainName + GenerateRandomSeparator();\r",
																					"        dummyDomainName = dummyDomainName + GenerateRandomString(Math.floor(1 + Math.random() * 4));\r",
																					"    }\r",
																					"    let dummyTopLevelDomain = GenerateRandomString(Math.floor(2 + Math.random() * 5));\r",
																					"    let randomIndex = Math.floor(Math.random() * dummyTopLevelDomain.length);\r",
																					"    faultyTopLevelDomain = dummyTopLevelDomain.substr(0,randomIndex) + randomIndex + dummyTopLevelDomain.substr(randomIndex+1);\r",
																					"    randomAddress = dummySubdomain + \".\" + dummyDomainName + \".\" + faultyTopLevelDomain; \r",
																					"    return randomAddress;\r",
																					"}\r",
																					"\r",
																					"function GenerateRandomString(length) {\r",
																					"    let randomString;\r",
																					"    randomString = \"\";\r",
																					"    try {\r",
																					"        let characters = \"abcdefghijklmnopqrstuvwxyz\";\r",
																					"        let charactersLength = characters.length;\r",
																					"        for (let i = 0; i < length; i++) {\r",
																					"            randomString += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																					"        }\r",
																					"    } catch (error) {\r",
																					"        console.log(\"! Could not generate random string. \");\r",
																					"    }\r",
																					"    return randomString;\r",
																					"}\r",
																					"\r",
																					"function GenerateRandomSeparator() {\r",
																					"    let separators = [\".\", \"-\"];\r",
																					"    let randomSeparator = separators[Math.floor(Math.random() * separators.length)];\r",
																					"    return randomSeparator;\r",
																					"}\r",
																					""
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"/****************************************************************************************\r",
																					"* Loading Input Data\r",
																					"****************************************************************************************/\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Extracting Result\r",
																					"****************************************************************************************/\r",
																					"var RESPONSE_CODE;\r",
																					"try {\r",
																					"    let response;\r",
																					"    response = pm.response;\r",
																					"\r",
																					"    RESPONSE_CODE = parseInt(response.code);\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Response Code could not be extracted.\");\r",
																					"}    \r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Testing\r",
																					"****************************************************************************************/\r",
																					"try {\r",
																					"    pm.test(\"POST /v1/regard-application responds 400, because of  numbers in Top-lebvel-domain component of domain-name of address\", function () {\r",
																					"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																					"    });\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Testing could not be executed.\");\r",
																					"}\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Functions\r",
																					"****************************************************************************************/\r",
																					"\r",
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "x-mock-response-code",
																				"value": "400",
																				"type": "default"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{{requestBody}}",
																			"options": {
																				"raw": {
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{uri}}",
																			"host": [
																				"{{uri}}"
																			]
																		}
																	},
																	"response": []
																}
															]
														},
														{
															"name": "address checked?",
															"item": [
																{
																	"name": "reference /core-model-1-4:control-construct",
																	"event": [
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					"console.log(\"\\n----- /v1/regard-application acceptance -- address checked? -------------------------------\");\r",
																					"/****************************************************************************************\r",
																					"* Loading Input Data\r",
																					"****************************************************************************************/\r",
																					"var APPLICATION;\r",
																					"try {\r",
																					"    APPLICATION = pm.environment.get(\"application\");\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Environment variables could not be loaded.\");\r",
																					"}\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Setting Local Variables and Preparing the Request\r",
																					"****************************************************************************************/\r",
																					"try {\r",
																					"    let URI;\r",
																					"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																					"\r",
																					"    let REQUEST_BODY;\r",
																					"    REQUEST_BODY = \"\";\r",
																					"\r",
																					"    let AUTHORIZATION;\r",
																					"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																					"\r",
																					"    let ACCEPT;\r",
																					"    ACCEPT = \"application/json\";\r",
																					"\r",
																					"    let CONTENT_TYPE;\r",
																					"    CONTENT_TYPE = \"application/json\";\r",
																					"\r",
																					"\r",
																					"    pm.variables.clear();\r",
																					"\r",
																					"    pm.variables.set(\"uri\", URI);\r",
																					"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																					"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Local variables could not be set.\");\r",
																					"}\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Functions\r",
																					"****************************************************************************************/\r",
																					"\r",
																					""
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"/****************************************************************************************\r",
																					"* Loading Input Data\r",
																					"****************************************************************************************/\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Extracting Result\r",
																					"****************************************************************************************/\r",
																					"var ltpList;\r",
																					"var fcList;\r",
																					"try {\r",
																					"    let response;\r",
																					"    response = pm.response;\r",
																					"    \r",
																					"    let responseCode;\r",
																					"    responseCode = parseInt(response.code);\r",
																					"    \r",
																					"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																					"        let responseObject;\r",
																					"        responseObject = JSON.parse(response.stream);\r",
																					"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																					"        fcList = responseObject[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
																					"\r",
																					"    } else {\r",
																					"        ltpList = [];\r",
																					"        fcList = [];\r",
																					"    }\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! ltpList could not be extracted.\");\r",
																					"}\r",
																					"\r",
																					"var currentOperationServer;\r",
																					"var httpClientLtp;\r",
																					"var tcpClientLtp;\r",
																					"try {\r",
																					"    currentOperationServer = FindOperationServer(\"/v1/regard-application\", ltpList);\r",
																					"\r",
																					"    //Inquiring OAM approvals\r",
																					"    let outputFcPortListInquireOamRequestApprovals;\r",
																					"    outputFcPortListInquireOamRequestApprovals = FindOutputFcPortList(\"NewApplicationCausesRequestForInquiringOamRequestApprovals\", fcList);\r",
																					"    let ltpInstance = FindRandomLtpInstancesFromFc(outputFcPortListInquireOamRequestApprovals, ltpList)\r",
																					"    httpClientLtp = ltpInstance.httpClientLtp;\r",
																					"    tcpClientLtp = FindServingLtp(httpClientLtp, ltpList);\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(error);\r",
																					"    console.log(\"! Reference objects could not be extracted.\");\r",
																					"} \r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Setting Collection Variables\r",
																					"****************************************************************************************/\r",
																					"try {\r",
																					"    pm.collectionVariables.clear();\r",
																					"    \r",
																					"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																					"    pm.collectionVariables.set(\"httpClientLtp\", httpClientLtp);\r",
																					"    pm.collectionVariables.set(\"tcpClientLtp\", tcpClientLtp);\r",
																					"\r",
																					"    pm.collectionVariables.set(\"ltpList\", ltpList);\r",
																					"    pm.collectionVariables.set(\"fcList\", fcList);\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Collection variables could not be set.\");\r",
																					"}\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Functions\r",
																					"****************************************************************************************/\r",
																					"\r",
																					"function FindOperationServer(operationName, ltpList) {\r",
																					"    let operationServer;\r",
																					"    operationServer = \"\";\r",
																					"    try {\r",
																					"        let sampleUuid;\r",
																					"        for(let i=0; i<ltpList.length; i++) {\r",
																					"            sampleUuid = ltpList[i][\"uuid\"];\r",
																					"            if(sampleUuid.includes(\"op-s-\")) {\r",
																					"                let sampleOperationName;\r",
																					"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																					"                if(sampleOperationName == operationName) {\r",
																					"                    operationServer = ltpList[i];\r",
																					"                    return operationServer;\r",
																					"                }\r",
																					"            }\r",
																					"        }\r",
																					"    } catch (error) {\r",
																					"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																					"    }\r",
																					"    return operationServer;\r",
																					"}\r",
																					"\r",
																					"function FindRandomLtpInstancesFromFc(outputFcPortList, ltpList) {\r",
																					"    let ltpInstance = {};\r",
																					"    try {\r",
																					"        for ( let i=0; i<outputFcPortList.length; i++ ) {\r",
																					"            let randomOutputFcPort = outputFcPortList[Math.floor(Math.random() * outputFcPortList.length)];\r",
																					"            let outputLtpUuid = randomOutputFcPort[\"logical-termination-point\"];\r",
																					"            let operationClientLtp = FindActualInstanceByUuid(outputLtpUuid, ltpList);\r",
																					"\r",
																					"            let httpClientLtp = FindServingLtp(operationClientLtp, ltpList);\r",
																					"            let sampleApplicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																					"\r",
																					"            if (sampleApplicationName != \"AdministratorAdministration\") {\r",
																					"\t\t\t\tltpInstance = { httpClientLtp, operationClientLtp };\r",
																					"                break;\r",
																					"            }\r",
																					"        }\r",
																					"    } catch(error) {\r",
																					"        console.log(error);\r",
																					"        console.log(\"! Exception in function : FindRandomLtpInstancesFromFc. \")\r",
																					"    } \r",
																					"    return ltpInstance;\r",
																					"}\r",
																					"\r",
																					"\r",
																					"function FindOutputFcPortList(forwardingName, fcList) {\r",
																					"    let outputFcPortList;\r",
																					"    outputFcPortList = [];\r",
																					"    try {\r",
																					"        for( let i=0; i<fcList.length; i++ ) {\r",
																					"            for(let j=0; j<fcList[i][\"name\"].length; j++) {               \r",
																					"                if(fcList[i][\"name\"][j][\"value\"] == forwardingName) {\r",
																					"                    fcPortList = fcList[i][\"fc-port\"];\r",
																					"                    for(let k=0;k<fcPortList.length;k++) {\r",
																					"                        if(fcPortList[k][\"port-direction\"] == \"core-model-1-4:PORT_DIRECTION_TYPE_OUTPUT\") {\r",
																					"                            outputFcPortList.push(fcPortList[k]);\r",
																					"                        }\r",
																					"                    }\r",
																					"                    return outputFcPortList;\r",
																					"                }\r",
																					"            }\r",
																					"        }\r",
																					"    } catch (error) {\r",
																					"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																					"    }\r",
																					"    return outputFcPortList;\r",
																					"}\r",
																					"\r",
																					"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
																					"    let actualInstance;\r",
																					"    actualInstance = {};\r",
																					"    try {\r",
																					"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
																					"            let sampleUuid;\r",
																					"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
																					"            if( sampleUuid == expectedUuid ) {\r",
																					"                actualInstance = actualLtpList[i];\r",
																					"                return actualInstance;\r",
																					"            }\r",
																					"        }\r",
																					"\r",
																					"    } catch (error) {\r",
																					"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																					"    }\r",
																					"    return undefined;\r",
																					"}\r",
																					"\r",
																					"function FindServingLtp(clientLtp, ltpList) {\r",
																					"    let servingLtp;\r",
																					"    servingLtp = {};\r",
																					"    try{\r",
																					"        let serverLtpUuid;\r",
																					"        serverLtpUuid = clientLtp[\"server-ltp\"][0];\r",
																					"        for( let i=0; i<ltpList.length; i++ ) {\r",
																					"            let sampleUuid;\r",
																					"            sampleUuid = ltpList[i][\"uuid\"];\r",
																					"            if( sampleUuid == serverLtpUuid ) {\r",
																					"                servingLtp = ltpList[i];\r",
																					"                return servingLtp;\r",
																					"            }\r",
																					"        }\r",
																					"    } catch(error) {\r",
																					"        console.log(error);\r",
																					"        console.log(\"! Exception in function : FindServingLtp. \")\r",
																					"    }\r",
																					"    return servingLtp;\r",
																					"}\r",
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"protocolProfileBehavior": {
																		"disableBodyPruning": true
																	},
																	"request": {
																		"auth": {
																			"type": "noauth"
																		},
																		"method": "GET",
																		"header": [
																			{
																				"key": "x-mock-response-code",
																				"value": "200",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{{requestBody}}",
																			"options": {
																				"raw": {
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{uri}}",
																			"host": [
																				"{{uri}}"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "Expected  /v1/regard-application - a non-object address attribute",
																	"event": [
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					"console.log(\"\\n-----  a non-object address attribute -------------------------------\");\r",
																					"/****************************************************************************************\r",
																					"* Loading Input Data\r",
																					"****************************************************************************************/\r",
																					"var APPLICATION;\r",
																					"var OPERATION_KEY;\r",
																					"var applicationName;\r",
																					"var releaseNumber;\r",
																					"var protocol;\r",
																					"var dummyAddress;\r",
																					"var port;\r",
																					"try {\r",
																					"    APPLICATION = pm.environment.get(\"application\");\r",
																					"\r",
																					"    let currentOperationServer;\r",
																					"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																					"    \r",
																					"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																					"\r",
																					"    let httpClientLtp;\r",
																					"    httpClientLtp = pm.collectionVariables.get(\"httpClientLtp\");\r",
																					"\r",
																					"    applicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																					"    releaseNumber = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																					"\r",
																					"    let tcpClientLtp;\r",
																					"    tcpClientLtp = pm.collectionVariables.get(\"tcpClientLtp\");\r",
																					"\r",
																					"    protocol = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																					"    protocol = protocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																					"\r",
																					"    dummyAddress = RandomIpAddress();\r",
																					" \r",
																					"    port = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																					"} catch (error) {\r",
																					"    console.log(error);\r",
																					"    console.log(\"! Input Data could not be loaded.\");\r",
																					"}\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Defining Dummy Parameters\r",
																					"****************************************************************************************/\r",
																					"var USER_NAME;\r",
																					"var ORIGINATOR;\r",
																					"var X_CORRELATOR;\r",
																					"var TRACE_INDICATOR;\r",
																					"var CUSTOMER_JOURNEY;\r",
																					"try {\r",
																					"    USER_NAME = APPLICATION.userName;\r",
																					"    ORIGINATOR = \"Postman\";\r",
																					"    X_CORRELATOR = CreateXCorrelator();\r",
																					"    TRACE_INDICATOR = \"1\";\r",
																					"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																					"    \r",
																					"} catch (error) {\r",
																					"    console.log(\"! Could not define dummy values for parameters. \");\r",
																					"}\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Defining Request Body\r",
																					"****************************************************************************************/\r",
																					"var REQUEST_BODY;\r",
																					"try {\r",
																					"    REQUEST_BODY = '{'\r",
																					"        + '\"application-name\" : ' + '\"' + applicationName + '\",'\r",
																					"        + '\"release-number\" : ' + '\"' + releaseNumber + '\",'\r",
																					"        + '\"protocol\" : ' + '\"' + protocol + '\",'\r",
																					"        + '\"address\" : ' + JSON.stringify(dummyAddress) + ','\r",
																					"        + '\"port\" : ' +  port\r",
																					"    +'}';\r",
																					"} catch (error) {\r",
																					"    console.log(\"!Could not define request body. \");\r",
																					"}\r",
																					"/****************************************************************************************\r",
																					"* Setting Collection Variables\r",
																					"****************************************************************************************/\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Setting Local Variables and Preparing the Request\r",
																					"****************************************************************************************/\r",
																					"try {\r",
																					"    let URI;\r",
																					"    URI = APPLICATION.serverUrl + \"/v1/regard-application\";\r",
																					"\r",
																					"    let ACCEPT;\r",
																					"    ACCEPT = \"application/json\";\r",
																					"\r",
																					"    let CONTENT_TYPE;\r",
																					"    CONTENT_TYPE = \"application/json\";\r",
																					"\r",
																					"    pm.variables.clear();\r",
																					"\r",
																					"    pm.variables.set(\"uri\", URI);\r",
																					"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																					"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																					"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																					"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																					"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																					"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(error);\r",
																					"    console.log(\"! Local variables could not be set.\");\r",
																					"}\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Functions\r",
																					"****************************************************************************************/\r",
																					"\r",
																					"function CreateXCorrelator() {\r",
																					"    let xCorrelator;\r",
																					"    xCorrelator = \"\";\r",
																					"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																					"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																					"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																					"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																					"    xCorrelator += GenerateRandomHexString(12);\r",
																					"    return xCorrelator;\r",
																					"}\r",
																					"\r",
																					"function GenerateRandomHexString(length) {\r",
																					"    var randomRandomHexString = \"\";\r",
																					"    while (randomRandomHexString.length < length) {\r",
																					"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																					"    }\r",
																					"    return randomRandomHexString.substring(0,length);\r",
																					"}\r",
																					"\r",
																					"function RandomIpAddress() {\r",
																					"    let randomAddress\r",
																					"    let addressParts = [];\r",
																					"    for ( let i=0; i<4; i++ ) {\r",
																					"        addressParts[i] = String(Math.floor(Math.random() * 256));\r",
																					"    }\r",
																					"    randomAddress = addressParts[0] + \".\" + addressParts[1] + \".\" + addressParts[2] + \".\" + addressParts[3];\r",
																					"    return randomAddress;\r",
																					"}\r",
																					""
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"/****************************************************************************************\r",
																					"* Loading Input Data\r",
																					"****************************************************************************************/\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Extracting Result\r",
																					"****************************************************************************************/\r",
																					"var RESPONSE_CODE;\r",
																					"try {\r",
																					"    let response;\r",
																					"    response = pm.response;\r",
																					"\r",
																					"    RESPONSE_CODE = parseInt(response.code);\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Response Code could not be extracted.\");\r",
																					"}    \r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Testing\r",
																					"****************************************************************************************/\r",
																					"try {\r",
																					"    pm.test(\"POST /v1/regard-application responds 400, because of a non-object address attribute\", function () {\r",
																					"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																					"    });\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Testing could not be executed.\");\r",
																					"}\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Functions\r",
																					"****************************************************************************************/\r",
																					"\r",
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "x-mock-response-code",
																				"value": "400",
																				"type": "default"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{{requestBody}}",
																			"options": {
																				"raw": {
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{uri}}",
																			"host": [
																				"{{uri}}"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "Expected  /v1/regard-application - address containing both properties",
																	"event": [
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					"console.log(\"\\n-----  address containing both properties -------------------------------\");\r",
																					"/****************************************************************************************\r",
																					"* Loading Input Data\r",
																					"****************************************************************************************/\r",
																					"var APPLICATION;\r",
																					"var OPERATION_KEY;\r",
																					"var applicationName;\r",
																					"var releaseNumber;\r",
																					"var protocol;\r",
																					"var dummyAddress;\r",
																					"var port;\r",
																					"try {\r",
																					"    APPLICATION = pm.environment.get(\"application\");\r",
																					"\r",
																					"    let currentOperationServer;\r",
																					"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																					"    \r",
																					"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																					"\r",
																					"    let httpClientLtp;\r",
																					"    httpClientLtp = pm.collectionVariables.get(\"httpClientLtp\");\r",
																					"\r",
																					"    applicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																					"    releaseNumber = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																					"\r",
																					"    let tcpClientLtp;\r",
																					"    tcpClientLtp = pm.collectionVariables.get(\"tcpClientLtp\");\r",
																					"\r",
																					"    protocol = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																					"    protocol = protocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																					"\r",
																					"    let dummyIpv4Address = RandomIpAddress();\r",
																					"    let dummyDomainName = RandomDomainName();\r",
																					"    dummyAddress = {\r",
																					"        \"ip-address\": {\r",
																					"            \"ipv-4-address\": dummyIpv4Address\r",
																					"        }, \r",
																					"        \"domain-name\": dummyDomainName\r",
																					"    };\r",
																					" \r",
																					"    port = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																					"} catch (error) {\r",
																					"    console.log(error);\r",
																					"    console.log(\"! Input Data could not be loaded.\");\r",
																					"}\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Defining Dummy Parameters\r",
																					"****************************************************************************************/\r",
																					"var USER_NAME;\r",
																					"var ORIGINATOR;\r",
																					"var X_CORRELATOR;\r",
																					"var TRACE_INDICATOR;\r",
																					"var CUSTOMER_JOURNEY;\r",
																					"try {\r",
																					"    USER_NAME = APPLICATION.userName;\r",
																					"    ORIGINATOR = \"Postman\";\r",
																					"    X_CORRELATOR = CreateXCorrelator();\r",
																					"    TRACE_INDICATOR = \"1\";\r",
																					"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																					"    \r",
																					"} catch (error) {\r",
																					"    console.log(\"! Could not define dummy values for parameters. \");\r",
																					"}\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Defining Request Body\r",
																					"****************************************************************************************/\r",
																					"var REQUEST_BODY;\r",
																					"try {\r",
																					"    REQUEST_BODY = '{'\r",
																					"        + '\"application-name\" : ' + '\"' + applicationName + '\",'\r",
																					"        + '\"release-number\" : ' + '\"' + releaseNumber + '\",'\r",
																					"        + '\"protocol\" : ' + '\"' + protocol + '\",'\r",
																					"        + '\"address\" : ' + JSON.stringify(dummyAddress) + ','\r",
																					"        + '\"port\" : ' +  port\r",
																					"    +'}';\r",
																					"} catch (error) {\r",
																					"    console.log(\"!Could not define request body. \");\r",
																					"}\r",
																					"/****************************************************************************************\r",
																					"* Setting Collection Variables\r",
																					"****************************************************************************************/\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Setting Local Variables and Preparing the Request\r",
																					"****************************************************************************************/\r",
																					"try {\r",
																					"    let URI;\r",
																					"    URI = APPLICATION.serverUrl + \"/v1/regard-application\";\r",
																					"\r",
																					"    let ACCEPT;\r",
																					"    ACCEPT = \"application/json\";\r",
																					"\r",
																					"    let CONTENT_TYPE;\r",
																					"    CONTENT_TYPE = \"application/json\";\r",
																					"\r",
																					"    pm.variables.clear();\r",
																					"\r",
																					"    pm.variables.set(\"uri\", URI);\r",
																					"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																					"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																					"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																					"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																					"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																					"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(error);\r",
																					"    console.log(\"! Local variables could not be set.\");\r",
																					"}\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Functions\r",
																					"****************************************************************************************/\r",
																					"\r",
																					"function CreateXCorrelator() {\r",
																					"    let xCorrelator;\r",
																					"    xCorrelator = \"\";\r",
																					"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																					"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																					"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																					"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																					"    xCorrelator += GenerateRandomHexString(12);\r",
																					"    return xCorrelator;\r",
																					"}\r",
																					"\r",
																					"function GenerateRandomHexString(length) {\r",
																					"    var randomRandomHexString = \"\";\r",
																					"    while (randomRandomHexString.length < length) {\r",
																					"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																					"    }\r",
																					"    return randomRandomHexString.substring(0,length);\r",
																					"}\r",
																					"\r",
																					"function RandomIpAddress() {\r",
																					"    let randomAddress\r",
																					"    let addressParts = [];\r",
																					"    for ( let i=0; i<4; i++ ) {\r",
																					"        addressParts[i] = String(Math.floor(Math.random() * 256));\r",
																					"    }\r",
																					"    randomAddress = addressParts[0] + \".\" + addressParts[1] + \".\" + addressParts[2] + \".\" + addressParts[3];\r",
																					"    return randomAddress;\r",
																					"}\r",
																					"\r",
																					"function RandomDomainName() {\r",
																					"    let randomAddress;\r",
																					"    let dummySubdomain = GenerateRandomString(Math.floor(1 + Math.random() * 10));\r",
																					"    let randomDomainPartLength = Math.floor(2 + Math.random() * 5);\r",
																					"    let dummyDomainName = \"\";\r",
																					"    for(let i=0; i<randomDomainPartLength; i += 2 ) {\r",
																					"        dummyDomainName = dummyDomainName + GenerateRandomString(Math.floor(1 + Math.random() * 4));\r",
																					"        dummyDomainName = dummyDomainName + GenerateRandomSeparator();\r",
																					"        dummyDomainName = dummyDomainName + GenerateRandomString(Math.floor(1 + Math.random() * 4));\r",
																					"    }\r",
																					"    let dummyTopLevelDomain = GenerateRandomString(Math.floor(2 + Math.random() * 5));\r",
																					"    randomAddress = dummySubdomain + \".\" + dummyDomainName + \".\" + dummyTopLevelDomain; \r",
																					"    return randomAddress;\r",
																					"}\r",
																					"\r",
																					"function GenerateRandomString(length) {\r",
																					"    let randomString;\r",
																					"    randomString = \"\";\r",
																					"    try {\r",
																					"        let characters = \"abcdefghijklmnopqrstuvwxyz\";\r",
																					"        let charactersLength = characters.length;\r",
																					"        for (let i = 0; i < length; i++) {\r",
																					"            randomString += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																					"        }\r",
																					"    } catch (error) {\r",
																					"        console.log(\"! Could not generate random string. \");\r",
																					"    }\r",
																					"    return randomString;\r",
																					"}\r",
																					"\r",
																					"function GenerateRandomSeparator() {\r",
																					"    let separators = [\".\", \"-\"];\r",
																					"    let randomSeparator = separators[Math.floor(Math.random() * separators.length)];\r",
																					"    return randomSeparator;\r",
																					"}"
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"/****************************************************************************************\r",
																					"* Loading Input Data\r",
																					"****************************************************************************************/\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Extracting Result\r",
																					"****************************************************************************************/\r",
																					"var RESPONSE_CODE;\r",
																					"try {\r",
																					"    let response;\r",
																					"    response = pm.response;\r",
																					"\r",
																					"    RESPONSE_CODE = parseInt(response.code);\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Response Code could not be extracted.\");\r",
																					"}    \r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Testing\r",
																					"****************************************************************************************/\r",
																					"try {\r",
																					"    pm.test(\"POST /v1/regard-application responds 400, because address containing both properties\", function () {\r",
																					"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																					"    });\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Testing could not be executed.\");\r",
																					"}\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Functions\r",
																					"****************************************************************************************/\r",
																					"\r",
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "x-mock-response-code",
																				"value": "400",
																				"type": "default"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{{requestBody}}",
																			"options": {
																				"raw": {
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{uri}}",
																			"host": [
																				"{{uri}}"
																			]
																		}
																	},
																	"response": []
																}
															]
														}
													],
													"description": "## Get address checked for correctness?\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for op-s of /v1/regard-application, storing operation-key\n  -  searching CC for output fc-port of NewApplicationCausesRequestForInquiringOamRequestApprovals, find corresponding op-c, http-c and tcp-c, store them\n- POST /v1/regard-application\n  - all attributes according to chosen http-c and tcp-c BUT address attribute with random dummy value differing from pattern in different ways\n  - operation-key from above\n  - reasonable parameters\n\n#### Testing:\n- checking for ResponseCode==400\n\n#### Clearing:\n- not applicable"
												},
												{
													"name": "port checked?",
													"item": [
														{
															"name": "reference /core-model-1-4:control-construct",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"console.log(\"\\n----- /v1/regard-application acceptance -- port checked? -------------------------------\");\r",
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Environment variables could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																			"\r",
																			"    let REQUEST_BODY;\r",
																			"    REQUEST_BODY = \"\";\r",
																			"\r",
																			"    let AUTHORIZATION;\r",
																			"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var ltpList;\r",
																			"var fcList;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"    \r",
																			"    let responseCode;\r",
																			"    responseCode = parseInt(response.code);\r",
																			"    \r",
																			"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																			"        let responseObject;\r",
																			"        responseObject = JSON.parse(response.stream);\r",
																			"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																			"        fcList = responseObject[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
																			"\r",
																			"    } else {\r",
																			"        ltpList = [];\r",
																			"        fcList = [];\r",
																			"    }\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! ltpList could not be extracted.\");\r",
																			"}\r",
																			"\r",
																			"var currentOperationServer;\r",
																			"var httpClientLtp;\r",
																			"var tcpClientLtp;\r",
																			"try {\r",
																			"    currentOperationServer = FindOperationServer(\"/v1/regard-application\", ltpList);\r",
																			"\r",
																			"    //Inquiring OAM approvals\r",
																			"    let outputFcPortListInquireOamRequestApprovals;\r",
																			"    outputFcPortListInquireOamRequestApprovals = FindOutputFcPortList(\"NewApplicationCausesRequestForInquiringOamRequestApprovals\", fcList);\r",
																			"    let ltpInstance = FindRandomLtpInstancesFromFc(outputFcPortListInquireOamRequestApprovals, ltpList)\r",
																			"    httpClientLtp = ltpInstance.httpClientLtp;\r",
																			"    tcpClientLtp = FindServingLtp(httpClientLtp, ltpList);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Reference objects could not be extracted.\");\r",
																			"} \r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.collectionVariables.clear();\r",
																			"    \r",
																			"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																			"    pm.collectionVariables.set(\"httpClientLtp\", httpClientLtp);\r",
																			"    pm.collectionVariables.set(\"tcpClientLtp\", tcpClientLtp);\r",
																			"\r",
																			"    pm.collectionVariables.set(\"ltpList\", ltpList);\r",
																			"    pm.collectionVariables.set(\"fcList\", fcList);\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Collection variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"function FindOperationServer(operationName, ltpList) {\r",
																			"    let operationServer;\r",
																			"    operationServer = \"\";\r",
																			"    try {\r",
																			"        let sampleUuid;\r",
																			"        for(let i=0; i<ltpList.length; i++) {\r",
																			"            sampleUuid = ltpList[i][\"uuid\"];\r",
																			"            if(sampleUuid.includes(\"op-s-\")) {\r",
																			"                let sampleOperationName;\r",
																			"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																			"                if(sampleOperationName == operationName) {\r",
																			"                    operationServer = ltpList[i];\r",
																			"                    return operationServer;\r",
																			"                }\r",
																			"            }\r",
																			"        }\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																			"    }\r",
																			"    return operationServer;\r",
																			"}\r",
																			"\r",
																			"function FindRandomLtpInstancesFromFc(outputFcPortList, ltpList) {\r",
																			"    let ltpInstance = {};\r",
																			"    try {\r",
																			"        for ( let i=0; i<outputFcPortList.length; i++ ) {\r",
																			"            let randomOutputFcPort = outputFcPortList[Math.floor(Math.random() * outputFcPortList.length)];\r",
																			"            let outputLtpUuid = randomOutputFcPort[\"logical-termination-point\"];\r",
																			"            let operationClientLtp = FindActualInstanceByUuid(outputLtpUuid, ltpList);\r",
																			"\r",
																			"            let httpClientLtp = FindServingLtp(operationClientLtp, ltpList);\r",
																			"            let sampleApplicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																			"\r",
																			"            if (sampleApplicationName != \"AdministratorAdministration\") {\r",
																			"\t\t\t\tltpInstance = { httpClientLtp, operationClientLtp };\r",
																			"                break;\r",
																			"            }\r",
																			"        }\r",
																			"    } catch(error) {\r",
																			"        console.log(error);\r",
																			"        console.log(\"! Exception in function : FindRandomLtpInstancesFromFc. \")\r",
																			"    } \r",
																			"    return ltpInstance;\r",
																			"}\r",
																			"\r",
																			"\r",
																			"function FindOutputFcPortList(forwardingName, fcList) {\r",
																			"    let outputFcPortList;\r",
																			"    outputFcPortList = [];\r",
																			"    try {\r",
																			"        for( let i=0; i<fcList.length; i++ ) {\r",
																			"            for(let j=0; j<fcList[i][\"name\"].length; j++) {               \r",
																			"                if(fcList[i][\"name\"][j][\"value\"] == forwardingName) {\r",
																			"                    fcPortList = fcList[i][\"fc-port\"];\r",
																			"                    for(let k=0;k<fcPortList.length;k++) {\r",
																			"                        if(fcPortList[k][\"port-direction\"] == \"core-model-1-4:PORT_DIRECTION_TYPE_OUTPUT\") {\r",
																			"                            outputFcPortList.push(fcPortList[k]);\r",
																			"                        }\r",
																			"                    }\r",
																			"                    return outputFcPortList;\r",
																			"                }\r",
																			"            }\r",
																			"        }\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																			"    }\r",
																			"    return outputFcPortList;\r",
																			"}\r",
																			"\r",
																			"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
																			"    let actualInstance;\r",
																			"    actualInstance = {};\r",
																			"    try {\r",
																			"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
																			"            let sampleUuid;\r",
																			"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
																			"            if( sampleUuid == expectedUuid ) {\r",
																			"                actualInstance = actualLtpList[i];\r",
																			"                return actualInstance;\r",
																			"            }\r",
																			"        }\r",
																			"\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																			"    }\r",
																			"    return undefined;\r",
																			"}\r",
																			"\r",
																			"function FindServingLtp(clientLtp, ltpList) {\r",
																			"    let servingLtp;\r",
																			"    servingLtp = {};\r",
																			"    try{\r",
																			"        let serverLtpUuid;\r",
																			"        serverLtpUuid = clientLtp[\"server-ltp\"][0];\r",
																			"        for( let i=0; i<ltpList.length; i++ ) {\r",
																			"            let sampleUuid;\r",
																			"            sampleUuid = ltpList[i][\"uuid\"];\r",
																			"            if( sampleUuid == serverLtpUuid ) {\r",
																			"                servingLtp = ltpList[i];\r",
																			"                return servingLtp;\r",
																			"            }\r",
																			"        }\r",
																			"    } catch(error) {\r",
																			"        console.log(error);\r",
																			"        console.log(\"! Exception in function : FindServingLtp. \")\r",
																			"    }\r",
																			"    return servingLtp;\r",
																			"}\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "GET",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "200",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Expected  /v1/regard-application - out-of-range port",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"console.log(\"\\n-----  out of range application-port -------------------------------\");\r",
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"var OPERATION_KEY;\r",
																			"var applicationName;\r",
																			"var releaseNumber;\r",
																			"var protocol;\r",
																			"var address;\r",
																			"var dummyPort;\r",
																			"\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"    let currentOperationServer;\r",
																			"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																			"    \r",
																			"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																			"\r",
																			"    let httpClientLtp;\r",
																			"    httpClientLtp = pm.collectionVariables.get(\"httpClientLtp\");\r",
																			"\r",
																			"    applicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																			"    releaseNumber = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																			"\r",
																			"    let tcpClientLtp;\r",
																			"    tcpClientLtp = pm.collectionVariables.get(\"tcpClientLtp\");\r",
																			"\r",
																			"    protocol = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																			"    protocol = protocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																			"\r",
																			"    address = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																			"    dummyPort = FaultyPort();\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Input Data could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Dummy Parameters\r",
																			"****************************************************************************************/\r",
																			"var USER_NAME;\r",
																			"var ORIGINATOR;\r",
																			"var X_CORRELATOR;\r",
																			"var TRACE_INDICATOR;\r",
																			"var CUSTOMER_JOURNEY;\r",
																			"try {\r",
																			"    USER_NAME = APPLICATION.userName;\r",
																			"    ORIGINATOR = \"Postman\";\r",
																			"    X_CORRELATOR = CreateXCorrelator();\r",
																			"    TRACE_INDICATOR = \"1\";\r",
																			"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																			"    \r",
																			"} catch (error) {\r",
																			"    console.log(\"! Could not define dummy values for parameters. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Request Body\r",
																			"****************************************************************************************/\r",
																			"var REQUEST_BODY;\r",
																			"try {\r",
																			"    REQUEST_BODY = '{'\r",
																			"        + '\"application-name\" : ' + '\"' + applicationName + '\",'\r",
																			"        + '\"release-number\" : ' + '\"' + releaseNumber + '\",'\r",
																			"        + '\"protocol\" : ' + '\"' + protocol + '\",'\r",
																			"        + '\"address\" : ' + JSON.stringify(address) + ','\r",
																			"        + '\"port\" : ' +  dummyPort\r",
																			"    +'}';\r",
																			"} catch (error) {\r",
																			"    console.log(\"!Could not define request body. \");\r",
																			"}\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + \"/v1/regard-application\";\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																			"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																			"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																			"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																			"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"function CreateXCorrelator() {\r",
																			"    let xCorrelator;\r",
																			"    xCorrelator = \"\";\r",
																			"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(12);\r",
																			"    return xCorrelator;\r",
																			"}\r",
																			"\r",
																			"function GenerateRandomHexString(length) {\r",
																			"    var randomRandomHexString = \"\";\r",
																			"    while (randomRandomHexString.length < length) {\r",
																			"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																			"    }\r",
																			"    return randomRandomHexString.substring(0,length);\r",
																			"}\r",
																			"\r",
																			"function FaultyPort() {\r",
																			"    let randomPort;\r",
																			"    randomPort = 2000 + Math.floor( Math.random() * 1000 ) + 65535;\r",
																			"    return randomPort;\r",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var RESPONSE_CODE;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"\r",
																			"    RESPONSE_CODE = parseInt(response.code);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Response Code could not be extracted.\");\r",
																			"}    \r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Testing\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.test(\"POST /v1/regard-application responds 400, because of out-of-range port\", function () {\r",
																			"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																			"    });\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Testing could not be executed.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "400",
																		"type": "default"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Expected  /v1/regard-application - string value port",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"console.log(\"\\n-----  string value application-port -------------------------------\");\r",
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"var OPERATION_KEY;\r",
																			"var applicationName;\r",
																			"var releaseNumber;\r",
																			"var protocol;\r",
																			"var address;\r",
																			"var dummyPort;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"    let currentOperationServer;\r",
																			"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																			"    \r",
																			"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																			"\r",
																			"    let httpClientLtp;\r",
																			"    httpClientLtp = pm.collectionVariables.get(\"httpClientLtp\");\r",
																			"\r",
																			"    applicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																			"    releaseNumber = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																			"\r",
																			"    let tcpClientLtp;\r",
																			"    tcpClientLtp = pm.collectionVariables.get(\"tcpClientLtp\");\r",
																			"\r",
																			"    protocol = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																			"    protocol = protocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																			"\r",
																			"    address = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																			"    dummyPort = RandomTcpPort();\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Input Data could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Dummy Parameters\r",
																			"****************************************************************************************/\r",
																			"var USER_NAME;\r",
																			"var ORIGINATOR;\r",
																			"var X_CORRELATOR;\r",
																			"var TRACE_INDICATOR;\r",
																			"var CUSTOMER_JOURNEY;\r",
																			"try {\r",
																			"    USER_NAME = APPLICATION.userName;\r",
																			"    ORIGINATOR = \"Postman\";\r",
																			"    X_CORRELATOR = CreateXCorrelator();\r",
																			"    TRACE_INDICATOR = \"1\";\r",
																			"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																			"    \r",
																			"} catch (error) {\r",
																			"    console.log(\"! Could not define dummy values for parameters. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Request Body\r",
																			"****************************************************************************************/\r",
																			"var REQUEST_BODY;\r",
																			"try {\r",
																			"    REQUEST_BODY = '{'\r",
																			"        + '\"application-name\" : ' + '\"' + applicationName + '\",'\r",
																			"        + '\"release-number\" : ' + '\"' + releaseNumber + '\",'\r",
																			"        + '\"protocol\" : ' + '\"' + protocol + '\",'\r",
																			"        + '\"address\" : ' + JSON.stringify(address) + ','\r",
																			"        + '\"port\" : ' + '\"' +  dummyPort + '\"'\r",
																			"    +'}';\r",
																			"} catch (error) {\r",
																			"    console.log(\"!Could not define request body. \");\r",
																			"}\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + \"/v1/regard-application\";\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																			"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																			"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																			"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																			"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"function CreateXCorrelator() {\r",
																			"    let xCorrelator;\r",
																			"    xCorrelator = \"\";\r",
																			"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(12);\r",
																			"    return xCorrelator;\r",
																			"}\r",
																			"\r",
																			"function GenerateRandomHexString(length) {\r",
																			"    var randomRandomHexString = \"\";\r",
																			"    while (randomRandomHexString.length < length) {\r",
																			"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																			"    }\r",
																			"    return randomRandomHexString.substring(0,length);\r",
																			"}\r",
																			"\r",
																			"function RandomTcpPort() {\r",
																			"    let randomPort;\r",
																			"    randomPort = 2000 + Math.floor( Math.random() * 1000 );\r",
																			"    return randomPort;\r",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var RESPONSE_CODE;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"\r",
																			"    RESPONSE_CODE = parseInt(response.code);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Response Code could not be extracted.\");\r",
																			"}    \r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Testing\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.test(\"POST /v1/regard-application responds 400, because of non-integer port\", function () {\r",
																			"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																			"    });\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Testing could not be executed.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "400",
																		"type": "default"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														}
													],
													"description": "## Get port checked for correctness?\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for op-s of /v1/regard-application, storing operation-key\n  -  searching CC for output fc-port of NewApplicationCausesRequestForInquiringOamRequestApprovals, find corresponding op-c, http-c and tcp-c, store them.\n- POST /v1/regard-application\n    - all attributes according to chosen http-c and tcp-c  BUT port attribute with random dummy value differing from pattern in different ways\n    - operation-key from above\n    - reasonable parameters\n\n#### Testing:\n- checking for ResponseCode==400\n\n#### Clearing:\n- not applicable"
												}
											]
										},
										{
											"name": "Attribute configured?",
											"item": [
												{
													"name": "client created?",
													"item": [
														{
															"name": "reference /core-model-1-4:control-construct",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"console.log(\"\\n----- /v1/regard-application acceptance -- client created? -------------------------------\");\r",
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Environment variables could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																			"\r",
																			"    let REQUEST_BODY;\r",
																			"    REQUEST_BODY = \"\";\r",
																			"\r",
																			"    let AUTHORIZATION;\r",
																			"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var ltpList;\r",
																			"var fcList;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"    \r",
																			"    let responseCode;\r",
																			"    responseCode = parseInt(response.code);\r",
																			"    \r",
																			"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																			"        let responseObject;\r",
																			"        responseObject = JSON.parse(response.stream);\r",
																			"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																			"        fcList = responseObject[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
																			"\r",
																			"    } else {\r",
																			"        ltpList = [];\r",
																			"        fcList = [];\r",
																			"    }\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! ltpList could not be extracted.\");\r",
																			"}\r",
																			"\r",
																			"var currentOperationServer;\r",
																			"var disregardApplicationOperationServer;\r",
																			"try {\r",
																			"    currentOperationServer = FindOperationServer(\"/v1/regard-application\", ltpList);\r",
																			"    disregardApplicationOperationServer = FindOperationServer(\"/v1/disregard-application\", ltpList);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Reference objects could not be extracted.\");\r",
																			"} \r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.collectionVariables.clear();\r",
																			"    \r",
																			"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																			"    pm.collectionVariables.set(\"disregardApplicationOperationServer\", disregardApplicationOperationServer);\r",
																			"\r",
																			"    pm.collectionVariables.set(\"ltpList\", ltpList);\r",
																			"    pm.collectionVariables.set(\"fcList\", fcList);\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Collection variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"function FindOperationServer(operationName, ltpList) {\r",
																			"    let operationServer;\r",
																			"    operationServer = \"\";\r",
																			"    try {\r",
																			"        let sampleUuid;\r",
																			"        for(let i=0; i<ltpList.length; i++) {\r",
																			"            sampleUuid = ltpList[i][\"uuid\"];\r",
																			"            if(sampleUuid.includes(\"op-s-\")) {\r",
																			"                let sampleOperationName;\r",
																			"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																			"                if(sampleOperationName == operationName) {\r",
																			"                    operationServer = ltpList[i];\r",
																			"                    return operationServer;\r",
																			"                }\r",
																			"            }\r",
																			"        }\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																			"    }\r",
																			"    return operationServer;\r",
																			"}\r",
																			"\r",
																			"function FindOutputFcPortList(forwardingName, fcList) {\r",
																			"    let outputFcPortList;\r",
																			"    outputFcPortList = [];\r",
																			"    try {\r",
																			"        for( let i=0; i<fcList.length; i++ ) {\r",
																			"            for(let j=0; j<fcList[i][\"name\"].length; j++) {               \r",
																			"                if(fcList[i][\"name\"][j][\"value\"] == forwardingName) {\r",
																			"                    fcPortList = fcList[i][\"fc-port\"];\r",
																			"                    for(let k=0;k<fcPortList.length;k++) {\r",
																			"                        if(fcPortList[k][\"port-direction\"] == \"core-model-1-4:PORT_DIRECTION_TYPE_OUTPUT\") {\r",
																			"                            outputFcPortList.push(fcPortList[k]);\r",
																			"                        }\r",
																			"                    }\r",
																			"                    return outputFcPortList;\r",
																			"                }\r",
																			"            }\r",
																			"        }\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																			"    }\r",
																			"    return outputFcPortList;\r",
																			"}\r",
																			"\r",
																			"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
																			"    let actualInstance;\r",
																			"    actualInstance = {};\r",
																			"    try {\r",
																			"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
																			"            let sampleUuid;\r",
																			"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
																			"            if( sampleUuid == expectedUuid ) {\r",
																			"                actualInstance = actualLtpList[i];\r",
																			"                return actualInstance;\r",
																			"            }\r",
																			"        }\r",
																			"\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																			"    }\r",
																			"    return undefined;\r",
																			"}\r",
																			"\r",
																			"function FindServingLtp(clientLtp, ltpList) {\r",
																			"    let servingLtp;\r",
																			"    servingLtp = {};\r",
																			"    try{\r",
																			"        let serverLtpUuid;\r",
																			"        serverLtpUuid = clientLtp[\"server-ltp\"][0];\r",
																			"        for( let i=0; i<ltpList.length; i++ ) {\r",
																			"            let sampleUuid;\r",
																			"            sampleUuid = ltpList[i][\"uuid\"];\r",
																			"            if( sampleUuid == serverLtpUuid ) {\r",
																			"                servingLtp = ltpList[i];\r",
																			"                return servingLtp;\r",
																			"            }\r",
																			"        }\r",
																			"    } catch(error) {\r",
																			"        console.log(error);\r",
																			"        console.log(\"! Exception in function : FindServingLtp. \")\r",
																			"    }\r",
																			"    return servingLtp;\r",
																			"}\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "GET",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "200",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Dummy /v1/regard-application - application created?",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"var OPERATION_KEY;\r",
																			"var dummyApplicationName;\r",
																			"var dummyReleaseNumber;\r",
																			"var dummyProtocol;\r",
																			"var dummyAddress;\r",
																			"var dummyPort;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"    let currentOperationServer;\r",
																			"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																			"    \r",
																			"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																			"\r",
																			"    dummyApplicationName = GenerateRandomString(12);\r",
																			"    dummyReleaseNumber = RandomReleaseNumber();\r",
																			"\r",
																			"    dummyProtocol = RandomProtocol();\r",
																			"\r",
																			"    let dummyIpv4Address = RandomIpAddress();\r",
																			"    dummyAddress = {\r",
																			"        \"ip-address\": {\r",
																			"            \"ipv-4-address\": dummyIpv4Address\r",
																			"        }\r",
																			"    };\r",
																			"    dummyPort = RandomTcpPort();\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Input Data could not be loaded.\");\r",
																			"}\r",
																			"/****************************************************************************************\r",
																			"* Defining Dummy Parameters\r",
																			"****************************************************************************************/\r",
																			"var USER_NAME;\r",
																			"var ORIGINATOR;\r",
																			"var X_CORRELATOR;\r",
																			"var TRACE_INDICATOR;\r",
																			"var CUSTOMER_JOURNEY;\r",
																			"try {\r",
																			"    USER_NAME = APPLICATION.userName;\r",
																			"    ORIGINATOR = \"Postman\";\r",
																			"    X_CORRELATOR = CreateXCorrelator();\r",
																			"    TRACE_INDICATOR = \"1\";\r",
																			"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																			"    \r",
																			"} catch (error) {\r",
																			"    console.log(\"! Could not define dummy values for parameters. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Request Body\r",
																			"****************************************************************************************/\r",
																			"var REQUEST_BODY;\r",
																			"try {\r",
																			"    REQUEST_BODY = '{'\r",
																			"        + '\"application-name\" : ' + '\"' + dummyApplicationName + '\",'\r",
																			"        + '\"release-number\" : ' + '\"' + dummyReleaseNumber + '\",'\r",
																			"        + '\"protocol\" : ' + '\"' + dummyProtocol + '\",'\r",
																			"        + '\"address\" : ' + JSON.stringify(dummyAddress) + ','\r",
																			"        + '\"port\" : ' +  dummyPort\r",
																			"    +'}';\r",
																			"} catch (error) {\r",
																			"    console.log(\"!Could not define request body. \");\r",
																			"}\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.collectionVariables.set(\"dummyApplicationName\", dummyApplicationName);\r",
																			"    pm.collectionVariables.set(\"dummyReleaseNumber\", dummyReleaseNumber);\r",
																			"    pm.collectionVariables.set(\"dummyProtocol\", dummyProtocol);\r",
																			"    pm.collectionVariables.set(\"dummyAddress\", dummyAddress);\r",
																			"    pm.collectionVariables.set(\"dummyPort\", dummyPort);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Collection variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + \"/v1/regard-application\";\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																			"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																			"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																			"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																			"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"function CreateXCorrelator() {\r",
																			"    let xCorrelator;\r",
																			"    xCorrelator = \"\";\r",
																			"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(12);\r",
																			"    return xCorrelator;\r",
																			"}\r",
																			"\r",
																			"function GenerateRandomHexString(length) {\r",
																			"    var randomRandomHexString = \"\";\r",
																			"    while (randomRandomHexString.length < length) {\r",
																			"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																			"    }\r",
																			"    return randomRandomHexString.substring(0,length);\r",
																			"}\r",
																			"\r",
																			"function GenerateRandomString(length) {\r",
																			"    let randomString;\r",
																			"    randomString = \"\";\r",
																			"    try {\r",
																			"        let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r",
																			"        let charactersLength = characters.length;\r",
																			"        for (let i = 0; i < length; i++) {\r",
																			"            randomString += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																			"        }\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Could not generate random string. \");\r",
																			"    }\r",
																			"    return randomString;\r",
																			"}\r",
																			"\r",
																			"function RandomReleaseNumber() {\r",
																			"    let releaseNumber;\r",
																			"    let releaseNumberParts = [];\r",
																			"    for  (let i=0; i<3 ; i++) {\r",
																			"        releaseNumberParts[i] = Math.floor(Math.random() * 10);\r",
																			"    }\r",
																			"    releaseNumber = releaseNumberParts[0] + \".\" + releaseNumberParts[1] + \".\" + releaseNumberParts[2];\r",
																			"    return releaseNumber;\r",
																			"}\r",
																			"\r",
																			"function RandomIpAddress() {\r",
																			"    let randomAddress\r",
																			"    let addressParts = [];\r",
																			"    for ( let i=0; i<4; i++ ) {\r",
																			"        addressParts[i] = String(Math.floor(Math.random() * 256));\r",
																			"    }\r",
																			"    randomAddress = addressParts[0] + \".\" + addressParts[1] + \".\" + addressParts[2] + \".\" + addressParts[3];\r",
																			"    return randomAddress;\r",
																			"}\r",
																			"\r",
																			"\r",
																			"function RandomTcpPort() {\r",
																			"    let randomPort;\r",
																			"    randomPort = 2000 + Math.floor( Math.random() * 1000 );\r",
																			"    return randomPort;\r",
																			"}\r",
																			"\r",
																			"function RandomProtocol() {\r",
																			"    let protocolList;\r",
																			"    protocolList = [  \"HTTP\", \"HTTPS\" ];\r",
																			"    let protocolIndex = Math.floor(Math.random() * protocolList.length);\r",
																			"    let randomProtocol = protocolList[protocolIndex]; \r",
																			"\r",
																			"    return randomProtocol;\r",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var RESPONSE_CODE;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"\r",
																			"    RESPONSE_CODE = parseInt(response.code);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Response Code could not be extracted.\");\r",
																			"}    \r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Testing\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.test(\"POST /v1/regard-application responds 204\", function () {\r",
																			"        pm.expect(RESPONSE_CODE).to.equal(204);\r",
																			"    });\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Testing could not be executed.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "204",
																		"type": "default"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Expected /core-model-1-4:control-construct",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Environment variables could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																			"\r",
																			"    let REQUEST_BODY;\r",
																			"    REQUEST_BODY = \"\";\r",
																			"\r",
																			"    let AUTHORIZATION;\r",
																			"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var expectedApplicationName;\r",
																			"var expectedReleaseNumber;\r",
																			"var expectedProtocol;\r",
																			"var expectedAddress;\r",
																			"var expectedPort;\r",
																			"try {\r",
																			"    expectedApplicationName = pm.collectionVariables.get(\"dummyApplicationName\");\r",
																			"    expectedReleaseNumber = pm.collectionVariables.get(\"dummyReleaseNumber\");\r",
																			"    expectedProtocol = pm.collectionVariables.get(\"dummyProtocol\");\r",
																			"    expectedAddress = pm.collectionVariables.get(\"dummyAddress\");\r",
																			"    expectedPort = pm.collectionVariables.get(\"dummyPort\");\r",
																			"   \r",
																			"} catch(error) {\r",
																			"    console.log(\"! Could not load input data. \");\r",
																			"}\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var ltpList;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"    \r",
																			"    let responseCode;\r",
																			"    responseCode = parseInt(response.code);\r",
																			"    \r",
																			"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																			"        let responseObject;\r",
																			"        responseObject = JSON.parse(response.stream);\r",
																			"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																			"\r",
																			"    } else {\r",
																			"        ltpList = [];\r",
																			"    }\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! ltpList could not be extracted.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Testing\r",
																			"****************************************************************************************/\r",
																			"var actualHttpClientLtp;\r",
																			"try {\r",
																			"    actualHttpClientLtp = FindHttpClientLtpForApplicationNameAndReleaseNumber(expectedApplicationName, expectedReleaseNumber, ltpList);\r",
																			"\r",
																			"} catch(error) {\r",
																			"    console.log(\"! Expected applicationName and releaseNumber did not lead to an HTTP client.\");\r",
																			"}\r",
																			"try {\r",
																			"    pm.test(\"http client with application name '\" + expectedApplicationName + \"' could be found \" , function () {\r",
																			"        pm.expect(actualHttpClientLtp).to.not.equal(undefined);\r",
																			"        pm.expect(Object.keys(actualHttpClientLtp).length).to.not.equal(0);\r",
																			"    });\r",
																			"    if( (typeof actualHttpClientLtp != \"undefined\") && (Object.keys(actualHttpClientLtp).length != 0) ) {\r",
																			"        let expectedDefaultLTPDirection;\r",
																			"        expectedDefaultLTPDirection = \"core-model-1-4:TERMINATION_DIRECTION_SINK\";\r",
																			"        pm.test(\"Provides expected default ltp-direction for http-c: \" + expectedDefaultLTPDirection, function () {\r",
																			"            pm.expect(actualHttpClientLtp[\"ltp-direction\"]).to.equal(expectedDefaultLTPDirection);\r",
																			"        });\r",
																			"\r",
																			"        pm.test(\"Provides exactly one client-ltp for http-c as expected \" , function () {\r",
																			"            pm.expect(actualHttpClientLtp[\"client-ltp\"].length).to.equal(1);\r",
																			"        });\r",
																			"\r",
																			"        pm.test(\"Provides exactly one server-ltp for http-c as expected \" , function () {\r",
																			"            pm.expect(actualHttpClientLtp[\"server-ltp\"].length).to.equal(1);\r",
																			"        });\r",
																			"\r",
																			"        pm.test(\"Provides expected default local-id for http-c: '0' \" , function () {\r",
																			"            pm.expect(actualHttpClientLtp[\"layer-protocol\"][0][\"local-id\"]).to.equal('0');\r",
																			"        });\r",
																			"\r",
																			"        let expectedDefaultLayerProtocolName;\r",
																			"        expectedDefaultLayerProtocolName = \"http-client-interface-1-0:LAYER_PROTOCOL_NAME_TYPE_HTTP_LAYER\";\r",
																			"        pm.test(\"Provides expected default layer-protocol-name for http-c: \" + expectedDefaultLayerProtocolName, function () {\r",
																			"            pm.expect(actualHttpClientLtp[\"layer-protocol\"][0][\"layer-protocol-name\"]).to.equal(expectedDefaultLayerProtocolName);\r",
																			"        });\r",
																			"    }  else {\r",
																			"        console.log(\"Expected HTTP client with applicationName (\" + expectedApplicationName + \") and releaseNumber (\" + expectedReleaseNumber +\") could not be found in actual.\");\r",
																			"    }\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Testing of new application-p failed.\");\r",
																			"}\r",
																			"\r",
																			"var actualTcpClientLtp;\r",
																			"try {\r",
																			"    actualTcpClientLtp = FindServingLtp(actualHttpClientLtp, ltpList);\r",
																			"\r",
																			"} catch(error) {\r",
																			"    console.log(\"! Finding actual TCP client failed.\");\r",
																			"}\r",
																			"\r",
																			"try {\r",
																			"    pm.test(\"TCP client could be found in actual.\", function () {\r",
																			"        pm.expect(actualTcpClientLtp).to.not.be.undefined;\r",
																			"        pm.expect(Object.keys(actualTcpClientLtp).length).to.not.equal(0);\r",
																			"    });\r",
																			"    if( (typeof actualTcpClientLtp != \"undefined\") && (Object.keys(actualTcpClientLtp).length !== 0)\r",
																			"            && (typeof actualHttpClientLtp != \"undefined\") && (Object.keys(actualHttpClientLtp).length != 0) ) {\r",
																			"\r",
																			"        let expectedDefaultLTPDirection;\r",
																			"        expectedDefaultLTPDirection = \"core-model-1-4:TERMINATION_DIRECTION_SINK\";\r",
																			"        pm.test(\"Provides expected default ltp-direction for tcp-c: \" + expectedDefaultLTPDirection, function () {\r",
																			"            pm.expect(actualTcpClientLtp[\"ltp-direction\"]).to.equal(expectedDefaultLTPDirection);\r",
																			"        });\r",
																			"\r",
																			"        pm.test(\"Provides exactly one client-ltp for tcp-c as expected \" , function () {\r",
																			"            pm.expect(actualTcpClientLtp[\"client-ltp\"].length).to.equal(1);\r",
																			"        });\r",
																			"\r",
																			"        pm.test(\"Provides expected client-ltp for tcp-c: \" + actualHttpClientLtp[\"uuid\"] , function () {\r",
																			"            pm.expect(actualTcpClientLtp[\"client-ltp\"][0]).to.equal(actualHttpClientLtp[\"uuid\"]);\r",
																			"        });\r",
																			"\r",
																			"        pm.test(\"Provides expected default local-id for tcp-c: '0'\", function () {\r",
																			"            pm.expect(actualTcpClientLtp[\"layer-protocol\"][0][\"local-id\"]).to.equal('0');\r",
																			"        });\r",
																			"\r",
																			"        let expectedDefaultLayerProtocolName;\r",
																			"        expectedDefaultLayerProtocolName = \"tcp-client-interface-1-0:LAYER_PROTOCOL_NAME_TYPE_TCP_LAYER\";\r",
																			"        pm.test(\"Provides expected default layer-protocol-name for tcp-c: \" + expectedDefaultLayerProtocolName, function () {\r",
																			"            pm.expect(actualTcpClientLtp[\"layer-protocol\"][0][\"layer-protocol-name\"]).to.equal(expectedDefaultLayerProtocolName);\r",
																			"        });\r",
																			"\r",
																			"        let actualProtocol;\r",
																			"        actualProtocol = actualTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																			"        actualProtocol = actualProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length); \r",
																			"    \r",
																			"        pm.test(\"Provides expected application-protocol for tcp-c: \" + expectedProtocol, function () {\r",
																			"            pm.expect(actualProtocol).to.equal(expectedProtocol);\r",
																			"        });\r",
																			"\r",
																			"        let actualAddress;\r",
																			"        actualAddress = actualTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																			"        pm.test(\"Provides expected application-address for tcp-c: \" + JSON.stringify(expectedAddress), function () {\r",
																			"            pm.expect(actualAddress[\"ip-address\"][\"ipv-4-address\"]).to.equal(expectedAddress[\"ip-address\"][\"ipv-4-address\"]);\r",
																			"        });\r",
																			"\r",
																			"        let actualPort;\r",
																			"        actualPort = actualTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"]; \r",
																			"        pm.test(\"Provides expected application-port for tcp-c: \" + expectedPort, function () {\r",
																			"            pm.expect(actualPort).to.equal(expectedPort);\r",
																			"        });\r",
																			"\r",
																			"    } else {\r",
																			"        console.log(\"Excpected TCP client could not be found in actual. \");\r",
																			"    }\r",
																			"\r",
																			"} catch(error) {\r",
																			"    console.log(\"! Testing of TCP client failed.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"function FindHttpClientLtpForApplicationNameAndReleaseNumber(expectedApplicationName, expectedReleaseNumber, ltpList) {\r",
																			"    let httpClientLtp;\r",
																			"    httpClientLtp = {};\r",
																			"    try{\r",
																			"        for( let i=0; i<ltpList.length; i++ ) {\r",
																			"            let sampleUuid;\r",
																			"            sampleUuid = ltpList[i][\"uuid\"];\r",
																			"            if( sampleUuid.includes(\"http-c-\") ) {\r",
																			"                let sampleApplicationName;\r",
																			"                sampleApplicationName = ltpList[i][\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																			"                if( sampleApplicationName == expectedApplicationName ) {\r",
																			"                    let sampleReleaseNumber;\r",
																			"                    sampleReleaseNumber = ltpList[i][\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																			"                    if( sampleReleaseNumber == expectedReleaseNumber ) {\r",
																			"                        httpClientLtp = ltpList[i];\r",
																			"                        return httpClientLtp;\r",
																			"                    }\r",
																			"                }\r",
																			"            }\r",
																			"        }\r",
																			"    } catch(error) {\r",
																			"        console.log(\"! Could not get HTTP client for given application name and release number\");\r",
																			"    }\r",
																			"    return httpClientLtp;\r",
																			"}\r",
																			"\r",
																			"function FindServingLtp(clientLtp, ltpList) {\r",
																			"    let servingLtp;\r",
																			"    servingLtp = {};\r",
																			"    try{\r",
																			"        if( (typeof clientLtp != \"undefined\") && (Object.keys(clientLtp).length != 0) ) {\r",
																			"            let serverLtpUuid;\r",
																			"            serverLtpUuid = clientLtp[\"server-ltp\"][0];\r",
																			"            for( let i=0; i<ltpList.length; i++ ) {\r",
																			"                let sampleUuid;\r",
																			"                sampleUuid = ltpList[i][\"uuid\"];\r",
																			"                if( sampleUuid == serverLtpUuid ) {\r",
																			"                    servingLtp = ltpList[i];\r",
																			"                    return servingLtp;\r",
																			"                }\r",
																			"            }\r",
																			"        }\r",
																			"    } catch(error) {\r",
																			"        console.log(\"! Could not get Serving LTP for given Client LTP.\");\r",
																			"    }\r",
																			"    return servingLtp;\r",
																			"}\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "GET",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "200",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Dummy /v1/disregard-application",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"var OPERATION_KEY;\r",
																			"var dummyApplicationName;\r",
																			"var dummyReleaseNumber;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"    let currentOperationServer;\r",
																			"    currentOperationServer = pm.collectionVariables.get(\"disregardApplicationOperationServer\");\r",
																			"    \r",
																			"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																			"\r",
																			"    dummyApplicationName = pm.collectionVariables.get(\"dummyApplicationName\");\r",
																			"    dummyReleaseNumber = pm.collectionVariables.get(\"dummyReleaseNumber\");\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Input Data could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Dummy Parameters\r",
																			"****************************************************************************************/\r",
																			"var USER_NAME;\r",
																			"var ORIGINATOR;\r",
																			"var X_CORRELATOR;\r",
																			"var TRACE_INDICATOR;\r",
																			"var CUSTOMER_JOURNEY;\r",
																			"try {\r",
																			"    USER_NAME = APPLICATION.userName;\r",
																			"    ORIGINATOR = \"Postman\";\r",
																			"    X_CORRELATOR = CreateXCorrelator();\r",
																			"    TRACE_INDICATOR = \"1\";\r",
																			"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																			"    \r",
																			"} catch (error) {\r",
																			"    console.log(\"! Could not define dummy values for parameters. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Request Body\r",
																			"****************************************************************************************/\r",
																			"var REQUEST_BODY;\r",
																			"try {\r",
																			"    REQUEST_BODY = '{'\r",
																			"        + '\"application-name\" : ' + '\"' + dummyApplicationName + '\",'\r",
																			"        + '\"release-number\" : ' + '\"' + dummyReleaseNumber + '\"'\r",
																			"    +'}';\r",
																			"} catch (error) {\r",
																			"    console.log(\"!Could not define request body. \");\r",
																			"}\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + \"/v1/disregard-application\";\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																			"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																			"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																			"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																			"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"function CreateXCorrelator() {\r",
																			"    let xCorrelator;\r",
																			"    xCorrelator = \"\";\r",
																			"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(12);\r",
																			"    return xCorrelator;\r",
																			"}\r",
																			"\r",
																			"function GenerateRandomHexString(length) {\r",
																			"    var randomRandomHexString = \"\";\r",
																			"    while (randomRandomHexString.length < length) {\r",
																			"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																			"    }\r",
																			"    return randomRandomHexString.substring(0,length);\r",
																			"}\r",
																			"\r",
																			"function GenerateRandomString(length) {\r",
																			"    let randomString;\r",
																			"    randomString = \"\";\r",
																			"    try {\r",
																			"        let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r",
																			"        let charactersLength = characters.length;\r",
																			"        for (let i = 0; i < length; i++) {\r",
																			"            randomString += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																			"        }\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Could not generate random string. \");\r",
																			"    }\r",
																			"    return randomString;\r",
																			"}\r",
																			"\r",
																			"function RandomReleaseNumber() {\r",
																			"    let releaseNumber;\r",
																			"    let releaseNumberParts = [];\r",
																			"    for  (let i=0; i<3 ; i++) {\r",
																			"        releaseNumberParts[i] = Math.floor(Math.random() * 10);\r",
																			"    }\r",
																			"    releaseNumber = releaseNumberParts[0] + \".\" + releaseNumberParts[1] + \".\" + releaseNumberParts[2];\r",
																			"    return releaseNumber;\r",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "POST",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "204",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Check /core-model-1-4:control-construct",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"var AUTHORIZATION;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																			"\r",
																			"    oamPath = \"/core-model-1-4:control-construct\";\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Environment variables could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Request Body\r",
																			"****************************************************************************************/\r",
																			"var REQUEST_BODY;\r",
																			"try {\r",
																			"    REQUEST_BODY = \"\";\r",
																			"} catch (error) {\r",
																			"    console.log(\"!Could not define request body. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + oamPath;\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var expectedLogicalTerminationPoint;\r",
																			"var expectedForwardingConstruct;\r",
																			"try {\r",
																			"    expectedLogicalTerminationPoint = pm.collectionVariables.get(\"ltpList\");\r",
																			"    expectedForwardingConstruct = pm.collectionVariables.get(\"fcList\");\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Collection variables could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var RESPONSE_CODE;\r",
																			"var RESPONSE;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"\r",
																			"    RESPONSE_CODE = parseInt(response.code);\r",
																			"\r",
																			"    if (Math.floor(RESPONSE_CODE / 100) === 2) {\r",
																			"        RESPONSE = JSON.parse(response.stream);\r",
																			"    } else {\r",
																			"        RESPONSE = [];\r",
																			"    }\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Result value lists could not be extracted.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Testing\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.test(\"GET /core-model-1-4:control-construct responds 200\", function () {\r",
																			"        pm.expect(RESPONSE_CODE).to.equal(200);\r",
																			"    });\r",
																			"\r",
																			"    let actualLtpList;\r",
																			"    actualLtpList = RESPONSE[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																			"\r",
																			"    pm.test(\"Received logical-termination-point is same as intial instance \", function () {\r",
																			"        pm.expect(actualLtpList).to.deep.equal(expectedLogicalTerminationPoint);\r",
																			"    });\r",
																			"\r",
																			"    let actualFcList;\r",
																			"    actualFcList = RESPONSE[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
																			"\r",
																			"    pm.test(\"Received forwarding-construct is same as intial instance \", function () {\r",
																			"        pm.expect(actualFcList).to.deep.equal(expectedForwardingConstruct);\r",
																			"    });\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Testing could not be executed.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "200",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														}
													],
													"description": "## Get application created?\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for op-s of /v1/regard-application, storing operation-key\n  - searching CC for op-s of /v1/disregard-application, storing operation-key\n- POST /v1/regard-application with\n  - dummy values generated for application-name, release-number, address, protocol, port\n  - operation-key from above\n  - reasonable parameter\n\n#### Testing:\n- checking for ResponseCode==204\n- GETing CC (/core-model-1-4:control-construct)\n- verify that CC/http-c application-name=dummyApplicationName and its corresponding release-number\n\n#### Clearing:\n- /v1/disregard-application with values according to generated dummy values.\n\n#### Clearance check:\n- Check if the logical-termination-point instance is the same as initial configuration\n- Check if the forwarding-construct instance is the same as initial configuration"
												},
												{
													"name": "protocol updated?",
													"item": [
														{
															"name": "reference /core-model-1-4:control-construct",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"console.log(\"\\n----- /v1/regard-application acceptance -- protocol attribute updated? -------------------------------\");\r",
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Environment variables could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																			"\r",
																			"    let REQUEST_BODY;\r",
																			"    REQUEST_BODY = \"\";\r",
																			"\r",
																			"    let AUTHORIZATION;\r",
																			"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var ltpList;\r",
																			"var fcList;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"    \r",
																			"    let responseCode;\r",
																			"    responseCode = parseInt(response.code);\r",
																			"    \r",
																			"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																			"        let responseObject;\r",
																			"        responseObject = JSON.parse(response.stream);\r",
																			"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																			"        fcList = responseObject[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
																			"\r",
																			"    } else {\r",
																			"        ltpList = [];\r",
																			"        fcList = [];\r",
																			"    }\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! ltpList could not be extracted.\");\r",
																			"}\r",
																			"\r",
																			"var currentOperationServer;\r",
																			"var httpClientLtp;\r",
																			"var tcpClientLtp;\r",
																			"try {\r",
																			"    currentOperationServer = FindOperationServer(\"/v1/regard-application\", ltpList);\r",
																			"\r",
																			"    //Inquiring OAM approvals\r",
																			"    let outputFcPortListInquireOamRequestApprovals;\r",
																			"    outputFcPortListInquireOamRequestApprovals = FindOutputFcPortList(\"NewApplicationCausesRequestForInquiringOamRequestApprovals\", fcList);\r",
																			"    let ltpInstance = FindRandomLtpInstancesFromFc(outputFcPortListInquireOamRequestApprovals, ltpList)\r",
																			"    httpClientLtp = ltpInstance.httpClientLtp;\r",
																			"    tcpClientLtp = FindServingLtp(httpClientLtp, ltpList);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Reference objects could not be extracted.\");\r",
																			"} \r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.collectionVariables.clear();\r",
																			"    \r",
																			"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																			"\r",
																			"    pm.collectionVariables.set(\"httpClientLtp\", httpClientLtp);\r",
																			"    pm.collectionVariables.set(\"tcpClientLtp\", tcpClientLtp);\r",
																			"\r",
																			"    pm.collectionVariables.set(\"ltpList\", ltpList);\r",
																			"    pm.collectionVariables.set(\"fcList\", fcList);\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Collection variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"function FindOperationServer(operationName, ltpList) {\r",
																			"    let operationServer;\r",
																			"    operationServer = \"\";\r",
																			"    try {\r",
																			"        let sampleUuid;\r",
																			"        for(let i=0; i<ltpList.length; i++) {\r",
																			"            sampleUuid = ltpList[i][\"uuid\"];\r",
																			"            if(sampleUuid.includes(\"op-s-\")) {\r",
																			"                let sampleOperationName;\r",
																			"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																			"                if(sampleOperationName == operationName) {\r",
																			"                    operationServer = ltpList[i];\r",
																			"                    return operationServer;\r",
																			"                }\r",
																			"            }\r",
																			"        }\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																			"    }\r",
																			"    return operationServer;\r",
																			"}\r",
																			"\r",
																			"function FindRandomLtpInstancesFromFc(outputFcPortList, ltpList) {\r",
																			"    let ltpInstance = {};\r",
																			"    try {\r",
																			"        for ( let i=0; i<outputFcPortList.length; i++ ) {\r",
																			"            let randomOutputFcPort = outputFcPortList[Math.floor(Math.random() * outputFcPortList.length)];\r",
																			"            let outputLtpUuid = randomOutputFcPort[\"logical-termination-point\"];\r",
																			"            let operationClientLtp = FindActualInstanceByUuid(outputLtpUuid, ltpList);\r",
																			"\r",
																			"            let httpClientLtp = FindServingLtp(operationClientLtp, ltpList);\r",
																			"            let sampleApplicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																			"\r",
																			"            if (sampleApplicationName != \"AdministratorAdministration\") {\r",
																			"\t\t\t\tltpInstance = { httpClientLtp, operationClientLtp };\r",
																			"                break;\r",
																			"            }\r",
																			"        }\r",
																			"    } catch(error) {\r",
																			"        console.log(error);\r",
																			"        console.log(\"! Exception in function : FindRandomLtpInstancesFromFc. \")\r",
																			"    } \r",
																			"    return ltpInstance;\r",
																			"}\r",
																			"\r",
																			"function FindOutputFcPortList(forwardingName, fcList) {\r",
																			"    let outputFcPortList;\r",
																			"    outputFcPortList = [];\r",
																			"    try {\r",
																			"        for( let i=0; i<fcList.length; i++ ) {\r",
																			"            for(let j=0; j<fcList[i][\"name\"].length; j++) {               \r",
																			"                if(fcList[i][\"name\"][j][\"value\"] == forwardingName) {\r",
																			"                    fcPortList = fcList[i][\"fc-port\"];\r",
																			"                    for(let k=0;k<fcPortList.length;k++) {\r",
																			"                        if(fcPortList[k][\"port-direction\"] == \"core-model-1-4:PORT_DIRECTION_TYPE_OUTPUT\") {\r",
																			"                            outputFcPortList.push(fcPortList[k]);\r",
																			"                        }\r",
																			"                    }\r",
																			"                    return outputFcPortList;\r",
																			"                }\r",
																			"            }\r",
																			"        }\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																			"    }\r",
																			"    return outputFcPortList;\r",
																			"}\r",
																			"\r",
																			"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
																			"    let actualInstance;\r",
																			"    actualInstance = {};\r",
																			"    try {\r",
																			"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
																			"            let sampleUuid;\r",
																			"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
																			"            if( sampleUuid == expectedUuid ) {\r",
																			"                actualInstance = actualLtpList[i];\r",
																			"                return actualInstance;\r",
																			"            }\r",
																			"        }\r",
																			"\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																			"    }\r",
																			"    return undefined;\r",
																			"}\r",
																			"\r",
																			"function FindServingLtp(clientLtp, ltpList) {\r",
																			"    let servingLtp;\r",
																			"    servingLtp = {};\r",
																			"    try{\r",
																			"        let serverLtpUuid;\r",
																			"        serverLtpUuid = clientLtp[\"server-ltp\"][0];\r",
																			"        for( let i=0; i<ltpList.length; i++ ) {\r",
																			"            let sampleUuid;\r",
																			"            sampleUuid = ltpList[i][\"uuid\"];\r",
																			"            if( sampleUuid == serverLtpUuid ) {\r",
																			"                servingLtp = ltpList[i];\r",
																			"                return servingLtp;\r",
																			"            }\r",
																			"        }\r",
																			"    } catch(error) {\r",
																			"        console.log(error);\r",
																			"        console.log(\"! Exception in function : FindServingLtp. \")\r",
																			"    }\r",
																			"    return servingLtp;\r",
																			"}\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "GET",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "200",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Expected   /v1/regard-application",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"var OPERATION_KEY;\r",
																			"var applicationName;\r",
																			"var releaseNumber;\r",
																			"var dummyProtocol;\r",
																			"var address;\r",
																			"var port;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"    let currentOperationServer;\r",
																			"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																			"    \r",
																			"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																			"\r",
																			"    let httpClientLtp;\r",
																			"    httpClientLtp = pm.collectionVariables.get(\"httpClientLtp\");\r",
																			"\r",
																			"    applicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																			"    releaseNumber = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																			"\r",
																			"    let tcpClientLtp;\r",
																			"    tcpClientLtp = pm.collectionVariables.get(\"tcpClientLtp\");\r",
																			"\r",
																			"    let protocol = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																			"    dummyProtocol = GenerateDummyRemoteProtocol(protocol);\r",
																			"    dummyProtocol = dummyProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																			"\r",
																			"    address = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																			"    port = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Input Data could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Dummy Parameters\r",
																			"****************************************************************************************/\r",
																			"var USER_NAME;\r",
																			"var ORIGINATOR;\r",
																			"var X_CORRELATOR;\r",
																			"var TRACE_INDICATOR;\r",
																			"var CUSTOMER_JOURNEY;\r",
																			"try {\r",
																			"    USER_NAME = APPLICATION.userName;\r",
																			"    ORIGINATOR = \"Postman\";\r",
																			"    X_CORRELATOR = CreateXCorrelator();\r",
																			"    TRACE_INDICATOR = \"1\";\r",
																			"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																			"    \r",
																			"} catch (error) {\r",
																			"    console.log(\"! Could not define dummy values for parameters. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Request Body\r",
																			"****************************************************************************************/\r",
																			"var REQUEST_BODY;\r",
																			"try {\r",
																			"    REQUEST_BODY = '{'\r",
																			"        + '\"application-name\" : ' + '\"' + applicationName + '\",'\r",
																			"        + '\"release-number\" : ' + '\"' + releaseNumber + '\",'\r",
																			"        + '\"protocol\" : ' + '\"' + dummyProtocol + '\",'\r",
																			"        + '\"address\" : ' + JSON.stringify(address) + ','\r",
																			"        + '\"port\" : ' +  port\r",
																			"    +'}';\r",
																			"} catch (error) {\r",
																			"    console.log(\"!Could not define request body. \");\r",
																			"}\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.collectionVariables.set(\"dummyProtocol\", dummyProtocol);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Collection variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + \"/v1/regard-application\";\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																			"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																			"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																			"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																			"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"function CreateXCorrelator() {\r",
																			"    let xCorrelator;\r",
																			"    xCorrelator = \"\";\r",
																			"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(12);\r",
																			"    return xCorrelator;\r",
																			"}\r",
																			"\r",
																			"function GenerateRandomHexString(length) {\r",
																			"    var randomRandomHexString = \"\";\r",
																			"    while (randomRandomHexString.length < length) {\r",
																			"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																			"    }\r",
																			"    return randomRandomHexString.substring(0,length);\r",
																			"}\r",
																			"\r",
																			"function GenerateDummyRemoteProtocol(currentProtocol) {\r",
																			"    let alternativeProtocolList;\r",
																			"    alternativeProtocolList = [  \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTP\",\r",
																			"                                    \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTPS\"\r",
																			"                                ];\r",
																			"    let indexOfCurrentProtocol;\r",
																			"    indexOfCurrentProtocol = alternativeProtocolList.indexOf(currentProtocol);\r",
																			"    if (indexOfCurrentProtocol > -1) {\r",
																			"        alternativeProtocolList.splice(indexOfCurrentProtocol, 1);\r",
																			"    }\r",
																			"\r",
																			"    let alternativeProtocol;\r",
																			"    let alternativeProtocolIndex;\r",
																			"    alternativeProtocolIndex = Math.floor(Math.random() * alternativeProtocolList.length);\r",
																			"    alternativeProtocol = alternativeProtocolList[alternativeProtocolIndex]; \r",
																			"\r",
																			"    return alternativeProtocol;\r",
																			"}\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var RESPONSE_CODE;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"\r",
																			"    RESPONSE_CODE = parseInt(response.code);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Response Code could not be extracted.\");\r",
																			"}    \r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Testing\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.test(\"POST /v1/regard-application responds 204\", function () {\r",
																			"        pm.expect(RESPONSE_CODE).to.equal(204);\r",
																			"    });\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Testing could not be executed.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "204",
																		"type": "default"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Expected /core-model-1-4:control-construct",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Environment variables could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																			"\r",
																			"    let REQUEST_BODY;\r",
																			"    REQUEST_BODY = \"\";\r",
																			"\r",
																			"    let AUTHORIZATION;\r",
																			"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var expectedRemoteProtocol;\r",
																			"var initialTcpClientLtp;\r",
																			"try {\r",
																			"    expectedRemoteProtocol = pm.collectionVariables.get(\"dummyProtocol\");\r",
																			"    initialTcpClientLtp = pm.collectionVariables.get(\"tcpClientLtp\");\r",
																			"   \r",
																			"} catch(error) {\r",
																			"    console.log(\"! Could not load input data. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var ltpList;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"    \r",
																			"    let responseCode;\r",
																			"    responseCode = parseInt(response.code);\r",
																			"    \r",
																			"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																			"        let responseObject;\r",
																			"        responseObject = JSON.parse(response.stream);\r",
																			"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																			"\r",
																			"    } else {\r",
																			"        ltpList = [];\r",
																			"    }\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! ltpList could not be extracted.\");\r",
																			"}\r",
																			"\r",
																			"var actualRemoteProtocol;\r",
																			"try {\r",
																			"    let tcpClientUuid;\r",
																			"    tcpClientUuid = initialTcpClientLtp[\"uuid\"]\r",
																			"\r",
																			"    let actualTcpClientLtp;\r",
																			"    actualTcpClientLtp = FindActualInstanceByUuid(tcpClientUuid, ltpList);\r",
																			"\r",
																			"    actualRemoteProtocol = actualTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																			"    actualRemoteProtocol = actualRemoteProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Reference objects could not be extracted.\");\r",
																			"} \r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Testing\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.test(\"Provides expected protocol: \" + expectedRemoteProtocol, function () {\r",
																			"        pm.expect(actualRemoteProtocol).to.equal(expectedRemoteProtocol);\r",
																			"    });\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Testing could not be executed.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
																			"    let actualInstance;\r",
																			"    actualInstance = {};\r",
																			"    try {\r",
																			"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
																			"            let sampleUuid;\r",
																			"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
																			"            if( sampleUuid == expectedUuid ) {\r",
																			"                actualInstance = actualLtpList[i];\r",
																			"                return actualInstance;\r",
																			"            }\r",
																			"        }\r",
																			"\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																			"    }\r",
																			"    return undefined;\r",
																			"}\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "GET",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "200",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "initial tcp-c/remote-protocol",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"var tcpClientUuid;\r",
																			"var initialRemoteProtocol;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"    \r",
																			"    let tcpClientLtp;\r",
																			"    tcpClientLtp = pm.collectionVariables.get(\"tcpClientLtp\");\r",
																			"\r",
																			"    tcpClientUuid = tcpClientLtp[\"uuid\"];\r",
																			"\r",
																			"    initialRemoteProtocol = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Variables could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl \r",
																			"            + \"/core-model-1-4:control-construct/logical-termination-point=\"\r",
																			"            + tcpClientUuid\r",
																			"            + \"/layer-protocol=0/tcp-client-interface-1-0:tcp-client-interface-pac/tcp-client-interface-configuration/remote-protocol\";\r",
																			"\r",
																			"    let REQUEST_BODY;\r",
																			"    REQUEST_BODY = '{ '\r",
																			"                    +   '\"tcp-client-interface-1-0:remote-protocol\": \"' + initialRemoteProtocol + '\"'\r",
																			"                    + ' }';\r",
																			"\r",
																			"    let AUTHORIZATION;\r",
																			"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error)\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PUT",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "204",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Check /core-model-1-4:control-construct",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"var AUTHORIZATION;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																			"\r",
																			"    oamPath = \"/core-model-1-4:control-construct\";\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Environment variables could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Request Body\r",
																			"****************************************************************************************/\r",
																			"var REQUEST_BODY;\r",
																			"try {\r",
																			"    REQUEST_BODY = \"\";\r",
																			"} catch (error) {\r",
																			"    console.log(\"!Could not define request body. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + oamPath;\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var expectedLogicalTerminationPoint;\r",
																			"var expectedForwardingConstruct;\r",
																			"try {\r",
																			"    expectedLogicalTerminationPoint = pm.collectionVariables.get(\"ltpList\");\r",
																			"    expectedForwardingConstruct = pm.collectionVariables.get(\"fcList\");\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Collection variables could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var RESPONSE_CODE;\r",
																			"var RESPONSE;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"\r",
																			"    RESPONSE_CODE = parseInt(response.code);\r",
																			"\r",
																			"    if (Math.floor(RESPONSE_CODE / 100) === 2) {\r",
																			"        RESPONSE = JSON.parse(response.stream);\r",
																			"    } else {\r",
																			"        RESPONSE = [];\r",
																			"    }\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Result value lists could not be extracted.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Testing\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.test(\"GET /core-model-1-4:control-construct responds 200\", function () {\r",
																			"        pm.expect(RESPONSE_CODE).to.equal(200);\r",
																			"    });\r",
																			"\r",
																			"    let actualLtpList;\r",
																			"    actualLtpList = RESPONSE[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																			"    pm.test(\"Received logical-termination-point is same as intial instance \", function () {\r",
																			"        pm.expect(actualLtpList).to.deep.equal(expectedLogicalTerminationPoint);\r",
																			"    });\r",
																			"\r",
																			"    let actualFcList;\r",
																			"    actualFcList = RESPONSE[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
																			"\r",
																			"    pm.test(\"Received forwarding-construct is same as intial instance \", function () {\r",
																			"        pm.expect(actualFcList).to.deep.equal(expectedForwardingConstruct);\r",
																			"    });\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Testing could not be executed.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "200",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														}
													],
													"description": "## Get protocol updated?\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for op-s of /v1/regard-application, storing operation-key\n  -  searching CC for output fc-port of NewApplicationCausesRequestForInquiringOamRequestApprovals, find corresponding op-c, http-c and tcp-c, store them.\n- POST /v1/regard-application with\n  - all attributes according to chosen set of http-c, tcp-c , BUT protocol attribute with random dummy value as per the spec.\n  - operation-key from above\n  - reasonable parameters\n\n#### Testing:\n- checking for ResponseCode==204\n- GETing CC (/core-model-1-4:control-construct)\n- searching CC for tcp-c and check if the remote-protocol is updated with dummyValue.\n\n#### Clearing:\n- PUT chosen tcp-c/protocol with intial value\n\n#### Clearance check:\n- Check if the logical-termination-point instance is the same as initial configuration\n- Check if the forwarding-construct instance is the same as initial configuration"
												},
												{
													"name": "address updated?",
													"item": [
														{
															"name": "ipv-4-address updated?",
															"item": [
																{
																	"name": "reference /core-model-1-4:control-construct",
																	"event": [
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					"console.log(\"\\n-----  /v1/regard-application accept -- address/ipv-4-address attribute updated? -------------------------------\");\r",
																					"/****************************************************************************************\r",
																					"* Loading Input Data\r",
																					"****************************************************************************************/\r",
																					"var APPLICATION;\r",
																					"try {\r",
																					"    APPLICATION = pm.environment.get(\"application\");\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Environment variables could not be loaded.\");\r",
																					"}\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Setting Local Variables and Preparing the Request\r",
																					"****************************************************************************************/\r",
																					"try {\r",
																					"    let URI;\r",
																					"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																					"\r",
																					"    let REQUEST_BODY;\r",
																					"    REQUEST_BODY = \"\";\r",
																					"\r",
																					"    let AUTHORIZATION;\r",
																					"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																					"\r",
																					"    let ACCEPT;\r",
																					"    ACCEPT = \"application/json\";\r",
																					"\r",
																					"    let CONTENT_TYPE;\r",
																					"    CONTENT_TYPE = \"application/json\";\r",
																					"\r",
																					"\r",
																					"    pm.variables.clear();\r",
																					"\r",
																					"    pm.variables.set(\"uri\", URI);\r",
																					"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																					"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Local variables could not be set.\");\r",
																					"}\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Functions\r",
																					"****************************************************************************************/\r",
																					"\r",
																					""
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"/****************************************************************************************\r",
																					"* Loading Input Data\r",
																					"****************************************************************************************/\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Extracting Result\r",
																					"****************************************************************************************/\r",
																					"var ltpList;\r",
																					"var fcList;\r",
																					"try {\r",
																					"    let response;\r",
																					"    response = pm.response;\r",
																					"    \r",
																					"    let responseCode;\r",
																					"    responseCode = parseInt(response.code);\r",
																					"    \r",
																					"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																					"        let responseObject;\r",
																					"        responseObject = JSON.parse(response.stream);\r",
																					"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																					"        fcList = responseObject[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
																					"\r",
																					"    } else {\r",
																					"        ltpList = [];\r",
																					"        fcList = [];\r",
																					"    }\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! ltpList could not be extracted.\");\r",
																					"}\r",
																					"\r",
																					"var currentOperationServer;\r",
																					"var httpClientLtp;\r",
																					"var tcpClientLtp;\r",
																					"try {\r",
																					"    currentOperationServer = FindOperationServer(\"/v1/regard-application\", ltpList);\r",
																					"\r",
																					"    //Inquiring OAM approvals\r",
																					"    let outputFcPortListInquireOamRequestApprovals;\r",
																					"    outputFcPortListInquireOamRequestApprovals = FindOutputFcPortList(\"NewApplicationCausesRequestForInquiringOamRequestApprovals\", fcList);\r",
																					"    let ltpInstance = FindRandomLtpInstancesFromFc(outputFcPortListInquireOamRequestApprovals, ltpList)\r",
																					"    httpClientLtp = ltpInstance.httpClientLtp;\r",
																					"    tcpClientLtp = FindServingLtp(httpClientLtp, ltpList);\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(error);\r",
																					"    console.log(\"! Reference objects could not be extracted.\");\r",
																					"} \r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Setting Collection Variables\r",
																					"****************************************************************************************/\r",
																					"try {\r",
																					"    pm.collectionVariables.clear();\r",
																					"    \r",
																					"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																					"\r",
																					"    pm.collectionVariables.set(\"httpClientLtp\", httpClientLtp);\r",
																					"    pm.collectionVariables.set(\"tcpClientLtp\", tcpClientLtp);\r",
																					"\r",
																					"    pm.collectionVariables.set(\"ltpList\", ltpList);\r",
																					"    pm.collectionVariables.set(\"fcList\", fcList);\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Collection variables could not be set.\");\r",
																					"}\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Functions\r",
																					"****************************************************************************************/\r",
																					"\r",
																					"function FindOperationServer(operationName, ltpList) {\r",
																					"    let operationServer;\r",
																					"    operationServer = \"\";\r",
																					"    try {\r",
																					"        let sampleUuid;\r",
																					"        for(let i=0; i<ltpList.length; i++) {\r",
																					"            sampleUuid = ltpList[i][\"uuid\"];\r",
																					"            if(sampleUuid.includes(\"op-s-\")) {\r",
																					"                let sampleOperationName;\r",
																					"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																					"                if(sampleOperationName == operationName) {\r",
																					"                    operationServer = ltpList[i];\r",
																					"                    return operationServer;\r",
																					"                }\r",
																					"            }\r",
																					"        }\r",
																					"    } catch (error) {\r",
																					"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																					"    }\r",
																					"    return operationServer;\r",
																					"}\r",
																					"\r",
																					"function FindRandomLtpInstancesFromFc(outputFcPortList, ltpList) {\r",
																					"    let ltpInstance = {};\r",
																					"    try {\r",
																					"        for ( let i=0; i<outputFcPortList.length; i++ ) {\r",
																					"            let randomOutputFcPort = outputFcPortList[Math.floor(Math.random() * outputFcPortList.length)];\r",
																					"            let outputLtpUuid = randomOutputFcPort[\"logical-termination-point\"];\r",
																					"            let operationClientLtp = FindActualInstanceByUuid(outputLtpUuid, ltpList);\r",
																					"\r",
																					"            let httpClientLtp = FindServingLtp(operationClientLtp, ltpList);\r",
																					"            let sampleApplicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																					"\r",
																					"            if (sampleApplicationName != \"AdministratorAdministration\") {\r",
																					"\t\t\t\tltpInstance = { httpClientLtp, operationClientLtp };\r",
																					"                break;\r",
																					"            }\r",
																					"        }\r",
																					"    } catch(error) {\r",
																					"        console.log(error);\r",
																					"        console.log(\"! Exception in function : FindRandomLtpInstancesFromFc. \")\r",
																					"    } \r",
																					"    return ltpInstance;\r",
																					"}\r",
																					"\r",
																					"function FindOutputFcPortList(forwardingName, fcList) {\r",
																					"    let outputFcPortList;\r",
																					"    outputFcPortList = [];\r",
																					"    try {\r",
																					"        for( let i=0; i<fcList.length; i++ ) {\r",
																					"            for(let j=0; j<fcList[i][\"name\"].length; j++) {               \r",
																					"                if(fcList[i][\"name\"][j][\"value\"] == forwardingName) {\r",
																					"                    fcPortList = fcList[i][\"fc-port\"];\r",
																					"                    for(let k=0;k<fcPortList.length;k++) {\r",
																					"                        if(fcPortList[k][\"port-direction\"] == \"core-model-1-4:PORT_DIRECTION_TYPE_OUTPUT\") {\r",
																					"                            outputFcPortList.push(fcPortList[k]);\r",
																					"                        }\r",
																					"                    }\r",
																					"                    return outputFcPortList;\r",
																					"                }\r",
																					"            }\r",
																					"        }\r",
																					"    } catch (error) {\r",
																					"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																					"    }\r",
																					"    return outputFcPortList;\r",
																					"}\r",
																					"\r",
																					"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
																					"    let actualInstance;\r",
																					"    actualInstance = {};\r",
																					"    try {\r",
																					"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
																					"            let sampleUuid;\r",
																					"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
																					"            if( sampleUuid == expectedUuid ) {\r",
																					"                actualInstance = actualLtpList[i];\r",
																					"                return actualInstance;\r",
																					"            }\r",
																					"        }\r",
																					"\r",
																					"    } catch (error) {\r",
																					"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																					"    }\r",
																					"    return undefined;\r",
																					"}\r",
																					"\r",
																					"function FindServingLtp(clientLtp, ltpList) {\r",
																					"    let servingLtp;\r",
																					"    servingLtp = {};\r",
																					"    try{\r",
																					"        let serverLtpUuid;\r",
																					"        serverLtpUuid = clientLtp[\"server-ltp\"][0];\r",
																					"        for( let i=0; i<ltpList.length; i++ ) {\r",
																					"            let sampleUuid;\r",
																					"            sampleUuid = ltpList[i][\"uuid\"];\r",
																					"            if( sampleUuid == serverLtpUuid ) {\r",
																					"                servingLtp = ltpList[i];\r",
																					"                return servingLtp;\r",
																					"            }\r",
																					"        }\r",
																					"    } catch(error) {\r",
																					"        console.log(error);\r",
																					"        console.log(\"! Exception in function : FindServingLtp. \")\r",
																					"    }\r",
																					"    return servingLtp;\r",
																					"}\r",
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"protocolProfileBehavior": {
																		"disableBodyPruning": true
																	},
																	"request": {
																		"auth": {
																			"type": "noauth"
																		},
																		"method": "GET",
																		"header": [
																			{
																				"key": "x-mock-response-code",
																				"value": "200",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{{requestBody}}",
																			"options": {
																				"raw": {
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{uri}}",
																			"host": [
																				"{{uri}}"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "Expected  /v1/regard-application",
																	"event": [
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					"/****************************************************************************************\r",
																					"* Loading Input Data\r",
																					"****************************************************************************************/\r",
																					"var APPLICATION;\r",
																					"var OPERATION_KEY;\r",
																					"var applicationName;\r",
																					"var releaseNumber;\r",
																					"var protocol;\r",
																					"var dummyAddress;\r",
																					"var port;\r",
																					"try {\r",
																					"    APPLICATION = pm.environment.get(\"application\");\r",
																					"\r",
																					"    let currentOperationServer;\r",
																					"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																					"    \r",
																					"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																					"\r",
																					"    let httpClientLtp;\r",
																					"    httpClientLtp = pm.collectionVariables.get(\"httpClientLtp\");\r",
																					"\r",
																					"    applicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																					"\r",
																					"    releaseNumber = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																					"\r",
																					"    let tcpClientLtp;\r",
																					"    tcpClientLtp = pm.collectionVariables.get(\"tcpClientLtp\");\r",
																					"\r",
																					"    protocol = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																					"    protocol = protocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																					"\r",
																					"    let dummyIpv4Address = RandomIpAddress();\r",
																					"    dummyAddress = {\r",
																					"        \"ip-address\": {\r",
																					"            \"ipv-4-address\": dummyIpv4Address\r",
																					"        }\r",
																					"    };\r",
																					"\r",
																					"    port = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(error);\r",
																					"    console.log(\"! Input Data could not be loaded.\");\r",
																					"}\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Defining Dummy Parameters\r",
																					"****************************************************************************************/\r",
																					"var USER_NAME;\r",
																					"var ORIGINATOR;\r",
																					"var X_CORRELATOR;\r",
																					"var TRACE_INDICATOR;\r",
																					"var CUSTOMER_JOURNEY;\r",
																					"try {\r",
																					"    USER_NAME = APPLICATION.userName;\r",
																					"    ORIGINATOR = \"Postman\";\r",
																					"    X_CORRELATOR = CreateXCorrelator();\r",
																					"    TRACE_INDICATOR = \"1\";\r",
																					"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																					"    \r",
																					"} catch (error) {\r",
																					"    console.log(\"! Could not define dummy values for parameters. \");\r",
																					"}\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Defining Request Body\r",
																					"****************************************************************************************/\r",
																					"var REQUEST_BODY;\r",
																					"try {\r",
																					"    REQUEST_BODY = '{'\r",
																					"        + '\"application-name\" : ' + '\"' + applicationName + '\",'\r",
																					"        + '\"release-number\" : ' + '\"' + releaseNumber + '\",'\r",
																					"        + '\"protocol\" : ' + '\"' + protocol + '\",'\r",
																					"        + '\"address\" : ' + JSON.stringify(dummyAddress) + ','\r",
																					"        + '\"port\" : ' +  port\r",
																					"    +'}';\r",
																					"} catch (error) {\r",
																					"    console.log(\"!Could not define request body. \");\r",
																					"}\r",
																					"/****************************************************************************************\r",
																					"* Setting Collection Variables\r",
																					"****************************************************************************************/\r",
																					"try {\r",
																					"    pm.collectionVariables.set(\"dummyAddress\", dummyAddress);\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Collection variables could not be set.\");\r",
																					"}\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Setting Local Variables and Preparing the Request\r",
																					"****************************************************************************************/\r",
																					"try {\r",
																					"    let URI;\r",
																					"    URI = APPLICATION.serverUrl + \"/v1/regard-application\";\r",
																					"\r",
																					"    let ACCEPT;\r",
																					"    ACCEPT = \"application/json\";\r",
																					"\r",
																					"    let CONTENT_TYPE;\r",
																					"    CONTENT_TYPE = \"application/json\";\r",
																					"\r",
																					"    pm.variables.clear();\r",
																					"\r",
																					"    pm.variables.set(\"uri\", URI);\r",
																					"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																					"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																					"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																					"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																					"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																					"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(error);\r",
																					"    console.log(\"! Local variables could not be set.\");\r",
																					"}\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Functions\r",
																					"****************************************************************************************/\r",
																					"\r",
																					"function CreateXCorrelator() {\r",
																					"    let xCorrelator;\r",
																					"    xCorrelator = \"\";\r",
																					"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																					"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																					"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																					"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																					"    xCorrelator += GenerateRandomHexString(12);\r",
																					"    return xCorrelator;\r",
																					"}\r",
																					"\r",
																					"function GenerateRandomHexString(length) {\r",
																					"    var randomRandomHexString = \"\";\r",
																					"    while (randomRandomHexString.length < length) {\r",
																					"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																					"    }\r",
																					"    return randomRandomHexString.substring(0,length);\r",
																					"}\r",
																					"\r",
																					"function RandomIpAddress() {\r",
																					"    let randomAddress\r",
																					"    let addressParts = [];\r",
																					"    for ( let i=0; i<4; i++ ) {\r",
																					"        addressParts[i] = String(Math.floor(Math.random() * 256));\r",
																					"    }\r",
																					"    randomAddress = addressParts[0] + \".\" + addressParts[1] + \".\" + addressParts[2] + \".\" + addressParts[3];\r",
																					"    return randomAddress;\r",
																					"}\r",
																					""
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"/****************************************************************************************\r",
																					"* Loading Input Data\r",
																					"****************************************************************************************/\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Extracting Result\r",
																					"****************************************************************************************/\r",
																					"var RESPONSE_CODE;\r",
																					"try {\r",
																					"    let response;\r",
																					"    response = pm.response;\r",
																					"\r",
																					"    RESPONSE_CODE = parseInt(response.code);\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Response Code could not be extracted.\");\r",
																					"}    \r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Testing\r",
																					"****************************************************************************************/\r",
																					"try {\r",
																					"    pm.test(\"POST /v1/regard-application responds 204\", function () {\r",
																					"        pm.expect(RESPONSE_CODE).to.equal(204);\r",
																					"    });\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Testing could not be executed.\");\r",
																					"}\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Functions\r",
																					"****************************************************************************************/\r",
																					"\r",
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "x-mock-response-code",
																				"value": "204",
																				"type": "default"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{{requestBody}}",
																			"options": {
																				"raw": {
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{uri}}",
																			"host": [
																				"{{uri}}"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "Expected /core-model-1-4:control-construct",
																	"event": [
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					"/****************************************************************************************\r",
																					"* Loading Input Data\r",
																					"****************************************************************************************/\r",
																					"var APPLICATION;\r",
																					"try {\r",
																					"    APPLICATION = pm.environment.get(\"application\");\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Environment variables could not be loaded.\");\r",
																					"}\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Setting Local Variables and Preparing the Request\r",
																					"****************************************************************************************/\r",
																					"try {\r",
																					"    let URI;\r",
																					"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																					"\r",
																					"    let REQUEST_BODY;\r",
																					"    REQUEST_BODY = \"\";\r",
																					"\r",
																					"    let AUTHORIZATION;\r",
																					"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																					"\r",
																					"    let ACCEPT;\r",
																					"    ACCEPT = \"application/json\";\r",
																					"\r",
																					"    let CONTENT_TYPE;\r",
																					"    CONTENT_TYPE = \"application/json\";\r",
																					"\r",
																					"\r",
																					"    pm.variables.clear();\r",
																					"\r",
																					"    pm.variables.set(\"uri\", URI);\r",
																					"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																					"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Local variables could not be set.\");\r",
																					"}\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Functions\r",
																					"****************************************************************************************/\r",
																					"\r",
																					""
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"/****************************************************************************************\r",
																					"* Loading Input Data\r",
																					"****************************************************************************************/\r",
																					"var expectedRemoteAddress;\r",
																					"var initialTcpClientLtp;\r",
																					"try {\r",
																					"    expectedRemoteAddress = pm.collectionVariables.get(\"dummyAddress\");\r",
																					"    initialTcpClientLtp = pm.collectionVariables.get(\"tcpClientLtp\");\r",
																					"   \r",
																					"} catch(error) {\r",
																					"    console.log(\"! Could not load input data. \");\r",
																					"}\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Extracting Result\r",
																					"****************************************************************************************/\r",
																					"var ltpList;\r",
																					"try {\r",
																					"    let response;\r",
																					"    response = pm.response;\r",
																					"    \r",
																					"    let responseCode;\r",
																					"    responseCode = parseInt(response.code);\r",
																					"    \r",
																					"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																					"        let responseObject;\r",
																					"        responseObject = JSON.parse(response.stream);\r",
																					"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																					"\r",
																					"    } else {\r",
																					"        ltpList = [];\r",
																					"    }\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! ltpList could not be extracted.\");\r",
																					"}\r",
																					"\r",
																					"var actualRemoteAddress;\r",
																					"try {\r",
																					"    let tcpClientUuid;\r",
																					"    tcpClientUuid = initialTcpClientLtp[\"uuid\"];\r",
																					"\r",
																					"    let actualTcpClientLtp;\r",
																					"    actualTcpClientLtp = FindActualInstanceByUuid(tcpClientUuid, ltpList);\r",
																					"\r",
																					"    actualRemoteAddress = actualTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(error);\r",
																					"    console.log(\"! Reference objects could not be extracted.\");\r",
																					"} \r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Testing\r",
																					"****************************************************************************************/\r",
																					"try {\r",
																					"    pm.test(\"Provides expected address: \" + JSON.stringify(expectedRemoteAddress), function () {\r",
																					"        pm.expect(JSON.stringify(actualRemoteAddress)).to.equal(JSON.stringify(expectedRemoteAddress));\r",
																					"    });\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Testing could not be executed.\");\r",
																					"}\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Functions\r",
																					"****************************************************************************************/\r",
																					"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
																					"    let actualInstance;\r",
																					"    actualInstance = {};\r",
																					"    try {\r",
																					"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
																					"            let sampleUuid;\r",
																					"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
																					"            if( sampleUuid == expectedUuid ) {\r",
																					"                actualInstance = actualLtpList[i];\r",
																					"                return actualInstance;\r",
																					"            }\r",
																					"        }\r",
																					"\r",
																					"    } catch (error) {\r",
																					"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																					"    }\r",
																					"    return undefined;\r",
																					"}\r",
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"protocolProfileBehavior": {
																		"disableBodyPruning": true
																	},
																	"request": {
																		"auth": {
																			"type": "noauth"
																		},
																		"method": "GET",
																		"header": [
																			{
																				"key": "x-mock-response-code",
																				"value": "200",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{{requestBody}}",
																			"options": {
																				"raw": {
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{uri}}",
																			"host": [
																				"{{uri}}"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "initial tcp-c/remote-address",
																	"event": [
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					"/****************************************************************************************\r",
																					"* Loading Input Data\r",
																					"****************************************************************************************/\r",
																					"var APPLICATION;\r",
																					"var tcpClientUuid;\r",
																					"var initialRemoteAddress;\r",
																					"try {\r",
																					"    APPLICATION = pm.environment.get(\"application\");\r",
																					"    \r",
																					"    let tcpClientLtp;\r",
																					"    tcpClientLtp = pm.collectionVariables.get(\"tcpClientLtp\");\r",
																					"\r",
																					"    tcpClientUuid = tcpClientLtp[\"uuid\"];\r",
																					"\r",
																					"    initialRemoteAddress = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Variables could not be loaded.\");\r",
																					"}\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Setting Collection Variables\r",
																					"****************************************************************************************/\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Setting Local Variables and Preparing the Request\r",
																					"****************************************************************************************/\r",
																					"try {\r",
																					"    let URI;\r",
																					"    URI = APPLICATION.serverUrl \r",
																					"            + \"/core-model-1-4:control-construct/logical-termination-point=\"\r",
																					"            + tcpClientUuid\r",
																					"            + \"/layer-protocol=0/tcp-client-interface-1-0:tcp-client-interface-pac/tcp-client-interface-configuration/remote-address\";\r",
																					"\r",
																					"    let REQUEST_BODY;\r",
																					"    REQUEST_BODY = '{ '\r",
																					"                    +   '\"tcp-client-interface-1-0:remote-address\": ' + JSON.stringify(initialRemoteAddress)\r",
																					"                    + ' }';\r",
																					"\r",
																					"    let AUTHORIZATION;\r",
																					"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																					"\r",
																					"    let ACCEPT;\r",
																					"    ACCEPT = \"application/json\";\r",
																					"\r",
																					"    let CONTENT_TYPE;\r",
																					"    CONTENT_TYPE = \"application/json\";\r",
																					"\r",
																					"\r",
																					"    pm.variables.clear();\r",
																					"\r",
																					"    pm.variables.set(\"uri\", URI);\r",
																					"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																					"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(error)\r",
																					"    console.log(\"! Local variables could not be set.\");\r",
																					"}\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Functions\r",
																					"****************************************************************************************/\r",
																					"\r",
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "PUT",
																		"header": [
																			{
																				"key": "x-mock-response-code",
																				"value": "204",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{{requestBody}}",
																			"options": {
																				"raw": {
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{uri}}",
																			"host": [
																				"{{uri}}"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "Check /core-model-1-4:control-construct",
																	"event": [
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					"/****************************************************************************************\r",
																					"* Loading Input Data\r",
																					"****************************************************************************************/\r",
																					"/****************************************************************************************\r",
																					"* Loading Input Data\r",
																					"****************************************************************************************/\r",
																					"var APPLICATION;\r",
																					"var AUTHORIZATION;\r",
																					"try {\r",
																					"    APPLICATION = pm.environment.get(\"application\");\r",
																					"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																					"\r",
																					"    oamPath = \"/core-model-1-4:control-construct\";\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Environment variables could not be loaded.\");\r",
																					"}\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Defining Request Body\r",
																					"****************************************************************************************/\r",
																					"var REQUEST_BODY;\r",
																					"try {\r",
																					"    REQUEST_BODY = \"\";\r",
																					"} catch (error) {\r",
																					"    console.log(\"!Could not define request body. \");\r",
																					"}\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Setting Local Variables and Preparing the Request\r",
																					"****************************************************************************************/\r",
																					"try {\r",
																					"    let URI;\r",
																					"    URI = APPLICATION.serverUrl + oamPath;\r",
																					"\r",
																					"    let ACCEPT;\r",
																					"    ACCEPT = \"application/json\";\r",
																					"\r",
																					"    let CONTENT_TYPE;\r",
																					"    CONTENT_TYPE = \"application/json\";\r",
																					"\r",
																					"    pm.variables.clear();\r",
																					"\r",
																					"    pm.variables.set(\"uri\", URI);\r",
																					"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																					"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Local variables could not be set.\");\r",
																					"}\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Functions\r",
																					"****************************************************************************************/"
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"/****************************************************************************************\r",
																					"* Loading Input Data\r",
																					"****************************************************************************************/\r",
																					"var expectedLogicalTerminationPoint;\r",
																					"var expectedForwardingConstruct;\r",
																					"try {\r",
																					"    expectedLogicalTerminationPoint = pm.collectionVariables.get(\"ltpList\");\r",
																					"    expectedForwardingConstruct = pm.collectionVariables.get(\"fcList\");\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Collection variables could not be loaded.\");\r",
																					"}\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Extracting Result\r",
																					"****************************************************************************************/\r",
																					"var RESPONSE_CODE;\r",
																					"var RESPONSE;\r",
																					"try {\r",
																					"    let response;\r",
																					"    response = pm.response;\r",
																					"\r",
																					"    RESPONSE_CODE = parseInt(response.code);\r",
																					"\r",
																					"    if (Math.floor(RESPONSE_CODE / 100) === 2) {\r",
																					"        RESPONSE = JSON.parse(response.stream);\r",
																					"    } else {\r",
																					"        RESPONSE = [];\r",
																					"    }\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Result value lists could not be extracted.\");\r",
																					"}\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Testing\r",
																					"****************************************************************************************/\r",
																					"try {\r",
																					"    pm.test(\"GET /core-model-1-4:control-construct responds 200\", function () {\r",
																					"        pm.expect(RESPONSE_CODE).to.equal(200);\r",
																					"    });\r",
																					"\r",
																					"    let actualLtpList;\r",
																					"    actualLtpList = RESPONSE[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																					"\r",
																					"    pm.test(\"Received logical-termination-point is same as intial instance \", function () {\r",
																					"        pm.expect(actualLtpList).to.deep.equal(expectedLogicalTerminationPoint);\r",
																					"    });\r",
																					"\r",
																					"    let actualFcList;\r",
																					"    actualFcList = RESPONSE[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
																					"\r",
																					"    pm.test(\"Received forwarding-construct is same as intial instance \", function () {\r",
																					"        pm.expect(actualFcList).to.deep.equal(expectedForwardingConstruct);\r",
																					"    });\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Testing could not be executed.\");\r",
																					"}\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Functions\r",
																					"****************************************************************************************/"
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"protocolProfileBehavior": {
																		"disableBodyPruning": true
																	},
																	"request": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "x-mock-response-code",
																				"value": "200",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{{requestBody}}",
																			"options": {
																				"raw": {
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{uri}}",
																			"host": [
																				"{{uri}}"
																			]
																		}
																	},
																	"response": []
																}
															]
														},
														{
															"name": "domain-name updated?",
															"item": [
																{
																	"name": "reference /core-model-1-4:control-construct",
																	"event": [
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					"console.log(\"\\n-----  /v1/regard-application acceptance -- address/domain-name attribute updated? -------------------------------\");\r",
																					"/****************************************************************************************\r",
																					"* Loading Input Data\r",
																					"****************************************************************************************/\r",
																					"var APPLICATION;\r",
																					"try {\r",
																					"    APPLICATION = pm.environment.get(\"application\");\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Environment variables could not be loaded.\");\r",
																					"}\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Setting Local Variables and Preparing the Request\r",
																					"****************************************************************************************/\r",
																					"try {\r",
																					"    let URI;\r",
																					"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																					"\r",
																					"    let REQUEST_BODY;\r",
																					"    REQUEST_BODY = \"\";\r",
																					"\r",
																					"    let AUTHORIZATION;\r",
																					"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																					"\r",
																					"    let ACCEPT;\r",
																					"    ACCEPT = \"application/json\";\r",
																					"\r",
																					"    let CONTENT_TYPE;\r",
																					"    CONTENT_TYPE = \"application/json\";\r",
																					"\r",
																					"\r",
																					"    pm.variables.clear();\r",
																					"\r",
																					"    pm.variables.set(\"uri\", URI);\r",
																					"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																					"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Local variables could not be set.\");\r",
																					"}\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Functions\r",
																					"****************************************************************************************/\r",
																					"\r",
																					""
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"/****************************************************************************************\r",
																					"* Loading Input Data\r",
																					"****************************************************************************************/\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Extracting Result\r",
																					"****************************************************************************************/\r",
																					"var ltpList;\r",
																					"var fcList;\r",
																					"try {\r",
																					"    let response;\r",
																					"    response = pm.response;\r",
																					"    \r",
																					"    let responseCode;\r",
																					"    responseCode = parseInt(response.code);\r",
																					"    \r",
																					"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																					"        let responseObject;\r",
																					"        responseObject = JSON.parse(response.stream);\r",
																					"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																					"        fcList = responseObject[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
																					"\r",
																					"    } else {\r",
																					"        ltpList = [];\r",
																					"        fcList = [];\r",
																					"    }\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! ltpList could not be extracted.\");\r",
																					"}\r",
																					"\r",
																					"var currentOperationServer;\r",
																					"var httpClientLtp;\r",
																					"var tcpClientLtp;\r",
																					"try {\r",
																					"    currentOperationServer = FindOperationServer(\"/v1/regard-application\", ltpList);\r",
																					"\r",
																					"    //Inquiring OAM approvals\r",
																					"    let outputFcPortListInquireOamRequestApprovals;\r",
																					"    outputFcPortListInquireOamRequestApprovals = FindOutputFcPortList(\"NewApplicationCausesRequestForInquiringOamRequestApprovals\", fcList);\r",
																					"    let ltpInstance = FindRandomLtpInstancesFromFc(outputFcPortListInquireOamRequestApprovals, ltpList)\r",
																					"    httpClientLtp = ltpInstance.httpClientLtp;\r",
																					"    tcpClientLtp = FindServingLtp(httpClientLtp, ltpList);\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(error);\r",
																					"    console.log(\"! Reference objects could not be extracted.\");\r",
																					"} \r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Setting Collection Variables\r",
																					"****************************************************************************************/\r",
																					"try {\r",
																					"    pm.collectionVariables.clear();\r",
																					"    \r",
																					"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																					"\r",
																					"    pm.collectionVariables.set(\"httpClientLtp\", httpClientLtp);\r",
																					"    pm.collectionVariables.set(\"tcpClientLtp\", tcpClientLtp);\r",
																					"\r",
																					"    pm.collectionVariables.set(\"ltpList\", ltpList);\r",
																					"    pm.collectionVariables.set(\"fcList\", fcList);\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Collection variables could not be set.\");\r",
																					"}\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Functions\r",
																					"****************************************************************************************/\r",
																					"\r",
																					"function FindOperationServer(operationName, ltpList) {\r",
																					"    let operationServer;\r",
																					"    operationServer = \"\";\r",
																					"    try {\r",
																					"        let sampleUuid;\r",
																					"        for(let i=0; i<ltpList.length; i++) {\r",
																					"            sampleUuid = ltpList[i][\"uuid\"];\r",
																					"            if(sampleUuid.includes(\"op-s-\")) {\r",
																					"                let sampleOperationName;\r",
																					"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																					"                if(sampleOperationName == operationName) {\r",
																					"                    operationServer = ltpList[i];\r",
																					"                    return operationServer;\r",
																					"                }\r",
																					"            }\r",
																					"        }\r",
																					"    } catch (error) {\r",
																					"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																					"    }\r",
																					"    return operationServer;\r",
																					"}\r",
																					"\r",
																					"function FindRandomLtpInstancesFromFc(outputFcPortList, ltpList) {\r",
																					"    let ltpInstance = {};\r",
																					"    try {\r",
																					"        for ( let i=0; i<outputFcPortList.length; i++ ) {\r",
																					"            let randomOutputFcPort = outputFcPortList[Math.floor(Math.random() * outputFcPortList.length)];\r",
																					"            let outputLtpUuid = randomOutputFcPort[\"logical-termination-point\"];\r",
																					"            let operationClientLtp = FindActualInstanceByUuid(outputLtpUuid, ltpList);\r",
																					"\r",
																					"            let httpClientLtp = FindServingLtp(operationClientLtp, ltpList);\r",
																					"            let sampleApplicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																					"\r",
																					"            if (sampleApplicationName != \"AdministratorAdministration\") {\r",
																					"\t\t\t\tltpInstance = { httpClientLtp, operationClientLtp };\r",
																					"                break;\r",
																					"            }\r",
																					"        }\r",
																					"    } catch(error) {\r",
																					"        console.log(error);\r",
																					"        console.log(\"! Exception in function : FindRandomLtpInstancesFromFc. \")\r",
																					"    } \r",
																					"    return ltpInstance;\r",
																					"}\r",
																					"\r",
																					"function FindOutputFcPortList(forwardingName, fcList) {\r",
																					"    let outputFcPortList;\r",
																					"    outputFcPortList = [];\r",
																					"    try {\r",
																					"        for( let i=0; i<fcList.length; i++ ) {\r",
																					"            for(let j=0; j<fcList[i][\"name\"].length; j++) {               \r",
																					"                if(fcList[i][\"name\"][j][\"value\"] == forwardingName) {\r",
																					"                    fcPortList = fcList[i][\"fc-port\"];\r",
																					"                    for(let k=0;k<fcPortList.length;k++) {\r",
																					"                        if(fcPortList[k][\"port-direction\"] == \"core-model-1-4:PORT_DIRECTION_TYPE_OUTPUT\") {\r",
																					"                            outputFcPortList.push(fcPortList[k]);\r",
																					"                        }\r",
																					"                    }\r",
																					"                    return outputFcPortList;\r",
																					"                }\r",
																					"            }\r",
																					"        }\r",
																					"    } catch (error) {\r",
																					"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																					"    }\r",
																					"    return outputFcPortList;\r",
																					"}\r",
																					"\r",
																					"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
																					"    let actualInstance;\r",
																					"    actualInstance = {};\r",
																					"    try {\r",
																					"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
																					"            let sampleUuid;\r",
																					"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
																					"            if( sampleUuid == expectedUuid ) {\r",
																					"                actualInstance = actualLtpList[i];\r",
																					"                return actualInstance;\r",
																					"            }\r",
																					"        }\r",
																					"\r",
																					"    } catch (error) {\r",
																					"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																					"    }\r",
																					"    return undefined;\r",
																					"}\r",
																					"\r",
																					"function FindServingLtp(clientLtp, ltpList) {\r",
																					"    let servingLtp;\r",
																					"    servingLtp = {};\r",
																					"    try{\r",
																					"        let serverLtpUuid;\r",
																					"        serverLtpUuid = clientLtp[\"server-ltp\"][0];\r",
																					"        for( let i=0; i<ltpList.length; i++ ) {\r",
																					"            let sampleUuid;\r",
																					"            sampleUuid = ltpList[i][\"uuid\"];\r",
																					"            if( sampleUuid == serverLtpUuid ) {\r",
																					"                servingLtp = ltpList[i];\r",
																					"                return servingLtp;\r",
																					"            }\r",
																					"        }\r",
																					"    } catch(error) {\r",
																					"        console.log(error);\r",
																					"        console.log(\"! Exception in function : FindServingLtp. \")\r",
																					"    }\r",
																					"    return servingLtp;\r",
																					"}\r",
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"protocolProfileBehavior": {
																		"disableBodyPruning": true
																	},
																	"request": {
																		"auth": {
																			"type": "noauth"
																		},
																		"method": "GET",
																		"header": [
																			{
																				"key": "x-mock-response-code",
																				"value": "200",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{{requestBody}}",
																			"options": {
																				"raw": {
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{uri}}",
																			"host": [
																				"{{uri}}"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "Expected  /v1/regard-application",
																	"event": [
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					"/****************************************************************************************\r",
																					"* Loading Input Data\r",
																					"****************************************************************************************/\r",
																					"var APPLICATION;\r",
																					"var OPERATION_KEY;\r",
																					"var applicationName;\r",
																					"var releaseNumber;\r",
																					"var protocol;\r",
																					"var dummyAddress;\r",
																					"var port;\r",
																					"try {\r",
																					"    APPLICATION = pm.environment.get(\"application\");\r",
																					"\r",
																					"    let currentOperationServer;\r",
																					"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																					"    \r",
																					"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																					"\r",
																					"    let httpClientLtp;\r",
																					"    httpClientLtp = pm.collectionVariables.get(\"httpClientLtp\");\r",
																					"\r",
																					"    applicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																					"    releaseNumber = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																					"    \r",
																					"    let tcpClientLtp;\r",
																					"    tcpClientLtp = pm.collectionVariables.get(\"tcpClientLtp\");\r",
																					"\r",
																					"    protocol = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																					"    protocol = protocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																					"\r",
																					"    let dummyDomainName = RandomDomainName();\r",
																					"    dummyAddress = {\r",
																					"        \"domain-name\": dummyDomainName\r",
																					"    };\r",
																					"\r",
																					"    port = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(error);\r",
																					"    console.log(\"! Input Data could not be loaded.\");\r",
																					"}\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Defining Dummy Parameters\r",
																					"****************************************************************************************/\r",
																					"var USER_NAME;\r",
																					"var ORIGINATOR;\r",
																					"var X_CORRELATOR;\r",
																					"var TRACE_INDICATOR;\r",
																					"var CUSTOMER_JOURNEY;\r",
																					"try {\r",
																					"    USER_NAME = APPLICATION.userName;\r",
																					"    ORIGINATOR = \"Postman\";\r",
																					"    X_CORRELATOR = CreateXCorrelator();\r",
																					"    TRACE_INDICATOR = \"1\";\r",
																					"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																					"    \r",
																					"} catch (error) {\r",
																					"    console.log(\"! Could not define dummy values for parameters. \");\r",
																					"}\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Defining Request Body\r",
																					"****************************************************************************************/\r",
																					"var REQUEST_BODY;\r",
																					"try {\r",
																					"    REQUEST_BODY = '{'\r",
																					"        + '\"application-name\" : ' + '\"' + applicationName + '\",'\r",
																					"        + '\"release-number\" : ' + '\"' + releaseNumber + '\",'\r",
																					"        + '\"protocol\" : ' + '\"' + protocol + '\",'\r",
																					"        + '\"address\" : ' + JSON.stringify(dummyAddress) + ','\r",
																					"        + '\"port\" : ' +  port\r",
																					"    +'}';\r",
																					"} catch (error) {\r",
																					"    console.log(\"!Could not define request body. \");\r",
																					"}\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Setting Collection Variables\r",
																					"****************************************************************************************/\r",
																					"try {\r",
																					"    pm.collectionVariables.set(\"dummyAddress\", dummyAddress);\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Collection variables could not be set.\");\r",
																					"}\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Setting Local Variables and Preparing the Request\r",
																					"****************************************************************************************/\r",
																					"try {\r",
																					"    let URI;\r",
																					"    URI = APPLICATION.serverUrl + \"/v1/regard-application\";\r",
																					"\r",
																					"    let ACCEPT;\r",
																					"    ACCEPT = \"application/json\";\r",
																					"\r",
																					"    let CONTENT_TYPE;\r",
																					"    CONTENT_TYPE = \"application/json\";\r",
																					"\r",
																					"    pm.variables.clear();\r",
																					"\r",
																					"    pm.variables.set(\"uri\", URI);\r",
																					"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																					"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																					"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																					"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																					"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																					"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(error);\r",
																					"    console.log(\"! Local variables could not be set.\");\r",
																					"}\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Functions\r",
																					"****************************************************************************************/\r",
																					"\r",
																					"function CreateXCorrelator() {\r",
																					"    let xCorrelator;\r",
																					"    xCorrelator = \"\";\r",
																					"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																					"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																					"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																					"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																					"    xCorrelator += GenerateRandomHexString(12);\r",
																					"    return xCorrelator;\r",
																					"}\r",
																					"\r",
																					"function GenerateRandomHexString(length) {\r",
																					"    var randomRandomHexString = \"\";\r",
																					"    while (randomRandomHexString.length < length) {\r",
																					"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																					"    }\r",
																					"    return randomRandomHexString.substring(0,length);\r",
																					"}\r",
																					"\r",
																					"function RandomDomainName() {\r",
																					"    let randomAddress;\r",
																					"    let dummySubdomain = GenerateRandomString(Math.floor(1 + Math.random() * 10));\r",
																					"    let randomDomainPartLength = Math.floor(2 + Math.random() * 5);\r",
																					"    let dummyDomainName = \"\";\r",
																					"    for(let i=0; i<randomDomainPartLength; i += 2 ) {\r",
																					"        dummyDomainName = dummyDomainName + GenerateRandomString(Math.floor(1 + Math.random() * 4));\r",
																					"        dummyDomainName = dummyDomainName + GenerateRandomSeparator();\r",
																					"        dummyDomainName = dummyDomainName + GenerateRandomString(Math.floor(1 + Math.random() * 4));\r",
																					"    }\r",
																					"    let dummyTopLevelDomain = GenerateRandomString(Math.floor(2 + Math.random() * 5));\r",
																					"    randomAddress = dummySubdomain + \".\" + dummyDomainName + \".\" + dummyTopLevelDomain; \r",
																					"    return randomAddress;\r",
																					"}\r",
																					"\r",
																					"function GenerateRandomString(length) {\r",
																					"    let randomString;\r",
																					"    randomString = \"\";\r",
																					"    try {\r",
																					"        let characters = \"abcdefghijklmnopqrstuvwxyz\";\r",
																					"        let charactersLength = characters.length;\r",
																					"        for (let i = 0; i < length; i++) {\r",
																					"            randomString += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																					"        }\r",
																					"    } catch (error) {\r",
																					"        console.log(\"! Could not generate random string. \");\r",
																					"    }\r",
																					"    return randomString;\r",
																					"}\r",
																					"\r",
																					"function GenerateRandomSeparator() {\r",
																					"    let separators = [\".\", \"-\"];\r",
																					"    let randomSeparator = separators[Math.floor(Math.random() * separators.length)];\r",
																					"    return randomSeparator;\r",
																					"}"
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"/****************************************************************************************\r",
																					"* Loading Input Data\r",
																					"****************************************************************************************/\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Extracting Result\r",
																					"****************************************************************************************/\r",
																					"var RESPONSE_CODE;\r",
																					"try {\r",
																					"    let response;\r",
																					"    response = pm.response;\r",
																					"\r",
																					"    RESPONSE_CODE = parseInt(response.code);\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Response Code could not be extracted.\");\r",
																					"}    \r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Testing\r",
																					"****************************************************************************************/\r",
																					"try {\r",
																					"    pm.test(\"POST /v1/regard-application responds 204\", function () {\r",
																					"        pm.expect(RESPONSE_CODE).to.equal(204);\r",
																					"    });\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Testing could not be executed.\");\r",
																					"}\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Functions\r",
																					"****************************************************************************************/\r",
																					"\r",
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "x-mock-response-code",
																				"value": "204",
																				"type": "default"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{{requestBody}}",
																			"options": {
																				"raw": {
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{uri}}",
																			"host": [
																				"{{uri}}"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "Expected /core-model-1-4:control-construct",
																	"event": [
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					"/****************************************************************************************\r",
																					"* Loading Input Data\r",
																					"****************************************************************************************/\r",
																					"var APPLICATION;\r",
																					"try {\r",
																					"    APPLICATION = pm.environment.get(\"application\");\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Environment variables could not be loaded.\");\r",
																					"}\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Setting Local Variables and Preparing the Request\r",
																					"****************************************************************************************/\r",
																					"try {\r",
																					"    let URI;\r",
																					"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																					"\r",
																					"    let REQUEST_BODY;\r",
																					"    REQUEST_BODY = \"\";\r",
																					"\r",
																					"    let AUTHORIZATION;\r",
																					"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																					"\r",
																					"    let ACCEPT;\r",
																					"    ACCEPT = \"application/json\";\r",
																					"\r",
																					"    let CONTENT_TYPE;\r",
																					"    CONTENT_TYPE = \"application/json\";\r",
																					"\r",
																					"\r",
																					"    pm.variables.clear();\r",
																					"\r",
																					"    pm.variables.set(\"uri\", URI);\r",
																					"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																					"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Local variables could not be set.\");\r",
																					"}\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Functions\r",
																					"****************************************************************************************/\r",
																					"\r",
																					""
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"/****************************************************************************************\r",
																					"* Loading Input Data\r",
																					"****************************************************************************************/\r",
																					"var expectedRemoteAddress;\r",
																					"var initialTcpClientLtp;\r",
																					"try {\r",
																					"    expectedRemoteAddress = pm.collectionVariables.get(\"dummyAddress\");\r",
																					"    initialTcpClientLtp = pm.collectionVariables.get(\"tcpClientLtp\");\r",
																					"   \r",
																					"} catch(error) {\r",
																					"    console.log(\"! Could not load input data. \");\r",
																					"}\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Extracting Result\r",
																					"****************************************************************************************/\r",
																					"var ltpList;\r",
																					"try {\r",
																					"    let response;\r",
																					"    response = pm.response;\r",
																					"    \r",
																					"    let responseCode;\r",
																					"    responseCode = parseInt(response.code);\r",
																					"    \r",
																					"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																					"        let responseObject;\r",
																					"        responseObject = JSON.parse(response.stream);\r",
																					"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																					"\r",
																					"    } else {\r",
																					"        ltpList = [];\r",
																					"    }\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! ltpList could not be extracted.\");\r",
																					"}\r",
																					"\r",
																					"var actualRemoteAddress;\r",
																					"try {\r",
																					"    let tcpClientUuid;\r",
																					"    tcpClientUuid = initialTcpClientLtp[\"uuid\"];\r",
																					"\r",
																					"    let actualTcpClientLtp;\r",
																					"    actualTcpClientLtp = FindActualInstanceByUuid(tcpClientUuid, ltpList);\r",
																					"\r",
																					"    actualRemoteAddress = actualTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(error);\r",
																					"    console.log(\"! Reference objects could not be extracted.\");\r",
																					"} \r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Testing\r",
																					"****************************************************************************************/\r",
																					"try {\r",
																					"    pm.test(\"Provides expected address: \" + JSON.stringify(expectedRemoteAddress), function () {\r",
																					"        pm.expect(JSON.stringify(actualRemoteAddress)).to.equal(JSON.stringify(expectedRemoteAddress));\r",
																					"    });\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Testing could not be executed.\");\r",
																					"}\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Functions\r",
																					"****************************************************************************************/\r",
																					"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
																					"    let actualInstance;\r",
																					"    actualInstance = {};\r",
																					"    try {\r",
																					"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
																					"            let sampleUuid;\r",
																					"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
																					"            if( sampleUuid == expectedUuid ) {\r",
																					"                actualInstance = actualLtpList[i];\r",
																					"                return actualInstance;\r",
																					"            }\r",
																					"        }\r",
																					"\r",
																					"    } catch (error) {\r",
																					"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																					"    }\r",
																					"    return undefined;\r",
																					"}\r",
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"protocolProfileBehavior": {
																		"disableBodyPruning": true
																	},
																	"request": {
																		"auth": {
																			"type": "noauth"
																		},
																		"method": "GET",
																		"header": [
																			{
																				"key": "x-mock-response-code",
																				"value": "200",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{{requestBody}}",
																			"options": {
																				"raw": {
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{uri}}",
																			"host": [
																				"{{uri}}"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "initial tcp-c/remote-address",
																	"event": [
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					"/****************************************************************************************\r",
																					"* Loading Input Data\r",
																					"****************************************************************************************/\r",
																					"var APPLICATION;\r",
																					"var tcpClientUuid;\r",
																					"var initialRemoteAddress;\r",
																					"try {\r",
																					"    APPLICATION = pm.environment.get(\"application\");\r",
																					"    \r",
																					"    let tcpClientLtp;\r",
																					"    tcpClientLtp = pm.collectionVariables.get(\"tcpClientLtp\");\r",
																					"\r",
																					"    tcpClientUuid = tcpClientLtp[\"uuid\"];\r",
																					"\r",
																					"    initialRemoteAddress = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Variables could not be loaded.\");\r",
																					"}\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Setting Collection Variables\r",
																					"****************************************************************************************/\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Setting Local Variables and Preparing the Request\r",
																					"****************************************************************************************/\r",
																					"try {\r",
																					"    let URI;\r",
																					"    URI = APPLICATION.serverUrl \r",
																					"            + \"/core-model-1-4:control-construct/logical-termination-point=\"\r",
																					"            + tcpClientUuid\r",
																					"            + \"/layer-protocol=0/tcp-client-interface-1-0:tcp-client-interface-pac/tcp-client-interface-configuration/remote-address\";\r",
																					"\r",
																					"    let REQUEST_BODY;\r",
																					"    REQUEST_BODY = '{ '\r",
																					"                    +   '\"tcp-client-interface-1-0:remote-address\": ' + JSON.stringify(initialRemoteAddress)\r",
																					"                    + ' }';\r",
																					"\r",
																					"    let AUTHORIZATION;\r",
																					"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																					"\r",
																					"    let ACCEPT;\r",
																					"    ACCEPT = \"application/json\";\r",
																					"\r",
																					"    let CONTENT_TYPE;\r",
																					"    CONTENT_TYPE = \"application/json\";\r",
																					"\r",
																					"\r",
																					"    pm.variables.clear();\r",
																					"\r",
																					"    pm.variables.set(\"uri\", URI);\r",
																					"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																					"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(error)\r",
																					"    console.log(\"! Local variables could not be set.\");\r",
																					"}\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Functions\r",
																					"****************************************************************************************/\r",
																					"\r",
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "PUT",
																		"header": [
																			{
																				"key": "x-mock-response-code",
																				"value": "204",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{{requestBody}}",
																			"options": {
																				"raw": {
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{uri}}",
																			"host": [
																				"{{uri}}"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "Check /core-model-1-4:control-construct",
																	"event": [
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					"/****************************************************************************************\r",
																					"* Loading Input Data\r",
																					"****************************************************************************************/\r",
																					"/****************************************************************************************\r",
																					"* Loading Input Data\r",
																					"****************************************************************************************/\r",
																					"var APPLICATION;\r",
																					"var AUTHORIZATION;\r",
																					"try {\r",
																					"    APPLICATION = pm.environment.get(\"application\");\r",
																					"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																					"\r",
																					"    oamPath = \"/core-model-1-4:control-construct\";\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Environment variables could not be loaded.\");\r",
																					"}\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Defining Request Body\r",
																					"****************************************************************************************/\r",
																					"var REQUEST_BODY;\r",
																					"try {\r",
																					"    REQUEST_BODY = \"\";\r",
																					"} catch (error) {\r",
																					"    console.log(\"!Could not define request body. \");\r",
																					"}\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Setting Local Variables and Preparing the Request\r",
																					"****************************************************************************************/\r",
																					"try {\r",
																					"    let URI;\r",
																					"    URI = APPLICATION.serverUrl + oamPath;\r",
																					"\r",
																					"    let ACCEPT;\r",
																					"    ACCEPT = \"application/json\";\r",
																					"\r",
																					"    let CONTENT_TYPE;\r",
																					"    CONTENT_TYPE = \"application/json\";\r",
																					"\r",
																					"    pm.variables.clear();\r",
																					"\r",
																					"    pm.variables.set(\"uri\", URI);\r",
																					"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																					"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Local variables could not be set.\");\r",
																					"}\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Functions\r",
																					"****************************************************************************************/"
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"/****************************************************************************************\r",
																					"* Loading Input Data\r",
																					"****************************************************************************************/\r",
																					"var expectedLogicalTerminationPoint;\r",
																					"var expectedForwardingConstruct;\r",
																					"try {\r",
																					"    expectedLogicalTerminationPoint = pm.collectionVariables.get(\"ltpList\");\r",
																					"    expectedForwardingConstruct = pm.collectionVariables.get(\"fcList\");\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Collection variables could not be loaded.\");\r",
																					"}\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Extracting Result\r",
																					"****************************************************************************************/\r",
																					"var RESPONSE_CODE;\r",
																					"var RESPONSE;\r",
																					"try {\r",
																					"    let response;\r",
																					"    response = pm.response;\r",
																					"\r",
																					"    RESPONSE_CODE = parseInt(response.code);\r",
																					"\r",
																					"    if (Math.floor(RESPONSE_CODE / 100) === 2) {\r",
																					"        RESPONSE = JSON.parse(response.stream);\r",
																					"    } else {\r",
																					"        RESPONSE = [];\r",
																					"    }\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Result value lists could not be extracted.\");\r",
																					"}\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Testing\r",
																					"****************************************************************************************/\r",
																					"try {\r",
																					"    pm.test(\"GET /core-model-1-4:control-construct responds 200\", function () {\r",
																					"        pm.expect(RESPONSE_CODE).to.equal(200);\r",
																					"    });\r",
																					"\r",
																					"    let actualLtpList;\r",
																					"    actualLtpList = RESPONSE[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																					"\r",
																					"    pm.test(\"Received logical-termination-point is same as intial instance \", function () {\r",
																					"        pm.expect(actualLtpList).to.deep.equal(expectedLogicalTerminationPoint);\r",
																					"    });\r",
																					"\r",
																					"    let actualFcList;\r",
																					"    actualFcList = RESPONSE[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
																					"\r",
																					"    pm.test(\"Received forwarding-construct is same as intial instance \", function () {\r",
																					"        pm.expect(actualFcList).to.deep.equal(expectedForwardingConstruct);\r",
																					"    });\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Testing could not be executed.\");\r",
																					"}\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Functions\r",
																					"****************************************************************************************/"
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"protocolProfileBehavior": {
																		"disableBodyPruning": true
																	},
																	"request": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "x-mock-response-code",
																				"value": "200",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{{requestBody}}",
																			"options": {
																				"raw": {
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{uri}}",
																			"host": [
																				"{{uri}}"
																			]
																		}
																	},
																	"response": []
																}
															]
														}
													],
													"description": "## Get address updated?\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for op-s of /v1/regard-application, storing operation-key\n  -  searching CC for output fc-port of NewApplicationCausesRequestForInquiringOamRequestApprovals, find corresponding op-c, http-c and tcp-c, store them.\n- POST /v1/regard-application with\n  - all attributes according to chosen set of http-c, tcp-c , BUT address attribute with random dummy value that matches the specified pattern.\n  - operation-key from above\n  - reasonable parameters\n\n#### Testing:\n- checking for ResponseCode==204\n- GETing CC (/core-model-1-4:control-construct)\n- searching CC for tcp-c and check if the remote-address is updated with dummyValue.\n\n#### Clearing:\n- PUT chosen tcp-c/address with intial value\n\n#### Clearance check:\n- Check if the logical-termination-point instance is the same as initial configuration\n- Check if the forwarding-construct instance is the same as initial configuration"
												},
												{
													"name": "port updated?",
													"item": [
														{
															"name": "reference /core-model-1-4:control-construct",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"console.log(\"\\n----- /v1/regard-application acceptance -- port updated? -------------------------------\");\r",
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Environment variables could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																			"\r",
																			"    let REQUEST_BODY;\r",
																			"    REQUEST_BODY = \"\";\r",
																			"\r",
																			"    let AUTHORIZATION;\r",
																			"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var ltpList;\r",
																			"var fcList;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"    \r",
																			"    let responseCode;\r",
																			"    responseCode = parseInt(response.code);\r",
																			"    \r",
																			"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																			"        let responseObject;\r",
																			"        responseObject = JSON.parse(response.stream);\r",
																			"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																			"        fcList = responseObject[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
																			"\r",
																			"    } else {\r",
																			"        ltpList = [];\r",
																			"        fcList = [];\r",
																			"    }\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! ltpList could not be extracted.\");\r",
																			"}\r",
																			"\r",
																			"var currentOperationServer;\r",
																			"var httpClientLtp;\r",
																			"var tcpClientLtp;\r",
																			"try {\r",
																			"    currentOperationServer = FindOperationServer(\"/v1/regard-application\", ltpList);\r",
																			"\r",
																			"    //Inquiring OAM approvals\r",
																			"    let outputFcPortListInquireOamRequestApprovals;\r",
																			"    outputFcPortListInquireOamRequestApprovals = FindOutputFcPortList(\"NewApplicationCausesRequestForInquiringOamRequestApprovals\", fcList);\r",
																			"    let ltpInstance = FindRandomLtpInstancesFromFc(outputFcPortListInquireOamRequestApprovals, ltpList)\r",
																			"    httpClientLtp = ltpInstance.httpClientLtp;\r",
																			"    tcpClientLtp = FindServingLtp(httpClientLtp, ltpList);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Reference objects could not be extracted.\");\r",
																			"} \r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.collectionVariables.clear();\r",
																			"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																			"    pm.collectionVariables.set(\"httpClientLtp\", httpClientLtp);\r",
																			"    pm.collectionVariables.set(\"tcpClientLtp\", tcpClientLtp);\r",
																			"    pm.collectionVariables.set(\"ltpList\", ltpList);\r",
																			"    pm.collectionVariables.set(\"fcList\", fcList);\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Collection variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"function FindOperationServer(operationName, ltpList) {\r",
																			"    let operationServer;\r",
																			"    operationServer = \"\";\r",
																			"    try {\r",
																			"        let sampleUuid;\r",
																			"        for(let i=0; i<ltpList.length; i++) {\r",
																			"            sampleUuid = ltpList[i][\"uuid\"];\r",
																			"            if(sampleUuid.includes(\"op-s-\")) {\r",
																			"                let sampleOperationName;\r",
																			"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																			"                if(sampleOperationName == operationName) {\r",
																			"                    operationServer = ltpList[i];\r",
																			"                    return operationServer;\r",
																			"                }\r",
																			"            }\r",
																			"        }\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																			"    }\r",
																			"    return operationServer;\r",
																			"}\r",
																			"\r",
																			"function FindRandomLtpInstancesFromFc(outputFcPortList, ltpList) {\r",
																			"    let ltpInstance = {};\r",
																			"    try {\r",
																			"        for ( let i=0; i<outputFcPortList.length; i++ ) {\r",
																			"            let randomOutputFcPort = outputFcPortList[Math.floor(Math.random() * outputFcPortList.length)];\r",
																			"            let outputLtpUuid = randomOutputFcPort[\"logical-termination-point\"];\r",
																			"            let operationClientLtp = FindActualInstanceByUuid(outputLtpUuid, ltpList);\r",
																			"\r",
																			"            let httpClientLtp = FindServingLtp(operationClientLtp, ltpList);\r",
																			"            let sampleApplicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																			"\r",
																			"            if (sampleApplicationName != \"AdministratorAdministration\") {\r",
																			"\t\t\t\tltpInstance = { httpClientLtp, operationClientLtp };\r",
																			"                break;\r",
																			"            }\r",
																			"        }\r",
																			"    } catch(error) {\r",
																			"        console.log(error);\r",
																			"        console.log(\"! Exception in function : FindRandomLtpInstancesFromFc. \")\r",
																			"    } \r",
																			"    return ltpInstance;\r",
																			"}\r",
																			"\r",
																			"function FindOutputFcPortList(forwardingName, fcList) {\r",
																			"    let outputFcPortList;\r",
																			"    outputFcPortList = [];\r",
																			"    try {\r",
																			"        for( let i=0; i<fcList.length; i++ ) {\r",
																			"            for(let j=0; j<fcList[i][\"name\"].length; j++) {               \r",
																			"                if(fcList[i][\"name\"][j][\"value\"] == forwardingName) {\r",
																			"                    fcPortList = fcList[i][\"fc-port\"];\r",
																			"                    for(let k=0;k<fcPortList.length;k++) {\r",
																			"                        if(fcPortList[k][\"port-direction\"] == \"core-model-1-4:PORT_DIRECTION_TYPE_OUTPUT\") {\r",
																			"                            outputFcPortList.push(fcPortList[k]);\r",
																			"                        }\r",
																			"                    }\r",
																			"                    return outputFcPortList;\r",
																			"                }\r",
																			"            }\r",
																			"        }\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																			"    }\r",
																			"    return outputFcPortList;\r",
																			"}\r",
																			"\r",
																			"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
																			"    let actualInstance;\r",
																			"    actualInstance = {};\r",
																			"    try {\r",
																			"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
																			"            let sampleUuid;\r",
																			"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
																			"            if( sampleUuid == expectedUuid ) {\r",
																			"                actualInstance = actualLtpList[i];\r",
																			"                return actualInstance;\r",
																			"            }\r",
																			"        }\r",
																			"\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																			"    }\r",
																			"    return undefined;\r",
																			"}\r",
																			"\r",
																			"function FindServingLtp(clientLtp, ltpList) {\r",
																			"    let servingLtp;\r",
																			"    servingLtp = {};\r",
																			"    try{\r",
																			"        let serverLtpUuid;\r",
																			"        serverLtpUuid = clientLtp[\"server-ltp\"][0];\r",
																			"        for( let i=0; i<ltpList.length; i++ ) {\r",
																			"            let sampleUuid;\r",
																			"            sampleUuid = ltpList[i][\"uuid\"];\r",
																			"            if( sampleUuid == serverLtpUuid ) {\r",
																			"                servingLtp = ltpList[i];\r",
																			"                return servingLtp;\r",
																			"            }\r",
																			"        }\r",
																			"    } catch(error) {\r",
																			"        console.log(error);\r",
																			"        console.log(\"! Exception in function : FindServingLtp. \")\r",
																			"    }\r",
																			"    return servingLtp;\r",
																			"}\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "GET",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "200",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Expected  /v1/regard-application",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"var OPERATION_KEY;\r",
																			"var applicationName;\r",
																			"var releaseNumber;\r",
																			"var protocol;\r",
																			"var address;\r",
																			"var dummyPort;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"    let currentOperationServer;\r",
																			"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																			"    \r",
																			"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																			"\r",
																			"    let httpClientLtp;\r",
																			"    httpClientLtp = pm.collectionVariables.get(\"httpClientLtp\");\r",
																			"\r",
																			"    applicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																			"    releaseNumber = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																			"\r",
																			"    let tcpClientLtp;\r",
																			"    tcpClientLtp = pm.collectionVariables.get(\"tcpClientLtp\");\r",
																			"\r",
																			"    protocol = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																			"    protocol = protocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																			"\r",
																			"    address = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																			"    dummyPort = RandomTcpPort();\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Input Data could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Dummy Parameters\r",
																			"****************************************************************************************/\r",
																			"var USER_NAME;\r",
																			"var ORIGINATOR;\r",
																			"var X_CORRELATOR;\r",
																			"var TRACE_INDICATOR;\r",
																			"var CUSTOMER_JOURNEY;\r",
																			"try {\r",
																			"    USER_NAME = APPLICATION.userName;\r",
																			"    ORIGINATOR = \"Postman\";\r",
																			"    X_CORRELATOR = CreateXCorrelator();\r",
																			"    TRACE_INDICATOR = \"1\";\r",
																			"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																			"    \r",
																			"} catch (error) {\r",
																			"    console.log(\"! Could not define dummy values for parameters. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Request Body\r",
																			"****************************************************************************************/\r",
																			"var REQUEST_BODY;\r",
																			"try {\r",
																			"    REQUEST_BODY = '{'\r",
																			"        + '\"application-name\" : ' + '\"' + applicationName + '\",'\r",
																			"        + '\"release-number\" : ' + '\"' + releaseNumber + '\",'\r",
																			"        + '\"protocol\" : ' + '\"' + protocol + '\",'\r",
																			"        + '\"address\" : ' + JSON.stringify(address) + ','\r",
																			"        + '\"port\" : ' +  dummyPort\r",
																			"    +'}';\r",
																			"} catch (error) {\r",
																			"    console.log(\"!Could not define request body. \");\r",
																			"}\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.collectionVariables.set(\"dummyPort\", dummyPort);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Collection variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + \"/v1/regard-application\";\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																			"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																			"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																			"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																			"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"function CreateXCorrelator() {\r",
																			"    let xCorrelator;\r",
																			"    xCorrelator = \"\";\r",
																			"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(12);\r",
																			"    return xCorrelator;\r",
																			"}\r",
																			"\r",
																			"function GenerateRandomHexString(length) {\r",
																			"    var randomRandomHexString = \"\";\r",
																			"    while (randomRandomHexString.length < length) {\r",
																			"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																			"    }\r",
																			"    return randomRandomHexString.substring(0,length);\r",
																			"}\r",
																			"\r",
																			"function RandomTcpPort() {\r",
																			"    let randomPort;\r",
																			"    randomPort = 2000 + Math.floor( Math.random() * 1000 );\r",
																			"    return randomPort;\r",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var RESPONSE_CODE;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"\r",
																			"    RESPONSE_CODE = parseInt(response.code);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Response Code could not be extracted.\");\r",
																			"}    \r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Testing\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.test(\"POST /v1/regard-application responds 204\", function () {\r",
																			"        pm.expect(RESPONSE_CODE).to.equal(204);\r",
																			"    });\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Testing could not be executed.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "204",
																		"type": "default"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Expected /core-model-1-4:control-construct",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Environment variables could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																			"\r",
																			"    let REQUEST_BODY;\r",
																			"    REQUEST_BODY = \"\";\r",
																			"\r",
																			"    let AUTHORIZATION;\r",
																			"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var expectedRemotePort;\r",
																			"var initialTcpClientLtp;\r",
																			"try {\r",
																			"    expectedRemotePort = pm.collectionVariables.get(\"dummyPort\");\r",
																			"    initialTcpClientLtp = pm.collectionVariables.get(\"tcpClientLtp\");\r",
																			"   \r",
																			"} catch(error) {\r",
																			"    console.log(\"! Could not load input data. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var ltpList;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"    \r",
																			"    let responseCode;\r",
																			"    responseCode = parseInt(response.code);\r",
																			"    \r",
																			"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																			"        let responseObject;\r",
																			"        responseObject = JSON.parse(response.stream);\r",
																			"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																			"\r",
																			"    } else {\r",
																			"        ltpList = [];\r",
																			"    }\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! ltpList could not be extracted.\");\r",
																			"}\r",
																			"\r",
																			"var actualRemotePort;\r",
																			"try {\r",
																			"    let tcpClientUuid;\r",
																			"    tcpClientUuid = initialTcpClientLtp[\"uuid\"];\r",
																			"\r",
																			"    let actualTcpClientLtp;\r",
																			"    actualTcpClientLtp = FindActualInstanceByUuid(tcpClientUuid, ltpList);\r",
																			"\r",
																			"    actualRemotePort = actualTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Reference objects could not be extracted.\");\r",
																			"} \r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Testing\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.test(\"Provides expected application-port: \" + expectedRemotePort, function () {\r",
																			"        pm.expect(actualRemotePort).to.equal(expectedRemotePort);\r",
																			"    });\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Testing could not be executed.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
																			"    let actualInstance;\r",
																			"    actualInstance = {};\r",
																			"    try {\r",
																			"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
																			"            let sampleUuid;\r",
																			"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
																			"            if( sampleUuid == expectedUuid ) {\r",
																			"                actualInstance = actualLtpList[i];\r",
																			"                return actualInstance;\r",
																			"            }\r",
																			"        }\r",
																			"\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																			"    }\r",
																			"    return undefined;\r",
																			"}\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "GET",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "200",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "initial tcp-c/remote-port",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"var tcpClientUuid;\r",
																			"var initialRemotePort;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"    \r",
																			"    let tcpClientLtp;\r",
																			"    tcpClientLtp = pm.collectionVariables.get(\"tcpClientLtp\");\r",
																			"\r",
																			"    tcpClientUuid = tcpClientLtp[\"uuid\"];\r",
																			"\r",
																			"    initialRemotePort = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Variables could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl \r",
																			"            + \"/core-model-1-4:control-construct/logical-termination-point=\"\r",
																			"            + tcpClientUuid\r",
																			"            + \"/layer-protocol=0/tcp-client-interface-1-0:tcp-client-interface-pac/tcp-client-interface-configuration/remote-port\";\r",
																			"\r",
																			"    let REQUEST_BODY;\r",
																			"    REQUEST_BODY = '{ '\r",
																			"                    +   '\"tcp-client-interface-1-0:remote-port\": ' + initialRemotePort \r",
																			"                    + ' }';\r",
																			"\r",
																			"    let AUTHORIZATION;\r",
																			"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error)\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PUT",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "204",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Check /core-model-1-4:control-construct",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"var AUTHORIZATION;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																			"\r",
																			"    oamPath = \"/core-model-1-4:control-construct\";\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Environment variables could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Request Body\r",
																			"****************************************************************************************/\r",
																			"var REQUEST_BODY;\r",
																			"try {\r",
																			"    REQUEST_BODY = \"\";\r",
																			"} catch (error) {\r",
																			"    console.log(\"!Could not define request body. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + oamPath;\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var expectedLogicalTerminationPoint;\r",
																			"var expectedForwardingConstruct;\r",
																			"try {\r",
																			"    expectedLogicalTerminationPoint = pm.collectionVariables.get(\"ltpList\");\r",
																			"    expectedForwardingConstruct = pm.collectionVariables.get(\"fcList\");\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Collection variables could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var RESPONSE_CODE;\r",
																			"var RESPONSE;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"\r",
																			"    RESPONSE_CODE = parseInt(response.code);\r",
																			"\r",
																			"    if (Math.floor(RESPONSE_CODE / 100) === 2) {\r",
																			"        RESPONSE = JSON.parse(response.stream);\r",
																			"    } else {\r",
																			"        RESPONSE = [];\r",
																			"    }\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Result value lists could not be extracted.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Testing\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.test(\"GET /core-model-1-4:control-construct responds 200\", function () {\r",
																			"        pm.expect(RESPONSE_CODE).to.equal(200);\r",
																			"    });\r",
																			"\r",
																			"    let actualLtpList;\r",
																			"    actualLtpList = RESPONSE[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																			"\r",
																			"    pm.test(\"Received logical-termination-point is same as intial instance \", function () {\r",
																			"        pm.expect(actualLtpList).to.deep.equal(expectedLogicalTerminationPoint);\r",
																			"    });\r",
																			"\r",
																			"    let actualFcList;\r",
																			"    actualFcList = RESPONSE[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
																			"\r",
																			"    pm.test(\"Received forwarding-construct is same as intial instance \", function () {\r",
																			"        pm.expect(actualFcList).to.deep.equal(expectedForwardingConstruct);\r",
																			"    });\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Testing could not be executed.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "200",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														}
													],
													"description": "## Get port updated?\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for op-s of /v1/regard-application, storing operation-key\n  -  searching CC for output fc-port of NewApplicationCausesRequestForInquiringOamRequestApprovals, find corresponding op-c, http-c and tcp-c, store them.\n- POST /v1/regard-application with\n  - all attributes according to chosen set of http-c, tcp-c, BUT port attribute with random dummy value inside specified range.\n  - operation-key from above\n  - reasonable parameters\n\n#### Testing:\n- checking for ResponseCode==204\n- GETing CC (/core-model-1-4:control-construct)\n- searching CC for tcp-c and check if the remote-port is updated with dummyValue.\n\n#### Clearing:\n- PUT chosen tcp-c/port with intial value\n\n#### Clearance check:\n- Check if the logical-termination-point instance is the same as initial configuration\n- Check if the forwarding-construct instance is the same as initial configuration"
												}
											]
										},
										{
											"name": "Forwardings triggered?",
											"item": [
												{
													"name": "NewApplicationCausesRequestForInquiringOamRequestApprovals",
													"item": [
														{
															"name": "reference /core-model-1-4:control-construct",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"console.log(\"\\n----- /v1/regard-application acceptance --Forwarding triggered -- NewApplicationCausesRequestForInquiringOamRequestApprovals -------------------------------\");\r",
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Environment variables could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																			"\r",
																			"    let REQUEST_BODY;\r",
																			"    REQUEST_BODY = \"\";\r",
																			"\r",
																			"    let AUTHORIZATION;\r",
																			"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var ltpList;\r",
																			"var fcList;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"    \r",
																			"    let responseCode;\r",
																			"    responseCode = parseInt(response.code);\r",
																			"    \r",
																			"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																			"        let responseObject;\r",
																			"        responseObject = JSON.parse(response.stream);\r",
																			"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																			"        fcList = responseObject[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
																			"\r",
																			"    } else {\r",
																			"        ltpList = [];\r",
																			"        fcList = [];\r",
																			"    }\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! ltpList could not be extracted.\");\r",
																			"}\r",
																			"\r",
																			"var currentOperationServer;\r",
																			"var executionAndTraceLogHttpClientLtp;\r",
																			"var executionAndTraceLogTcpClientLtp;\r",
																			"var httpClientLtp;\r",
																			"var tcpClientLtp;\r",
																			"var inquireOamRequestApprovalsOperationClientLtp;\r",
																			"try {\r",
																			"    currentOperationServer = FindOperationServer(\"/v1/regard-application\", ltpList);\r",
																			"\r",
																			"    //Execution And Trace Log\r",
																			"    let recordServiceRequestOperationClientLtp = FindOperationClientUsingCallback(\"ServiceRequestCausesLoggingRequest\", fcList, ltpList)\r",
																			"    executionAndTraceLogHttpClientLtp = FindServingLtp(recordServiceRequestOperationClientLtp, ltpList);\r",
																			"    executionAndTraceLogTcpClientLtp = FindServingLtp(executionAndTraceLogHttpClientLtp, ltpList);\r",
																			"\r",
																			"    //Inquiring OAM approvals\r",
																			"    let outputFcPortListInquireOamRequestApprovals;\r",
																			"    outputFcPortListInquireOamRequestApprovals = FindOutputFcPortList(\"NewApplicationCausesRequestForInquiringOamRequestApprovals\", fcList);\r",
																			"    let ltpInstance = FindRandomLtpInstancesFromFc(outputFcPortListInquireOamRequestApprovals, ltpList)\r",
																			"    httpClientLtp = ltpInstance.httpClientLtp;\r",
																			"    inquireOamRequestApprovalsOperationClientLtp = ltpInstance.operationClientLtp\r",
																			"    tcpClientLtp = FindServingLtp(httpClientLtp, ltpList);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Reference objects could not be extracted.\");\r",
																			"} \r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.collectionVariables.clear();\r",
																			"    \r",
																			"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																			"\r",
																			"    pm.collectionVariables.set(\"executionAndTraceLogHttpClientLtp\", executionAndTraceLogHttpClientLtp);\r",
																			"    pm.collectionVariables.set(\"executionAndTraceLogTcpClientLtp\", executionAndTraceLogTcpClientLtp);\r",
																			"\r",
																			"    pm.collectionVariables.set(\"httpClientLtp\", httpClientLtp);\r",
																			"    pm.collectionVariables.set(\"tcpClientLtp\", tcpClientLtp);\r",
																			"    pm.collectionVariables.set(\"inquireOamRequestApprovalsOperationClientLtp\", inquireOamRequestApprovalsOperationClientLtp);\r",
																			"\r",
																			"    pm.collectionVariables.set(\"ltpList\", ltpList);\r",
																			"    pm.collectionVariables.set(\"fcList\", fcList);\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Collection variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"function FindOperationServer(operationName, ltpList) {\r",
																			"    let operationServer;\r",
																			"    operationServer = \"\";\r",
																			"    try {\r",
																			"        let sampleUuid;\r",
																			"        for(let i=0; i<ltpList.length; i++) {\r",
																			"            sampleUuid = ltpList[i][\"uuid\"];\r",
																			"            if(sampleUuid.includes(\"op-s-\")) {\r",
																			"                let sampleOperationName;\r",
																			"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																			"                if(sampleOperationName == operationName) {\r",
																			"                    operationServer = ltpList[i];\r",
																			"                    return operationServer;\r",
																			"                }\r",
																			"            }\r",
																			"        }\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																			"    }\r",
																			"    return operationServer;\r",
																			"}\r",
																			"\r",
																			"function FindRandomLtpInstancesFromFc(outputFcPortList, ltpList) {\r",
																			"    let ltpInstance = {};\r",
																			"    try {\r",
																			"        for ( let i=0; i<outputFcPortList.length; i++ ) {\r",
																			"            let randomOutputFcPort = outputFcPortList[Math.floor(Math.random() * outputFcPortList.length)];\r",
																			"            let outputLtpUuid = randomOutputFcPort[\"logical-termination-point\"];\r",
																			"            let operationClientLtp = FindActualInstanceByUuid(outputLtpUuid, ltpList);\r",
																			"\r",
																			"            let httpClientLtp = FindServingLtp(operationClientLtp, ltpList);\r",
																			"            let sampleApplicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																			"\r",
																			"            if (sampleApplicationName != \"AdministratorAdministration\") {\r",
																			"\t\t\t\tltpInstance = { httpClientLtp, operationClientLtp };\r",
																			"                break;\r",
																			"            }\r",
																			"        }\r",
																			"    } catch(error) {\r",
																			"        console.log(error);\r",
																			"        console.log(\"! Exception in function : FindRandomLtpInstancesFromFc. \")\r",
																			"    } \r",
																			"    return ltpInstance;\r",
																			"}\r",
																			"\r",
																			"function FindOutputFcPortList(forwardingName, fcList) {\r",
																			"    let outputFcPortList;\r",
																			"    outputFcPortList = [];\r",
																			"    try {\r",
																			"        for( let i=0; i<fcList.length; i++ ) {\r",
																			"            for(let j=0; j<fcList[i][\"name\"].length; j++) {               \r",
																			"                if(fcList[i][\"name\"][j][\"value\"] == forwardingName) {\r",
																			"                    fcPortList = fcList[i][\"fc-port\"];\r",
																			"                    for(let k=0;k<fcPortList.length;k++) {\r",
																			"                        if(fcPortList[k][\"port-direction\"] == \"core-model-1-4:PORT_DIRECTION_TYPE_OUTPUT\") {\r",
																			"                            outputFcPortList.push(fcPortList[k]);\r",
																			"                        }\r",
																			"                    }\r",
																			"                    return outputFcPortList;\r",
																			"                }\r",
																			"            }\r",
																			"        }\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																			"    }\r",
																			"    return outputFcPortList;\r",
																			"}\r",
																			"\r",
																			"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
																			"    let actualInstance;\r",
																			"    actualInstance = {};\r",
																			"    try {\r",
																			"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
																			"            let sampleUuid;\r",
																			"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
																			"            if( sampleUuid == expectedUuid ) {\r",
																			"                actualInstance = actualLtpList[i];\r",
																			"                return actualInstance;\r",
																			"            }\r",
																			"        }\r",
																			"\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																			"    }\r",
																			"    return undefined;\r",
																			"}\r",
																			"\r",
																			"function FindServingLtp(clientLtp, ltpList) {\r",
																			"    let servingLtp;\r",
																			"    servingLtp = {};\r",
																			"    try{\r",
																			"        let serverLtpUuid;\r",
																			"        serverLtpUuid = clientLtp[\"server-ltp\"][0];\r",
																			"        for( let i=0; i<ltpList.length; i++ ) {\r",
																			"            let sampleUuid;\r",
																			"            sampleUuid = ltpList[i][\"uuid\"];\r",
																			"            if( sampleUuid == serverLtpUuid ) {\r",
																			"                servingLtp = ltpList[i];\r",
																			"                return servingLtp;\r",
																			"            }\r",
																			"        }\r",
																			"    } catch(error) {\r",
																			"        console.log(error);\r",
																			"        console.log(\"! Exception in function : FindServingLtp. \")\r",
																			"    }\r",
																			"    return servingLtp;\r",
																			"}\r",
																			"\r",
																			"function FindOperationClientUsingCallback(callback, fcList, ltpList) {\r",
																			"    let operationClientLtp\r",
																			"    try {\r",
																			"        let outputFcPortList = FindOutputFcPortList(callback, fcList);\r",
																			"        let randomOutputFcPort = outputFcPortList[Math.floor(Math.random() * outputFcPortList.length)];\r",
																			"        let outputLtpUuid = randomOutputFcPort[\"logical-termination-point\"];\r",
																			"        operationClientLtp = FindActualInstanceByUuid(outputLtpUuid, ltpList);\r",
																			"    } catch (error) {\r",
																			"        console.log(error);\r",
																			"        console.log(\"! Exception in function FindOperationClientUsingCallback. \");\r",
																			"    }\r",
																			"    return  operationClientLtp\r",
																			"}\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "GET",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "200",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "reference ExecutionAndTraceLog/core-model-1-4:control-construct",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"var AUTHORIZATION;\r",
																			"var applicationProtocol;\r",
																			"var applicationAddress;\r",
																			"var applicationPort;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"    let executionAndTraceLogTcpClientLtp;\r",
																			"    executionAndTraceLogTcpClientLtp = pm.collectionVariables.get(\"executionAndTraceLogTcpClientLtp\");\r",
																			"\r",
																			"    applicationProtocol = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																			"    applicationProtocol = applicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																			"    applicationAddress = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																			"    if(applicationAddress.hasOwnProperty(\"ip-address\")) {\r",
																			"        applicationAddress = applicationAddress[\"ip-address\"][\"ipv-4-address\"];\r",
																			"    } else {\r",
																			"        applicationAddress = applicationAddress[\"domain-name\"];\r",
																			"    }\r",
																			"    applicationPort = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																			" \r",
																			"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Environment variables could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Request Body\r",
																			"****************************************************************************************/\r",
																			"var REQUEST_BODY;\r",
																			"try {\r",
																			"    REQUEST_BODY = \"\";\r",
																			"} catch (error) {\r",
																			"    console.log(\"!Could not define request body. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = applicationProtocol + \"://\" + applicationAddress + \":\" + applicationPort + \"/core-model-1-4:control-construct\";\r",
																			"    //URI = \"http://9d098835-4e91-48f3-9761-04a82ff2843e.mock.pstmn.io\" + \"/core-model-1-4:control-construct\";\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var ltpList;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"    \r",
																			"    let responseCode;\r",
																			"    responseCode = parseInt(response.code);\r",
																			"    \r",
																			"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																			"        let responseObject;\r",
																			"        responseObject = JSON.parse(response.stream);\r",
																			"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																			"\r",
																			"    } else {\r",
																			"        ltpList = [];\r",
																			"    }\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! ltpList could not be extracted.\");\r",
																			"}\r",
																			"\r",
																			"var listRecordsOfFlowOperationKey;\r",
																			"try {\r",
																			"    listRecordsOfFlowOperationKey = FindOperationKeyForOperationName(\"/v1/list-records-of-flow\", ltpList);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Reference objects could not be extracted.\");\r",
																			"} \r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.collectionVariables.set(\"listRecordsOfFlowOperationKey\", listRecordsOfFlowOperationKey);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Collection variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"function FindOperationKeyForOperationName(operationName, ltpList) {\r",
																			"    let operationKey;\r",
																			"    operationKey = \"\";\r",
																			"    try {\r",
																			"         let sampleUuid;\r",
																			"         for ( let i=0; i<ltpList.length; i++) {\r",
																			"            sampleUuid = ltpList[i][\"uuid\"];\r",
																			"            if(sampleUuid.includes(\"op-s-\")){\r",
																			"                let sampleOperationName;\r",
																			"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																			"                if(sampleOperationName == operationName) {\r",
																			"                    operationKey = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																			"                    return operationKey; \r",
																			"                }\r",
																			"            }\r",
																			"         }\r",
																			"\r",
																			"    } catch (error) {\r",
																			"        console.log(\" ! Exception in function : FindOperationKeyForOperationName\")\r",
																			"    }\r",
																			"    return operationKey;\r",
																			"}\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "200",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "sampling /v1/regard-application",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"var OPERATION_KEY;\r",
																			"var CURRENT_ORIGINATOR;\r",
																			"var applicationName;\r",
																			"var releaseNumber;\r",
																			"var protocol;\r",
																			"var address;\r",
																			"var port;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"    let ltpList;\r",
																			"    ltpList = APPLICATION[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																			"\r",
																			"    CURRENT_ORIGINATOR = FindHttpServerApplicationName(ltpList);\r",
																			"\r",
																			"    let currentOperationServer;\r",
																			"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																			"    \r",
																			"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																			"\r",
																			"    let httpClientLtp;\r",
																			"    httpClientLtp = pm.collectionVariables.get(\"httpClientLtp\");\r",
																			"\r",
																			"    applicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																			"    releaseNumber = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																			"\r",
																			"    let tcpClientLtp;\r",
																			"    tcpClientLtp = pm.collectionVariables.get(\"tcpClientLtp\");\r",
																			"\r",
																			"    protocol = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																			"    protocol = protocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																			"\r",
																			"    address = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																			"\r",
																			"    port = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																			"    \r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Input Data could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Dummy Parameters\r",
																			"****************************************************************************************/\r",
																			"var USER_NAME;\r",
																			"var ORIGINATOR;\r",
																			"var X_CORRELATOR;\r",
																			"var TRACE_INDICATOR;\r",
																			"var CUSTOMER_JOURNEY;\r",
																			"try {\r",
																			"    USER_NAME = APPLICATION.userName;\r",
																			"    ORIGINATOR = \"Postman\";\r",
																			"    X_CORRELATOR = CreateXCorrelator();\r",
																			"    TRACE_INDICATOR = \"1\";\r",
																			"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																			"    \r",
																			"} catch (error) {\r",
																			"    console.log(\"! Could not define dummy values for parameters. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Request Body\r",
																			"****************************************************************************************/\r",
																			"var REQUEST_BODY;\r",
																			"try {\r",
																			"    REQUEST_BODY = '{'\r",
																			"        + '\"application-name\" : ' + '\"' + applicationName + '\",'\r",
																			"        + '\"release-number\" : ' + '\"' + releaseNumber + '\",'\r",
																			"        + '\"protocol\" : ' + '\"' + protocol + '\",'\r",
																			"        + '\"address\" : ' + JSON.stringify(address) + ','\r",
																			"        + '\"port\" : ' + port\r",
																			"    +'}';\r",
																			"} catch (error) {\r",
																			"    console.log(\"!Could not define request body. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.collectionVariables.set(\"user\", USER_NAME);\r",
																			"    pm.collectionVariables.set(\"originator\", ORIGINATOR);\r",
																			"    pm.collectionVariables.set(\"xCorrelator\", X_CORRELATOR);\r",
																			"    pm.collectionVariables.set(\"traceIndicator\", TRACE_INDICATOR);\r",
																			"    pm.collectionVariables.set(\"customerJourney\", CUSTOMER_JOURNEY);\r",
																			"    pm.collectionVariables.set(\"currentOriginator\", CURRENT_ORIGINATOR);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Collection variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + \"/v1/regard-application\";\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																			"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																			"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																			"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																			"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"function CreateXCorrelator() {\r",
																			"    let xCorrelator;\r",
																			"    xCorrelator = \"\";\r",
																			"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(12);\r",
																			"    return xCorrelator;\r",
																			"}\r",
																			"\r",
																			"function GenerateRandomHexString(length) {\r",
																			"    var randomRandomHexString = \"\";\r",
																			"    while (randomRandomHexString.length < length) {\r",
																			"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																			"    }\r",
																			"    return randomRandomHexString.substring(0,length);\r",
																			"}\r",
																			"\r",
																			"function FindHttpServerApplicationName(ltpList) {\r",
																			"    let applicationName;\r",
																			"    applicationName = \"\";\r",
																			"    for( let i=0; i<ltpList.length; i++ ) {\r",
																			"        let sampleUuid;\r",
																			"        sampleUuid = ltpList[i][\"uuid\"];\r",
																			"        if(sampleUuid.includes(\"http-s-\")) {\r",
																			"            applicationName = ltpList[i][\"layer-protocol\"][0][\"http-server-interface-1-0:http-server-interface-pac\"][\"http-server-interface-capability\"][\"application-name\"];\r",
																			"            return applicationName;\r",
																			"        }\r",
																			"    }\r",
																			"    return applicationName;\r",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"const currentCount = 0;\r",
																			"try {\r",
																			"\tpm.collectionVariables.set(\"currentCount\", currentCount);\r",
																			"\r",
																			"} catch(error) {\r",
																			"    console.log(\" !Could not set currentCount. \");\r",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "204",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Expected ExecutionAndTraceLog/v1/list-records-of-flow for /v1/regard-application:: Forwardings triggered?",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"var OPERATION_KEY;\r",
																			"var applicationProtocol;\r",
																			"var applicationAddress;\r",
																			"var applicationPort;\r",
																			"var xCorrelatorUnderTest;\r",
																			"var latestMatch;\r",
																			"var numberOfRecords;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"    let executionAndTraceLogTcpClientLtp;\r",
																			"    executionAndTraceLogTcpClientLtp = pm.collectionVariables.get(\"executionAndTraceLogTcpClientLtp\");\r",
																			"    \r",
																			"    applicationProtocol = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																			"    applicationProtocol = applicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																			"    applicationAddress = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																			"    if(applicationAddress.hasOwnProperty(\"ip-address\")) {\r",
																			"        applicationAddress = applicationAddress[\"ip-address\"][\"ipv-4-address\"];\r",
																			"    } else {\r",
																			"        applicationAddress = applicationAddress[\"domain-name\"];\r",
																			"    }\r",
																			"    applicationPort = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																			"\r",
																			"    OPERATION_KEY = pm.collectionVariables.get(\"listRecordsOfFlowOperationKey\");\r",
																			"    xCorrelatorUnderTest = pm.collectionVariables.get(\"xCorrelator\");\r",
																			"    latestMatch = 0;\r",
																			"    numberOfRecords = 100;\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error)\r",
																			"    console.log(\"! Input Data could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Dummy Parameters\r",
																			"****************************************************************************************/\r",
																			"var USER_NAME;\r",
																			"var ORIGINATOR;\r",
																			"var X_CORRELATOR;\r",
																			"var TRACE_INDICATOR;\r",
																			"var CUSTOMER_JOURNEY;\r",
																			"try {\r",
																			"    USER_NAME = APPLICATION.userName;\r",
																			"    ORIGINATOR = \"Postman\";\r",
																			"    X_CORRELATOR = CreateXCorrelator();\r",
																			"    TRACE_INDICATOR = \"1\";\r",
																			"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																			"    \r",
																			"} catch (error) {\r",
																			"    console.log(\"! Could not define dummy values for parameters. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Request Body\r",
																			"****************************************************************************************/\r",
																			"var REQUEST_BODY;\r",
																			"try {\r",
																			"    REQUEST_BODY = '{'\r",
																			"                + '\"x-correlator\": \"' + xCorrelatorUnderTest +'\",'\r",
																			"                + '\"latest-match\": ' + latestMatch + ','\r",
																			"                + '\"number-of-records\":' + numberOfRecords\r",
																			"                + '}';\r",
																			"} catch (error) {\r",
																			"    console.log(\"!Could not define request body. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = applicationProtocol + \"://\" + applicationAddress + \":\" + applicationPort + \"/v1/list-records-of-flow\";\r",
																			"    //URI = \"http://9d098835-4e91-48f3-9761-04a82ff2843e.mock.pstmn.io/v1/list-records-of-flow\";\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																			"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																			"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																			"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																			"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"function CreateXCorrelator() {\r",
																			"    let xCorrelator;\r",
																			"    xCorrelator = \"\";\r",
																			"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(12);\r",
																			"    return xCorrelator;\r",
																			"}\r",
																			"\r",
																			"function GenerateRandomHexString(length) {\r",
																			"    var randomRandomHexString = \"\";\r",
																			"    while (randomRandomHexString.length < length) {\r",
																			"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																			"    }\r",
																			"    return randomRandomHexString.substring(0, length);\r",
																			"}\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Constant variables\r",
																			"****************************************************************************************/\r",
																			"const SERIAL_TRACE_INDICATOR = \".1\";\r",
																			"var retryMaxCount;\r",
																			"var retryWaitingPeriod;\r",
																			"var currentCount;\r",
																			"try {\r",
																			"    retryMaxCount = pm.environment.get(\"retryMaxCount\");\r",
																			"    retryWaitingPeriod = pm.environment.get(\"retryWaitingPeriod\");\r",
																			"    currentCount = pm.collectionVariables.get(\"currentCount\");\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Could not load constant variables Data. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var expectedXCorrelator;\r",
																			"var expectedUser;\r",
																			"var expectedOriginator;\r",
																			"var expectedTraceIndicator;\r",
																			"var expectedApplicationName;\r",
																			"var expectedReleaseNumber;\r",
																			"var expectedOperationName;\r",
																			"try {\r",
																			"    expectedXCorrelator = pm.collectionVariables.get(\"xCorrelator\");\r",
																			"    expectedUser = pm.collectionVariables.get(\"user\");\r",
																			"    expectedOriginator = pm.collectionVariables.get(\"currentOriginator\");\r",
																			"    expectedTraceIndicator = pm.collectionVariables.get(\"traceIndicator\");\r",
																			"    \r",
																			"    //Increment traceIndicator:\r",
																			"    expectedTraceIndicator = expectedTraceIndicator + SERIAL_TRACE_INDICATOR;\r",
																			"\r",
																			"    let expectedHttpClientLtp;\r",
																			"    expectedHttpClientLtp = pm.collectionVariables.get(\"httpClientLtp\");\r",
																			"    expectedApplicationName = expectedHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																			"    expectedReleaseNumber = expectedHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																			"\r",
																			"    let expectedOperationClient;\r",
																			"    expectedOperationClient = pm.collectionVariables.get(\"inquireOamRequestApprovalsOperationClientLtp\");\r",
																			"\r",
																			"    expectedOperationName = expectedOperationClient[\"layer-protocol\"][0][\"operation-client-interface-1-0:operation-client-interface-pac\"][\"operation-client-interface-configuration\"][\"operation-name\"];\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Could not load Input Data. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var RESPONSE_CODE;\r",
																			"var serviceRecordList;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"    \r",
																			"    RESPONSE_CODE = parseInt(response.code);\r",
																			"\r",
																			"    if(Math.floor(RESPONSE_CODE/100) === 2) {\r",
																			"        serviceRecordList = JSON.parse(response.stream);\r",
																			"    }\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Response Code could not be extracted.\");\r",
																			"}    \r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Testing\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.test(\"POST ExecutionAndTraceLog/v1/list-records-of-flow responds 200\", function () {\r",
																			"        pm.expect(RESPONSE_CODE).to.equal(200);\r",
																			"    });\r",
																			"\r",
																			"    let foundAnEntryWithTheExpectedHeaderValuesInEatl;\r",
																			"    foundAnEntryWithTheExpectedHeaderValuesInEatl = false;\r",
																			"    let responseCodeofTriggeredForwarding;\r",
																			"    responseCodeofTriggeredForwarding = 0;\r",
																			"    for(let i=0; i<serviceRecordList.length; i++)  {\r",
																			"        if( serviceRecordList[i][\"application-name\"] == expectedApplicationName\r",
																			"                && serviceRecordList[i][\"release-number\"] == expectedReleaseNumber\r",
																			"                && serviceRecordList[i][\"operation-name\"] == expectedOperationName\r",
																			"                && serviceRecordList[i][\"x-correlator\"] == expectedXCorrelator\r",
																			"                && serviceRecordList[i][\"user\"] == expectedUser\r",
																			"                && serviceRecordList[i][\"originator\"] == expectedOriginator\r",
																			"                && serviceRecordList[i][\"trace-indicator\"] == expectedTraceIndicator ) {\r",
																			"\r",
																			"            foundAnEntryWithTheExpectedHeaderValuesInEatl = true;\r",
																			"            responseCodeofTriggeredForwarding =  serviceRecordList[i][\"response-code\"];\r",
																			"            break;\r",
																			"        }\r",
																			"    }\r",
																			"\r",
																			"    if (foundAnEntryWithTheExpectedHeaderValuesInEatl == false) {\r",
																			"        if( (currentCount < retryMaxCount) ) {\r",
																			"            setTimeout(()=>{\r",
																			"                postman.setNextRequest(request.name);\r",
																			"                currentCount = currentCount + 1;\r",
																			"                pm.collectionVariables.set(\"currentCount\", currentCount);\r",
																			"            }, retryWaitingPeriod);\r",
																			"        } else {\r",
																			"            pm.test(\"Forwardings is successfully notified\", function () {\r",
																			"                pm.expect(foundAnEntryWithTheExpectedHeaderValuesInEatl).to.be.true;        \r",
																			"            });\r",
																			"        }\r",
																			"    } else {\r",
																			"        pm.test(\"Forwardings is successfully notified with response-code 204\", function () {\r",
																			"            pm.expect(responseCodeofTriggeredForwarding).to.equal(204);    \r",
																			"        });\r",
																			"    }\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Testing could not be executed.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "200",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														}
													],
													"description": "## Gets the forwarding happened for the incoming request?\n\n#### Requires:\n- ExecutionAndTraceLog server to operate\n\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  -  search CC for output fc-port of ServiceRequestCausesLoggingRequest, \nits corresponding op-c, http-c and tcp-c, storing them for later verification request\n  - searching CC for op-s of /v1/regard-application, storing operation-key\n  - searching CC for output fc-port of NewApplicationCausesRequestForInquiringOamRequestApprovals, find corresponding op-c, http-c and tcp-c, store them.\n- GETting EaTL/CC (while using IP, protocol and port from above)\n  - searching CC for op-c of /v1/list-records-of-flow, storing operation-key\n- POST /v1/regard-application with  \n  - all attributes according to chosen http-c and tcp-c\n  - operation-key from above\n  - all parameters with realistic values (incl. DummyXCorrelator)\n\n#### Testing:\n- POST ExecutionAndTraceLog/v1/list-records-of-flow with \n   - IP, protocol and port from above\n   - operation-key from above\n   - DummyValue of x-correlator\n   - checking response \n   - checking same record for containing DummyXCorrelator and applicatin-name and release-number with randomly chosen values\n\n#### Clearing:\n- not applicable"
												}
											]
										},
										{
											"name": "FC-port updated?",
											"item": [
												{
													"name": "NewApplicationCausesRequestForInquiringOamRequestApprovals",
													"item": [
														{
															"name": "reference /core-model-1-4:control-construct",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"console.log(\"\\n-----  /v1/regard-application acceptance -- fc-port created for NewApplicationCausesRequestForInquiringOamRequestApprovals -------------------------------\");\r",
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Environment variables could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																			"\r",
																			"    let REQUEST_BODY;\r",
																			"    REQUEST_BODY = \"\";\r",
																			"\r",
																			"    let AUTHORIZATION;\r",
																			"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var ltpList;\r",
																			"var fcList;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"    \r",
																			"    let responseCode;\r",
																			"    responseCode = parseInt(response.code);\r",
																			"    \r",
																			"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																			"        let responseObject;\r",
																			"        responseObject = JSON.parse(response.stream);\r",
																			"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																			"        fcList = responseObject[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
																			"\r",
																			"    } else {\r",
																			"        ltpList = [];\r",
																			"        fcList = [];\r",
																			"    }\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! ltpList could not be extracted.\");\r",
																			"}\r",
																			"\r",
																			"var currentOperationServer;\r",
																			"var disregardApplicationOperationServer;\r",
																			"var httpClientLtp;\r",
																			"var tcpClientLtp;\r",
																			"var inquireOamRequestApprovalsOperationClientLtp;\r",
																			"try {\r",
																			"    currentOperationServer = FindOperationServer(\"/v1/regard-application\", ltpList);\r",
																			"    disregardApplicationOperationServer = FindOperationServer(\"/v1/disregard-application\", ltpList);\r",
																			"\r",
																			"    //Inquiring OAM approvals\r",
																			"    let outputFcPortListInquireOamRequestApprovals;\r",
																			"    outputFcPortListInquireOamRequestApprovals = FindOutputFcPortList(\"NewApplicationCausesRequestForInquiringOamRequestApprovals\", fcList);\r",
																			"    let ltpInstance = FindRandomLtpInstancesFromFc(outputFcPortListInquireOamRequestApprovals, ltpList)\r",
																			"    httpClientLtp = ltpInstance.httpClientLtp;\r",
																			"    inquireOamRequestApprovalsOperationClientLtp = ltpInstance.operationClientLtp\r",
																			"    tcpClientLtp = FindServingLtp(httpClientLtp, ltpList);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Reference objects could not be extracted.\");\r",
																			"} \r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.collectionVariables.clear();\r",
																			"    \r",
																			"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																			"    pm.collectionVariables.set(\"disregardApplicationOperationServer\", disregardApplicationOperationServer);\r",
																			"\r",
																			"    pm.collectionVariables.set(\"inquireOamRequestApprovalsOperationClientLtp\", inquireOamRequestApprovalsOperationClientLtp);\r",
																			"    pm.collectionVariables.set(\"httpClientLtp\", httpClientLtp);\r",
																			"    pm.collectionVariables.set(\"tcpClientLtp\", tcpClientLtp);\r",
																			"\r",
																			"    pm.collectionVariables.set(\"ltpList\", ltpList);\r",
																			"    pm.collectionVariables.set(\"fcList\", fcList);\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Collection variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"function FindOperationServer(operationName, ltpList) {\r",
																			"    let operationServer;\r",
																			"    operationServer = \"\";\r",
																			"    try {\r",
																			"        let sampleUuid;\r",
																			"        for(let i=0; i<ltpList.length; i++) {\r",
																			"            sampleUuid = ltpList[i][\"uuid\"];\r",
																			"            if(sampleUuid.includes(\"op-s-\")) {\r",
																			"                let sampleOperationName;\r",
																			"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																			"                if(sampleOperationName == operationName) {\r",
																			"                    operationServer = ltpList[i];\r",
																			"                    return operationServer;\r",
																			"                }\r",
																			"            }\r",
																			"        }\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																			"    }\r",
																			"    return operationServer;\r",
																			"}\r",
																			"\r",
																			"function FindRandomLtpInstancesFromFc(outputFcPortList, ltpList) {\r",
																			"    let ltpInstance = {};\r",
																			"    try {\r",
																			"        for ( let i=0; i<outputFcPortList.length; i++ ) {\r",
																			"            let randomOutputFcPort = outputFcPortList[Math.floor(Math.random() * outputFcPortList.length)];\r",
																			"            let outputLtpUuid = randomOutputFcPort[\"logical-termination-point\"];\r",
																			"            let operationClientLtp = FindActualInstanceByUuid(outputLtpUuid, ltpList);\r",
																			"\r",
																			"            let httpClientLtp = FindServingLtp(operationClientLtp, ltpList);\r",
																			"            let sampleApplicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																			"\r",
																			"            if (sampleApplicationName != \"AdministratorAdministration\") {\r",
																			"\t\t\t\tltpInstance = { httpClientLtp, operationClientLtp };\r",
																			"                break;\r",
																			"            }\r",
																			"        }\r",
																			"    } catch(error) {\r",
																			"        console.log(error);\r",
																			"        console.log(\"! Exception in function : FindRandomLtpInstancesFromFc. \")\r",
																			"    } \r",
																			"    return ltpInstance;\r",
																			"}\r",
																			"\r",
																			"function FindOutputFcPortList(forwardingName, fcList) {\r",
																			"    let outputFcPortList;\r",
																			"    outputFcPortList = [];\r",
																			"    try {\r",
																			"        for( let i=0; i<fcList.length; i++ ) {\r",
																			"            for(let j=0; j<fcList[i][\"name\"].length; j++) {               \r",
																			"                if(fcList[i][\"name\"][j][\"value\"] == forwardingName) {\r",
																			"                    fcPortList = fcList[i][\"fc-port\"];\r",
																			"                    for(let k=0;k<fcPortList.length;k++) {\r",
																			"                        if(fcPortList[k][\"port-direction\"] == \"core-model-1-4:PORT_DIRECTION_TYPE_OUTPUT\") {\r",
																			"                            outputFcPortList.push(fcPortList[k]);\r",
																			"                        }\r",
																			"                    }\r",
																			"                    return outputFcPortList;\r",
																			"                }\r",
																			"            }\r",
																			"        }\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																			"    }\r",
																			"    return outputFcPortList;\r",
																			"}\r",
																			"\r",
																			"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
																			"    let actualInstance;\r",
																			"    actualInstance = {};\r",
																			"    try {\r",
																			"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
																			"            let sampleUuid;\r",
																			"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
																			"            if( sampleUuid == expectedUuid ) {\r",
																			"                actualInstance = actualLtpList[i];\r",
																			"                return actualInstance;\r",
																			"            }\r",
																			"        }\r",
																			"\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																			"    }\r",
																			"    return undefined;\r",
																			"}\r",
																			"\r",
																			"function FindServingLtp(clientLtp, ltpList) {\r",
																			"    let servingLtp;\r",
																			"    servingLtp = {};\r",
																			"    try{\r",
																			"        let serverLtpUuid;\r",
																			"        serverLtpUuid = clientLtp[\"server-ltp\"][0];\r",
																			"        for( let i=0; i<ltpList.length; i++ ) {\r",
																			"            let sampleUuid;\r",
																			"            sampleUuid = ltpList[i][\"uuid\"];\r",
																			"            if( sampleUuid == serverLtpUuid ) {\r",
																			"                servingLtp = ltpList[i];\r",
																			"                return servingLtp;\r",
																			"            }\r",
																			"        }\r",
																			"    } catch(error) {\r",
																			"        console.log(error);\r",
																			"        console.log(\"! Exception in function : FindServingLtp. \")\r",
																			"    }\r",
																			"    return servingLtp;\r",
																			"}\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "GET",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "200",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Dummy /v1/regard-application",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"var OPERATION_KEY;\r",
																			"var dummyApplicationName;\r",
																			"var dummyReleaseNumber;\r",
																			"var dummyProtocol;\r",
																			"var dummyAddress;\r",
																			"var dummyPort;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"    let currentOperationServer;\r",
																			"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																			"\r",
																			"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																			"\r",
																			"    dummyApplicationName = GenerateRandomString(12);\r",
																			"    dummyReleaseNumber = RandomReleaseNumber();\r",
																			"    dummyProtocol = RandomProtocol()\r",
																			"    \r",
																			"    let dummyIpv4Address = RandomIpAddress();\r",
																			"    dummyAddress = {\r",
																			"        \"ip-address\": {\r",
																			"            \"ipv-4-address\": dummyIpv4Address\r",
																			"        }\r",
																			"    };\r",
																			"    dummyPort = RandomTcpPort();\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Input Data could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Dummy Parameters\r",
																			"****************************************************************************************/\r",
																			"var USER_NAME;\r",
																			"var ORIGINATOR;\r",
																			"var X_CORRELATOR;\r",
																			"var TRACE_INDICATOR;\r",
																			"var CUSTOMER_JOURNEY;\r",
																			"try {\r",
																			"    USER_NAME = APPLICATION.userName;\r",
																			"    ORIGINATOR = \"Postman\";\r",
																			"    X_CORRELATOR = CreateXCorrelator();\r",
																			"    TRACE_INDICATOR = \"1\";\r",
																			"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																			"    \r",
																			"} catch (error) {\r",
																			"    console.log(\"! Could not define dummy values for parameters. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Request Body\r",
																			"****************************************************************************************/\r",
																			"var REQUEST_BODY;\r",
																			"try {\r",
																			"    REQUEST_BODY = '{'\r",
																			"        + '\"application-name\" : ' + '\"' + dummyApplicationName + '\",'\r",
																			"        + '\"release-number\" : ' + '\"' + dummyReleaseNumber + '\",'\r",
																			"        + '\"protocol\" : ' + '\"' + dummyProtocol + '\",'\r",
																			"        + '\"address\" : ' + JSON.stringify(dummyAddress) + ','\r",
																			"        + '\"port\" : ' +  dummyPort\r",
																			"    +'}';\r",
																			"} catch (error) {\r",
																			"    console.log(\"!Could not define request body. \");\r",
																			"}\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.collectionVariables.set(\"dummyApplicationName\", dummyApplicationName);\r",
																			"    pm.collectionVariables.set(\"dummyReleaseNumber\", dummyReleaseNumber);\r",
																			"    pm.collectionVariables.set(\"dummyProtocol\", dummyProtocol);\r",
																			"    pm.collectionVariables.set(\"dummyAddress\", dummyAddress);\r",
																			"    pm.collectionVariables.set(\"dummyPort\", dummyPort);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Collection variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + \"/v1/regard-application\";\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																			"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																			"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																			"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																			"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"function CreateXCorrelator() {\r",
																			"    let xCorrelator;\r",
																			"    xCorrelator = \"\";\r",
																			"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(12);\r",
																			"    return xCorrelator;\r",
																			"}\r",
																			"\r",
																			"function GenerateRandomHexString(length) {\r",
																			"    var randomRandomHexString = \"\";\r",
																			"    while (randomRandomHexString.length < length) {\r",
																			"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																			"    }\r",
																			"    return randomRandomHexString.substring(0,length);\r",
																			"}\r",
																			"\r",
																			"function GenerateRandomString(length) {\r",
																			"    let randomString;\r",
																			"    randomString = \"\";\r",
																			"    try {\r",
																			"        let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r",
																			"        let charactersLength = characters.length;\r",
																			"        for (let i = 0; i < length; i++) {\r",
																			"            randomString += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																			"        }\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Could not generate random string. \");\r",
																			"    }\r",
																			"    return randomString;\r",
																			"}\r",
																			"\r",
																			"function RandomReleaseNumber() {\r",
																			"    let releaseNumber;\r",
																			"    let releaseNumberParts = [];\r",
																			"    for  (let i=0; i<3 ; i++) {\r",
																			"        releaseNumberParts[i] = Math.floor(Math.random() * 10);\r",
																			"    }\r",
																			"    releaseNumber = releaseNumberParts[0] + \".\" + releaseNumberParts[1] + \".\" + releaseNumberParts[2];\r",
																			"    return releaseNumber;\r",
																			"}\r",
																			"\r",
																			"function RandomIpAddress() {\r",
																			"    let randomAddress\r",
																			"    let addressParts = [];\r",
																			"    for ( let i=0; i<4; i++ ) {\r",
																			"        addressParts[i] = String(Math.floor(Math.random() * 256));\r",
																			"    }\r",
																			"    randomAddress = addressParts[0] + \".\" + addressParts[1] + \".\" + addressParts[2] + \".\" + addressParts[3];\r",
																			"    return randomAddress;\r",
																			"}\r",
																			"\r",
																			"function RandomTcpPort() {\r",
																			"    let randomPort;\r",
																			"    randomPort = 2000 + Math.floor( Math.random() * 1000 );\r",
																			"    return randomPort;\r",
																			"}\r",
																			"\r",
																			"function RandomProtocol() {\r",
																			"    let protocolList;\r",
																			"    protocolList = [  \"HTTP\", \"HTTPS\" ];\r",
																			"    let protocolIndex = Math.floor(Math.random() * protocolList.length);\r",
																			"    let randomProtocol = protocolList[protocolIndex]; \r",
																			"\r",
																			"    return randomProtocol;\r",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var RESPONSE_CODE;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"\r",
																			"    RESPONSE_CODE = parseInt(response.code);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Response Code could not be extracted.\");\r",
																			"}    \r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Testing\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.test(\"POST /v1/regard-application responds 204\", function () {\r",
																			"        pm.expect(RESPONSE_CODE).to.equal(204);\r",
																			"    });\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Testing could not be executed.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "204",
																		"type": "default"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Expected /core-model-1-4:control-construct",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Environment variables could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																			"\r",
																			"    let REQUEST_BODY;\r",
																			"    REQUEST_BODY = \"\";\r",
																			"\r",
																			"    let AUTHORIZATION;\r",
																			"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var expectedApplicationName;\r",
																			"var expectedReleaseNumber;\r",
																			"var expectedOperationName;\r",
																			"try {\r",
																			"    expectedApplicationName = pm.collectionVariables.get(\"dummyApplicationName\");\r",
																			"    expectedReleaseNumber = pm.collectionVariables.get(\"dummyReleaseNumber\");\r",
																			"\r",
																			"    let expectedOperationClient;\r",
																			"    expectedOperationClient = pm.collectionVariables.get(\"inquireOamRequestApprovalsOperationClientLtp\");\r",
																			"    expectedOperationName = expectedOperationClient[\"layer-protocol\"][0][\"operation-client-interface-1-0:operation-client-interface-pac\"][\"operation-client-interface-configuration\"][\"operation-name\"];\r",
																			"\r",
																			"} catch(error) {\r",
																			"    console.log(\"! Could not load input data. \");\r",
																			"}\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var ltpList;\r",
																			"var fcList;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"    \r",
																			"    let responseCode;\r",
																			"    responseCode = parseInt(response.code);\r",
																			"    \r",
																			"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																			"        let responseObject;\r",
																			"        responseObject = JSON.parse(response.stream);\r",
																			"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																			"        fcList = responseObject[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
																			"\r",
																			"    } else {\r",
																			"        ltpList = [];\r",
																			"        fcList = [];\r",
																			"    }\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! ltpList could not be extracted.\");\r",
																			"}\r",
																			"\r",
																			"var expectedOutputFcPortEntryFound;\r",
																			"try {\r",
																			"    let actualHttpClient;\r",
																			"    actualHttpClient = FindHttpClientWithApplicationNameAndReleaseNumber(expectedApplicationName, expectedReleaseNumber, ltpList);\r",
																			"\r",
																			"    let actualInquireOamRequestApprovalsOperation;\r",
																			"    actualInquireOamRequestApprovalsOperation = FindOperationClientLtp(actualHttpClient, ltpList, expectedOperationName);\r",
																			"\r",
																			"    let actualFcPortList;\r",
																			"    actualFcPortList = FindOutputFcPortList(\"NewApplicationCausesRequestForInquiringOamRequestApprovals\", fcList);\r",
																			"\r",
																			"    let actualOutputFcPortLTPIdList;\r",
																			"    actualOutputFcPortLTPIdList = [];\r",
																			"    for(let i=0; i<actualFcPortList.length; i++) {\r",
																			"        actualOutputFcPortLTPIdList.push(actualFcPortList[i][\"logical-termination-point\"]);\r",
																			"    }\r",
																			"    if(actualOutputFcPortLTPIdList.includes(actualInquireOamRequestApprovalsOperation[\"uuid\"])) {\r",
																			"        expectedOutputFcPortEntryFound = true;\r",
																			"    } else {\r",
																			"        expectedOutputFcPortEntryFound = false;\r",
																			"    }\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Reference objects could not be extracted.\");\r",
																			"} \r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Testing\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.test(\"As expected, the fc-port has been created for new-application under FC - 'NewApplicationCausesRequestForInquiringOamRequestApprovals': \", function () {\r",
																			"        pm.expect(expectedOutputFcPortEntryFound).to.equal(true);\r",
																			"    });\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Testing could not be executed.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"function FindHttpClientWithApplicationNameAndReleaseNumber(applicationName, releaseNumber, ltpList) {\r",
																			"    let httpClient;\r",
																			"    httpClient = {};\r",
																			"    try {\r",
																			"        for ( let i=0; i<ltpList.length; i++ ) {\r",
																			"            let sampleUuid;\r",
																			"            sampleUuid = ltpList[i][\"uuid\"];\r",
																			"            if(sampleUuid.includes(\"http-c-\")) {\r",
																			"                let sampleApplicationName;\r",
																			"                sampleApplicationName = ltpList[i][\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																			"                let sampleReleaseNumber;\r",
																			"                sampleReleaseNumber = ltpList[i][\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																			"                if(( sampleApplicationName == applicationName ) && ( sampleReleaseNumber == releaseNumber )) {\r",
																			"                    httpClient = ltpList[i];\r",
																			"                    return httpClient;\r",
																			"                }\r",
																			"            }\r",
																			"        }\r",
																			"    } catch (error) {\r",
																			"        console.log(error);\r",
																			"        console.log(\"! Exception in function FindHttpClientWithApplicationNameAndReleaseNumber. \");\r",
																			"    }\r",
																			"    return httpClient;\r",
																			"}\r",
																			"\r",
																			"function FindOperationClientLtp(serverLtp, ltpList, operationName) {\r",
																			"    let operationClientLtp;\r",
																			"    operationClientLtp = {};\r",
																			"    try {\r",
																			"        let clientLtpList;\r",
																			"        clientLtpList = serverLtp[\"client-ltp\"];\r",
																			"        let operationClientInstances;\r",
																			"        operationClientInstances = [];\r",
																			"        if(clientLtpList != undefined) {\r",
																			"            for ( let i=0; i<clientLtpList.length; i++ ) {\r",
																			"                for ( let j=0; j<ltpList.length; j++ ) {\r",
																			"                    if( ltpList[j][\"uuid\"].includes(\"-op-c-\") ) {\r",
																			"                        if( ltpList[j][\"uuid\"] == clientLtpList[i] ) {\r",
																			"                            operationClientInstances.push(ltpList[j]);\r",
																			"                            break;\r",
																			"                        }\r",
																			"                    }\r",
																			"                }\r",
																			"            }\r",
																			"            for( let i=0; i<operationClientInstances.length; i++ ) {\r",
																			"                let sampleOperationName;\r",
																			"                sampleOperationName = operationClientInstances[i][\"layer-protocol\"][0][\"operation-client-interface-1-0:operation-client-interface-pac\"][\"operation-client-interface-configuration\"][\"operation-name\"];\r",
																			"                if(sampleOperationName.includes(operationName)) {\r",
																			"                    operationClientLtp = operationClientInstances[i];\r",
																			"                    return operationClientLtp;\r",
																			"                }\r",
																			"            }\r",
																			"        }\r",
																			"    } catch(error) {\r",
																			"        console.log(error);\r",
																			"        console.log(\"! Exception in function : FindOperationClientLtp. \")\r",
																			"    }\r",
																			"    return operationClientLtp;\r",
																			"}\r",
																			"\r",
																			"function FindOutputFcPortList(forwardingName, fcList) {\r",
																			"    let outputFcPortList;\r",
																			"    outputFcPortList = [];\r",
																			"    try {\r",
																			"        for( let i=0; i<fcList.length; i++ ) {\r",
																			"            for(let j=0; j<fcList[i][\"name\"].length; j++) {               \r",
																			"                if(fcList[i][\"name\"][j][\"value\"] == forwardingName) {\r",
																			"                    fcPortList = fcList[i][\"fc-port\"];\r",
																			"                    for(let k=0;k<fcPortList.length;k++) {\r",
																			"                        if(fcPortList[k][\"port-direction\"] == \"core-model-1-4:PORT_DIRECTION_TYPE_OUTPUT\") {\r",
																			"                            outputFcPortList.push(fcPortList[k]);\r",
																			"                        }\r",
																			"                    }\r",
																			"                    return outputFcPortList;\r",
																			"                }\r",
																			"            }\r",
																			"        }\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																			"    }\r",
																			"    return outputFcPortList;\r",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "GET",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "200",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "clearing /v1/disregard-application",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"var OPERATION_KEY;\r",
																			"var dummyApplicationName;\r",
																			"var dummyReleaseNumber;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"    let currentOperationServer;\r",
																			"    currentOperationServer = pm.collectionVariables.get(\"disregardApplicationOperationServer\");\r",
																			"    \r",
																			"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																			"\r",
																			"    dummyApplicationName = pm.collectionVariables.get(\"dummyApplicationName\");\r",
																			"    dummyReleaseNumber = pm.collectionVariables.get(\"dummyReleaseNumber\");\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Input Data could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Dummy Parameters\r",
																			"****************************************************************************************/\r",
																			"var USER_NAME;\r",
																			"var ORIGINATOR;\r",
																			"var X_CORRELATOR;\r",
																			"var TRACE_INDICATOR;\r",
																			"var CUSTOMER_JOURNEY;\r",
																			"try {\r",
																			"    USER_NAME = APPLICATION.userName;\r",
																			"    ORIGINATOR = \"Postman\";\r",
																			"    X_CORRELATOR = CreateXCorrelator();\r",
																			"    TRACE_INDICATOR = \"1\";\r",
																			"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																			"    \r",
																			"} catch (error) {\r",
																			"    console.log(\"! Could not define dummy values for parameters. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Request Body\r",
																			"****************************************************************************************/\r",
																			"var REQUEST_BODY;\r",
																			"try {\r",
																			"    REQUEST_BODY = '{'\r",
																			"        + '\"application-name\" : ' + '\"' + dummyApplicationName + '\",'\r",
																			"        + '\"release-number\" : ' + '\"' + dummyReleaseNumber + '\"'\r",
																			"    +'}';\r",
																			"} catch (error) {\r",
																			"    console.log(\"!Could not define request body. \");\r",
																			"}\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + \"/v1/disregard-application\";\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																			"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																			"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																			"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																			"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"function CreateXCorrelator() {\r",
																			"    let xCorrelator;\r",
																			"    xCorrelator = \"\";\r",
																			"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(12);\r",
																			"    return xCorrelator;\r",
																			"}\r",
																			"\r",
																			"function GenerateRandomHexString(length) {\r",
																			"    var randomRandomHexString = \"\";\r",
																			"    while (randomRandomHexString.length < length) {\r",
																			"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																			"    }\r",
																			"    return randomRandomHexString.substring(0,length);\r",
																			"}\r",
																			"\r",
																			"function GenerateRandomString(length) {\r",
																			"    let randomString;\r",
																			"    randomString = \"\";\r",
																			"    try {\r",
																			"        let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r",
																			"        let charactersLength = characters.length;\r",
																			"        for (let i = 0; i < length; i++) {\r",
																			"            randomString += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																			"        }\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Could not generate random string. \");\r",
																			"    }\r",
																			"    return randomString;\r",
																			"}\r",
																			"\r",
																			"function RandomReleaseNumber() {\r",
																			"    let releaseNumber;\r",
																			"    let releaseNumberParts = [];\r",
																			"    for  (let i=0; i<3 ; i++) {\r",
																			"        releaseNumberParts[i] = Math.floor(Math.random() * 10);\r",
																			"    }\r",
																			"    releaseNumber = releaseNumberParts[0] + \".\" + releaseNumberParts[1] + \".\" + releaseNumberParts[2];\r",
																			"    return releaseNumber;\r",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "204",
																		"type": "default"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Check /core-model-1-4:control-construct",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"var AUTHORIZATION;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																			"\r",
																			"    oamPath = \"/core-model-1-4:control-construct\";\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Environment variables could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Request Body\r",
																			"****************************************************************************************/\r",
																			"var REQUEST_BODY;\r",
																			"try {\r",
																			"    REQUEST_BODY = \"\";\r",
																			"} catch (error) {\r",
																			"    console.log(\"!Could not define request body. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + oamPath;\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var expectedLogicalTerminationPoint;\r",
																			"var expectedForwardingConstruct;\r",
																			"try {\r",
																			"    expectedLogicalTerminationPoint = pm.collectionVariables.get(\"ltpList\");\r",
																			"    expectedForwardingConstruct = pm.collectionVariables.get(\"fcList\");\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Collection variables could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var RESPONSE_CODE;\r",
																			"var RESPONSE;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"\r",
																			"    RESPONSE_CODE = parseInt(response.code);\r",
																			"\r",
																			"    if (Math.floor(RESPONSE_CODE / 100) === 2) {\r",
																			"        RESPONSE = JSON.parse(response.stream);\r",
																			"    } else {\r",
																			"        RESPONSE = [];\r",
																			"    }\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Result value lists could not be extracted.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Testing\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.test(\"GET /core-model-1-4:control-construct responds 200\", function () {\r",
																			"        pm.expect(RESPONSE_CODE).to.equal(200);\r",
																			"    });\r",
																			"\r",
																			"    let actualLtpList;\r",
																			"    actualLtpList = RESPONSE[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																			"\r",
																			"    pm.test(\"Received logical-termination-point is same as intial instance \", function () {\r",
																			"        pm.expect(actualLtpList).to.deep.equal(expectedLogicalTerminationPoint);\r",
																			"    });\r",
																			"\r",
																			"    let actualFcList;\r",
																			"    actualFcList = RESPONSE[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
																			"\r",
																			"    pm.test(\"Received forwarding-construct is same as intial instance \", function () {\r",
																			"        pm.expect(actualFcList).to.deep.equal(expectedForwardingConstruct);\r",
																			"    });\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Testing could not be executed.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "200",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														}
													],
													"description": "##Gets the fc-port updated for changes in forwarding-construct\n\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for op-s of /v1/regard-application, storing operation-key\n  - searching CC for op-s of /v1/disregard-application, storing operation-key\n- POST /v1/regard-application with\n  - dummy values generated for application-name, release-number, address, protocol, port\n  - operation-key from above\n  - reasonable parameter\n\n#### Testing:\n- checking for ResponseCode==204\n- GETing CC (/core-model-1-4:control-construct)\n- searching for forwarding-construct of   NewApplicationCausesRequestForInquiringOamRequestApprovals with logical-termination-point and verify that fc port present for dummy created application\n\n#### Clearing:\n- /v1/disregard-application with values according to generated dummy values.\n\n#### Clearance check:\n- Check if the logical-temination-point instance is the same as initial configuration\n- Check if the forwarding-construct is the same as initial value"
												}
											]
										},
										{
											"name": "Update LTP notified?",
											"item": [
												{
													"name": "client create",
													"item": [
														{
															"name": "reference /core-model-1-4:control-construct",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"console.log(\"\\n-----  /v1/regard-application acceptance -- Update LTP notified - client created -------------------------------\");\r",
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Environment variables could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																			"\r",
																			"    let REQUEST_BODY;\r",
																			"    REQUEST_BODY = \"\";\r",
																			"\r",
																			"    let AUTHORIZATION;\r",
																			"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var ltpList;\r",
																			"var fcList;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"    \r",
																			"    let responseCode;\r",
																			"    responseCode = parseInt(response.code);\r",
																			"    \r",
																			"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																			"        let responseObject;\r",
																			"        responseObject = JSON.parse(response.stream);\r",
																			"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																			"        fcList = responseObject[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
																			"\r",
																			"    } else {\r",
																			"        ltpList = [];\r",
																			"        fcList = [];\r",
																			"    }\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! ltpList could not be extracted.\");\r",
																			"}\r",
																			"\r",
																			"var currentOperationServer;\r",
																			"var disregardApplicationOperationServer;\r",
																			"var executionAndTraceLogHttpClientLtp;\r",
																			"var executionAndTraceLogTcpClientLtp;\r",
																			"var updateLtpOperationClientLtp;\r",
																			"var applicationLayerTopologyHttpClientLtp;\r",
																			"try {\r",
																			"    currentOperationServer = FindOperationServer(\"/v1/regard-application\", ltpList);\r",
																			"    disregardApplicationOperationServer = FindOperationServer(\"/v1/disregard-application\", ltpList);\r",
																			"\r",
																			"    //Execution And Trace Log\r",
																			"    let recordServiceRequestOperationClientLtp = FindOperationClientUsingCallback(\"ServiceRequestCausesLoggingRequest\", fcList, ltpList)\r",
																			"    executionAndTraceLogHttpClientLtp = FindServingLtp(recordServiceRequestOperationClientLtp, ltpList);\r",
																			"    executionAndTraceLogTcpClientLtp = FindServingLtp(executionAndTraceLogHttpClientLtp, ltpList);\r",
																			"\r",
																			"    //Ltp Update Request\r",
																			"    updateLtpOperationClientLtp = FindOperationClientUsingCallback(\"ServiceRequestCausesLtpUpdateRequest\", fcList, ltpList)\r",
																			"    applicationLayerTopologyHttpClientLtp = FindServingLtp(updateLtpOperationClientLtp, ltpList);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Reference objects could not be extracted.\");\r",
																			"} \r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.collectionVariables.clear();\r",
																			"    \r",
																			"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																			"    pm.collectionVariables.set(\"disregardApplicationOperationServer\", disregardApplicationOperationServer);\r",
																			"\r",
																			"    pm.collectionVariables.set(\"executionAndTraceLogHttpClientLtp\", executionAndTraceLogHttpClientLtp);\r",
																			"    pm.collectionVariables.set(\"executionAndTraceLogTcpClientLtp\", executionAndTraceLogTcpClientLtp);\r",
																			"\r",
																			"    pm.collectionVariables.set(\"updateLtpOperationClientLtp\", updateLtpOperationClientLtp);\r",
																			"    pm.collectionVariables.set(\"applicationLayerTopologyHttpClientLtp\", applicationLayerTopologyHttpClientLtp);\r",
																			"    \r",
																			"    pm.collectionVariables.set(\"ltpList\", ltpList);\r",
																			"    pm.collectionVariables.set(\"fcList\", fcList);\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Collection variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"function FindOperationServer(operationName, ltpList) {\r",
																			"    let operationServer;\r",
																			"    operationServer = \"\";\r",
																			"    try {\r",
																			"        let sampleUuid;\r",
																			"        for(let i=0; i<ltpList.length; i++) {\r",
																			"            sampleUuid = ltpList[i][\"uuid\"];\r",
																			"            if(sampleUuid.includes(\"op-s-\")) {\r",
																			"                let sampleOperationName;\r",
																			"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																			"                if(sampleOperationName == operationName) {\r",
																			"                    operationServer = ltpList[i];\r",
																			"                    return operationServer;\r",
																			"                }\r",
																			"            }\r",
																			"        }\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																			"    }\r",
																			"    return operationServer;\r",
																			"}\r",
																			"\r",
																			"function FindOutputFcPortList(forwardingName, fcList) {\r",
																			"    let outputFcPortList;\r",
																			"    outputFcPortList = [];\r",
																			"    try {\r",
																			"        for( let i=0; i<fcList.length; i++ ) {\r",
																			"            for(let j=0; j<fcList[i][\"name\"].length; j++) {               \r",
																			"                if(fcList[i][\"name\"][j][\"value\"] == forwardingName) {\r",
																			"                    fcPortList = fcList[i][\"fc-port\"];\r",
																			"                    for(let k=0;k<fcPortList.length;k++) {\r",
																			"                        if(fcPortList[k][\"port-direction\"] == \"core-model-1-4:PORT_DIRECTION_TYPE_OUTPUT\") {\r",
																			"                            outputFcPortList.push(fcPortList[k]);\r",
																			"                        }\r",
																			"                    }\r",
																			"                    return outputFcPortList;\r",
																			"                }\r",
																			"            }\r",
																			"        }\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																			"    }\r",
																			"    return outputFcPortList;\r",
																			"}\r",
																			"\r",
																			"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
																			"    let actualInstance;\r",
																			"    actualInstance = {};\r",
																			"    try {\r",
																			"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
																			"            let sampleUuid;\r",
																			"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
																			"            if( sampleUuid == expectedUuid ) {\r",
																			"                actualInstance = actualLtpList[i];\r",
																			"                return actualInstance;\r",
																			"            }\r",
																			"        }\r",
																			"\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																			"    }\r",
																			"    return undefined;\r",
																			"}\r",
																			"\r",
																			"function FindServingLtp(clientLtp, ltpList) {\r",
																			"    let servingLtp;\r",
																			"    servingLtp = {};\r",
																			"    try{\r",
																			"        let serverLtpUuid;\r",
																			"        serverLtpUuid = clientLtp[\"server-ltp\"][0];\r",
																			"        for( let i=0; i<ltpList.length; i++ ) {\r",
																			"            let sampleUuid;\r",
																			"            sampleUuid = ltpList[i][\"uuid\"];\r",
																			"            if( sampleUuid == serverLtpUuid ) {\r",
																			"                servingLtp = ltpList[i];\r",
																			"                return servingLtp;\r",
																			"            }\r",
																			"        }\r",
																			"    } catch(error) {\r",
																			"        console.log(error);\r",
																			"        console.log(\"! Exception in function : FindServingLtp. \")\r",
																			"    }\r",
																			"    return servingLtp;\r",
																			"}\r",
																			"\r",
																			"function FindOperationClientUsingCallback(callback, fcList, ltpList) {\r",
																			"    let operationClientLtp;\r",
																			"    try {\r",
																			"        let outputFcPortList = FindOutputFcPortList(callback, fcList);\r",
																			"        let randomOutputFcPort = outputFcPortList[Math.floor(Math.random() * outputFcPortList.length)];\r",
																			"        let outputLtpUuid = randomOutputFcPort[\"logical-termination-point\"];\r",
																			"        operationClientLtp = FindActualInstanceByUuid(outputLtpUuid, ltpList);\r",
																			"    } catch (error) {\r",
																			"        console.log(error);\r",
																			"        console.log(\"! Exception in function FindOperationClientUsingCallback. \");\r",
																			"    }\r",
																			"    return  operationClientLtp\r",
																			"}\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "GET",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "200",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "reference ExecutionAndTraceLog/core-model-1-4:control-construct",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"var AUTHORIZATION;\r",
																			"var applicationProtocol;\r",
																			"var applicationAddress;\r",
																			"var applicationPort;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"    let executionAndTraceLogTcpClientLtp;\r",
																			"    executionAndTraceLogTcpClientLtp = pm.collectionVariables.get(\"executionAndTraceLogTcpClientLtp\");\r",
																			"\r",
																			"    applicationProtocol = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																			"    applicationProtocol = applicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																			"    applicationAddress = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																			"    if(applicationAddress.hasOwnProperty(\"ip-address\")) {\r",
																			"        applicationAddress = applicationAddress[\"ip-address\"][\"ipv-4-address\"];\r",
																			"    } else {\r",
																			"        applicationAddress = applicationAddress[\"domain-name\"];\r",
																			"    }\r",
																			"    applicationPort = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																			" \r",
																			"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Environment variables could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Request Body\r",
																			"****************************************************************************************/\r",
																			"var REQUEST_BODY;\r",
																			"try {\r",
																			"    REQUEST_BODY = \"\";\r",
																			"} catch (error) {\r",
																			"    console.log(\"!Could not define request body. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = applicationProtocol + \"://\" + applicationAddress + \":\" + applicationPort + \"/core-model-1-4:control-construct\";\r",
																			"    //URI = \"http://9d098835-4e91-48f3-9761-04a82ff2843e.mock.pstmn.io\" + \"/core-model-1-4:control-construct\";\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var ltpList;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"    \r",
																			"    let responseCode;\r",
																			"    responseCode = parseInt(response.code);\r",
																			"    \r",
																			"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																			"        let responseObject;\r",
																			"        responseObject = JSON.parse(response.stream);\r",
																			"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																			"\r",
																			"    } else {\r",
																			"        ltpList = [];\r",
																			"    }\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! ltpList could not be extracted.\");\r",
																			"}\r",
																			"\r",
																			"var listRecordsOfFlowOperationKey;\r",
																			"try {\r",
																			"    listRecordsOfFlowOperationKey = FindOperationKeyForOperationName(\"/v1/list-records-of-flow\", ltpList);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Reference objects could not be extracted.\");\r",
																			"} \r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.collectionVariables.set(\"listRecordsOfFlowOperationKey\", listRecordsOfFlowOperationKey);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Collection variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"function FindOperationKeyForOperationName(operationName, ltpList) {\r",
																			"    let operationKey;\r",
																			"    operationKey = \"\";\r",
																			"    try {\r",
																			"         let sampleUuid;\r",
																			"         for ( let i=0; i<ltpList.length; i++) {\r",
																			"            sampleUuid = ltpList[i][\"uuid\"];\r",
																			"            if(sampleUuid.includes(\"op-s-\")){\r",
																			"                let sampleOperationName;\r",
																			"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																			"                if(sampleOperationName == operationName) {\r",
																			"                    operationKey = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																			"                    return operationKey; \r",
																			"                }\r",
																			"            }\r",
																			"         }\r",
																			"\r",
																			"    } catch (error) {\r",
																			"        console.log(\" ! Exception in function : FindOperationKeyForOperationName\")\r",
																			"    }\r",
																			"    return operationKey;\r",
																			"}\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "200",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Dummy /v1/regard-application - application created?",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"var OPERATION_KEY;\r",
																			"var CURRENT_ORIGINATOR;\r",
																			"var dummyApplicationName;\r",
																			"var dummyReleaseNumber;\r",
																			"var dummyProtocol;\r",
																			"var dummyAddress;\r",
																			"var dummyPort;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"    let ltpList;\r",
																			"    ltpList = APPLICATION[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																			"\r",
																			"    CURRENT_ORIGINATOR = FindHttpServerApplicationName(ltpList);\r",
																			"\r",
																			"    let currentOperationServer;\r",
																			"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																			"    \r",
																			"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																			"\r",
																			"    dummyApplicationName = GenerateRandomString(12);\r",
																			"    dummyReleaseNumber = RandomReleaseNumber();\r",
																			"\r",
																			"    dummyProtocol = RandomProtocol();\r",
																			"    \r",
																			"    dummyIpv4Address = RandomIpAddress();\r",
																			"    dummyAddress = {\r",
																			"        \"ip-address\": {\r",
																			"            \"ipv-4-address\": dummyIpv4Address\r",
																			"        }\r",
																			"    };\r",
																			"    dummyPort = RandomTcpPort();\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Input Data could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Dummy Parameters\r",
																			"****************************************************************************************/\r",
																			"var USER_NAME;\r",
																			"var ORIGINATOR;\r",
																			"var X_CORRELATOR;\r",
																			"var TRACE_INDICATOR;\r",
																			"var CUSTOMER_JOURNEY;\r",
																			"try {\r",
																			"    USER_NAME = APPLICATION.userName;\r",
																			"    ORIGINATOR = \"Postman\";\r",
																			"    X_CORRELATOR = CreateXCorrelator();\r",
																			"    TRACE_INDICATOR = \"1\";\r",
																			"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																			"    \r",
																			"} catch (error) {\r",
																			"    console.log(\"! Could not define dummy values for parameters. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Request Body\r",
																			"****************************************************************************************/\r",
																			"var REQUEST_BODY;\r",
																			"try {\r",
																			"    REQUEST_BODY = '{'\r",
																			"        + '\"application-name\" : ' + '\"' + dummyApplicationName + '\",'\r",
																			"        + '\"release-number\" : ' + '\"' + dummyReleaseNumber + '\",'\r",
																			"        + '\"protocol\" : ' + '\"' + dummyProtocol + '\",'\r",
																			"        + '\"address\" : ' + JSON.stringify(dummyAddress) + ','\r",
																			"        + '\"port\" : ' +  dummyPort\r",
																			"    +'}';\r",
																			"} catch (error) {\r",
																			"    console.log(\"!Could not define request body. \");\r",
																			"}\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.collectionVariables.set(\"user\", USER_NAME);\r",
																			"    pm.collectionVariables.set(\"originator\", ORIGINATOR);\r",
																			"    pm.collectionVariables.set(\"xCorrelator\", X_CORRELATOR);\r",
																			"    pm.collectionVariables.set(\"traceIndicator\", TRACE_INDICATOR);\r",
																			"    pm.collectionVariables.set(\"customerJourney\", CUSTOMER_JOURNEY);\r",
																			"    pm.collectionVariables.set(\"currentOriginator\", CURRENT_ORIGINATOR);\r",
																			"    \r",
																			"    pm.collectionVariables.set(\"dummyApplicationName\", dummyApplicationName);\r",
																			"    pm.collectionVariables.set(\"dummyReleaseNumber\", dummyReleaseNumber);\r",
																			"    pm.collectionVariables.set(\"dummyProtocol\", dummyProtocol);\r",
																			"    pm.collectionVariables.set(\"dummyAddress\", dummyAddress);\r",
																			"    pm.collectionVariables.set(\"dummyPort\", dummyPort);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Collection variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + \"/v1/regard-application\";\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																			"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																			"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																			"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																			"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"function CreateXCorrelator() {\r",
																			"    let xCorrelator;\r",
																			"    xCorrelator = \"\";\r",
																			"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(12);\r",
																			"    return xCorrelator;\r",
																			"}\r",
																			"\r",
																			"function GenerateRandomHexString(length) {\r",
																			"    var randomRandomHexString = \"\";\r",
																			"    while (randomRandomHexString.length < length) {\r",
																			"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																			"    }\r",
																			"    return randomRandomHexString.substring(0,length);\r",
																			"}\r",
																			"\r",
																			"function GenerateRandomString(length) {\r",
																			"    let randomString;\r",
																			"    randomString = \"\";\r",
																			"    try {\r",
																			"        let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r",
																			"        let charactersLength = characters.length;\r",
																			"        for (let i = 0; i < length; i++) {\r",
																			"            randomString += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																			"        }\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Could not generate random string. \");\r",
																			"    }\r",
																			"    return randomString;\r",
																			"}\r",
																			"\r",
																			"function RandomReleaseNumber() {\r",
																			"    let releaseNumber;\r",
																			"    let releaseNumberParts = [];\r",
																			"    for  (let i=0; i<3 ; i++) {\r",
																			"        releaseNumberParts[i] = Math.floor(Math.random() * 10);\r",
																			"    }\r",
																			"    releaseNumber = releaseNumberParts[0] + \".\" + releaseNumberParts[1] + \".\" + releaseNumberParts[2];\r",
																			"    return releaseNumber;\r",
																			"}\r",
																			"\r",
																			"function RandomIpAddress() {\r",
																			"    let randomAddress\r",
																			"    let addressParts = [];\r",
																			"    for ( let i=0; i<4; i++ ) {\r",
																			"        addressParts[i] = String(Math.floor(Math.random() * 256));\r",
																			"    }\r",
																			"    randomAddress = addressParts[0] + \".\" + addressParts[1] + \".\" + addressParts[2] + \".\" + addressParts[3];\r",
																			"    return randomAddress;\r",
																			"}\r",
																			"\r",
																			"function RandomTcpPort() {\r",
																			"    let randomPort;\r",
																			"    randomPort = 2000 + Math.floor( Math.random() * 1000 );\r",
																			"    return randomPort;\r",
																			"}\r",
																			"\r",
																			"function FindHttpServerApplicationName(ltpList) {\r",
																			"    let applicationName;\r",
																			"    applicationName = \"\";\r",
																			"    for( let i=0; i<ltpList.length; i++ ) {\r",
																			"        let sampleUuid;\r",
																			"        sampleUuid = ltpList[i][\"uuid\"];\r",
																			"        if(sampleUuid.includes(\"http-s-\")) {\r",
																			"            applicationName = ltpList[i][\"layer-protocol\"][0][\"http-server-interface-1-0:http-server-interface-pac\"][\"http-server-interface-capability\"][\"application-name\"];\r",
																			"            return applicationName;\r",
																			"        }\r",
																			"    }\r",
																			"    return applicationName;\r",
																			"}\r",
																			"\r",
																			"function RandomProtocol() {\r",
																			"    let protocolList;\r",
																			"    protocolList = [  \"HTTP\", \"HTTPS\" ];\r",
																			"    let protocolIndex = Math.floor(Math.random() * protocolList.length);\r",
																			"    let randomProtocol = protocolList[protocolIndex]; \r",
																			"\r",
																			"    return randomProtocol;\r",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var RESPONSE_CODE;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"\r",
																			"    RESPONSE_CODE = parseInt(response.code);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Response Code could not be extracted.\");\r",
																			"}    \r",
																			"\r",
																			"const currentCount = 0;\r",
																			"try {\r",
																			"\tpm.collectionVariables.set(\"currentCount\", currentCount);\r",
																			"\r",
																			"} catch(error) {\r",
																			"    console.log(\" !Could not set currentCount. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Testing\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.test(\"POST /v1/regard-application responds 204\", function () {\r",
																			"        pm.expect(RESPONSE_CODE).to.equal(204);\r",
																			"    });\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Testing could not be executed.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "204",
																		"type": "default"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Expected ExecutionAndTraceLog/v1/list-records-of-flow for /v1/regard-application:: Update LTP notified? client create",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"var OPERATION_KEY;\r",
																			"var applicationProtocol;\r",
																			"var applicationAddress;\r",
																			"var applicationPort;\r",
																			"var xCorrelatorUnderTest;\r",
																			"var latestMatch;\r",
																			"var numberOfRecords;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"    let executionAndTraceLogTcpClientLtp;\r",
																			"    executionAndTraceLogTcpClientLtp = pm.collectionVariables.get(\"executionAndTraceLogTcpClientLtp\");\r",
																			"    \r",
																			"    applicationProtocol = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																			"    applicationProtocol = applicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																			"    applicationAddress = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																			"    if(applicationAddress.hasOwnProperty(\"ip-address\")) {\r",
																			"        applicationAddress = applicationAddress[\"ip-address\"][\"ipv-4-address\"];\r",
																			"    } else {\r",
																			"        applicationAddress = applicationAddress[\"domain-name\"];\r",
																			"    }\r",
																			"    applicationPort = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																			"\r",
																			"    OPERATION_KEY = pm.collectionVariables.get(\"listRecordsOfFlowOperationKey\");\r",
																			"    xCorrelatorUnderTest = pm.collectionVariables.get(\"xCorrelator\");\r",
																			"    latestMatch = 0;\r",
																			"    numberOfRecords = 100;\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error)\r",
																			"    console.log(\"! Input Data could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Dummy Parameters\r",
																			"****************************************************************************************/\r",
																			"var USER_NAME;\r",
																			"var ORIGINATOR;\r",
																			"var X_CORRELATOR;\r",
																			"var TRACE_INDICATOR;\r",
																			"var CUSTOMER_JOURNEY;\r",
																			"try {\r",
																			"    USER_NAME = APPLICATION.userName;\r",
																			"    ORIGINATOR = \"Postman\";\r",
																			"    X_CORRELATOR = CreateXCorrelator();\r",
																			"    TRACE_INDICATOR = \"1\";\r",
																			"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																			"    \r",
																			"} catch (error) {\r",
																			"    console.log(\"! Could not define dummy values for parameters. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Request Body\r",
																			"****************************************************************************************/\r",
																			"var REQUEST_BODY;\r",
																			"try {\r",
																			"    REQUEST_BODY = '{'\r",
																			"                + '\"x-correlator\": \"' + xCorrelatorUnderTest +'\",'\r",
																			"                + '\"latest-match\": ' + latestMatch + ','\r",
																			"                + '\"number-of-records\":' + numberOfRecords\r",
																			"                + '}';\r",
																			"} catch (error) {\r",
																			"    console.log(\"!Could not define request body. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = applicationProtocol + \"://\" + applicationAddress + \":\" + applicationPort + \"/v1/list-records-of-flow\";\r",
																			"    //URI = \"http://9d098835-4e91-48f3-9761-04a82ff2843e.mock.pstmn.io/v1/list-records-of-flow\";\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																			"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																			"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																			"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																			"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"function CreateXCorrelator() {\r",
																			"    let xCorrelator;\r",
																			"    xCorrelator = \"\";\r",
																			"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(12);\r",
																			"    return xCorrelator;\r",
																			"}\r",
																			"\r",
																			"function GenerateRandomHexString(length) {\r",
																			"    var randomRandomHexString = \"\";\r",
																			"    while (randomRandomHexString.length < length) {\r",
																			"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																			"    }\r",
																			"    return randomRandomHexString.substring(0, length);\r",
																			"}\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Constant variables\r",
																			"****************************************************************************************/\r",
																			"const SERIAL_TRACE_INDICATOR = \".1\";\r",
																			"var retryMaxCount;\r",
																			"var retryWaitingPeriod;\r",
																			"var currentCount;\r",
																			"try {\r",
																			"    retryMaxCount = pm.environment.get(\"retryMaxCount\");\r",
																			"    retryWaitingPeriod = pm.environment.get(\"retryWaitingPeriod\");\r",
																			"    currentCount = pm.collectionVariables.get(\"currentCount\");\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Could not load constant variables Data. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var expectedXCorrelator;\r",
																			"var expectedUser;\r",
																			"var expectedOriginator;\r",
																			"var expectedTraceIndicator;\r",
																			"var expectedApplicationName;\r",
																			"var expectedReleaseNumber;\r",
																			"var expectedOperationName;\r",
																			"try {\r",
																			"    expectedXCorrelator = pm.collectionVariables.get(\"xCorrelator\");\r",
																			"    expectedUser = pm.collectionVariables.get(\"user\");\r",
																			"    expectedOriginator = pm.collectionVariables.get(\"currentOriginator\");\r",
																			"    expectedTraceIndicator = pm.collectionVariables.get(\"traceIndicator\");\r",
																			"\r",
																			"    //Increment traceIndicator:\r",
																			"    expectedTraceIndicator = expectedTraceIndicator + SERIAL_TRACE_INDICATOR;\r",
																			"\r",
																			"    let expectedHttpClientLtp;\r",
																			"    expectedHttpClientLtp = pm.collectionVariables.get(\"applicationLayerTopologyHttpClientLtp\");\r",
																			"    expectedApplicationName = expectedHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																			"    expectedReleaseNumber = expectedHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																			"\r",
																			"    let expectedOperationClient;\r",
																			"    expectedOperationClient = pm.collectionVariables.get(\"updateLtpOperationClientLtp\");\r",
																			"    expectedOperationName = expectedOperationClient[\"layer-protocol\"][0][\"operation-client-interface-1-0:operation-client-interface-pac\"][\"operation-client-interface-configuration\"][\"operation-name\"];\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Could not load Input Data. \");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var RESPONSE_CODE;\r",
																			"var serviceRecordList;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"    \r",
																			"    RESPONSE_CODE = parseInt(response.code);\r",
																			"\r",
																			"    if(Math.floor(RESPONSE_CODE/100) === 2) {\r",
																			"        serviceRecordList = JSON.parse(response.stream);\r",
																			"    }\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Response Code could not be extracted.\");\r",
																			"}    \r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Testing\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.test(\"POST ExecutionAndTraceLog/v1/list-records-of-flow responds 200\", function () {\r",
																			"        pm.expect(RESPONSE_CODE).to.equal(200);\r",
																			"    });\r",
																			"\r",
																			"    let foundAnEntryWithTheExpectedHeaderValuesInEatl;\r",
																			"    foundAnEntryWithTheExpectedHeaderValuesInEatl = false;\r",
																			"    let responseCodeofTriggeredForwarding;\r",
																			"    responseCodeofTriggeredForwarding = 0;\r",
																			"    for(let i=0; i<serviceRecordList.length; i++)  {\r",
																			"        if( serviceRecordList[i][\"application-name\"] == expectedApplicationName\r",
																			"                && serviceRecordList[i][\"release-number\"] == expectedReleaseNumber\r",
																			"                && serviceRecordList[i][\"operation-name\"] == expectedOperationName\r",
																			"                && serviceRecordList[i][\"x-correlator\"] == expectedXCorrelator\r",
																			"                && serviceRecordList[i][\"user\"] == expectedUser\r",
																			"                && serviceRecordList[i][\"originator\"] == expectedOriginator\r",
																			"                && serviceRecordList[i][\"trace-indicator\"] == expectedTraceIndicator ) {\r",
																			"\r",
																			"            foundAnEntryWithTheExpectedHeaderValuesInEatl = true;\r",
																			"            responseCodeofTriggeredForwarding =  serviceRecordList[i][\"response-code\"];\r",
																			"            break;\r",
																			"        }\r",
																			"    }\r",
																			"\r",
																			"    if (foundAnEntryWithTheExpectedHeaderValuesInEatl == false) {\r",
																			"        if( (currentCount < retryMaxCount) ) {\r",
																			"            setTimeout(()=>{\r",
																			"                postman.setNextRequest(request.name);\r",
																			"                currentCount = currentCount + 1;\r",
																			"                pm.collectionVariables.set(\"currentCount\", currentCount);\r",
																			"            }, retryWaitingPeriod);\r",
																			"        } else {\r",
																			"            pm.test(\"Update in LTP is successfully notified to ALT\", function () {\r",
																			"                pm.expect(foundAnEntryWithTheExpectedHeaderValuesInEatl).to.be.true;        \r",
																			"            });\r",
																			"        }\r",
																			"    } else {\r",
																			"        pm.test(\"Update in LTP is successfully notified to ALT with response-code 204\", function () {\r",
																			"            pm.expect(responseCodeofTriggeredForwarding).to.equal(204);    \r",
																			"        });\r",
																			"    }\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Testing could not be executed.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "200",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Dummy /v1/disregard-application",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"var OPERATION_KEY;\r",
																			"var dummyApplicationName;\r",
																			"var dummyReleaseNumber;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"    let currentOperationServer;\r",
																			"    currentOperationServer = pm.collectionVariables.get(\"disregardApplicationOperationServer\");\r",
																			"    \r",
																			"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																			"\r",
																			"    dummyApplicationName = pm.collectionVariables.get(\"dummyApplicationName\");\r",
																			"    dummyReleaseNumber = pm.collectionVariables.get(\"dummyReleaseNumber\");\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Input Data could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Dummy Parameters\r",
																			"****************************************************************************************/\r",
																			"var USER_NAME;\r",
																			"var ORIGINATOR;\r",
																			"var X_CORRELATOR;\r",
																			"var TRACE_INDICATOR;\r",
																			"var CUSTOMER_JOURNEY;\r",
																			"try {\r",
																			"    USER_NAME = APPLICATION.userName;\r",
																			"    ORIGINATOR = \"Postman\";\r",
																			"    X_CORRELATOR = CreateXCorrelator();\r",
																			"    TRACE_INDICATOR = \"1\";\r",
																			"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																			"    \r",
																			"} catch (error) {\r",
																			"    console.log(\"! Could not define dummy values for parameters. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Request Body\r",
																			"****************************************************************************************/\r",
																			"var REQUEST_BODY;\r",
																			"try {\r",
																			"    REQUEST_BODY = '{'\r",
																			"        + '\"application-name\" : ' + '\"' + dummyApplicationName + '\",'\r",
																			"        + '\"release-number\" : ' + '\"' + dummyReleaseNumber + '\"'\r",
																			"    +'}';\r",
																			"} catch (error) {\r",
																			"    console.log(\"!Could not define request body. \");\r",
																			"}\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + \"/v1/disregard-application\";\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																			"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																			"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																			"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																			"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"function CreateXCorrelator() {\r",
																			"    let xCorrelator;\r",
																			"    xCorrelator = \"\";\r",
																			"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(12);\r",
																			"    return xCorrelator;\r",
																			"}\r",
																			"\r",
																			"function GenerateRandomHexString(length) {\r",
																			"    var randomRandomHexString = \"\";\r",
																			"    while (randomRandomHexString.length < length) {\r",
																			"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																			"    }\r",
																			"    return randomRandomHexString.substring(0,length);\r",
																			"}\r",
																			"\r",
																			"function GenerateRandomString(length) {\r",
																			"    let randomString;\r",
																			"    randomString = \"\";\r",
																			"    try {\r",
																			"        let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r",
																			"        let charactersLength = characters.length;\r",
																			"        for (let i = 0; i < length; i++) {\r",
																			"            randomString += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																			"        }\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Could not generate random string. \");\r",
																			"    }\r",
																			"    return randomString;\r",
																			"}\r",
																			"\r",
																			"function RandomReleaseNumber() {\r",
																			"    let releaseNumber;\r",
																			"    let releaseNumberParts = [];\r",
																			"    for  (let i=0; i<3 ; i++) {\r",
																			"        releaseNumberParts[i] = Math.floor(Math.random() * 10);\r",
																			"    }\r",
																			"    releaseNumber = releaseNumberParts[0] + \".\" + releaseNumberParts[1] + \".\" + releaseNumberParts[2];\r",
																			"    return releaseNumber;\r",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "POST",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "204",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Check /core-model-1-4:control-construct",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"var AUTHORIZATION;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																			"\r",
																			"    oamPath = \"/core-model-1-4:control-construct\";\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Environment variables could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Request Body\r",
																			"****************************************************************************************/\r",
																			"var REQUEST_BODY;\r",
																			"try {\r",
																			"    REQUEST_BODY = \"\";\r",
																			"} catch (error) {\r",
																			"    console.log(\"!Could not define request body. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + oamPath;\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var expectedLogicalTerminationPoint;\r",
																			"var expectedForwardingConstruct;\r",
																			"try {\r",
																			"    expectedLogicalTerminationPoint = pm.collectionVariables.get(\"ltpList\");\r",
																			"    expectedForwardingConstruct = pm.collectionVariables.get(\"fcList\");\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Collection variables could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var RESPONSE_CODE;\r",
																			"var RESPONSE;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"\r",
																			"    RESPONSE_CODE = parseInt(response.code);\r",
																			"\r",
																			"    if (Math.floor(RESPONSE_CODE / 100) === 2) {\r",
																			"        RESPONSE = JSON.parse(response.stream);\r",
																			"    } else {\r",
																			"        RESPONSE = [];\r",
																			"    }\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Result value lists could not be extracted.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Testing\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.test(\"GET /core-model-1-4:control-construct responds 200\", function () {\r",
																			"        pm.expect(RESPONSE_CODE).to.equal(200);\r",
																			"    });\r",
																			"\r",
																			"    let actualLtpList;\r",
																			"    actualLtpList = RESPONSE[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																			"\r",
																			"    pm.test(\"Received logical-termination-point is same as intial instance \", function () {\r",
																			"        pm.expect(actualLtpList).to.deep.equal(expectedLogicalTerminationPoint);\r",
																			"    });\r",
																			"\r",
																			"    let actualFcList;\r",
																			"    actualFcList = RESPONSE[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
																			"\r",
																			"    pm.test(\"Received forwarding-construct is same as intial instance \", function () {\r",
																			"        pm.expect(actualFcList).to.deep.equal(expectedForwardingConstruct);\r",
																			"    });\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Testing could not be executed.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "200",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														}
													],
													"description": "##Gets application-create trigger update-ltp to ALT?\n#### Requires:\n- ExecutionAndTraceLog/OamLog server to operate\n\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  -  search CC for output fc-port of ServiceRequestCausesLoggingRequest, \nits corresponding op-c, http-c and tcp-c, storing them for later verification request. \n  - searching CC for output-fc-port of ServiceRequestCausesLtpUpdateRequest, its corresponding op-c, http-c, storing them.\n  - searching CC for op-s of /v1/regard-application and /v1/disregard-application, storing operation-key\n- GETting EaTL/CC (while using IP, protocol and port from above)\n  - searching CC for op-c of /v1/list-records-of-flow, storing operation-key\n- POST /v1/regard-application with\n  - dummy values generated for application-name, release-number, address, port, port \n  - operation-key from above\n  - reasonable parameter\n\n#### Testing:\n- POST ExecutionAndTraceLog/v1/list-records-of-flow with \n   - IP and port from above\n   - operation-key from above\n   - DummyValue of x-correlator\n   - checking response for entry with application data from ServiceRequestCausesLtpUpdateRequest\n   - checking same record for containing DummyXCorrelator &DummyTraceIndicator\n\n#### Clearing:\n- /v1/disregard-application with values according to generated dummy values.\n\n#### Clearance check:\n- Check if the logical-termination-point instance is the same as initial configuration\n- Check if the forwarding-construct instance is the same as initial configuration"
												},
												{
													"name": "protocol update",
													"item": [
														{
															"name": "reference /core-model-1-4:control-construct Copy",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"console.log(\"\\n-----  /v1/regard-application acceptance -- protocol attribute update notified to ALT -------------------------------\");\r",
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Environment variables could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																			"\r",
																			"    let REQUEST_BODY;\r",
																			"    REQUEST_BODY = \"\";\r",
																			"\r",
																			"    let AUTHORIZATION;\r",
																			"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var ltpList;\r",
																			"var fcList;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"    \r",
																			"    let responseCode;\r",
																			"    responseCode = parseInt(response.code);\r",
																			"    \r",
																			"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																			"        let responseObject;\r",
																			"        responseObject = JSON.parse(response.stream);\r",
																			"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																			"        fcList = responseObject[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
																			"\r",
																			"    } else {\r",
																			"        ltpList = [];\r",
																			"        fcList = [];\r",
																			"    }\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! ltpList could not be extracted.\");\r",
																			"}\r",
																			"\r",
																			"var currentOperationServer;\r",
																			"var executionAndTraceLogHttpClientLtp;\r",
																			"var executionAndTraceLogTcpClientLtp;\r",
																			"var httpClientLtp;\r",
																			"var tcpClientLtp;\r",
																			"var updateLtpOperationClientLtp;\r",
																			"var applicationLayerTopologyHttpClientLtp;\r",
																			"try {\r",
																			"    currentOperationServer = FindOperationServer(\"/v1/regard-application\", ltpList);\r",
																			"\r",
																			"    //Execution And Trace Log\r",
																			"    let recordServiceRequestOperationClientLtp = FindOperationClientUsingCallback(\"ServiceRequestCausesLoggingRequest\", fcList, ltpList)\r",
																			"    executionAndTraceLogHttpClientLtp = FindServingLtp(recordServiceRequestOperationClientLtp, ltpList);\r",
																			"    executionAndTraceLogTcpClientLtp = FindServingLtp(executionAndTraceLogHttpClientLtp, ltpList);\r",
																			"\r",
																			"    //Ltp Update Request\r",
																			"    updateLtpOperationClientLtp = FindOperationClientUsingCallback(\"ServiceRequestCausesLtpUpdateRequest\", fcList, ltpList)\r",
																			"    applicationLayerTopologyHttpClientLtp = FindServingLtp(updateLtpOperationClientLtp, ltpList);\r",
																			"\r",
																			"    //Inquiring OAM approvals\r",
																			"    let outputFcPortListInquireOamRequestApprovals;\r",
																			"    outputFcPortListInquireOamRequestApprovals = FindOutputFcPortList(\"NewApplicationCausesRequestForInquiringOamRequestApprovals\", fcList);\r",
																			"    let ltpInstance = FindRandomLtpInstancesFromFc(outputFcPortListInquireOamRequestApprovals, ltpList)\r",
																			"    httpClientLtp = ltpInstance.httpClientLtp;\r",
																			"    tcpClientLtp = FindServingLtp(httpClientLtp, ltpList);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Reference objects could not be extracted.\");\r",
																			"} \r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.collectionVariables.clear();\r",
																			"    \r",
																			"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																			"\r",
																			"    pm.collectionVariables.set(\"executionAndTraceLogHttpClientLtp\", executionAndTraceLogHttpClientLtp);\r",
																			"    pm.collectionVariables.set(\"executionAndTraceLogTcpClientLtp\", executionAndTraceLogTcpClientLtp);\r",
																			"    \r",
																			"    pm.collectionVariables.set(\"httpClientLtp\", httpClientLtp);\r",
																			"    pm.collectionVariables.set(\"tcpClientLtp\", tcpClientLtp);\r",
																			"\r",
																			"    pm.collectionVariables.set(\"applicationLayerTopologyHttpClientLtp\", applicationLayerTopologyHttpClientLtp);\r",
																			"    pm.collectionVariables.set(\"updateLtpOperationClientLtp\", updateLtpOperationClientLtp);\r",
																			"    \r",
																			"    pm.collectionVariables.set(\"ltpList\", ltpList);\r",
																			"    pm.collectionVariables.set(\"fcList\", fcList);\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Collection variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"function FindOperationServer(operationName, ltpList) {\r",
																			"    let operationServer;\r",
																			"    operationServer = \"\";\r",
																			"    try {\r",
																			"        let sampleUuid;\r",
																			"        for(let i=0; i<ltpList.length; i++) {\r",
																			"            sampleUuid = ltpList[i][\"uuid\"];\r",
																			"            if(sampleUuid.includes(\"op-s-\")) {\r",
																			"                let sampleOperationName;\r",
																			"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																			"                if(sampleOperationName == operationName) {\r",
																			"                    operationServer = ltpList[i];\r",
																			"                    return operationServer;\r",
																			"                }\r",
																			"            }\r",
																			"        }\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																			"    }\r",
																			"    return operationServer;\r",
																			"}\r",
																			"\r",
																			"function FindRandomLtpInstancesFromFc(outputFcPortList, ltpList) {\r",
																			"    let ltpInstance = {};\r",
																			"    try {\r",
																			"        for ( let i=0; i<outputFcPortList.length; i++ ) {\r",
																			"            let randomOutputFcPort = outputFcPortList[Math.floor(Math.random() * outputFcPortList.length)];\r",
																			"            let outputLtpUuid = randomOutputFcPort[\"logical-termination-point\"];\r",
																			"            let operationClientLtp = FindActualInstanceByUuid(outputLtpUuid, ltpList);\r",
																			"\r",
																			"            let httpClientLtp = FindServingLtp(operationClientLtp, ltpList);\r",
																			"            let sampleApplicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																			"\r",
																			"            if (sampleApplicationName != \"AdministratorAdministration\") {\r",
																			"\t\t\t\tltpInstance = { httpClientLtp, operationClientLtp };\r",
																			"                break;\r",
																			"            }\r",
																			"        }\r",
																			"    } catch(error) {\r",
																			"        console.log(error);\r",
																			"        console.log(\"! Exception in function : FindRandomLtpInstancesFromFc. \")\r",
																			"    } \r",
																			"    return ltpInstance;\r",
																			"}\r",
																			"\r",
																			"function FindOutputFcPortList(forwardingName, fcList) {\r",
																			"    let outputFcPortList;\r",
																			"    outputFcPortList = [];\r",
																			"    try {\r",
																			"        for( let i=0; i<fcList.length; i++ ) {\r",
																			"            for(let j=0; j<fcList[i][\"name\"].length; j++) {               \r",
																			"                if(fcList[i][\"name\"][j][\"value\"] == forwardingName) {\r",
																			"                    fcPortList = fcList[i][\"fc-port\"];\r",
																			"                    for(let k=0;k<fcPortList.length;k++) {\r",
																			"                        if(fcPortList[k][\"port-direction\"] == \"core-model-1-4:PORT_DIRECTION_TYPE_OUTPUT\") {\r",
																			"                            outputFcPortList.push(fcPortList[k]);\r",
																			"                        }\r",
																			"                    }\r",
																			"                    return outputFcPortList;\r",
																			"                }\r",
																			"            }\r",
																			"        }\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																			"    }\r",
																			"    return outputFcPortList;\r",
																			"}\r",
																			"\r",
																			"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
																			"    let actualInstance;\r",
																			"    actualInstance = {};\r",
																			"    try {\r",
																			"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
																			"            let sampleUuid;\r",
																			"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
																			"            if( sampleUuid == expectedUuid ) {\r",
																			"                actualInstance = actualLtpList[i];\r",
																			"                return actualInstance;\r",
																			"            }\r",
																			"        }\r",
																			"\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																			"    }\r",
																			"    return undefined;\r",
																			"}\r",
																			"\r",
																			"function FindServingLtp(clientLtp, ltpList) {\r",
																			"    let servingLtp;\r",
																			"    servingLtp = {};\r",
																			"    try{\r",
																			"        let serverLtpUuid;\r",
																			"        serverLtpUuid = clientLtp[\"server-ltp\"][0];\r",
																			"        for( let i=0; i<ltpList.length; i++ ) {\r",
																			"            let sampleUuid;\r",
																			"            sampleUuid = ltpList[i][\"uuid\"];\r",
																			"            if( sampleUuid == serverLtpUuid ) {\r",
																			"                servingLtp = ltpList[i];\r",
																			"                return servingLtp;\r",
																			"            }\r",
																			"        }\r",
																			"    } catch(error) {\r",
																			"        console.log(error);\r",
																			"        console.log(\"! Exception in function : FindServingLtp. \")\r",
																			"    }\r",
																			"    return servingLtp;\r",
																			"}\r",
																			"\r",
																			"function FindOperationClientUsingCallback(callback, fcList, ltpList) {\r",
																			"    let operationClientLtp;\r",
																			"    try {\r",
																			"        let outputFcPortList = FindOutputFcPortList(callback, fcList);\r",
																			"        let randomOutputFcPort = outputFcPortList[Math.floor(Math.random() * outputFcPortList.length)];\r",
																			"        let outputLtpUuid = randomOutputFcPort[\"logical-termination-point\"];\r",
																			"        operationClientLtp = FindActualInstanceByUuid(outputLtpUuid, ltpList);\r",
																			"    } catch (error) {\r",
																			"        console.log(error);\r",
																			"        console.log(\"! Exception in function FindOperationClientUsingCallback. \");\r",
																			"    }\r",
																			"    return  operationClientLtp\r",
																			"}\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "GET",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "200",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "reference ExecutionAndTraceLog/core-model-1-4:control-construct",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"var AUTHORIZATION;\r",
																			"var applicationProtocol;\r",
																			"var applicationAddress;\r",
																			"var applicationPort;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"    let executionAndTraceLogTcpClientLtp;\r",
																			"    executionAndTraceLogTcpClientLtp = pm.collectionVariables.get(\"executionAndTraceLogTcpClientLtp\");\r",
																			"\r",
																			"    applicationProtocol = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																			"    applicationProtocol = applicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																			"    applicationAddress = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																			"    if(applicationAddress.hasOwnProperty(\"ip-address\")) {\r",
																			"        applicationAddress = applicationAddress[\"ip-address\"][\"ipv-4-address\"];\r",
																			"    } else {\r",
																			"        applicationAddress = applicationAddress[\"domain-name\"];\r",
																			"    }\r",
																			"    applicationPort = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																			" \r",
																			"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Environment variables could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Request Body\r",
																			"****************************************************************************************/\r",
																			"var REQUEST_BODY;\r",
																			"try {\r",
																			"    REQUEST_BODY = \"\";\r",
																			"} catch (error) {\r",
																			"    console.log(\"!Could not define request body. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = applicationProtocol + \"://\" + applicationAddress + \":\" + applicationPort + \"/core-model-1-4:control-construct\";\r",
																			"    //URI = \"http://9d098835-4e91-48f3-9761-04a82ff2843e.mock.pstmn.io\" + \"/core-model-1-4:control-construct\";\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var ltpList;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"    \r",
																			"    let responseCode;\r",
																			"    responseCode = parseInt(response.code);\r",
																			"    \r",
																			"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																			"        let responseObject;\r",
																			"        responseObject = JSON.parse(response.stream);\r",
																			"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																			"\r",
																			"    } else {\r",
																			"        ltpList = [];\r",
																			"    }\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! ltpList could not be extracted.\");\r",
																			"}\r",
																			"\r",
																			"var listRecordsOfFlowOperationKey;\r",
																			"try {\r",
																			"    listRecordsOfFlowOperationKey = FindOperationKeyForOperationName(\"/v1/list-records-of-flow\", ltpList);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Reference objects could not be extracted.\");\r",
																			"} \r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.collectionVariables.set(\"listRecordsOfFlowOperationKey\", listRecordsOfFlowOperationKey);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Collection variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"function FindOperationKeyForOperationName(operationName, ltpList) {\r",
																			"    let operationKey;\r",
																			"    operationKey = \"\";\r",
																			"    try {\r",
																			"         let sampleUuid;\r",
																			"         for ( let i=0; i<ltpList.length; i++) {\r",
																			"            sampleUuid = ltpList[i][\"uuid\"];\r",
																			"            if(sampleUuid.includes(\"op-s-\")){\r",
																			"                let sampleOperationName;\r",
																			"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																			"                if(sampleOperationName == operationName) {\r",
																			"                    operationKey = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																			"                    return operationKey; \r",
																			"                }\r",
																			"            }\r",
																			"         }\r",
																			"\r",
																			"    } catch (error) {\r",
																			"        console.log(\" ! Exception in function : FindOperationKeyForOperationName\")\r",
																			"    }\r",
																			"    return operationKey;\r",
																			"}\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "200",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "sampling /v1/regard-application",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"var OPERATION_KEY;\r",
																			"var CURRENT_ORIGINATOR;\r",
																			"var applicationName;\r",
																			"var releaseNumber;\r",
																			"var dummyProtocol;\r",
																			"var address;\r",
																			"var port;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"    let ltpList;\r",
																			"    ltpList = APPLICATION[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																			"\r",
																			"    CURRENT_ORIGINATOR = FindHttpServerApplicationName(ltpList);\r",
																			"\r",
																			"    let currentOperationServer;\r",
																			"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																			"    \r",
																			"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																			"\r",
																			"    let httpClientLtp;\r",
																			"    httpClientLtp = pm.collectionVariables.get(\"httpClientLtp\");\r",
																			"\r",
																			"    applicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																			"    releaseNumber = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																			"\r",
																			"    let tcpClientLtp;\r",
																			"    tcpClientLtp = pm.collectionVariables.get(\"tcpClientLtp\");\r",
																			"\r",
																			"    let protocol;\r",
																			"    protocol = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																			"    dummyProtocol = GenerateDummyRemoteProtocol(protocol);\r",
																			"    dummyProtocol = dummyProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																			"\r",
																			"    address = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																			"    port = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Input Data could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Dummy Parameters\r",
																			"****************************************************************************************/\r",
																			"var USER_NAME;\r",
																			"var ORIGINATOR;\r",
																			"var X_CORRELATOR;\r",
																			"var TRACE_INDICATOR;\r",
																			"var CUSTOMER_JOURNEY;\r",
																			"try {\r",
																			"    USER_NAME = APPLICATION.userName;\r",
																			"    ORIGINATOR = \"Postman\";\r",
																			"    X_CORRELATOR = CreateXCorrelator();\r",
																			"    TRACE_INDICATOR = \"1\";\r",
																			"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																			"    \r",
																			"} catch (error) {\r",
																			"    console.log(\"! Could not define dummy values for parameters. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Request Body\r",
																			"****************************************************************************************/\r",
																			"var REQUEST_BODY;\r",
																			"try {\r",
																			"    REQUEST_BODY = '{'\r",
																			"        + '\"application-name\" : ' + '\"' + applicationName + '\",'\r",
																			"        + '\"release-number\" : ' + '\"' + releaseNumber + '\",'\r",
																			"        + '\"protocol\" : ' + '\"' + dummyProtocol + '\",'\r",
																			"        + '\"address\" : ' + JSON.stringify(address) + ','\r",
																			"        + '\"port\" : ' +  port\r",
																			"    +'}';\r",
																			"} catch (error) {\r",
																			"    console.log(\"!Could not define request body. \");\r",
																			"}\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.collectionVariables.set(\"user\", USER_NAME);\r",
																			"    pm.collectionVariables.set(\"originator\", ORIGINATOR);\r",
																			"    pm.collectionVariables.set(\"xCorrelator\", X_CORRELATOR);\r",
																			"    pm.collectionVariables.set(\"traceIndicator\", TRACE_INDICATOR);\r",
																			"    pm.collectionVariables.set(\"customerJourney\", CUSTOMER_JOURNEY);\r",
																			"    pm.collectionVariables.set(\"currentOriginator\", CURRENT_ORIGINATOR);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Collection variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + \"/v1/regard-application\";\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																			"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																			"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																			"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																			"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"function CreateXCorrelator() {\r",
																			"    let xCorrelator;\r",
																			"    xCorrelator = \"\";\r",
																			"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(12);\r",
																			"    return xCorrelator;\r",
																			"}\r",
																			"\r",
																			"function GenerateRandomHexString(length) {\r",
																			"    var randomRandomHexString = \"\";\r",
																			"    while (randomRandomHexString.length < length) {\r",
																			"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																			"    }\r",
																			"    return randomRandomHexString.substring(0,length);\r",
																			"}\r",
																			"\r",
																			"function GenerateDummyRemoteProtocol(currentProtocol) {\r",
																			"    let alternativeProtocolList;\r",
																			"    alternativeProtocolList = [  \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTP\",\r",
																			"                                    \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTPS\"\r",
																			"                                ];\r",
																			"    let indexOfCurrentProtocol;\r",
																			"    indexOfCurrentProtocol = alternativeProtocolList.indexOf(currentProtocol);\r",
																			"    if (indexOfCurrentProtocol > -1) {\r",
																			"        alternativeProtocolList.splice(indexOfCurrentProtocol, 1);\r",
																			"    }\r",
																			"\r",
																			"    let alternativeProtocol;\r",
																			"    let alternativeProtocolIndex;\r",
																			"    alternativeProtocolIndex = Math.floor(Math.random() * alternativeProtocolList.length);\r",
																			"    alternativeProtocol = alternativeProtocolList[alternativeProtocolIndex]; \r",
																			"\r",
																			"    return alternativeProtocol;\r",
																			"}\r",
																			"\r",
																			"function FindHttpServerApplicationName(ltpList) {\r",
																			"    let applicationName;\r",
																			"    applicationName = \"\";\r",
																			"    for( let i=0; i<ltpList.length; i++ ) {\r",
																			"        let sampleUuid;\r",
																			"        sampleUuid = ltpList[i][\"uuid\"];\r",
																			"        if(sampleUuid.includes(\"http-s-\")) {\r",
																			"            applicationName = ltpList[i][\"layer-protocol\"][0][\"http-server-interface-1-0:http-server-interface-pac\"][\"http-server-interface-capability\"][\"application-name\"];\r",
																			"            return applicationName;\r",
																			"        }\r",
																			"    }\r",
																			"    return applicationName;\r",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var RESPONSE_CODE;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"\r",
																			"    RESPONSE_CODE = parseInt(response.code);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Response Code could not be extracted.\");\r",
																			"}    \r",
																			"\r",
																			"const currentCount = 0;\r",
																			"try {\r",
																			"\tpm.collectionVariables.set(\"currentCount\", currentCount);\r",
																			"\r",
																			"} catch(error) {\r",
																			"    console.log(\" !Could not set currentCount. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Testing\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.test(\"POST /v1/regard-application responds 204\", function () {\r",
																			"        pm.expect(RESPONSE_CODE).to.equal(204);\r",
																			"    });\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Testing could not be executed.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "204",
																		"type": "default"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Expected ExecutionAndTraceLog/v1/list-records-of-flow for /v1/regard-application:: Update LTP notified? protocol update",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"var OPERATION_KEY;\r",
																			"var applicationProtocol;\r",
																			"var applicationAddress;\r",
																			"var applicationPort;\r",
																			"var xCorrelatorUnderTest;\r",
																			"var latestMatch;\r",
																			"var numberOfRecords;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"    let executionAndTraceLogTcpClientLtp;\r",
																			"    executionAndTraceLogTcpClientLtp = pm.collectionVariables.get(\"executionAndTraceLogTcpClientLtp\");\r",
																			"    \r",
																			"    applicationProtocol = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																			"    applicationProtocol = applicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																			"    applicationAddress = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																			"    if(applicationAddress.hasOwnProperty(\"ip-address\")) {\r",
																			"        applicationAddress = applicationAddress[\"ip-address\"][\"ipv-4-address\"];\r",
																			"    } else {\r",
																			"        applicationAddress = applicationAddress[\"domain-name\"];\r",
																			"    }\r",
																			"    applicationPort = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																			"\r",
																			"    OPERATION_KEY = pm.collectionVariables.get(\"listRecordsOfFlowOperationKey\");\r",
																			"    xCorrelatorUnderTest = pm.collectionVariables.get(\"xCorrelator\");\r",
																			"    latestMatch = 0;\r",
																			"    numberOfRecords = 100;\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error)\r",
																			"    console.log(\"! Input Data could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Dummy Parameters\r",
																			"****************************************************************************************/\r",
																			"var USER_NAME;\r",
																			"var ORIGINATOR;\r",
																			"var X_CORRELATOR;\r",
																			"var TRACE_INDICATOR;\r",
																			"var CUSTOMER_JOURNEY;\r",
																			"try {\r",
																			"    USER_NAME = APPLICATION.userName;\r",
																			"    ORIGINATOR = \"Postman\";\r",
																			"    X_CORRELATOR = CreateXCorrelator();\r",
																			"    TRACE_INDICATOR = \"1\";\r",
																			"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																			"    \r",
																			"} catch (error) {\r",
																			"    console.log(\"! Could not define dummy values for parameters. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Request Body\r",
																			"****************************************************************************************/\r",
																			"var REQUEST_BODY;\r",
																			"try {\r",
																			"    REQUEST_BODY = '{'\r",
																			"                + '\"x-correlator\": \"' + xCorrelatorUnderTest +'\",'\r",
																			"                + '\"latest-match\": ' + latestMatch + ','\r",
																			"                + '\"number-of-records\":' + numberOfRecords\r",
																			"                + '}';\r",
																			"} catch (error) {\r",
																			"    console.log(\"!Could not define request body. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = applicationProtocol + \"://\" + applicationAddress + \":\" + applicationPort + \"/v1/list-records-of-flow\";\r",
																			"    //URI = \"http://9d098835-4e91-48f3-9761-04a82ff2843e.mock.pstmn.io/v1/list-records-of-flow\";\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																			"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																			"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																			"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																			"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"function CreateXCorrelator() {\r",
																			"    let xCorrelator;\r",
																			"    xCorrelator = \"\";\r",
																			"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(12);\r",
																			"    return xCorrelator;\r",
																			"}\r",
																			"\r",
																			"function GenerateRandomHexString(length) {\r",
																			"    var randomRandomHexString = \"\";\r",
																			"    while (randomRandomHexString.length < length) {\r",
																			"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																			"    }\r",
																			"    return randomRandomHexString.substring(0, length);\r",
																			"}\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Constant variables\r",
																			"****************************************************************************************/\r",
																			"const SERIAL_TRACE_INDICATOR = \".1\";\r",
																			"var retryMaxCount;\r",
																			"var retryWaitingPeriod;\r",
																			"var currentCount;\r",
																			"try {\r",
																			"    retryMaxCount = pm.environment.get(\"retryMaxCount\");\r",
																			"    retryWaitingPeriod = pm.environment.get(\"retryWaitingPeriod\");\r",
																			"    currentCount = pm.collectionVariables.get(\"currentCount\");\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Could not load constant variables Data. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var expectedXCorrelator;\r",
																			"var expectedUser;\r",
																			"var expectedOriginator;\r",
																			"var expectedTraceIndicator;\r",
																			"var expectedApplicationName;\r",
																			"var expectedReleaseNumber;\r",
																			"var expectedOperationName;\r",
																			"try {\r",
																			"    expectedXCorrelator = pm.collectionVariables.get(\"xCorrelator\");\r",
																			"    expectedUser = pm.collectionVariables.get(\"user\");\r",
																			"    expectedOriginator = pm.collectionVariables.get(\"currentOriginator\");\r",
																			"    expectedTraceIndicator = pm.collectionVariables.get(\"traceIndicator\");\r",
																			"\r",
																			"    //Increment traceIndicator:\r",
																			"    expectedTraceIndicator = expectedTraceIndicator + SERIAL_TRACE_INDICATOR;\r",
																			"\r",
																			"    let expectedHttpClientLtp;\r",
																			"    expectedHttpClientLtp = pm.collectionVariables.get(\"applicationLayerTopologyHttpClientLtp\");\r",
																			"    expectedApplicationName = expectedHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																			"    expectedReleaseNumber = expectedHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																			"\r",
																			"    let expectedOperationClient;\r",
																			"    expectedOperationClient = pm.collectionVariables.get(\"updateLtpOperationClientLtp\");\r",
																			"    expectedOperationName = expectedOperationClient[\"layer-protocol\"][0][\"operation-client-interface-1-0:operation-client-interface-pac\"][\"operation-client-interface-configuration\"][\"operation-name\"];\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Could not load Input Data. \");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var RESPONSE_CODE;\r",
																			"var serviceRecordList;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"    \r",
																			"    RESPONSE_CODE = parseInt(response.code);\r",
																			"\r",
																			"    if(Math.floor(RESPONSE_CODE/100) === 2) {\r",
																			"        serviceRecordList = JSON.parse(response.stream);\r",
																			"    }\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Response Code could not be extracted.\");\r",
																			"}    \r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Testing\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.test(\"POST ExecutionAndTraceLog/v1/list-records-of-flow responds 200\", function () {\r",
																			"        pm.expect(RESPONSE_CODE).to.equal(200);\r",
																			"    });\r",
																			"\r",
																			"    let foundAnEntryWithTheExpectedHeaderValuesInEatl;\r",
																			"    foundAnEntryWithTheExpectedHeaderValuesInEatl = false;\r",
																			"    let responseCodeofTriggeredForwarding;\r",
																			"    responseCodeofTriggeredForwarding = 0;\r",
																			"    for(let i=0; i<serviceRecordList.length; i++)  {\r",
																			"        if( serviceRecordList[i][\"application-name\"] == expectedApplicationName\r",
																			"                && serviceRecordList[i][\"release-number\"] == expectedReleaseNumber\r",
																			"                && serviceRecordList[i][\"operation-name\"] == expectedOperationName\r",
																			"                && serviceRecordList[i][\"x-correlator\"] == expectedXCorrelator\r",
																			"                && serviceRecordList[i][\"user\"] == expectedUser\r",
																			"                && serviceRecordList[i][\"originator\"] == expectedOriginator\r",
																			"                && serviceRecordList[i][\"trace-indicator\"] == expectedTraceIndicator ) {\r",
																			"\r",
																			"            foundAnEntryWithTheExpectedHeaderValuesInEatl = true;\r",
																			"            responseCodeofTriggeredForwarding =  serviceRecordList[i][\"response-code\"];\r",
																			"            break;\r",
																			"        }\r",
																			"    }\r",
																			"\r",
																			"    if (foundAnEntryWithTheExpectedHeaderValuesInEatl == false) {\r",
																			"        if( (currentCount < retryMaxCount) ) {\r",
																			"            setTimeout(()=>{\r",
																			"                postman.setNextRequest(request.name);\r",
																			"                currentCount = currentCount + 1;\r",
																			"                pm.collectionVariables.set(\"currentCount\", currentCount);\r",
																			"            }, retryWaitingPeriod);\r",
																			"        } else {\r",
																			"            pm.test(\"protocol Update in LTP is successfully notified to ALT\", function () {\r",
																			"                pm.expect(foundAnEntryWithTheExpectedHeaderValuesInEatl).to.be.true;        \r",
																			"            });\r",
																			"        }\r",
																			"    } else {\r",
																			"        pm.test(\"protocol Update in LTP is successfully notified to ALT with response-code 204\", function () {\r",
																			"            pm.expect(responseCodeofTriggeredForwarding).to.equal(204);    \r",
																			"        });\r",
																			"    }  \r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Testing could not be executed.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "200",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "initial tcp-c/remote-protocol",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"var tcpClientUuid;\r",
																			"var initialRemoteProtocol;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"    \r",
																			"    let tcpClientLtp;\r",
																			"    tcpClientLtp = pm.collectionVariables.get(\"tcpClientLtp\");\r",
																			"\r",
																			"    tcpClientUuid = tcpClientLtp[\"uuid\"];\r",
																			"\r",
																			"    initialRemoteProtocol = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Variables could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl \r",
																			"            + \"/core-model-1-4:control-construct/logical-termination-point=\"\r",
																			"            + tcpClientUuid\r",
																			"            + \"/layer-protocol=0/tcp-client-interface-1-0:tcp-client-interface-pac/tcp-client-interface-configuration/remote-protocol\";\r",
																			"\r",
																			"    let REQUEST_BODY;\r",
																			"    REQUEST_BODY = '{ '\r",
																			"                    +   '\"tcp-client-interface-1-0:remote-protocol\": \"' + initialRemoteProtocol + '\"'\r",
																			"                    + ' }';\r",
																			"\r",
																			"    let AUTHORIZATION;\r",
																			"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error)\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PUT",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "204",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Check /core-model-1-4:control-construct",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"var AUTHORIZATION;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																			"\r",
																			"    oamPath = \"/core-model-1-4:control-construct\";\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Environment variables could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Request Body\r",
																			"****************************************************************************************/\r",
																			"var REQUEST_BODY;\r",
																			"try {\r",
																			"    REQUEST_BODY = \"\";\r",
																			"} catch (error) {\r",
																			"    console.log(\"!Could not define request body. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + oamPath;\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var expectedLogicalTerminationPoint;\r",
																			"var expectedForwardingConstruct;\r",
																			"try {\r",
																			"    expectedLogicalTerminationPoint = pm.collectionVariables.get(\"ltpList\");\r",
																			"    expectedForwardingConstruct = pm.collectionVariables.get(\"fcList\");\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Collection variables could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var RESPONSE_CODE;\r",
																			"var RESPONSE;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"\r",
																			"    RESPONSE_CODE = parseInt(response.code);\r",
																			"\r",
																			"    if (Math.floor(RESPONSE_CODE / 100) === 2) {\r",
																			"        RESPONSE = JSON.parse(response.stream);\r",
																			"    } else {\r",
																			"        RESPONSE = [];\r",
																			"    }\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Result value lists could not be extracted.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Testing\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.test(\"GET /core-model-1-4:control-construct responds 200\", function () {\r",
																			"        pm.expect(RESPONSE_CODE).to.equal(200);\r",
																			"    });\r",
																			"\r",
																			"    let actualLtpList;\r",
																			"    actualLtpList = RESPONSE[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																			"\r",
																			"    pm.test(\"Received logical-termination-point is same as intial instance \", function () {\r",
																			"        pm.expect(actualLtpList).to.deep.equal(expectedLogicalTerminationPoint);\r",
																			"    });\r",
																			"\r",
																			"    let actualFcList;\r",
																			"    actualFcList = RESPONSE[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
																			"\r",
																			"    pm.test(\"Received forwarding-construct is same as intial instance \", function () {\r",
																			"        pm.expect(actualFcList).to.deep.equal(expectedForwardingConstruct);\r",
																			"    });\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Testing could not be executed.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "200",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														}
													],
													"description": "##Gets protocol update trigger update-ltp to ALT?\n#### Requires:\n- ExecutionAndTraceLog/OamLog server to operate\n\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - search CC for output fc-port of ServiceRequestCausesLoggingRequest, \nits corresponding op-c, http-c and tcp-c, storing them for later verification request. \n  - searching CC for output-fc-port of ServiceRequestCausesLtpUpdateRequest, its corresponding op-c, http-c, storing them.\n  - searching CC for op-s of /v1/regard-application, storing operation-key\n  - searching CC for output fc-port of NewApplicationCausesRequestForInquiringOamRequestApprovals, find corresponding op-c, http-c and tcp-c, store them.\n- GETting EaTL/CC (while using IP, protocol and port from above)\n  - searching CC for op-c of /v1/list-records-of-flow, storing operation-key\n- POST /v1/regard-application with\n  - all attributes according to chosen set of http-c, tcp-c , BUT protocol attribute with random dummy value as per the spec.\n  - operation-key from above\n  - reasonable parameter\n\n#### Testing:\n- POST ExecutionAndTraceLog/v1/list-records-of-flow with \n   - IP and port from above\n   - operation-key from above\n   - DummyValue of x-correlator\n   - checking response for entry with application data from ServiceRequestCausesLtpUpdateRequest\n   - checking same record for containing DummyXCorrelator &DummyTraceIndicator\n\n#### Clearing:\n- PUT chosen tcp-c/protocol with intial value\n\n#### Clearance check:\n- Check if the logical-termination-point instance is the same as initial configuration"
												},
												{
													"name": "address update",
													"item": [
														{
															"name": "ipv-4-address update",
															"item": [
																{
																	"name": "reference /core-model-1-4:control-construct Copy 2",
																	"event": [
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					"console.log(\"\\n-----  /v1/regard-application acceptance -- address/ipv-4-address attribute update notified to ALT -------------------------------\");\r",
																					"/****************************************************************************************\r",
																					"* Loading Input Data\r",
																					"****************************************************************************************/\r",
																					"var APPLICATION;\r",
																					"try {\r",
																					"    APPLICATION = pm.environment.get(\"application\");\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Environment variables could not be loaded.\");\r",
																					"}\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Setting Local Variables and Preparing the Request\r",
																					"****************************************************************************************/\r",
																					"try {\r",
																					"    let URI;\r",
																					"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																					"\r",
																					"    let REQUEST_BODY;\r",
																					"    REQUEST_BODY = \"\";\r",
																					"\r",
																					"    let AUTHORIZATION;\r",
																					"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																					"\r",
																					"    let ACCEPT;\r",
																					"    ACCEPT = \"application/json\";\r",
																					"\r",
																					"    let CONTENT_TYPE;\r",
																					"    CONTENT_TYPE = \"application/json\";\r",
																					"\r",
																					"\r",
																					"    pm.variables.clear();\r",
																					"\r",
																					"    pm.variables.set(\"uri\", URI);\r",
																					"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																					"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Local variables could not be set.\");\r",
																					"}\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Functions\r",
																					"****************************************************************************************/\r",
																					"\r",
																					""
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"/****************************************************************************************\r",
																					"* Loading Input Data\r",
																					"****************************************************************************************/\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Extracting Result\r",
																					"****************************************************************************************/\r",
																					"var ltpList;\r",
																					"var fcList;\r",
																					"try {\r",
																					"    let response;\r",
																					"    response = pm.response;\r",
																					"    \r",
																					"    let responseCode;\r",
																					"    responseCode = parseInt(response.code);\r",
																					"    \r",
																					"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																					"        let responseObject;\r",
																					"        responseObject = JSON.parse(response.stream);\r",
																					"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																					"        fcList = responseObject[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
																					"\r",
																					"    } else {\r",
																					"        ltpList = [];\r",
																					"        fcList = [];\r",
																					"    }\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! ltpList could not be extracted.\");\r",
																					"}\r",
																					"\r",
																					"var currentOperationServer;\r",
																					"var executionAndTraceLogHttpClientLtp;\r",
																					"var executionAndTraceLogTcpClientLtp;\r",
																					"var httpClientLtp;\r",
																					"var tcpClientLtp;\r",
																					"var applicationLayerTopologyHttpClientLtp;\r",
																					"var updateLtpOperationClientLtp;\r",
																					"try {\r",
																					"    currentOperationServer = FindOperationServer(\"/v1/regard-application\", ltpList);\r",
																					"\r",
																					"    //Execution And Trace Log\r",
																					"    let recordServiceRequestOperationClientLtp = FindOperationClientUsingCallback(\"ServiceRequestCausesLoggingRequest\", fcList, ltpList)\r",
																					"    executionAndTraceLogHttpClientLtp = FindServingLtp(recordServiceRequestOperationClientLtp, ltpList);\r",
																					"    executionAndTraceLogTcpClientLtp = FindServingLtp(executionAndTraceLogHttpClientLtp, ltpList);\r",
																					"\r",
																					"    //Ltp Update Request\r",
																					"    updateLtpOperationClientLtp = FindOperationClientUsingCallback(\"ServiceRequestCausesLtpUpdateRequest\", fcList, ltpList)\r",
																					"    applicationLayerTopologyHttpClientLtp = FindServingLtp(updateLtpOperationClientLtp, ltpList);\r",
																					"\r",
																					"    //Inquiring OAM approvals\r",
																					"    let outputFcPortListInquireOamRequestApprovals;\r",
																					"    outputFcPortListInquireOamRequestApprovals = FindOutputFcPortList(\"NewApplicationCausesRequestForInquiringOamRequestApprovals\", fcList);\r",
																					"    let ltpInstance = FindRandomLtpInstancesFromFc(outputFcPortListInquireOamRequestApprovals, ltpList)\r",
																					"    httpClientLtp = ltpInstance.httpClientLtp;\r",
																					"    tcpClientLtp = FindServingLtp(httpClientLtp, ltpList);\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(error);\r",
																					"    console.log(\"! Reference objects could not be extracted.\");\r",
																					"} \r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Setting Collection Variables\r",
																					"****************************************************************************************/\r",
																					"try {\r",
																					"    pm.collectionVariables.clear();\r",
																					"    \r",
																					"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																					"\r",
																					"    pm.collectionVariables.set(\"executionAndTraceLogHttpClientLtp\", executionAndTraceLogHttpClientLtp);\r",
																					"    pm.collectionVariables.set(\"executionAndTraceLogTcpClientLtp\", executionAndTraceLogTcpClientLtp);\r",
																					"    \r",
																					"    pm.collectionVariables.set(\"httpClientLtp\", httpClientLtp);\r",
																					"    pm.collectionVariables.set(\"tcpClientLtp\", tcpClientLtp);\r",
																					"\r",
																					"    pm.collectionVariables.set(\"applicationLayerTopologyHttpClientLtp\", applicationLayerTopologyHttpClientLtp);\r",
																					"    pm.collectionVariables.set(\"updateLtpOperationClientLtp\", updateLtpOperationClientLtp);\r",
																					"    \r",
																					"    pm.collectionVariables.set(\"ltpList\", ltpList);\r",
																					"    pm.collectionVariables.set(\"fcList\", fcList);\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Collection variables could not be set.\");\r",
																					"}\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Functions\r",
																					"****************************************************************************************/\r",
																					"\r",
																					"function FindOperationServer(operationName, ltpList) {\r",
																					"    let operationServer;\r",
																					"    operationServer = \"\";\r",
																					"    try {\r",
																					"        let sampleUuid;\r",
																					"        for(let i=0; i<ltpList.length; i++) {\r",
																					"            sampleUuid = ltpList[i][\"uuid\"];\r",
																					"            if(sampleUuid.includes(\"op-s-\")) {\r",
																					"                let sampleOperationName;\r",
																					"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																					"                if(sampleOperationName == operationName) {\r",
																					"                    operationServer = ltpList[i];\r",
																					"                    return operationServer;\r",
																					"                }\r",
																					"            }\r",
																					"        }\r",
																					"    } catch (error) {\r",
																					"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																					"    }\r",
																					"    return operationServer;\r",
																					"}\r",
																					"\r",
																					"function FindRandomLtpInstancesFromFc(outputFcPortList, ltpList) {\r",
																					"    let ltpInstance = {};\r",
																					"    try {\r",
																					"        for ( let i=0; i<outputFcPortList.length; i++ ) {\r",
																					"            let randomOutputFcPort = outputFcPortList[Math.floor(Math.random() * outputFcPortList.length)];\r",
																					"            let outputLtpUuid = randomOutputFcPort[\"logical-termination-point\"];\r",
																					"            let operationClientLtp = FindActualInstanceByUuid(outputLtpUuid, ltpList);\r",
																					"\r",
																					"            let httpClientLtp = FindServingLtp(operationClientLtp, ltpList);\r",
																					"            let sampleApplicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																					"\r",
																					"            if (sampleApplicationName != \"AdministratorAdministration\") {\r",
																					"\t\t\t\tltpInstance = { httpClientLtp, operationClientLtp };\r",
																					"                break;\r",
																					"            }\r",
																					"        }\r",
																					"    } catch(error) {\r",
																					"        console.log(error);\r",
																					"        console.log(\"! Exception in function : FindRandomLtpInstancesFromFc. \")\r",
																					"    } \r",
																					"    return ltpInstance;\r",
																					"}\r",
																					"\r",
																					"function FindOutputFcPortList(forwardingName, fcList) {\r",
																					"    let outputFcPortList;\r",
																					"    outputFcPortList = [];\r",
																					"    try {\r",
																					"        for( let i=0; i<fcList.length; i++ ) {\r",
																					"            for(let j=0; j<fcList[i][\"name\"].length; j++) {               \r",
																					"                if(fcList[i][\"name\"][j][\"value\"] == forwardingName) {\r",
																					"                    fcPortList = fcList[i][\"fc-port\"];\r",
																					"                    for(let k=0;k<fcPortList.length;k++) {\r",
																					"                        if(fcPortList[k][\"port-direction\"] == \"core-model-1-4:PORT_DIRECTION_TYPE_OUTPUT\") {\r",
																					"                            outputFcPortList.push(fcPortList[k]);\r",
																					"                        }\r",
																					"                    }\r",
																					"                    return outputFcPortList;\r",
																					"                }\r",
																					"            }\r",
																					"        }\r",
																					"    } catch (error) {\r",
																					"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																					"    }\r",
																					"    return outputFcPortList;\r",
																					"}\r",
																					"\r",
																					"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
																					"    let actualInstance;\r",
																					"    actualInstance = {};\r",
																					"    try {\r",
																					"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
																					"            let sampleUuid;\r",
																					"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
																					"            if( sampleUuid == expectedUuid ) {\r",
																					"                actualInstance = actualLtpList[i];\r",
																					"                return actualInstance;\r",
																					"            }\r",
																					"        }\r",
																					"\r",
																					"    } catch (error) {\r",
																					"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																					"    }\r",
																					"    return undefined;\r",
																					"}\r",
																					"\r",
																					"function FindServingLtp(clientLtp, ltpList) {\r",
																					"    let servingLtp;\r",
																					"    servingLtp = {};\r",
																					"    try{\r",
																					"        let serverLtpUuid;\r",
																					"        serverLtpUuid = clientLtp[\"server-ltp\"][0];\r",
																					"        for( let i=0; i<ltpList.length; i++ ) {\r",
																					"            let sampleUuid;\r",
																					"            sampleUuid = ltpList[i][\"uuid\"];\r",
																					"            if( sampleUuid == serverLtpUuid ) {\r",
																					"                servingLtp = ltpList[i];\r",
																					"                return servingLtp;\r",
																					"            }\r",
																					"        }\r",
																					"    } catch(error) {\r",
																					"        console.log(error);\r",
																					"        console.log(\"! Exception in function : FindServingLtp. \")\r",
																					"    }\r",
																					"    return servingLtp;\r",
																					"}\r",
																					"\r",
																					"function FindOperationClientUsingCallback(callback, fcList, ltpList) {\r",
																					"    let operationClientLtp;\r",
																					"    try {\r",
																					"        let outputFcPortList = FindOutputFcPortList(callback, fcList);\r",
																					"        let randomOutputFcPort = outputFcPortList[Math.floor(Math.random() * outputFcPortList.length)];\r",
																					"        let outputLtpUuid = randomOutputFcPort[\"logical-termination-point\"];\r",
																					"        operationClientLtp = FindActualInstanceByUuid(outputLtpUuid, ltpList);\r",
																					"    } catch (error) {\r",
																					"        console.log(error);\r",
																					"        console.log(\"! Exception in function FindOperationClientUsingCallback. \");\r",
																					"    }\r",
																					"    return  operationClientLtp\r",
																					"}\r",
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"protocolProfileBehavior": {
																		"disableBodyPruning": true
																	},
																	"request": {
																		"auth": {
																			"type": "noauth"
																		},
																		"method": "GET",
																		"header": [
																			{
																				"key": "x-mock-response-code",
																				"value": "200",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{{requestBody}}",
																			"options": {
																				"raw": {
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{uri}}",
																			"host": [
																				"{{uri}}"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "reference ExecutionAndTraceLog/core-model-1-4:control-construct",
																	"event": [
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					"/****************************************************************************************\r",
																					"* Loading Input Data\r",
																					"****************************************************************************************/\r",
																					"var APPLICATION;\r",
																					"var AUTHORIZATION;\r",
																					"var applicationProtocol;\r",
																					"var applicationAddress;\r",
																					"var applicationPort;\r",
																					"try {\r",
																					"    APPLICATION = pm.environment.get(\"application\");\r",
																					"\r",
																					"    let executionAndTraceLogTcpClientLtp;\r",
																					"    executionAndTraceLogTcpClientLtp = pm.collectionVariables.get(\"executionAndTraceLogTcpClientLtp\");\r",
																					"\r",
																					"    applicationProtocol = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																					"    applicationProtocol = applicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																					"    applicationAddress = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																					"    if(applicationAddress.hasOwnProperty(\"ip-address\")) {\r",
																					"        applicationAddress = applicationAddress[\"ip-address\"][\"ipv-4-address\"];\r",
																					"    } else {\r",
																					"        applicationAddress = applicationAddress[\"domain-name\"];\r",
																					"    }\r",
																					"    applicationPort = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																					" \r",
																					"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Environment variables could not be loaded.\");\r",
																					"}\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Defining Request Body\r",
																					"****************************************************************************************/\r",
																					"var REQUEST_BODY;\r",
																					"try {\r",
																					"    REQUEST_BODY = \"\";\r",
																					"} catch (error) {\r",
																					"    console.log(\"!Could not define request body. \");\r",
																					"}\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Setting Local Variables and Preparing the Request\r",
																					"****************************************************************************************/\r",
																					"try {\r",
																					"    let URI;\r",
																					"    URI = applicationProtocol + \"://\" + applicationAddress + \":\" + applicationPort + \"/core-model-1-4:control-construct\";\r",
																					"    //URI = \"http://9d098835-4e91-48f3-9761-04a82ff2843e.mock.pstmn.io\" + \"/core-model-1-4:control-construct\";\r",
																					"\r",
																					"    let ACCEPT;\r",
																					"    ACCEPT = \"application/json\";\r",
																					"\r",
																					"    let CONTENT_TYPE;\r",
																					"    CONTENT_TYPE = \"application/json\";\r",
																					"\r",
																					"    pm.variables.clear();\r",
																					"\r",
																					"    pm.variables.set(\"uri\", URI);\r",
																					"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																					"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Local variables could not be set.\");\r",
																					"}\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Functions\r",
																					"****************************************************************************************/\r",
																					"\r",
																					""
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"/****************************************************************************************\r",
																					"* Loading Input Data\r",
																					"****************************************************************************************/\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Extracting Result\r",
																					"****************************************************************************************/\r",
																					"var ltpList;\r",
																					"try {\r",
																					"    let response;\r",
																					"    response = pm.response;\r",
																					"    \r",
																					"    let responseCode;\r",
																					"    responseCode = parseInt(response.code);\r",
																					"    \r",
																					"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																					"        let responseObject;\r",
																					"        responseObject = JSON.parse(response.stream);\r",
																					"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																					"\r",
																					"    } else {\r",
																					"        ltpList = [];\r",
																					"    }\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! ltpList could not be extracted.\");\r",
																					"}\r",
																					"\r",
																					"var listRecordsOfFlowOperationKey;\r",
																					"try {\r",
																					"    listRecordsOfFlowOperationKey = FindOperationKeyForOperationName(\"/v1/list-records-of-flow\", ltpList);\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(error);\r",
																					"    console.log(\"! Reference objects could not be extracted.\");\r",
																					"} \r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Setting Collection Variables\r",
																					"****************************************************************************************/\r",
																					"try {\r",
																					"    pm.collectionVariables.set(\"listRecordsOfFlowOperationKey\", listRecordsOfFlowOperationKey);\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Collection variables could not be set.\");\r",
																					"}\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Functions\r",
																					"****************************************************************************************/\r",
																					"function FindOperationKeyForOperationName(operationName, ltpList) {\r",
																					"    let operationKey;\r",
																					"    operationKey = \"\";\r",
																					"    try {\r",
																					"         let sampleUuid;\r",
																					"         for ( let i=0; i<ltpList.length; i++) {\r",
																					"            sampleUuid = ltpList[i][\"uuid\"];\r",
																					"            if(sampleUuid.includes(\"op-s-\")){\r",
																					"                let sampleOperationName;\r",
																					"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																					"                if(sampleOperationName == operationName) {\r",
																					"                    operationKey = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																					"                    return operationKey; \r",
																					"                }\r",
																					"            }\r",
																					"         }\r",
																					"\r",
																					"    } catch (error) {\r",
																					"        console.log(\" ! Exception in function : FindOperationKeyForOperationName\")\r",
																					"    }\r",
																					"    return operationKey;\r",
																					"}\r",
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"protocolProfileBehavior": {
																		"disableBodyPruning": true
																	},
																	"request": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "x-mock-response-code",
																				"value": "200",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{{requestBody}}",
																			"options": {
																				"raw": {
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{uri}}",
																			"host": [
																				"{{uri}}"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "sampling /v1/regard-application",
																	"event": [
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					"/****************************************************************************************\r",
																					"* Loading Input Data\r",
																					"****************************************************************************************/\r",
																					"var APPLICATION;\r",
																					"var OPERATION_KEY;\r",
																					"var CURRENT_ORIGINATOR;\r",
																					"var applicationName;\r",
																					"var releaseNumber;\r",
																					"var protocol;\r",
																					"var dummyAddress;\r",
																					"var port;\r",
																					"try {\r",
																					"    APPLICATION = pm.environment.get(\"application\");\r",
																					"\r",
																					"    let ltpList;\r",
																					"    ltpList = APPLICATION[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																					"\r",
																					"    CURRENT_ORIGINATOR = FindHttpServerApplicationName(ltpList);\r",
																					"\r",
																					"    let currentOperationServer;\r",
																					"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																					"    \r",
																					"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																					"\r",
																					"    let httpClientLtp;\r",
																					"    httpClientLtp = pm.collectionVariables.get(\"httpClientLtp\");\r",
																					"\r",
																					"    applicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																					"    releaseNumber = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																					"\r",
																					"    let tcpClientLtp;\r",
																					"    tcpClientLtp = pm.collectionVariables.get(\"tcpClientLtp\");\r",
																					"\r",
																					"    protocol = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																					"    protocol = protocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																					"\r",
																					"    let dummyIpv4Address = RandomIpAddress();\r",
																					"    dummyAddress = {\r",
																					"        \"ip-address\": {\r",
																					"            \"ipv-4-address\": dummyIpv4Address\r",
																					"        }\r",
																					"    };\r",
																					"\r",
																					"    port = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(error);\r",
																					"    console.log(\"! Input Data could not be loaded.\");\r",
																					"}\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Defining Dummy Parameters\r",
																					"****************************************************************************************/\r",
																					"var USER_NAME;\r",
																					"var ORIGINATOR;\r",
																					"var X_CORRELATOR;\r",
																					"var TRACE_INDICATOR;\r",
																					"var CUSTOMER_JOURNEY;\r",
																					"try {\r",
																					"    USER_NAME = APPLICATION.userName;\r",
																					"    ORIGINATOR = \"Postman\";\r",
																					"    X_CORRELATOR = CreateXCorrelator();\r",
																					"    TRACE_INDICATOR = \"1\";\r",
																					"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																					"    \r",
																					"} catch (error) {\r",
																					"    console.log(\"! Could not define dummy values for parameters. \");\r",
																					"}\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Defining Request Body\r",
																					"****************************************************************************************/\r",
																					"var REQUEST_BODY;\r",
																					"try {\r",
																					"    REQUEST_BODY = '{'\r",
																					"        + '\"application-name\" : ' + '\"' + applicationName + '\",'\r",
																					"        + '\"release-number\" : ' + '\"' + releaseNumber + '\",'\r",
																					"        + '\"protocol\" : ' + '\"' + protocol + '\",'\r",
																					"        + '\"address\" : ' + JSON.stringify(dummyAddress) + ','\r",
																					"        + '\"port\" : ' +  port\r",
																					"    +'}';\r",
																					"} catch (error) {\r",
																					"    console.log(\"!Could not define request body. \");\r",
																					"}\r",
																					"/****************************************************************************************\r",
																					"* Setting Collection Variables\r",
																					"****************************************************************************************/\r",
																					"try {\r",
																					"    pm.collectionVariables.set(\"user\", USER_NAME);\r",
																					"    pm.collectionVariables.set(\"originator\", ORIGINATOR);\r",
																					"    pm.collectionVariables.set(\"xCorrelator\", X_CORRELATOR);\r",
																					"    pm.collectionVariables.set(\"traceIndicator\", TRACE_INDICATOR);\r",
																					"    pm.collectionVariables.set(\"customerJourney\", CUSTOMER_JOURNEY);\r",
																					"    pm.collectionVariables.set(\"currentOriginator\", CURRENT_ORIGINATOR);\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Collection variables could not be set.\");\r",
																					"}\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Setting Local Variables and Preparing the Request\r",
																					"****************************************************************************************/\r",
																					"try {\r",
																					"    let URI;\r",
																					"    URI = APPLICATION.serverUrl + \"/v1/regard-application\";\r",
																					"\r",
																					"    let ACCEPT;\r",
																					"    ACCEPT = \"application/json\";\r",
																					"\r",
																					"    let CONTENT_TYPE;\r",
																					"    CONTENT_TYPE = \"application/json\";\r",
																					"\r",
																					"    pm.variables.clear();\r",
																					"\r",
																					"    pm.variables.set(\"uri\", URI);\r",
																					"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																					"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																					"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																					"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																					"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																					"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(error);\r",
																					"    console.log(\"! Local variables could not be set.\");\r",
																					"}\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Functions\r",
																					"****************************************************************************************/\r",
																					"\r",
																					"function CreateXCorrelator() {\r",
																					"    let xCorrelator;\r",
																					"    xCorrelator = \"\";\r",
																					"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																					"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																					"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																					"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																					"    xCorrelator += GenerateRandomHexString(12);\r",
																					"    return xCorrelator;\r",
																					"}\r",
																					"\r",
																					"function GenerateRandomHexString(length) {\r",
																					"    var randomRandomHexString = \"\";\r",
																					"    while (randomRandomHexString.length < length) {\r",
																					"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																					"    }\r",
																					"    return randomRandomHexString.substring(0,length);\r",
																					"}\r",
																					"\r",
																					"function RandomIpAddress() {\r",
																					"    let randomAddress\r",
																					"    let addressParts = [];\r",
																					"    for ( let i=0; i<4; i++ ) {\r",
																					"        addressParts[i] = String(Math.floor(Math.random() * 256));\r",
																					"    }\r",
																					"    randomAddress = addressParts[0] + \".\" + addressParts[1] + \".\" + addressParts[2] + \".\" + addressParts[3];\r",
																					"    return randomAddress;\r",
																					"}\r",
																					"\r",
																					"function FindHttpServerApplicationName(ltpList) {\r",
																					"    let applicationName;\r",
																					"    applicationName = \"\";\r",
																					"    for( let i=0; i<ltpList.length; i++ ) {\r",
																					"        let sampleUuid;\r",
																					"        sampleUuid = ltpList[i][\"uuid\"];\r",
																					"        if(sampleUuid.includes(\"http-s-\")) {\r",
																					"            applicationName = ltpList[i][\"layer-protocol\"][0][\"http-server-interface-1-0:http-server-interface-pac\"][\"http-server-interface-capability\"][\"application-name\"];\r",
																					"            return applicationName;\r",
																					"        }\r",
																					"    }\r",
																					"    return applicationName;\r",
																					"}"
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"/****************************************************************************************\r",
																					"* Loading Input Data\r",
																					"****************************************************************************************/\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Extracting Result\r",
																					"****************************************************************************************/\r",
																					"var RESPONSE_CODE;\r",
																					"try {\r",
																					"    let response;\r",
																					"    response = pm.response;\r",
																					"\r",
																					"    RESPONSE_CODE = parseInt(response.code);\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Response Code could not be extracted.\");\r",
																					"}    \r",
																					"\r",
																					"const currentCount = 0;\r",
																					"try {\r",
																					"\tpm.collectionVariables.set(\"currentCount\", currentCount);\r",
																					"\r",
																					"} catch(error) {\r",
																					"    console.log(\" !Could not set currentCount. \");\r",
																					"}\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Testing\r",
																					"****************************************************************************************/\r",
																					"try {\r",
																					"    pm.test(\"POST /v1/regard-application responds 204\", function () {\r",
																					"        pm.expect(RESPONSE_CODE).to.equal(204);\r",
																					"    });\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Testing could not be executed.\");\r",
																					"}\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Functions\r",
																					"****************************************************************************************/\r",
																					"\r",
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "x-mock-response-code",
																				"value": "204",
																				"type": "default"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{{requestBody}}",
																			"options": {
																				"raw": {
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{uri}}",
																			"host": [
																				"{{uri}}"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "Expected ExecutionAndTraceLog/v1/list-records-of-flow for /v1/regard-application:: Update LTP notified? ipv-4-address update",
																	"event": [
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					"/****************************************************************************************\r",
																					"* Loading Input Data\r",
																					"****************************************************************************************/\r",
																					"var APPLICATION;\r",
																					"var OPERATION_KEY;\r",
																					"var applicationProtocol;\r",
																					"var applicationAddress;\r",
																					"var applicationPort;\r",
																					"var xCorrelatorUnderTest;\r",
																					"var latestMatch;\r",
																					"var numberOfRecords;\r",
																					"try {\r",
																					"    APPLICATION = pm.environment.get(\"application\");\r",
																					"\r",
																					"    let executionAndTraceLogTcpClientLtp;\r",
																					"    executionAndTraceLogTcpClientLtp = pm.collectionVariables.get(\"executionAndTraceLogTcpClientLtp\");\r",
																					"    \r",
																					"    applicationProtocol = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																					"    applicationProtocol = applicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																					"    applicationAddress = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																					"    if(applicationAddress.hasOwnProperty(\"ip-address\")) {\r",
																					"        applicationAddress = applicationAddress[\"ip-address\"][\"ipv-4-address\"];\r",
																					"    } else {\r",
																					"        applicationAddress = applicationAddress[\"domain-name\"];\r",
																					"    }\r",
																					"    applicationPort = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																					"\r",
																					"    OPERATION_KEY = pm.collectionVariables.get(\"listRecordsOfFlowOperationKey\");\r",
																					"    xCorrelatorUnderTest = pm.collectionVariables.get(\"xCorrelator\");\r",
																					"    latestMatch = 0;\r",
																					"    numberOfRecords = 100;\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(error)\r",
																					"    console.log(\"! Input Data could not be loaded.\");\r",
																					"}\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Defining Dummy Parameters\r",
																					"****************************************************************************************/\r",
																					"var USER_NAME;\r",
																					"var ORIGINATOR;\r",
																					"var X_CORRELATOR;\r",
																					"var TRACE_INDICATOR;\r",
																					"var CUSTOMER_JOURNEY;\r",
																					"try {\r",
																					"    USER_NAME = APPLICATION.userName;\r",
																					"    ORIGINATOR = \"Postman\";\r",
																					"    X_CORRELATOR = CreateXCorrelator();\r",
																					"    TRACE_INDICATOR = \"1\";\r",
																					"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																					"    \r",
																					"} catch (error) {\r",
																					"    console.log(\"! Could not define dummy values for parameters. \");\r",
																					"}\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Defining Request Body\r",
																					"****************************************************************************************/\r",
																					"var REQUEST_BODY;\r",
																					"try {\r",
																					"    REQUEST_BODY = '{'\r",
																					"                + '\"x-correlator\": \"' + xCorrelatorUnderTest +'\",'\r",
																					"                + '\"latest-match\": ' + latestMatch + ','\r",
																					"                + '\"number-of-records\":' + numberOfRecords\r",
																					"                + '}';\r",
																					"} catch (error) {\r",
																					"    console.log(\"!Could not define request body. \");\r",
																					"}\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Setting Collection Variables\r",
																					"****************************************************************************************/\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Setting Local Variables and Preparing the Request\r",
																					"****************************************************************************************/\r",
																					"try {\r",
																					"    let URI;\r",
																					"    URI = applicationProtocol + \"://\" + applicationAddress + \":\" + applicationPort + \"/v1/list-records-of-flow\";\r",
																					"    //URI = \"http://9d098835-4e91-48f3-9761-04a82ff2843e.mock.pstmn.io/v1/list-records-of-flow\";\r",
																					"\r",
																					"    let ACCEPT;\r",
																					"    ACCEPT = \"application/json\";\r",
																					"\r",
																					"    let CONTENT_TYPE;\r",
																					"    CONTENT_TYPE = \"application/json\";\r",
																					"\r",
																					"    pm.variables.clear();\r",
																					"\r",
																					"    pm.variables.set(\"uri\", URI);\r",
																					"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																					"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																					"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																					"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																					"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																					"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(error);\r",
																					"    console.log(\"! Local variables could not be set.\");\r",
																					"}\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Functions\r",
																					"****************************************************************************************/\r",
																					"function CreateXCorrelator() {\r",
																					"    let xCorrelator;\r",
																					"    xCorrelator = \"\";\r",
																					"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																					"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																					"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																					"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																					"    xCorrelator += GenerateRandomHexString(12);\r",
																					"    return xCorrelator;\r",
																					"}\r",
																					"\r",
																					"function GenerateRandomHexString(length) {\r",
																					"    var randomRandomHexString = \"\";\r",
																					"    while (randomRandomHexString.length < length) {\r",
																					"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																					"    }\r",
																					"    return randomRandomHexString.substring(0, length);\r",
																					"}\r",
																					""
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"/****************************************************************************************\r",
																					"* Constant variables\r",
																					"****************************************************************************************/\r",
																					"const SERIAL_TRACE_INDICATOR = \".1\";\r",
																					"var retryMaxCount;\r",
																					"var retryWaitingPeriod;\r",
																					"var currentCount;\r",
																					"try {\r",
																					"    retryMaxCount = pm.environment.get(\"retryMaxCount\");\r",
																					"    retryWaitingPeriod = pm.environment.get(\"retryWaitingPeriod\");\r",
																					"    currentCount = pm.collectionVariables.get(\"currentCount\");\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Could not load constant variables Data. \");\r",
																					"}\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Loading Input Data\r",
																					"****************************************************************************************/\r",
																					"var expectedXCorrelator;\r",
																					"var expectedUser;\r",
																					"var expectedOriginator;\r",
																					"var expectedTraceIndicator;\r",
																					"var expectedApplicationName;\r",
																					"var expectedReleaseNumber;\r",
																					"var expectedOperationName;\r",
																					"try {\r",
																					"    expectedXCorrelator = pm.collectionVariables.get(\"xCorrelator\");\r",
																					"    expectedUser = pm.collectionVariables.get(\"user\");\r",
																					"    expectedOriginator = pm.collectionVariables.get(\"currentOriginator\");\r",
																					"    expectedTraceIndicator = pm.collectionVariables.get(\"traceIndicator\");\r",
																					"\r",
																					"    //Increment traceIndicator:\r",
																					"    expectedTraceIndicator = expectedTraceIndicator + SERIAL_TRACE_INDICATOR;\r",
																					"\r",
																					"    let expectedHttpClientLtp;\r",
																					"    expectedHttpClientLtp = pm.collectionVariables.get(\"applicationLayerTopologyHttpClientLtp\");\r",
																					"    expectedApplicationName = expectedHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																					"    expectedReleaseNumber = expectedHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																					"\r",
																					"    let expectedOperationClient;\r",
																					"    expectedOperationClient = pm.collectionVariables.get(\"updateLtpOperationClientLtp\");\r",
																					"    expectedOperationName = expectedOperationClient[\"layer-protocol\"][0][\"operation-client-interface-1-0:operation-client-interface-pac\"][\"operation-client-interface-configuration\"][\"operation-name\"];\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Could not load Input Data. \");\r",
																					"}\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Extracting Result\r",
																					"****************************************************************************************/\r",
																					"var RESPONSE_CODE;\r",
																					"var serviceRecordList;\r",
																					"try {\r",
																					"    let response;\r",
																					"    response = pm.response;\r",
																					"    \r",
																					"    RESPONSE_CODE = parseInt(response.code);\r",
																					"\r",
																					"    if(Math.floor(RESPONSE_CODE/100) === 2) {\r",
																					"        serviceRecordList = JSON.parse(response.stream);\r",
																					"    }\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Response Code could not be extracted.\");\r",
																					"}    \r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Testing\r",
																					"****************************************************************************************/\r",
																					"try {\r",
																					"    pm.test(\"POST ExecutionAndTraceLog/v1/list-records-of-flow responds 200\", function () {\r",
																					"        pm.expect(RESPONSE_CODE).to.equal(200);\r",
																					"    });\r",
																					"\r",
																					"    let foundAnEntryWithTheExpectedHeaderValuesInEatl;\r",
																					"    foundAnEntryWithTheExpectedHeaderValuesInEatl = false;\r",
																					"    let responseCodeofTriggeredForwarding;\r",
																					"    responseCodeofTriggeredForwarding = 0;\r",
																					"    for(let i=0; i<serviceRecordList.length; i++)  {\r",
																					"        if( serviceRecordList[i][\"application-name\"] == expectedApplicationName\r",
																					"                && serviceRecordList[i][\"release-number\"] == expectedReleaseNumber\r",
																					"                && serviceRecordList[i][\"operation-name\"] == expectedOperationName\r",
																					"                && serviceRecordList[i][\"x-correlator\"] == expectedXCorrelator\r",
																					"                && serviceRecordList[i][\"user\"] == expectedUser\r",
																					"                && serviceRecordList[i][\"originator\"] == expectedOriginator\r",
																					"                && serviceRecordList[i][\"trace-indicator\"] == expectedTraceIndicator ) {\r",
																					"\r",
																					"            foundAnEntryWithTheExpectedHeaderValuesInEatl = true;\r",
																					"            responseCodeofTriggeredForwarding =  serviceRecordList[i][\"response-code\"];\r",
																					"            break;\r",
																					"        }\r",
																					"    }\r",
																					"\r",
																					"    if (foundAnEntryWithTheExpectedHeaderValuesInEatl == false) {\r",
																					"        if( (currentCount < retryMaxCount) ) {\r",
																					"            setTimeout(()=>{\r",
																					"                postman.setNextRequest(request.name);\r",
																					"                currentCount = currentCount + 1;\r",
																					"                pm.collectionVariables.set(\"currentCount\", currentCount);\r",
																					"            }, retryWaitingPeriod);\r",
																					"        } else {\r",
																					"            pm.test(\"ipv-4-address Update in LTP is successfully notified to ALT\", function () {\r",
																					"                pm.expect(foundAnEntryWithTheExpectedHeaderValuesInEatl).to.be.true;        \r",
																					"            });\r",
																					"        }\r",
																					"    } else {\r",
																					"        pm.test(\"ipv-4-address Update in LTP is successfully notified to ALT with response-code 204\", function () {\r",
																					"            pm.expect(responseCodeofTriggeredForwarding).to.equal(204);    \r",
																					"        });\r",
																					"    }\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(error);\r",
																					"    console.log(\"! Testing could not be executed.\");\r",
																					"}\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Functions\r",
																					"****************************************************************************************/\r",
																					"\r",
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "x-mock-response-code",
																				"value": "200",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{{requestBody}}",
																			"options": {
																				"raw": {
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{uri}}",
																			"host": [
																				"{{uri}}"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "initial tcp-c/remote-address",
																	"event": [
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					"/****************************************************************************************\r",
																					"* Loading Input Data\r",
																					"****************************************************************************************/\r",
																					"var APPLICATION;\r",
																					"var tcpClientUuid;\r",
																					"var initialRemoteAddress;\r",
																					"try {\r",
																					"    APPLICATION = pm.environment.get(\"application\");\r",
																					"    \r",
																					"    let tcpClientLtp;\r",
																					"    tcpClientLtp = pm.collectionVariables.get(\"tcpClientLtp\");\r",
																					"\r",
																					"    tcpClientUuid = tcpClientLtp[\"uuid\"];\r",
																					"\r",
																					"    initialRemoteAddress = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Variables could not be loaded.\");\r",
																					"}\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Setting Collection Variables\r",
																					"****************************************************************************************/\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Setting Local Variables and Preparing the Request\r",
																					"****************************************************************************************/\r",
																					"try {\r",
																					"    let URI;\r",
																					"    URI = APPLICATION.serverUrl \r",
																					"            + \"/core-model-1-4:control-construct/logical-termination-point=\"\r",
																					"            + tcpClientUuid\r",
																					"            + \"/layer-protocol=0/tcp-client-interface-1-0:tcp-client-interface-pac/tcp-client-interface-configuration/remote-address\";\r",
																					"\r",
																					"    let REQUEST_BODY;\r",
																					"    REQUEST_BODY = '{ '\r",
																					"                    +   '\"tcp-client-interface-1-0:remote-address\": ' + JSON.stringify(initialRemoteAddress)\r",
																					"                    + ' }';\r",
																					"\r",
																					"    let AUTHORIZATION;\r",
																					"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																					"\r",
																					"    let ACCEPT;\r",
																					"    ACCEPT = \"application/json\";\r",
																					"\r",
																					"    let CONTENT_TYPE;\r",
																					"    CONTENT_TYPE = \"application/json\";\r",
																					"\r",
																					"\r",
																					"    pm.variables.clear();\r",
																					"\r",
																					"    pm.variables.set(\"uri\", URI);\r",
																					"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																					"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(error)\r",
																					"    console.log(\"! Local variables could not be set.\");\r",
																					"}\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Functions\r",
																					"****************************************************************************************/\r",
																					"\r",
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "PUT",
																		"header": [
																			{
																				"key": "x-mock-response-code",
																				"value": "204",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{{requestBody}}",
																			"options": {
																				"raw": {
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{uri}}",
																			"host": [
																				"{{uri}}"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "Check /core-model-1-4:control-construct",
																	"event": [
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					"/****************************************************************************************\r",
																					"* Loading Input Data\r",
																					"****************************************************************************************/\r",
																					"/****************************************************************************************\r",
																					"* Loading Input Data\r",
																					"****************************************************************************************/\r",
																					"var APPLICATION;\r",
																					"var AUTHORIZATION;\r",
																					"try {\r",
																					"    APPLICATION = pm.environment.get(\"application\");\r",
																					"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																					"\r",
																					"    oamPath = \"/core-model-1-4:control-construct\";\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Environment variables could not be loaded.\");\r",
																					"}\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Defining Request Body\r",
																					"****************************************************************************************/\r",
																					"var REQUEST_BODY;\r",
																					"try {\r",
																					"    REQUEST_BODY = \"\";\r",
																					"} catch (error) {\r",
																					"    console.log(\"!Could not define request body. \");\r",
																					"}\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Setting Local Variables and Preparing the Request\r",
																					"****************************************************************************************/\r",
																					"try {\r",
																					"    let URI;\r",
																					"    URI = APPLICATION.serverUrl + oamPath;\r",
																					"\r",
																					"    let ACCEPT;\r",
																					"    ACCEPT = \"application/json\";\r",
																					"\r",
																					"    let CONTENT_TYPE;\r",
																					"    CONTENT_TYPE = \"application/json\";\r",
																					"\r",
																					"    pm.variables.clear();\r",
																					"\r",
																					"    pm.variables.set(\"uri\", URI);\r",
																					"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																					"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Local variables could not be set.\");\r",
																					"}\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Functions\r",
																					"****************************************************************************************/"
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"/****************************************************************************************\r",
																					"* Loading Input Data\r",
																					"****************************************************************************************/\r",
																					"var expectedLogicalTerminationPoint;\r",
																					"var expectedForwardingConstruct;\r",
																					"try {\r",
																					"    expectedLogicalTerminationPoint = pm.collectionVariables.get(\"ltpList\");\r",
																					"    expectedForwardingConstruct = pm.collectionVariables.get(\"fcList\");\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Collection variables could not be loaded.\");\r",
																					"}\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Extracting Result\r",
																					"****************************************************************************************/\r",
																					"var RESPONSE_CODE;\r",
																					"var RESPONSE;\r",
																					"try {\r",
																					"    let response;\r",
																					"    response = pm.response;\r",
																					"\r",
																					"    RESPONSE_CODE = parseInt(response.code);\r",
																					"\r",
																					"    if (Math.floor(RESPONSE_CODE / 100) === 2) {\r",
																					"        RESPONSE = JSON.parse(response.stream);\r",
																					"    } else {\r",
																					"        RESPONSE = [];\r",
																					"    }\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Result value lists could not be extracted.\");\r",
																					"}\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Testing\r",
																					"****************************************************************************************/\r",
																					"try {\r",
																					"    pm.test(\"GET /core-model-1-4:control-construct responds 200\", function () {\r",
																					"        pm.expect(RESPONSE_CODE).to.equal(200);\r",
																					"    });\r",
																					"\r",
																					"    let actualLtpList;\r",
																					"    actualLtpList = RESPONSE[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																					"\r",
																					"    pm.test(\"Received logical-termination-point is same as intial instance \", function () {\r",
																					"        pm.expect(actualLtpList).to.deep.equal(expectedLogicalTerminationPoint);\r",
																					"    });\r",
																					"\r",
																					"    let actualFcList;\r",
																					"    actualFcList = RESPONSE[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
																					"\r",
																					"    pm.test(\"Received forwarding-construct is same as intial instance \", function () {\r",
																					"        pm.expect(actualFcList).to.deep.equal(expectedForwardingConstruct);\r",
																					"    });\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Testing could not be executed.\");\r",
																					"}\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Functions\r",
																					"****************************************************************************************/"
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"protocolProfileBehavior": {
																		"disableBodyPruning": true
																	},
																	"request": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "x-mock-response-code",
																				"value": "200",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{{requestBody}}",
																			"options": {
																				"raw": {
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{uri}}",
																			"host": [
																				"{{uri}}"
																			]
																		}
																	},
																	"response": []
																}
															]
														},
														{
															"name": "domain-name update",
															"item": [
																{
																	"name": "reference /core-model-1-4:control-construct",
																	"event": [
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					"console.log(\"\\n-----  /v1/regard-application acceptance -- address/domain-name attribute update notified to ALT -------------------------------\");\r",
																					"/****************************************************************************************\r",
																					"* Loading Input Data\r",
																					"****************************************************************************************/\r",
																					"var APPLICATION;\r",
																					"try {\r",
																					"    APPLICATION = pm.environment.get(\"application\");\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Environment variables could not be loaded.\");\r",
																					"}\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Setting Local Variables and Preparing the Request\r",
																					"****************************************************************************************/\r",
																					"try {\r",
																					"    let URI;\r",
																					"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																					"\r",
																					"    let REQUEST_BODY;\r",
																					"    REQUEST_BODY = \"\";\r",
																					"\r",
																					"    let AUTHORIZATION;\r",
																					"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																					"\r",
																					"    let ACCEPT;\r",
																					"    ACCEPT = \"application/json\";\r",
																					"\r",
																					"    let CONTENT_TYPE;\r",
																					"    CONTENT_TYPE = \"application/json\";\r",
																					"\r",
																					"\r",
																					"    pm.variables.clear();\r",
																					"\r",
																					"    pm.variables.set(\"uri\", URI);\r",
																					"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																					"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Local variables could not be set.\");\r",
																					"}\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Functions\r",
																					"****************************************************************************************/\r",
																					"\r",
																					""
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"/****************************************************************************************\r",
																					"* Loading Input Data\r",
																					"****************************************************************************************/\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Extracting Result\r",
																					"****************************************************************************************/\r",
																					"var ltpList;\r",
																					"var fcList;\r",
																					"try {\r",
																					"    let response;\r",
																					"    response = pm.response;\r",
																					"    \r",
																					"    let responseCode;\r",
																					"    responseCode = parseInt(response.code);\r",
																					"    \r",
																					"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																					"        let responseObject;\r",
																					"        responseObject = JSON.parse(response.stream);\r",
																					"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																					"        fcList = responseObject[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
																					"\r",
																					"    } else {\r",
																					"        ltpList = [];\r",
																					"        fcList = [];\r",
																					"    }\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! ltpList could not be extracted.\");\r",
																					"}\r",
																					"\r",
																					"var currentOperationServer;\r",
																					"var executionAndTraceLogHttpClientLtp;\r",
																					"var executionAndTraceLogTcpClientLtp;\r",
																					"var httpClientLtp;\r",
																					"var tcpClientLtp;\r",
																					"var applicationLayerTopologyHttpClientLtp;\r",
																					"var updateLtpOperationClientLtp;\r",
																					"try {\r",
																					"    currentOperationServer = FindOperationServer(\"/v1/regard-application\", ltpList);\r",
																					"\r",
																					"    //Execution And Trace Log\r",
																					"    let recordServiceRequestOperationClientLtp = FindOperationClientUsingCallback(\"ServiceRequestCausesLoggingRequest\", fcList, ltpList)\r",
																					"    executionAndTraceLogHttpClientLtp = FindServingLtp(recordServiceRequestOperationClientLtp, ltpList);\r",
																					"    executionAndTraceLogTcpClientLtp = FindServingLtp(executionAndTraceLogHttpClientLtp, ltpList);\r",
																					"\r",
																					"    //Ltp Update Request\r",
																					"    updateLtpOperationClientLtp = FindOperationClientUsingCallback(\"ServiceRequestCausesLtpUpdateRequest\", fcList, ltpList)\r",
																					"    applicationLayerTopologyHttpClientLtp = FindServingLtp(updateLtpOperationClientLtp, ltpList);\r",
																					"\r",
																					"    //Inquiring OAM approvals\r",
																					"    let outputFcPortListInquireOamRequestApprovals;\r",
																					"    outputFcPortListInquireOamRequestApprovals = FindOutputFcPortList(\"NewApplicationCausesRequestForInquiringOamRequestApprovals\", fcList);\r",
																					"    let ltpInstance = FindRandomLtpInstancesFromFc(outputFcPortListInquireOamRequestApprovals, ltpList)\r",
																					"    httpClientLtp = ltpInstance.httpClientLtp;\r",
																					"    tcpClientLtp = FindServingLtp(httpClientLtp, ltpList);\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(error);\r",
																					"    console.log(\"! Reference objects could not be extracted.\");\r",
																					"} \r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Setting Collection Variables\r",
																					"****************************************************************************************/\r",
																					"try {\r",
																					"    pm.collectionVariables.clear();\r",
																					"    \r",
																					"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																					"\r",
																					"    pm.collectionVariables.set(\"executionAndTraceLogHttpClientLtp\", executionAndTraceLogHttpClientLtp);\r",
																					"    pm.collectionVariables.set(\"executionAndTraceLogTcpClientLtp\", executionAndTraceLogTcpClientLtp);\r",
																					"    \r",
																					"    pm.collectionVariables.set(\"httpClientLtp\", httpClientLtp);\r",
																					"    pm.collectionVariables.set(\"tcpClientLtp\", tcpClientLtp);\r",
																					"\r",
																					"    pm.collectionVariables.set(\"applicationLayerTopologyHttpClientLtp\", applicationLayerTopologyHttpClientLtp);\r",
																					"    pm.collectionVariables.set(\"updateLtpOperationClientLtp\", updateLtpOperationClientLtp);\r",
																					"    \r",
																					"    pm.collectionVariables.set(\"ltpList\", ltpList);\r",
																					"    pm.collectionVariables.set(\"fcList\", fcList);\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Collection variables could not be set.\");\r",
																					"}\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Functions\r",
																					"****************************************************************************************/\r",
																					"\r",
																					"function FindOperationServer(operationName, ltpList) {\r",
																					"    let operationServer;\r",
																					"    operationServer = \"\";\r",
																					"    try {\r",
																					"        let sampleUuid;\r",
																					"        for(let i=0; i<ltpList.length; i++) {\r",
																					"            sampleUuid = ltpList[i][\"uuid\"];\r",
																					"            if(sampleUuid.includes(\"op-s-\")) {\r",
																					"                let sampleOperationName;\r",
																					"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																					"                if(sampleOperationName == operationName) {\r",
																					"                    operationServer = ltpList[i];\r",
																					"                    return operationServer;\r",
																					"                }\r",
																					"            }\r",
																					"        }\r",
																					"    } catch (error) {\r",
																					"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																					"    }\r",
																					"    return operationServer;\r",
																					"}\r",
																					"\r",
																					"function FindRandomLtpInstancesFromFc(outputFcPortList, ltpList) {\r",
																					"    let ltpInstance = {};\r",
																					"    try {\r",
																					"        for ( let i=0; i<outputFcPortList.length; i++ ) {\r",
																					"            let randomOutputFcPort = outputFcPortList[Math.floor(Math.random() * outputFcPortList.length)];\r",
																					"            let outputLtpUuid = randomOutputFcPort[\"logical-termination-point\"];\r",
																					"            let operationClientLtp = FindActualInstanceByUuid(outputLtpUuid, ltpList);\r",
																					"\r",
																					"            let httpClientLtp = FindServingLtp(operationClientLtp, ltpList);\r",
																					"            let sampleApplicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																					"\r",
																					"            if (sampleApplicationName != \"AdministratorAdministration\") {\r",
																					"\t\t\t\tltpInstance = { httpClientLtp, operationClientLtp };\r",
																					"                break;\r",
																					"            }\r",
																					"        }\r",
																					"    } catch(error) {\r",
																					"        console.log(error);\r",
																					"        console.log(\"! Exception in function : FindRandomLtpInstancesFromFc. \")\r",
																					"    } \r",
																					"    return ltpInstance;\r",
																					"}\r",
																					"\r",
																					"function FindOutputFcPortList(forwardingName, fcList) {\r",
																					"    let outputFcPortList;\r",
																					"    outputFcPortList = [];\r",
																					"    try {\r",
																					"        for( let i=0; i<fcList.length; i++ ) {\r",
																					"            for(let j=0; j<fcList[i][\"name\"].length; j++) {               \r",
																					"                if(fcList[i][\"name\"][j][\"value\"] == forwardingName) {\r",
																					"                    fcPortList = fcList[i][\"fc-port\"];\r",
																					"                    for(let k=0;k<fcPortList.length;k++) {\r",
																					"                        if(fcPortList[k][\"port-direction\"] == \"core-model-1-4:PORT_DIRECTION_TYPE_OUTPUT\") {\r",
																					"                            outputFcPortList.push(fcPortList[k]);\r",
																					"                        }\r",
																					"                    }\r",
																					"                    return outputFcPortList;\r",
																					"                }\r",
																					"            }\r",
																					"        }\r",
																					"    } catch (error) {\r",
																					"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																					"    }\r",
																					"    return outputFcPortList;\r",
																					"}\r",
																					"\r",
																					"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
																					"    let actualInstance;\r",
																					"    actualInstance = {};\r",
																					"    try {\r",
																					"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
																					"            let sampleUuid;\r",
																					"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
																					"            if( sampleUuid == expectedUuid ) {\r",
																					"                actualInstance = actualLtpList[i];\r",
																					"                return actualInstance;\r",
																					"            }\r",
																					"        }\r",
																					"\r",
																					"    } catch (error) {\r",
																					"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																					"    }\r",
																					"    return undefined;\r",
																					"}\r",
																					"\r",
																					"function FindServingLtp(clientLtp, ltpList) {\r",
																					"    let servingLtp;\r",
																					"    servingLtp = {};\r",
																					"    try{\r",
																					"        let serverLtpUuid;\r",
																					"        serverLtpUuid = clientLtp[\"server-ltp\"][0];\r",
																					"        for( let i=0; i<ltpList.length; i++ ) {\r",
																					"            let sampleUuid;\r",
																					"            sampleUuid = ltpList[i][\"uuid\"];\r",
																					"            if( sampleUuid == serverLtpUuid ) {\r",
																					"                servingLtp = ltpList[i];\r",
																					"                return servingLtp;\r",
																					"            }\r",
																					"        }\r",
																					"    } catch(error) {\r",
																					"        console.log(error);\r",
																					"        console.log(\"! Exception in function : FindServingLtp. \")\r",
																					"    }\r",
																					"    return servingLtp;\r",
																					"}\r",
																					"\r",
																					"function FindOperationClientUsingCallback(callback, fcList, ltpList) {\r",
																					"    let operationClientLtp;\r",
																					"    try {\r",
																					"        let outputFcPortList = FindOutputFcPortList(callback, fcList);\r",
																					"        let randomOutputFcPort = outputFcPortList[Math.floor(Math.random() * outputFcPortList.length)];\r",
																					"        let outputLtpUuid = randomOutputFcPort[\"logical-termination-point\"];\r",
																					"        operationClientLtp = FindActualInstanceByUuid(outputLtpUuid, ltpList);\r",
																					"    } catch (error) {\r",
																					"        console.log(error);\r",
																					"        console.log(\"! Exception in function FindOperationClientUsingCallback. \");\r",
																					"    }\r",
																					"    return  operationClientLtp\r",
																					"}\r",
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"protocolProfileBehavior": {
																		"disableBodyPruning": true
																	},
																	"request": {
																		"auth": {
																			"type": "noauth"
																		},
																		"method": "GET",
																		"header": [
																			{
																				"key": "x-mock-response-code",
																				"value": "200",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{{requestBody}}",
																			"options": {
																				"raw": {
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{uri}}",
																			"host": [
																				"{{uri}}"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "reference ExecutionAndTraceLog/core-model-1-4:control-construct",
																	"event": [
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					"/****************************************************************************************\r",
																					"* Loading Input Data\r",
																					"****************************************************************************************/\r",
																					"var APPLICATION;\r",
																					"var AUTHORIZATION;\r",
																					"var applicationProtocol;\r",
																					"var applicationAddress;\r",
																					"var applicationPort;\r",
																					"try {\r",
																					"    APPLICATION = pm.environment.get(\"application\");\r",
																					"\r",
																					"    let executionAndTraceLogTcpClientLtp;\r",
																					"    executionAndTraceLogTcpClientLtp = pm.collectionVariables.get(\"executionAndTraceLogTcpClientLtp\");\r",
																					"\r",
																					"    applicationProtocol = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																					"    applicationProtocol = applicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																					"    applicationAddress = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																					"    if(applicationAddress.hasOwnProperty(\"ip-address\")) {\r",
																					"        applicationAddress = applicationAddress[\"ip-address\"][\"ipv-4-address\"];\r",
																					"    } else {\r",
																					"        applicationAddress = applicationAddress[\"domain-name\"];\r",
																					"    }\r",
																					"    applicationPort = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																					" \r",
																					"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Environment variables could not be loaded.\");\r",
																					"}\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Defining Request Body\r",
																					"****************************************************************************************/\r",
																					"var REQUEST_BODY;\r",
																					"try {\r",
																					"    REQUEST_BODY = \"\";\r",
																					"} catch (error) {\r",
																					"    console.log(\"!Could not define request body. \");\r",
																					"}\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Setting Local Variables and Preparing the Request\r",
																					"****************************************************************************************/\r",
																					"try {\r",
																					"    let URI;\r",
																					"    URI = applicationProtocol + \"://\" + applicationAddress + \":\" + applicationPort + \"/core-model-1-4:control-construct\";\r",
																					"    //URI = \"http://9d098835-4e91-48f3-9761-04a82ff2843e.mock.pstmn.io\" + \"/core-model-1-4:control-construct\";\r",
																					"\r",
																					"    let ACCEPT;\r",
																					"    ACCEPT = \"application/json\";\r",
																					"\r",
																					"    let CONTENT_TYPE;\r",
																					"    CONTENT_TYPE = \"application/json\";\r",
																					"\r",
																					"    pm.variables.clear();\r",
																					"\r",
																					"    pm.variables.set(\"uri\", URI);\r",
																					"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																					"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Local variables could not be set.\");\r",
																					"}\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Functions\r",
																					"****************************************************************************************/\r",
																					"\r",
																					""
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"/****************************************************************************************\r",
																					"* Loading Input Data\r",
																					"****************************************************************************************/\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Extracting Result\r",
																					"****************************************************************************************/\r",
																					"var ltpList;\r",
																					"try {\r",
																					"    let response;\r",
																					"    response = pm.response;\r",
																					"    \r",
																					"    let responseCode;\r",
																					"    responseCode = parseInt(response.code);\r",
																					"    \r",
																					"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																					"        let responseObject;\r",
																					"        responseObject = JSON.parse(response.stream);\r",
																					"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																					"\r",
																					"    } else {\r",
																					"        ltpList = [];\r",
																					"    }\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! ltpList could not be extracted.\");\r",
																					"}\r",
																					"\r",
																					"var listRecordsOfFlowOperationKey;\r",
																					"try {\r",
																					"    listRecordsOfFlowOperationKey = FindOperationKeyForOperationName(\"/v1/list-records-of-flow\", ltpList);\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(error);\r",
																					"    console.log(\"! Reference objects could not be extracted.\");\r",
																					"} \r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Setting Collection Variables\r",
																					"****************************************************************************************/\r",
																					"try {\r",
																					"    pm.collectionVariables.set(\"listRecordsOfFlowOperationKey\", listRecordsOfFlowOperationKey);\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Collection variables could not be set.\");\r",
																					"}\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Functions\r",
																					"****************************************************************************************/\r",
																					"function FindOperationKeyForOperationName(operationName, ltpList) {\r",
																					"    let operationKey;\r",
																					"    operationKey = \"\";\r",
																					"    try {\r",
																					"         let sampleUuid;\r",
																					"         for ( let i=0; i<ltpList.length; i++) {\r",
																					"            sampleUuid = ltpList[i][\"uuid\"];\r",
																					"            if(sampleUuid.includes(\"op-s-\")){\r",
																					"                let sampleOperationName;\r",
																					"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																					"                if(sampleOperationName == operationName) {\r",
																					"                    operationKey = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																					"                    return operationKey; \r",
																					"                }\r",
																					"            }\r",
																					"         }\r",
																					"\r",
																					"    } catch (error) {\r",
																					"        console.log(\" ! Exception in function : FindOperationKeyForOperationName\")\r",
																					"    }\r",
																					"    return operationKey;\r",
																					"}\r",
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"protocolProfileBehavior": {
																		"disableBodyPruning": true
																	},
																	"request": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "x-mock-response-code",
																				"value": "200",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{{requestBody}}",
																			"options": {
																				"raw": {
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{uri}}",
																			"host": [
																				"{{uri}}"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "sampling /v1/regard-application",
																	"event": [
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					"/****************************************************************************************\r",
																					"* Loading Input Data\r",
																					"****************************************************************************************/\r",
																					"var APPLICATION;\r",
																					"var OPERATION_KEY;\r",
																					"var CURRENT_ORIGINATOR;\r",
																					"var applicationName;\r",
																					"var releaseNumber;\r",
																					"var protocol;\r",
																					"var dummyAddress;\r",
																					"var port;\r",
																					"try {\r",
																					"    APPLICATION = pm.environment.get(\"application\");\r",
																					"\r",
																					"    let ltpList;\r",
																					"    ltpList = APPLICATION[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																					"\r",
																					"    CURRENT_ORIGINATOR = FindHttpServerApplicationName(ltpList);\r",
																					"\r",
																					"    let currentOperationServer;\r",
																					"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																					"    \r",
																					"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																					"\r",
																					"    let httpClientLtp;\r",
																					"    httpClientLtp = pm.collectionVariables.get(\"httpClientLtp\");\r",
																					"\r",
																					"    applicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																					"    releaseNumber = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																					"\r",
																					"    let tcpClientLtp;\r",
																					"    tcpClientLtp = pm.collectionVariables.get(\"tcpClientLtp\");\r",
																					"\r",
																					"    protocol = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																					"    protocol = protocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																					"\r",
																					"    let dummyDomainName = RandomDomainName();\r",
																					"    dummyAddress = {\r",
																					"        \"domain-name\": dummyDomainName\r",
																					"    };\r",
																					"    port = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(error);\r",
																					"    console.log(\"! Input Data could not be loaded.\");\r",
																					"}\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Defining Dummy Parameters\r",
																					"****************************************************************************************/\r",
																					"var USER_NAME;\r",
																					"var ORIGINATOR;\r",
																					"var X_CORRELATOR;\r",
																					"var TRACE_INDICATOR;\r",
																					"var CUSTOMER_JOURNEY;\r",
																					"try {\r",
																					"    USER_NAME = APPLICATION.userName;\r",
																					"    ORIGINATOR = \"Postman\";\r",
																					"    X_CORRELATOR = CreateXCorrelator();\r",
																					"    TRACE_INDICATOR = \"1\";\r",
																					"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																					"    \r",
																					"} catch (error) {\r",
																					"    console.log(\"! Could not define dummy values for parameters. \");\r",
																					"}\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Defining Request Body\r",
																					"****************************************************************************************/\r",
																					"var REQUEST_BODY;\r",
																					"try {\r",
																					"    REQUEST_BODY = '{'\r",
																					"        + '\"application-name\" : ' + '\"' + applicationName + '\",'\r",
																					"        + '\"release-number\" : ' + '\"' + releaseNumber + '\",'\r",
																					"        + '\"protocol\" : ' + '\"' + protocol + '\",'\r",
																					"        + '\"address\" : ' + JSON.stringify(dummyAddress) + ','\r",
																					"        + '\"port\" : ' +  port\r",
																					"    +'}';\r",
																					"} catch (error) {\r",
																					"    console.log(\"!Could not define request body. \");\r",
																					"}\r",
																					"/****************************************************************************************\r",
																					"* Setting Collection Variables\r",
																					"****************************************************************************************/\r",
																					"try {\r",
																					"    pm.collectionVariables.set(\"user\", USER_NAME);\r",
																					"    pm.collectionVariables.set(\"originator\", ORIGINATOR);\r",
																					"    pm.collectionVariables.set(\"xCorrelator\", X_CORRELATOR);\r",
																					"    pm.collectionVariables.set(\"traceIndicator\", TRACE_INDICATOR);\r",
																					"    pm.collectionVariables.set(\"customerJourney\", CUSTOMER_JOURNEY);\r",
																					"    pm.collectionVariables.set(\"currentOriginator\", CURRENT_ORIGINATOR);\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Collection variables could not be set.\");\r",
																					"}\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Setting Local Variables and Preparing the Request\r",
																					"****************************************************************************************/\r",
																					"try {\r",
																					"    let URI;\r",
																					"    URI = APPLICATION.serverUrl + \"/v1/regard-application\";\r",
																					"\r",
																					"    let ACCEPT;\r",
																					"    ACCEPT = \"application/json\";\r",
																					"\r",
																					"    let CONTENT_TYPE;\r",
																					"    CONTENT_TYPE = \"application/json\";\r",
																					"\r",
																					"    pm.variables.clear();\r",
																					"\r",
																					"    pm.variables.set(\"uri\", URI);\r",
																					"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																					"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																					"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																					"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																					"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																					"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(error);\r",
																					"    console.log(\"! Local variables could not be set.\");\r",
																					"}\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Functions\r",
																					"****************************************************************************************/\r",
																					"\r",
																					"function CreateXCorrelator() {\r",
																					"    let xCorrelator;\r",
																					"    xCorrelator = \"\";\r",
																					"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																					"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																					"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																					"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																					"    xCorrelator += GenerateRandomHexString(12);\r",
																					"    return xCorrelator;\r",
																					"}\r",
																					"\r",
																					"function GenerateRandomHexString(length) {\r",
																					"    var randomRandomHexString = \"\";\r",
																					"    while (randomRandomHexString.length < length) {\r",
																					"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																					"    }\r",
																					"    return randomRandomHexString.substring(0,length);\r",
																					"}\r",
																					"\r",
																					"function RandomDomainName() {\r",
																					"    let randomAddress;\r",
																					"    let dummySubdomain = GenerateRandomString(Math.floor(1 + Math.random() * 10));\r",
																					"    let randomDomainPartLength = Math.floor(2 + Math.random() * 5);\r",
																					"    let dummyDomainName = \"\";\r",
																					"    for(let i=0; i<randomDomainPartLength; i += 2 ) {\r",
																					"        dummyDomainName = dummyDomainName + GenerateRandomString(Math.floor(1 + Math.random() * 4));\r",
																					"        dummyDomainName = dummyDomainName + GenerateRandomSeparator();\r",
																					"        dummyDomainName = dummyDomainName + GenerateRandomString(Math.floor(1 + Math.random() * 4));\r",
																					"    }\r",
																					"    let dummyTopLevelDomain = GenerateRandomString(Math.floor(2 + Math.random() * 5));\r",
																					"    randomAddress = dummySubdomain + \".\" + dummyDomainName + \".\" + dummyTopLevelDomain; \r",
																					"    return randomAddress;\r",
																					"}\r",
																					"\r",
																					"function GenerateRandomString(length) {\r",
																					"    let randomString;\r",
																					"    randomString = \"\";\r",
																					"    try {\r",
																					"        let characters = \"abcdefghijklmnopqrstuvwxyz\";\r",
																					"        let charactersLength = characters.length;\r",
																					"        for (let i = 0; i < length; i++) {\r",
																					"            randomString += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																					"        }\r",
																					"    } catch (error) {\r",
																					"        console.log(\"! Could not generate random string. \");\r",
																					"    }\r",
																					"    return randomString;\r",
																					"}\r",
																					"\r",
																					"function GenerateRandomSeparator() {\r",
																					"    let separators = [\".\", \"-\"];\r",
																					"    let randomSeparator = separators[Math.floor(Math.random() * separators.length)];\r",
																					"    return randomSeparator;\r",
																					"}\r",
																					"\r",
																					"function FindHttpServerApplicationName(ltpList) {\r",
																					"    let applicationName;\r",
																					"    applicationName = \"\";\r",
																					"    for( let i=0; i<ltpList.length; i++ ) {\r",
																					"        let sampleUuid;\r",
																					"        sampleUuid = ltpList[i][\"uuid\"];\r",
																					"        if(sampleUuid.includes(\"http-s-\")) {\r",
																					"            applicationName = ltpList[i][\"layer-protocol\"][0][\"http-server-interface-1-0:http-server-interface-pac\"][\"http-server-interface-capability\"][\"application-name\"];\r",
																					"            return applicationName;\r",
																					"        }\r",
																					"    }\r",
																					"    return applicationName;\r",
																					"}"
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"/****************************************************************************************\r",
																					"* Loading Input Data\r",
																					"****************************************************************************************/\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Extracting Result\r",
																					"****************************************************************************************/\r",
																					"var RESPONSE_CODE;\r",
																					"try {\r",
																					"    let response;\r",
																					"    response = pm.response;\r",
																					"\r",
																					"    RESPONSE_CODE = parseInt(response.code);\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Response Code could not be extracted.\");\r",
																					"}    \r",
																					"\r",
																					"const currentCount = 0;\r",
																					"try {\r",
																					"\tpm.collectionVariables.set(\"currentCount\", currentCount);\r",
																					"\r",
																					"} catch(error) {\r",
																					"    console.log(\" !Could not set currentCount. \");\r",
																					"}\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Testing\r",
																					"****************************************************************************************/\r",
																					"try {\r",
																					"    pm.test(\"POST /v1/regard-application responds 204\", function () {\r",
																					"        pm.expect(RESPONSE_CODE).to.equal(204);\r",
																					"    });\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Testing could not be executed.\");\r",
																					"}\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Functions\r",
																					"****************************************************************************************/\r",
																					"\r",
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "x-mock-response-code",
																				"value": "204",
																				"type": "default"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{{requestBody}}",
																			"options": {
																				"raw": {
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{uri}}",
																			"host": [
																				"{{uri}}"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "Expected ExecutionAndTraceLog/v1/list-records-of-flow for /v1/regard-application:: Update LTP notified? domain-name update",
																	"event": [
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					"/****************************************************************************************\r",
																					"* Loading Input Data\r",
																					"****************************************************************************************/\r",
																					"var APPLICATION;\r",
																					"var OPERATION_KEY;\r",
																					"var applicationProtocol;\r",
																					"var applicationAddress;\r",
																					"var applicationPort;\r",
																					"var xCorrelatorUnderTest;\r",
																					"var latestMatch;\r",
																					"var numberOfRecords;\r",
																					"try {\r",
																					"    APPLICATION = pm.environment.get(\"application\");\r",
																					"\r",
																					"    let executionAndTraceLogTcpClientLtp;\r",
																					"    executionAndTraceLogTcpClientLtp = pm.collectionVariables.get(\"executionAndTraceLogTcpClientLtp\");\r",
																					"    \r",
																					"    applicationProtocol = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																					"    applicationProtocol = applicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																					"    applicationAddress = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																					"    if(applicationAddress.hasOwnProperty(\"ip-address\")) {\r",
																					"        applicationAddress = applicationAddress[\"ip-address\"][\"ipv-4-address\"];\r",
																					"    } else {\r",
																					"        applicationAddress = applicationAddress[\"domain-name\"];\r",
																					"    }\r",
																					"    applicationPort = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																					"\r",
																					"    OPERATION_KEY = pm.collectionVariables.get(\"listRecordsOfFlowOperationKey\");\r",
																					"    xCorrelatorUnderTest = pm.collectionVariables.get(\"xCorrelator\");\r",
																					"    latestMatch = 0;\r",
																					"    numberOfRecords = 100;\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(error)\r",
																					"    console.log(\"! Input Data could not be loaded.\");\r",
																					"}\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Defining Dummy Parameters\r",
																					"****************************************************************************************/\r",
																					"var USER_NAME;\r",
																					"var ORIGINATOR;\r",
																					"var X_CORRELATOR;\r",
																					"var TRACE_INDICATOR;\r",
																					"var CUSTOMER_JOURNEY;\r",
																					"try {\r",
																					"    USER_NAME = APPLICATION.userName;\r",
																					"    ORIGINATOR = \"Postman\";\r",
																					"    X_CORRELATOR = CreateXCorrelator();\r",
																					"    TRACE_INDICATOR = \"1\";\r",
																					"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																					"    \r",
																					"} catch (error) {\r",
																					"    console.log(\"! Could not define dummy values for parameters. \");\r",
																					"}\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Defining Request Body\r",
																					"****************************************************************************************/\r",
																					"var REQUEST_BODY;\r",
																					"try {\r",
																					"    REQUEST_BODY = '{'\r",
																					"                + '\"x-correlator\": \"' + xCorrelatorUnderTest +'\",'\r",
																					"                + '\"latest-match\": ' + latestMatch + ','\r",
																					"                + '\"number-of-records\":' + numberOfRecords\r",
																					"                + '}';\r",
																					"} catch (error) {\r",
																					"    console.log(\"!Could not define request body. \");\r",
																					"}\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Setting Collection Variables\r",
																					"****************************************************************************************/\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Setting Local Variables and Preparing the Request\r",
																					"****************************************************************************************/\r",
																					"try {\r",
																					"    let URI;\r",
																					"    URI = applicationProtocol + \"://\" + applicationAddress + \":\" + applicationPort + \"/v1/list-records-of-flow\";\r",
																					"    //URI = \"http://9d098835-4e91-48f3-9761-04a82ff2843e.mock.pstmn.io/v1/list-records-of-flow\";\r",
																					"\r",
																					"    let ACCEPT;\r",
																					"    ACCEPT = \"application/json\";\r",
																					"\r",
																					"    let CONTENT_TYPE;\r",
																					"    CONTENT_TYPE = \"application/json\";\r",
																					"\r",
																					"    pm.variables.clear();\r",
																					"\r",
																					"    pm.variables.set(\"uri\", URI);\r",
																					"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																					"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																					"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																					"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																					"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																					"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(error);\r",
																					"    console.log(\"! Local variables could not be set.\");\r",
																					"}\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Functions\r",
																					"****************************************************************************************/\r",
																					"function CreateXCorrelator() {\r",
																					"    let xCorrelator;\r",
																					"    xCorrelator = \"\";\r",
																					"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																					"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																					"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																					"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																					"    xCorrelator += GenerateRandomHexString(12);\r",
																					"    return xCorrelator;\r",
																					"}\r",
																					"\r",
																					"function GenerateRandomHexString(length) {\r",
																					"    var randomRandomHexString = \"\";\r",
																					"    while (randomRandomHexString.length < length) {\r",
																					"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																					"    }\r",
																					"    return randomRandomHexString.substring(0, length);\r",
																					"}\r",
																					""
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"/****************************************************************************************\r",
																					"* Constant variables\r",
																					"****************************************************************************************/\r",
																					"const SERIAL_TRACE_INDICATOR = \".1\";\r",
																					"var retryMaxCount;\r",
																					"var retryWaitingPeriod;\r",
																					"var currentCount;\r",
																					"try {\r",
																					"    retryMaxCount = pm.environment.get(\"retryMaxCount\");\r",
																					"    retryWaitingPeriod = pm.environment.get(\"retryWaitingPeriod\");\r",
																					"    currentCount = pm.collectionVariables.get(\"currentCount\");\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Could not load constant variables Data. \");\r",
																					"}\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Loading Input Data\r",
																					"****************************************************************************************/\r",
																					"var expectedXCorrelator;\r",
																					"var expectedUser;\r",
																					"var expectedOriginator;\r",
																					"var expectedTraceIndicator;\r",
																					"var expectedApplicationName;\r",
																					"var expectedReleaseNumber;\r",
																					"var expectedOperationName;\r",
																					"try {\r",
																					"    expectedXCorrelator = pm.collectionVariables.get(\"xCorrelator\");\r",
																					"    expectedUser = pm.collectionVariables.get(\"user\");\r",
																					"    expectedOriginator = pm.collectionVariables.get(\"currentOriginator\");\r",
																					"    expectedTraceIndicator = pm.collectionVariables.get(\"traceIndicator\");\r",
																					"    \r",
																					"    //Increment traceIndicator:\r",
																					"    expectedTraceIndicator = expectedTraceIndicator + SERIAL_TRACE_INDICATOR;\r",
																					"\r",
																					"    let expectedHttpClientLtp;\r",
																					"    expectedHttpClientLtp = pm.collectionVariables.get(\"applicationLayerTopologyHttpClientLtp\");\r",
																					"    expectedApplicationName = expectedHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																					"    expectedReleaseNumber = expectedHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																					"\r",
																					"    let expectedOperationClient;\r",
																					"    expectedOperationClient = pm.collectionVariables.get(\"updateLtpOperationClientLtp\");\r",
																					"    expectedOperationName = expectedOperationClient[\"layer-protocol\"][0][\"operation-client-interface-1-0:operation-client-interface-pac\"][\"operation-client-interface-configuration\"][\"operation-name\"];\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Could not load Input Data. \");\r",
																					"}\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Extracting Result\r",
																					"****************************************************************************************/\r",
																					"var RESPONSE_CODE;\r",
																					"var serviceRecordList;\r",
																					"try {\r",
																					"    let response;\r",
																					"    response = pm.response;\r",
																					"    \r",
																					"    RESPONSE_CODE = parseInt(response.code);\r",
																					"\r",
																					"    if(Math.floor(RESPONSE_CODE/100) === 2) {\r",
																					"        serviceRecordList = JSON.parse(response.stream);\r",
																					"    }\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Response Code could not be extracted.\");\r",
																					"}    \r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Testing\r",
																					"****************************************************************************************/\r",
																					"try {\r",
																					"    pm.test(\"POST ExecutionAndTraceLog/v1/list-records-of-flow responds 200\", function () {\r",
																					"        pm.expect(RESPONSE_CODE).to.equal(200);\r",
																					"    });\r",
																					"\r",
																					"    let foundAnEntryWithTheExpectedHeaderValuesInEatl;\r",
																					"    foundAnEntryWithTheExpectedHeaderValuesInEatl = false;\r",
																					"    let responseCodeofTriggeredForwarding;\r",
																					"    responseCodeofTriggeredForwarding = 0;\r",
																					"    for(let i=0; i<serviceRecordList.length; i++)  {\r",
																					"        if( serviceRecordList[i][\"application-name\"] == expectedApplicationName\r",
																					"                && serviceRecordList[i][\"release-number\"] == expectedReleaseNumber\r",
																					"                && serviceRecordList[i][\"operation-name\"] == expectedOperationName\r",
																					"                && serviceRecordList[i][\"x-correlator\"] == expectedXCorrelator\r",
																					"                && serviceRecordList[i][\"user\"] == expectedUser\r",
																					"                && serviceRecordList[i][\"originator\"] == expectedOriginator\r",
																					"                && serviceRecordList[i][\"trace-indicator\"] == expectedTraceIndicator ) {\r",
																					"\r",
																					"            foundAnEntryWithTheExpectedHeaderValuesInEatl = true;\r",
																					"            responseCodeofTriggeredForwarding =  serviceRecordList[i][\"response-code\"];\r",
																					"            break;\r",
																					"        }\r",
																					"    }\r",
																					"\r",
																					"    if (foundAnEntryWithTheExpectedHeaderValuesInEatl == false) {\r",
																					"        if( (currentCount < retryMaxCount) ) {\r",
																					"            setTimeout(()=>{\r",
																					"                postman.setNextRequest(request.name);\r",
																					"                currentCount = currentCount + 1;\r",
																					"                pm.collectionVariables.set(\"currentCount\", currentCount);\r",
																					"            }, retryWaitingPeriod);\r",
																					"        } else {\r",
																					"            pm.test(\"domain-name Update in LTP is successfully notified to ALT\", function () {\r",
																					"                pm.expect(foundAnEntryWithTheExpectedHeaderValuesInEatl).to.be.true;        \r",
																					"            });\r",
																					"        }\r",
																					"    } else {\r",
																					"        pm.test(\"domain-name Update in LTP is successfully notified to ALT with response-code 204\", function () {\r",
																					"            pm.expect(responseCodeofTriggeredForwarding).to.equal(204);    \r",
																					"        });\r",
																					"    }\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(error);\r",
																					"    console.log(\"! Testing could not be executed.\");\r",
																					"}\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Functions\r",
																					"****************************************************************************************/\r",
																					"\r",
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "x-mock-response-code",
																				"value": "200",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{{requestBody}}",
																			"options": {
																				"raw": {
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{uri}}",
																			"host": [
																				"{{uri}}"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "initial tcp-c/remote-address",
																	"event": [
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					"/****************************************************************************************\r",
																					"* Loading Input Data\r",
																					"****************************************************************************************/\r",
																					"var APPLICATION;\r",
																					"var tcpClientUuid;\r",
																					"var initialRemoteAddress;\r",
																					"try {\r",
																					"    APPLICATION = pm.environment.get(\"application\");\r",
																					"    \r",
																					"    let tcpClientLtp;\r",
																					"    tcpClientLtp = pm.collectionVariables.get(\"tcpClientLtp\");\r",
																					"\r",
																					"    tcpClientUuid = tcpClientLtp[\"uuid\"];\r",
																					"\r",
																					"    initialRemoteAddress = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Variables could not be loaded.\");\r",
																					"}\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Setting Collection Variables\r",
																					"****************************************************************************************/\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Setting Local Variables and Preparing the Request\r",
																					"****************************************************************************************/\r",
																					"try {\r",
																					"    let URI;\r",
																					"    URI = APPLICATION.serverUrl \r",
																					"            + \"/core-model-1-4:control-construct/logical-termination-point=\"\r",
																					"            + tcpClientUuid\r",
																					"            + \"/layer-protocol=0/tcp-client-interface-1-0:tcp-client-interface-pac/tcp-client-interface-configuration/remote-address\";\r",
																					"\r",
																					"    let REQUEST_BODY;\r",
																					"    REQUEST_BODY = '{ '\r",
																					"                    +   '\"tcp-client-interface-1-0:remote-address\": ' + JSON.stringify(initialRemoteAddress)\r",
																					"                    + ' }';\r",
																					"\r",
																					"    let AUTHORIZATION;\r",
																					"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																					"\r",
																					"    let ACCEPT;\r",
																					"    ACCEPT = \"application/json\";\r",
																					"\r",
																					"    let CONTENT_TYPE;\r",
																					"    CONTENT_TYPE = \"application/json\";\r",
																					"\r",
																					"\r",
																					"    pm.variables.clear();\r",
																					"\r",
																					"    pm.variables.set(\"uri\", URI);\r",
																					"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																					"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(error)\r",
																					"    console.log(\"! Local variables could not be set.\");\r",
																					"}\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Functions\r",
																					"****************************************************************************************/\r",
																					"\r",
																					""
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "PUT",
																		"header": [
																			{
																				"key": "x-mock-response-code",
																				"value": "204",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{{requestBody}}",
																			"options": {
																				"raw": {
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{uri}}",
																			"host": [
																				"{{uri}}"
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "Check /core-model-1-4:control-construct",
																	"event": [
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					"/****************************************************************************************\r",
																					"* Loading Input Data\r",
																					"****************************************************************************************/\r",
																					"/****************************************************************************************\r",
																					"* Loading Input Data\r",
																					"****************************************************************************************/\r",
																					"var APPLICATION;\r",
																					"var AUTHORIZATION;\r",
																					"try {\r",
																					"    APPLICATION = pm.environment.get(\"application\");\r",
																					"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																					"\r",
																					"    oamPath = \"/core-model-1-4:control-construct\";\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Environment variables could not be loaded.\");\r",
																					"}\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Defining Request Body\r",
																					"****************************************************************************************/\r",
																					"var REQUEST_BODY;\r",
																					"try {\r",
																					"    REQUEST_BODY = \"\";\r",
																					"} catch (error) {\r",
																					"    console.log(\"!Could not define request body. \");\r",
																					"}\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Setting Local Variables and Preparing the Request\r",
																					"****************************************************************************************/\r",
																					"try {\r",
																					"    let URI;\r",
																					"    URI = APPLICATION.serverUrl + oamPath;\r",
																					"\r",
																					"    let ACCEPT;\r",
																					"    ACCEPT = \"application/json\";\r",
																					"\r",
																					"    let CONTENT_TYPE;\r",
																					"    CONTENT_TYPE = \"application/json\";\r",
																					"\r",
																					"    pm.variables.clear();\r",
																					"\r",
																					"    pm.variables.set(\"uri\", URI);\r",
																					"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																					"\r",
																					"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																					"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Local variables could not be set.\");\r",
																					"}\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Functions\r",
																					"****************************************************************************************/"
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"/****************************************************************************************\r",
																					"* Loading Input Data\r",
																					"****************************************************************************************/\r",
																					"var expectedLogicalTerminationPoint;\r",
																					"var expectedForwardingConstruct;\r",
																					"try {\r",
																					"    expectedLogicalTerminationPoint = pm.collectionVariables.get(\"ltpList\");\r",
																					"    expectedForwardingConstruct = pm.collectionVariables.get(\"fcList\");\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Collection variables could not be loaded.\");\r",
																					"}\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Extracting Result\r",
																					"****************************************************************************************/\r",
																					"var RESPONSE_CODE;\r",
																					"var RESPONSE;\r",
																					"try {\r",
																					"    let response;\r",
																					"    response = pm.response;\r",
																					"\r",
																					"    RESPONSE_CODE = parseInt(response.code);\r",
																					"\r",
																					"    if (Math.floor(RESPONSE_CODE / 100) === 2) {\r",
																					"        RESPONSE = JSON.parse(response.stream);\r",
																					"    } else {\r",
																					"        RESPONSE = [];\r",
																					"    }\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Result value lists could not be extracted.\");\r",
																					"}\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Testing\r",
																					"****************************************************************************************/\r",
																					"try {\r",
																					"    pm.test(\"GET /core-model-1-4:control-construct responds 200\", function () {\r",
																					"        pm.expect(RESPONSE_CODE).to.equal(200);\r",
																					"    });\r",
																					"\r",
																					"    let actualLtpList;\r",
																					"    actualLtpList = RESPONSE[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																					"\r",
																					"    pm.test(\"Received logical-termination-point is same as intial instance \", function () {\r",
																					"        pm.expect(actualLtpList).to.deep.equal(expectedLogicalTerminationPoint);\r",
																					"    });\r",
																					"\r",
																					"    let actualFcList;\r",
																					"    actualFcList = RESPONSE[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
																					"\r",
																					"    pm.test(\"Received forwarding-construct is same as intial instance \", function () {\r",
																					"        pm.expect(actualFcList).to.deep.equal(expectedForwardingConstruct);\r",
																					"    });\r",
																					"\r",
																					"} catch (error) {\r",
																					"    console.log(\"! Testing could not be executed.\");\r",
																					"}\r",
																					"\r",
																					"\r",
																					"/****************************************************************************************\r",
																					"* Functions\r",
																					"****************************************************************************************/"
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"protocolProfileBehavior": {
																		"disableBodyPruning": true
																	},
																	"request": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "x-mock-response-code",
																				"value": "200",
																				"type": "text"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{{requestBody}}",
																			"options": {
																				"raw": {
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{uri}}",
																			"host": [
																				"{{uri}}"
																			]
																		}
																	},
																	"response": []
																}
															]
														}
													],
													"description": "##Gets address update trigger update-ltp to ALT?\n#### Requires:\n- ExecutionAndTraceLog/OamLog server to operate\n\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - search CC for output fc-port of ServiceRequestCausesLoggingRequest, \nits corresponding op-c, http-c and tcp-c, storing them for later verification request. \n  - searching CC for output-fc-port of ServiceRequestCausesLtpUpdateRequest, its corresponding op-c, http-c, storing them.\n  - searching CC for op-s of /v1/regard-application, storing operation-key\n  -  searching CC for output fc-port of NewApplicationCausesRequestForInquiringOamRequestApprovals, find corresponding op-c, http-c and tcp-c, store them.\n- GETting EaTL/CC (while using IP, protocol and port from above)\n  - searching CC for op-c of /v1/list-records-of-flow, storing operation-key\n- POST /v1/regard-application with\n  - all attributes according to chosen set of http-c, tcp-c , BUT address attribute with random dummy value that matches the specified pattern.\n  - operation-key from above\n  - reasonable parameter\n\n#### Testing:\n- POST ExecutionAndTraceLog/v1/list-records-of-flow with \n   - IP and port from above\n   - operation-key from above\n   - DummyValue of x-correlator\n   - checking response for entry with application data from ServiceRequestCausesLtpUpdateRequest\n   - checking same record for containing DummyXCorrelator &DummyTraceIndicator\n\n#### Clearing:\n- PUT chosen tcp-c/address with intial value\n\n#### Clearance check:\n- Check if the logical-termination-point instance is the same as initial configuration"
												},
												{
													"name": "port update",
													"item": [
														{
															"name": "reference /core-model-1-4:control-construct",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"console.log(\"\\n-----  /v1/regard-application acceptance -- port attribute update notified to ALT -------------------------------\");\r",
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Environment variables could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																			"\r",
																			"    let REQUEST_BODY;\r",
																			"    REQUEST_BODY = \"\";\r",
																			"\r",
																			"    let AUTHORIZATION;\r",
																			"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var ltpList;\r",
																			"var fcList;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"    \r",
																			"    let responseCode;\r",
																			"    responseCode = parseInt(response.code);\r",
																			"    \r",
																			"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																			"        let responseObject;\r",
																			"        responseObject = JSON.parse(response.stream);\r",
																			"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																			"        fcList = responseObject[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
																			"\r",
																			"    } else {\r",
																			"        ltpList = [];\r",
																			"        fcList = [];\r",
																			"    }\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! ltpList could not be extracted.\");\r",
																			"}\r",
																			"\r",
																			"var currentOperationServer;\r",
																			"var executionAndTraceLogHttpClientLtp;\r",
																			"var executionAndTraceLogTcpClientLtp;\r",
																			"var httpClientLtp;\r",
																			"var tcpClientLtp;\r",
																			"var applicationLayerTopologyHttpClientLtp;\r",
																			"var updateLtpOperationClientLtp;\r",
																			"try {\r",
																			"    currentOperationServer = FindOperationServer(\"/v1/regard-application\", ltpList);\r",
																			"\r",
																			"    //Execution And Trace Log\r",
																			"    let recordServiceRequestOperationClientLtp = FindOperationClientUsingCallback(\"ServiceRequestCausesLoggingRequest\", fcList, ltpList)\r",
																			"    executionAndTraceLogHttpClientLtp = FindServingLtp(recordServiceRequestOperationClientLtp, ltpList);\r",
																			"    executionAndTraceLogTcpClientLtp = FindServingLtp(executionAndTraceLogHttpClientLtp, ltpList);\r",
																			"\r",
																			"    //Ltp Update Request\r",
																			"    updateLtpOperationClientLtp = FindOperationClientUsingCallback(\"ServiceRequestCausesLtpUpdateRequest\", fcList, ltpList)\r",
																			"    applicationLayerTopologyHttpClientLtp = FindServingLtp(updateLtpOperationClientLtp, ltpList);\r",
																			"\r",
																			"    //Inquiring OAM approvals\r",
																			"    let outputFcPortListInquireOamRequestApprovals;\r",
																			"    outputFcPortListInquireOamRequestApprovals = FindOutputFcPortList(\"NewApplicationCausesRequestForInquiringOamRequestApprovals\", fcList);\r",
																			"    let ltpInstance = FindRandomLtpInstancesFromFc(outputFcPortListInquireOamRequestApprovals, ltpList)\r",
																			"    httpClientLtp = ltpInstance.httpClientLtp;\r",
																			"    tcpClientLtp = FindServingLtp(httpClientLtp, ltpList);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Reference objects could not be extracted.\");\r",
																			"} \r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.collectionVariables.clear();\r",
																			"    \r",
																			"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																			"\r",
																			"    pm.collectionVariables.set(\"executionAndTraceLogHttpClientLtp\", executionAndTraceLogHttpClientLtp);\r",
																			"    pm.collectionVariables.set(\"executionAndTraceLogTcpClientLtp\", executionAndTraceLogTcpClientLtp);\r",
																			"    \r",
																			"    pm.collectionVariables.set(\"httpClientLtp\", httpClientLtp);\r",
																			"    pm.collectionVariables.set(\"tcpClientLtp\", tcpClientLtp);\r",
																			"\r",
																			"    pm.collectionVariables.set(\"applicationLayerTopologyHttpClientLtp\", applicationLayerTopologyHttpClientLtp);\r",
																			"    pm.collectionVariables.set(\"updateLtpOperationClientLtp\", updateLtpOperationClientLtp);\r",
																			"    \r",
																			"    pm.collectionVariables.set(\"ltpList\", ltpList);\r",
																			"    pm.collectionVariables.set(\"fcList\", fcList);\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Collection variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"function FindOperationServer(operationName, ltpList) {\r",
																			"    let operationServer;\r",
																			"    operationServer = \"\";\r",
																			"    try {\r",
																			"        let sampleUuid;\r",
																			"        for(let i=0; i<ltpList.length; i++) {\r",
																			"            sampleUuid = ltpList[i][\"uuid\"];\r",
																			"            if(sampleUuid.includes(\"op-s-\")) {\r",
																			"                let sampleOperationName;\r",
																			"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																			"                if(sampleOperationName == operationName) {\r",
																			"                    operationServer = ltpList[i];\r",
																			"                    return operationServer;\r",
																			"                }\r",
																			"            }\r",
																			"        }\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																			"    }\r",
																			"    return operationServer;\r",
																			"}\r",
																			"\r",
																			"function FindRandomLtpInstancesFromFc(outputFcPortList, ltpList) {\r",
																			"    let ltpInstance = {};\r",
																			"    try {\r",
																			"        for ( let i=0; i<outputFcPortList.length; i++ ) {\r",
																			"            let randomOutputFcPort = outputFcPortList[Math.floor(Math.random() * outputFcPortList.length)];\r",
																			"            let outputLtpUuid = randomOutputFcPort[\"logical-termination-point\"];\r",
																			"            let operationClientLtp = FindActualInstanceByUuid(outputLtpUuid, ltpList);\r",
																			"\r",
																			"            let httpClientLtp = FindServingLtp(operationClientLtp, ltpList);\r",
																			"            let sampleApplicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																			"\r",
																			"            if (sampleApplicationName != \"AdministratorAdministration\") {\r",
																			"\t\t\t\tltpInstance = { httpClientLtp, operationClientLtp };\r",
																			"                break;\r",
																			"            }\r",
																			"        }\r",
																			"    } catch(error) {\r",
																			"        console.log(error);\r",
																			"        console.log(\"! Exception in function : FindRandomLtpInstancesFromFc. \")\r",
																			"    } \r",
																			"    return ltpInstance;\r",
																			"}\r",
																			"\r",
																			"function FindOutputFcPortList(forwardingName, fcList) {\r",
																			"    let outputFcPortList;\r",
																			"    outputFcPortList = [];\r",
																			"    try {\r",
																			"        for( let i=0; i<fcList.length; i++ ) {\r",
																			"            for(let j=0; j<fcList[i][\"name\"].length; j++) {               \r",
																			"                if(fcList[i][\"name\"][j][\"value\"] == forwardingName) {\r",
																			"                    fcPortList = fcList[i][\"fc-port\"];\r",
																			"                    for(let k=0;k<fcPortList.length;k++) {\r",
																			"                        if(fcPortList[k][\"port-direction\"] == \"core-model-1-4:PORT_DIRECTION_TYPE_OUTPUT\") {\r",
																			"                            outputFcPortList.push(fcPortList[k]);\r",
																			"                        }\r",
																			"                    }\r",
																			"                    return outputFcPortList;\r",
																			"                }\r",
																			"            }\r",
																			"        }\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																			"    }\r",
																			"    return outputFcPortList;\r",
																			"}\r",
																			"\r",
																			"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
																			"    let actualInstance;\r",
																			"    actualInstance = {};\r",
																			"    try {\r",
																			"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
																			"            let sampleUuid;\r",
																			"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
																			"            if( sampleUuid == expectedUuid ) {\r",
																			"                actualInstance = actualLtpList[i];\r",
																			"                return actualInstance;\r",
																			"            }\r",
																			"        }\r",
																			"\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																			"    }\r",
																			"    return undefined;\r",
																			"}\r",
																			"\r",
																			"function FindServingLtp(clientLtp, ltpList) {\r",
																			"    let servingLtp;\r",
																			"    servingLtp = {};\r",
																			"    try{\r",
																			"        let serverLtpUuid;\r",
																			"        serverLtpUuid = clientLtp[\"server-ltp\"][0];\r",
																			"        for( let i=0; i<ltpList.length; i++ ) {\r",
																			"            let sampleUuid;\r",
																			"            sampleUuid = ltpList[i][\"uuid\"];\r",
																			"            if( sampleUuid == serverLtpUuid ) {\r",
																			"                servingLtp = ltpList[i];\r",
																			"                return servingLtp;\r",
																			"            }\r",
																			"        }\r",
																			"    } catch(error) {\r",
																			"        console.log(error);\r",
																			"        console.log(\"! Exception in function : FindServingLtp. \")\r",
																			"    }\r",
																			"    return servingLtp;\r",
																			"}\r",
																			"\r",
																			"function FindOperationClientUsingCallback(callback, fcList, ltpList) {\r",
																			"    let operationClientLtp;\r",
																			"    try {\r",
																			"        let outputFcPortList = FindOutputFcPortList(callback, fcList);\r",
																			"        let randomOutputFcPort = outputFcPortList[Math.floor(Math.random() * outputFcPortList.length)];\r",
																			"        let outputLtpUuid = randomOutputFcPort[\"logical-termination-point\"];\r",
																			"        operationClientLtp = FindActualInstanceByUuid(outputLtpUuid, ltpList);\r",
																			"    } catch (error) {\r",
																			"        console.log(error);\r",
																			"        console.log(\"! Exception in function FindOperationClientUsingCallback. \");\r",
																			"    }\r",
																			"    return  operationClientLtp\r",
																			"}\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "GET",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "200",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "reference ExecutionAndTraceLog/core-model-1-4:control-construct",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"var AUTHORIZATION;\r",
																			"var applicationProtocol;\r",
																			"var applicationAddress;\r",
																			"var applicationPort;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"    let executionAndTraceLogTcpClientLtp;\r",
																			"    executionAndTraceLogTcpClientLtp = pm.collectionVariables.get(\"executionAndTraceLogTcpClientLtp\");\r",
																			"\r",
																			"    applicationProtocol = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																			"    applicationProtocol = applicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																			"    applicationAddress = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																			"    if(applicationAddress.hasOwnProperty(\"ip-address\")) {\r",
																			"        applicationAddress = applicationAddress[\"ip-address\"][\"ipv-4-address\"];\r",
																			"    } else {\r",
																			"        applicationAddress = applicationAddress[\"domain-name\"];\r",
																			"    }\r",
																			"    applicationPort = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																			" \r",
																			"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Environment variables could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Request Body\r",
																			"****************************************************************************************/\r",
																			"var REQUEST_BODY;\r",
																			"try {\r",
																			"    REQUEST_BODY = \"\";\r",
																			"} catch (error) {\r",
																			"    console.log(\"!Could not define request body. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = applicationProtocol + \"://\" + applicationAddress + \":\" + applicationPort + \"/core-model-1-4:control-construct\";\r",
																			"    //URI = \"http://9d098835-4e91-48f3-9761-04a82ff2843e.mock.pstmn.io\" + \"/core-model-1-4:control-construct\";\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var ltpList;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"    \r",
																			"    let responseCode;\r",
																			"    responseCode = parseInt(response.code);\r",
																			"    \r",
																			"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																			"        let responseObject;\r",
																			"        responseObject = JSON.parse(response.stream);\r",
																			"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																			"\r",
																			"    } else {\r",
																			"        ltpList = [];\r",
																			"    }\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! ltpList could not be extracted.\");\r",
																			"}\r",
																			"\r",
																			"var listRecordsOfFlowOperationKey;\r",
																			"try {\r",
																			"    listRecordsOfFlowOperationKey = FindOperationKeyForOperationName(\"/v1/list-records-of-flow\", ltpList);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Reference objects could not be extracted.\");\r",
																			"} \r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.collectionVariables.set(\"listRecordsOfFlowOperationKey\", listRecordsOfFlowOperationKey);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Collection variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"function FindOperationKeyForOperationName(operationName, ltpList) {\r",
																			"    let operationKey;\r",
																			"    operationKey = \"\";\r",
																			"    try {\r",
																			"         let sampleUuid;\r",
																			"         for ( let i=0; i<ltpList.length; i++) {\r",
																			"            sampleUuid = ltpList[i][\"uuid\"];\r",
																			"            if(sampleUuid.includes(\"op-s-\")){\r",
																			"                let sampleOperationName;\r",
																			"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																			"                if(sampleOperationName == operationName) {\r",
																			"                    operationKey = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																			"                    return operationKey; \r",
																			"                }\r",
																			"            }\r",
																			"         }\r",
																			"\r",
																			"    } catch (error) {\r",
																			"        console.log(\" ! Exception in function : FindOperationKeyForOperationName\")\r",
																			"    }\r",
																			"    return operationKey;\r",
																			"}\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "200",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "sampling /v1/regard-application",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"var OPERATION_KEY;\r",
																			"var CURRENT_ORIGINATOR;\r",
																			"var applicationName;\r",
																			"var releaseNumber;\r",
																			"var protocol;\r",
																			"var address;\r",
																			"var dummyPort;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"    let currentOperationServer;\r",
																			"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																			"\r",
																			"    let ltpList;\r",
																			"    ltpList = APPLICATION[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																			"\r",
																			"    CURRENT_ORIGINATOR = FindHttpServerApplicationName(ltpList);\r",
																			"    \r",
																			"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																			"\r",
																			"    let httpClientLtp;\r",
																			"    httpClientLtp = pm.collectionVariables.get(\"httpClientLtp\");\r",
																			"\r",
																			"    applicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																			"    releaseNumber = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																			"\r",
																			"    let tcpClientLtp;\r",
																			"    tcpClientLtp = pm.collectionVariables.get(\"tcpClientLtp\");\r",
																			"\r",
																			"    protocol = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																			"    protocol = protocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																			"\r",
																			"    address = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																			"    dummyPort = RandomTcpPort();\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Input Data could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Dummy Parameters\r",
																			"****************************************************************************************/\r",
																			"var USER_NAME;\r",
																			"var ORIGINATOR;\r",
																			"var X_CORRELATOR;\r",
																			"var TRACE_INDICATOR;\r",
																			"var CUSTOMER_JOURNEY;\r",
																			"try {\r",
																			"    USER_NAME = APPLICATION.userName;\r",
																			"    ORIGINATOR = \"Postman\";\r",
																			"    X_CORRELATOR = CreateXCorrelator();\r",
																			"    TRACE_INDICATOR = \"1\";\r",
																			"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																			"    \r",
																			"} catch (error) {\r",
																			"    console.log(\"! Could not define dummy values for parameters. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Request Body\r",
																			"****************************************************************************************/\r",
																			"var REQUEST_BODY;\r",
																			"try {\r",
																			"    REQUEST_BODY = '{'\r",
																			"        + '\"application-name\" : ' + '\"' + applicationName + '\",'\r",
																			"        + '\"release-number\" : ' + '\"' + releaseNumber + '\",'\r",
																			"        + '\"protocol\" : ' + '\"' + protocol + '\",'\r",
																			"        + '\"address\" : ' + JSON.stringify(address) + ','\r",
																			"        + '\"port\" : ' +  dummyPort\r",
																			"    +'}';\r",
																			"} catch (error) {\r",
																			"    console.log(\"!Could not define request body. \");\r",
																			"}\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.collectionVariables.set(\"user\", USER_NAME);\r",
																			"    pm.collectionVariables.set(\"originator\", ORIGINATOR);\r",
																			"    pm.collectionVariables.set(\"xCorrelator\", X_CORRELATOR);\r",
																			"    pm.collectionVariables.set(\"traceIndicator\", TRACE_INDICATOR);\r",
																			"    pm.collectionVariables.set(\"customerJourney\", CUSTOMER_JOURNEY);\r",
																			"    pm.collectionVariables.set(\"currentOriginator\", CURRENT_ORIGINATOR);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Collection variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + \"/v1/regard-application\";\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																			"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																			"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																			"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																			"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"function CreateXCorrelator() {\r",
																			"    let xCorrelator;\r",
																			"    xCorrelator = \"\";\r",
																			"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(12);\r",
																			"    return xCorrelator;\r",
																			"}\r",
																			"\r",
																			"function GenerateRandomHexString(length) {\r",
																			"    var randomRandomHexString = \"\";\r",
																			"    while (randomRandomHexString.length < length) {\r",
																			"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																			"    }\r",
																			"    return randomRandomHexString.substring(0,length);\r",
																			"}\r",
																			"\r",
																			"function RandomTcpPort() {\r",
																			"    let randomPort;\r",
																			"    randomPort = 2000 + Math.floor( Math.random() * 1000 );\r",
																			"    return randomPort;\r",
																			"}\r",
																			"\r",
																			"function FindHttpServerApplicationName(ltpList) {\r",
																			"    let applicationName;\r",
																			"    applicationName = \"\";\r",
																			"    for( let i=0; i<ltpList.length; i++ ) {\r",
																			"        let sampleUuid;\r",
																			"        sampleUuid = ltpList[i][\"uuid\"];\r",
																			"        if(sampleUuid.includes(\"http-s-\")) {\r",
																			"            applicationName = ltpList[i][\"layer-protocol\"][0][\"http-server-interface-1-0:http-server-interface-pac\"][\"http-server-interface-capability\"][\"application-name\"];\r",
																			"            return applicationName;\r",
																			"        }\r",
																			"    }\r",
																			"    return applicationName;\r",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var RESPONSE_CODE;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"\r",
																			"    RESPONSE_CODE = parseInt(response.code);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Response Code could not be extracted.\");\r",
																			"}    \r",
																			"\r",
																			"const currentCount = 0;\r",
																			"try {\r",
																			"\tpm.collectionVariables.set(\"currentCount\", currentCount);\r",
																			"\r",
																			"} catch(error) {\r",
																			"    console.log(\" !Could not set currentCount. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Testing\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.test(\"POST /v1/regard-application responds 204\", function () {\r",
																			"        pm.expect(RESPONSE_CODE).to.equal(204);\r",
																			"    });\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Testing could not be executed.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "204",
																		"type": "default"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Expected ExecutionAndTraceLog/v1/list-records-of-flow for /v1/regard-application:: Update LTP notified? port update",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"var OPERATION_KEY;\r",
																			"var applicationProtocol;\r",
																			"var applicationAddress;\r",
																			"var applicationPort;\r",
																			"var xCorrelatorUnderTest;\r",
																			"var latestMatch;\r",
																			"var numberOfRecords;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"    let executionAndTraceLogTcpClientLtp;\r",
																			"    executionAndTraceLogTcpClientLtp = pm.collectionVariables.get(\"executionAndTraceLogTcpClientLtp\");\r",
																			"    \r",
																			"    applicationProtocol = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																			"    applicationProtocol = applicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																			"    applicationAddress = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																			"    if(applicationAddress.hasOwnProperty(\"ip-address\")) {\r",
																			"        applicationAddress = applicationAddress[\"ip-address\"][\"ipv-4-address\"];\r",
																			"    } else {\r",
																			"        applicationAddress = applicationAddress[\"domain-name\"];\r",
																			"    }\r",
																			"    applicationPort = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																			"\r",
																			"    OPERATION_KEY = pm.collectionVariables.get(\"listRecordsOfFlowOperationKey\");\r",
																			"    xCorrelatorUnderTest = pm.collectionVariables.get(\"xCorrelator\");\r",
																			"    latestMatch = 0;\r",
																			"    numberOfRecords = 100;\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error)\r",
																			"    console.log(\"! Input Data could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Dummy Parameters\r",
																			"****************************************************************************************/\r",
																			"var USER_NAME;\r",
																			"var ORIGINATOR;\r",
																			"var X_CORRELATOR;\r",
																			"var TRACE_INDICATOR;\r",
																			"var CUSTOMER_JOURNEY;\r",
																			"try {\r",
																			"    USER_NAME = APPLICATION.userName;\r",
																			"    ORIGINATOR = \"Postman\";\r",
																			"    X_CORRELATOR = CreateXCorrelator();\r",
																			"    TRACE_INDICATOR = \"1\";\r",
																			"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																			"    \r",
																			"} catch (error) {\r",
																			"    console.log(\"! Could not define dummy values for parameters. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Request Body\r",
																			"****************************************************************************************/\r",
																			"var REQUEST_BODY;\r",
																			"try {\r",
																			"    REQUEST_BODY = '{'\r",
																			"                + '\"x-correlator\": \"' + xCorrelatorUnderTest +'\",'\r",
																			"                + '\"latest-match\": ' + latestMatch + ','\r",
																			"                + '\"number-of-records\":' + numberOfRecords\r",
																			"                + '}';\r",
																			"} catch (error) {\r",
																			"    console.log(\"!Could not define request body. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = applicationProtocol + \"://\" + applicationAddress + \":\" + applicationPort + \"/v1/list-records-of-flow\";\r",
																			"    //URI = \"http://9d098835-4e91-48f3-9761-04a82ff2843e.mock.pstmn.io/v1/list-records-of-flow\";\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																			"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																			"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																			"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																			"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"function CreateXCorrelator() {\r",
																			"    let xCorrelator;\r",
																			"    xCorrelator = \"\";\r",
																			"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(12);\r",
																			"    return xCorrelator;\r",
																			"}\r",
																			"\r",
																			"function GenerateRandomHexString(length) {\r",
																			"    var randomRandomHexString = \"\";\r",
																			"    while (randomRandomHexString.length < length) {\r",
																			"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																			"    }\r",
																			"    return randomRandomHexString.substring(0, length);\r",
																			"}\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Constant variables\r",
																			"****************************************************************************************/\r",
																			"const SERIAL_TRACE_INDICATOR = \".1\";\r",
																			"var retryMaxCount;\r",
																			"var retryWaitingPeriod;\r",
																			"var currentCount;\r",
																			"try {\r",
																			"    retryMaxCount = pm.environment.get(\"retryMaxCount\");\r",
																			"    retryWaitingPeriod = pm.environment.get(\"retryWaitingPeriod\");\r",
																			"    currentCount = pm.collectionVariables.get(\"currentCount\");\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Could not load constant variables Data. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var expectedXCorrelator;\r",
																			"var expectedUser;\r",
																			"var expectedOriginator;\r",
																			"var expectedTraceIndicator;\r",
																			"var expectedApplicationName;\r",
																			"var expectedReleaseNumber;\r",
																			"var expectedOperationName;\r",
																			"try {\r",
																			"    expectedXCorrelator = pm.collectionVariables.get(\"xCorrelator\");\r",
																			"    expectedUser = pm.collectionVariables.get(\"user\");\r",
																			"    expectedOriginator = pm.collectionVariables.get(\"currentOriginator\");\r",
																			"    expectedTraceIndicator = pm.collectionVariables.get(\"traceIndicator\");\r",
																			"    \r",
																			"    //Increment traceIndicator:\r",
																			"    expectedTraceIndicator = expectedTraceIndicator + SERIAL_TRACE_INDICATOR;\r",
																			"\r",
																			"    let expectedHttpClientLtp;\r",
																			"    expectedHttpClientLtp = pm.collectionVariables.get(\"applicationLayerTopologyHttpClientLtp\");\r",
																			"    expectedApplicationName = expectedHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																			"    expectedReleaseNumber = expectedHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																			"\r",
																			"    let expectedOperationClient;\r",
																			"    expectedOperationClient = pm.collectionVariables.get(\"updateLtpOperationClientLtp\");\r",
																			"    expectedOperationName = expectedOperationClient[\"layer-protocol\"][0][\"operation-client-interface-1-0:operation-client-interface-pac\"][\"operation-client-interface-configuration\"][\"operation-name\"];\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Could not load Input Data. \");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var RESPONSE_CODE;\r",
																			"var serviceRecordList;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"    \r",
																			"    RESPONSE_CODE = parseInt(response.code);\r",
																			"\r",
																			"    if(Math.floor(RESPONSE_CODE/100) === 2) {\r",
																			"        serviceRecordList = JSON.parse(response.stream);\r",
																			"    }\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Response Code could not be extracted.\");\r",
																			"}    \r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Testing\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.test(\"POST ExecutionAndTraceLog/v1/list-records-of-flow responds 200\", function () {\r",
																			"        pm.expect(RESPONSE_CODE).to.equal(200);\r",
																			"    });\r",
																			"\r",
																			"    let foundAnEntryWithTheExpectedHeaderValuesInEatl;\r",
																			"    foundAnEntryWithTheExpectedHeaderValuesInEatl = false;\r",
																			"    let responseCodeofTriggeredForwarding;\r",
																			"    responseCodeofTriggeredForwarding = 0;\r",
																			"    for(let i=0; i<serviceRecordList.length; i++)  {\r",
																			"        if( serviceRecordList[i][\"application-name\"] == expectedApplicationName\r",
																			"                && serviceRecordList[i][\"release-number\"] == expectedReleaseNumber\r",
																			"                && serviceRecordList[i][\"operation-name\"] == expectedOperationName\r",
																			"                && serviceRecordList[i][\"x-correlator\"] == expectedXCorrelator\r",
																			"                && serviceRecordList[i][\"user\"] == expectedUser\r",
																			"                && serviceRecordList[i][\"originator\"] == expectedOriginator\r",
																			"                && serviceRecordList[i][\"trace-indicator\"] == expectedTraceIndicator ) {\r",
																			"\r",
																			"            foundAnEntryWithTheExpectedHeaderValuesInEatl = true;\r",
																			"            responseCodeofTriggeredForwarding =  serviceRecordList[i][\"response-code\"];\r",
																			"            break;\r",
																			"        }\r",
																			"    }\r",
																			"\r",
																			"    if (foundAnEntryWithTheExpectedHeaderValuesInEatl == false) {\r",
																			"        if( (currentCount < retryMaxCount) ) {\r",
																			"            setTimeout(()=>{\r",
																			"                postman.setNextRequest(request.name);\r",
																			"                currentCount = currentCount + 1;\r",
																			"                pm.collectionVariables.set(\"currentCount\", currentCount);\r",
																			"            }, retryWaitingPeriod);\r",
																			"        } else {\r",
																			"            pm.test(\"port Update in LTP is successfully notified to ALT\", function () {\r",
																			"                pm.expect(foundAnEntryWithTheExpectedHeaderValuesInEatl).to.be.true;        \r",
																			"            });\r",
																			"        }\r",
																			"    } else {\r",
																			"        pm.test(\"port Update in LTP is successfully notified to ALT with response-code 204\", function () {\r",
																			"            pm.expect(responseCodeofTriggeredForwarding).to.equal(204);    \r",
																			"        });\r",
																			"    }\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Testing could not be executed.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "200",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "initial tcp-c/remote-port",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"var tcpClientUuid;\r",
																			"var initialRemotePort;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"    \r",
																			"    let tcpClientLtp;\r",
																			"    tcpClientLtp = pm.collectionVariables.get(\"tcpClientLtp\");\r",
																			"\r",
																			"    tcpClientUuid = tcpClientLtp[\"uuid\"];\r",
																			"\r",
																			"    initialRemotePort = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Variables could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl \r",
																			"            + \"/core-model-1-4:control-construct/logical-termination-point=\"\r",
																			"            + tcpClientUuid\r",
																			"            + \"/layer-protocol=0/tcp-client-interface-1-0:tcp-client-interface-pac/tcp-client-interface-configuration/remote-port\";\r",
																			"\r",
																			"    let REQUEST_BODY;\r",
																			"    REQUEST_BODY = '{ '\r",
																			"                    +   '\"tcp-client-interface-1-0:remote-port\": ' + initialRemotePort \r",
																			"                    + ' }';\r",
																			"\r",
																			"    let AUTHORIZATION;\r",
																			"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error)\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "PUT",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "204",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Check /core-model-1-4:control-construct",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"var AUTHORIZATION;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																			"\r",
																			"    oamPath = \"/core-model-1-4:control-construct\";\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Environment variables could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Request Body\r",
																			"****************************************************************************************/\r",
																			"var REQUEST_BODY;\r",
																			"try {\r",
																			"    REQUEST_BODY = \"\";\r",
																			"} catch (error) {\r",
																			"    console.log(\"!Could not define request body. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + oamPath;\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var expectedLogicalTerminationPoint;\r",
																			"var expectedForwardingConstruct;\r",
																			"try {\r",
																			"    expectedLogicalTerminationPoint = pm.collectionVariables.get(\"ltpList\");\r",
																			"    expectedForwardingConstruct = pm.collectionVariables.get(\"fcList\");\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Collection variables could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var RESPONSE_CODE;\r",
																			"var RESPONSE;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"\r",
																			"    RESPONSE_CODE = parseInt(response.code);\r",
																			"\r",
																			"    if (Math.floor(RESPONSE_CODE / 100) === 2) {\r",
																			"        RESPONSE = JSON.parse(response.stream);\r",
																			"    } else {\r",
																			"        RESPONSE = [];\r",
																			"    }\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Result value lists could not be extracted.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Testing\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.test(\"GET /core-model-1-4:control-construct responds 200\", function () {\r",
																			"        pm.expect(RESPONSE_CODE).to.equal(200);\r",
																			"    });\r",
																			"\r",
																			"    let actualLtpList;\r",
																			"    actualLtpList = RESPONSE[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																			"\r",
																			"    pm.test(\"Received logical-termination-point is same as intial instance \", function () {\r",
																			"        pm.expect(actualLtpList).to.deep.equal(expectedLogicalTerminationPoint);\r",
																			"    });\r",
																			"\r",
																			"    let actualFcList;\r",
																			"    actualFcList = RESPONSE[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
																			"\r",
																			"    pm.test(\"Received forwarding-construct is same as intial instance \", function () {\r",
																			"        pm.expect(actualFcList).to.deep.equal(expectedForwardingConstruct);\r",
																			"    });\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Testing could not be executed.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "200",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														}
													],
													"description": "##Gets port update trigger update-ltp to ALT?\n#### Requires:\n- ExecutionAndTraceLog/OamLog server to operate\n\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - search CC for output fc-port of ServiceRequestCausesLoggingRequest, \nits corresponding op-c, http-c and tcp-c, storing them for later verification request. \n  - searching CC for output-fc-port of ServiceRequestCausesLtpUpdateRequest, its corresponding op-c, http-c, storing them.\n  - searching CC for op-s of /v1/regard-application, storing operation-key\n  - searching CC for output fc-port of NewApplicationCausesRequestForInquiringOamRequestApprovals, find corresponding op-c, http-c and tcp-c, store them.\n- GETting EaTL/CC (while using IP, protocol and port from above)\n  - searching CC for op-c of /v1/list-records-of-flow, storing operation-key\n- POST /v1/regard-application with\n  - all attributes according to chosen set of http-c, tcp-c , BUT port attribute with random dummy value inside the specified range.\n  - operation-key from above\n  - reasonable parameter\n\n#### Testing:\n- POST ExecutionAndTraceLog/v1/list-records-of-flow with \n   - IP and port from above\n   - operation-key from above\n   - DummyValue of x-correlator\n   - checking response for entry with application data from ServiceRequestCausesLtpUpdateRequest\n   - checking same record for containing DummyXCorrelator &DummyTraceIndicator\n\n#### Clearing:\n- PUT chosen tcp-c/port with intial value\n\n#### Clearance check:\n- Check if the logical-termination-point instance is the same as initial configuration"
												}
											]
										},
										{
											"name": "Update FC notified?",
											"item": [
												{
													"name": "client create",
													"item": [
														{
															"name": "reference /core-model-1-4:control-construct",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"console.log(\"\\n----- /v1/regard-application acceptance --Update FC notofied -- client create -------------------------------\");\r",
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Environment variables could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																			"\r",
																			"    let REQUEST_BODY;\r",
																			"    REQUEST_BODY = \"\";\r",
																			"\r",
																			"    let AUTHORIZATION;\r",
																			"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var ltpList;\r",
																			"var fcList;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"    \r",
																			"    let responseCode;\r",
																			"    responseCode = parseInt(response.code);\r",
																			"    \r",
																			"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																			"        let responseObject;\r",
																			"        responseObject = JSON.parse(response.stream);\r",
																			"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																			"        fcList = responseObject[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
																			"\r",
																			"    } else {\r",
																			"        ltpList = [];\r",
																			"        fcList = [];\r",
																			"    }\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! ltpList could not be extracted.\");\r",
																			"}\r",
																			"\r",
																			"var currentOperationServer;\r",
																			"var disregardApplicationOperationServer;\r",
																			"var executionAndTraceLogHttpClientLtp;\r",
																			"var executionAndTraceLogTcpClientLtp;\r",
																			"var applicationLayerTopologyHttpClientLtp;\r",
																			"var updateFcOperationClientLtp;\r",
																			"try {\r",
																			"    currentOperationServer = FindOperationServer(\"/v1/regard-application\", ltpList);\r",
																			"    disregardApplicationOperationServer = FindOperationServer(\"/v1/disregard-application\", ltpList);\r",
																			"\r",
																			"    //Execution And Trace Log\r",
																			"    let recordServiceRequestOperationClientLtp = FindOperationClientUsingCallback(\"ServiceRequestCausesLoggingRequest\", fcList, ltpList)\r",
																			"    executionAndTraceLogHttpClientLtp = FindServingLtp(recordServiceRequestOperationClientLtp, ltpList);\r",
																			"    executionAndTraceLogTcpClientLtp = FindServingLtp(executionAndTraceLogHttpClientLtp, ltpList);\r",
																			"\r",
																			"    //Ltp Update Request\r",
																			"    updateFcOperationClientLtp = FindOperationClientUsingCallback(\"ServiceRequestCausesFcUpdateRequest\", fcList, ltpList)\r",
																			"    applicationLayerTopologyHttpClientLtp = FindServingLtp(updateFcOperationClientLtp, ltpList);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Reference objects could not be extracted.\");\r",
																			"} \r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.collectionVariables.clear();\r",
																			"    \r",
																			"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																			"    pm.collectionVariables.set(\"disregardApplicationOperationServer\", disregardApplicationOperationServer);\r",
																			"\r",
																			"    pm.collectionVariables.set(\"executionAndTraceLogHttpClientLtp\", executionAndTraceLogHttpClientLtp);\r",
																			"    pm.collectionVariables.set(\"executionAndTraceLogTcpClientLtp\", executionAndTraceLogTcpClientLtp);\r",
																			"\r",
																			"    pm.collectionVariables.set(\"applicationLayerTopologyHttpClientLtp\", applicationLayerTopologyHttpClientLtp);\r",
																			"    pm.collectionVariables.set(\"updateFcOperationClientLtp\", updateFcOperationClientLtp);\r",
																			"\r",
																			"    pm.collectionVariables.set(\"ltpList\", ltpList);\r",
																			"    pm.collectionVariables.set(\"fcList\", fcList);\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Collection variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"function FindOperationServer(operationName, ltpList) {\r",
																			"    let operationServer;\r",
																			"    operationServer = \"\";\r",
																			"    try {\r",
																			"        let sampleUuid;\r",
																			"        for(let i=0; i<ltpList.length; i++) {\r",
																			"            sampleUuid = ltpList[i][\"uuid\"];\r",
																			"            if(sampleUuid.includes(\"op-s-\")) {\r",
																			"                let sampleOperationName;\r",
																			"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																			"                if(sampleOperationName == operationName) {\r",
																			"                    operationServer = ltpList[i];\r",
																			"                    return operationServer;\r",
																			"                }\r",
																			"            }\r",
																			"        }\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																			"    }\r",
																			"    return operationServer;\r",
																			"}\r",
																			"\r",
																			"function FindOutputFcPortList(forwardingName, fcList) {\r",
																			"    let outputFcPortList;\r",
																			"    outputFcPortList = [];\r",
																			"    try {\r",
																			"        for( let i=0; i<fcList.length; i++ ) {\r",
																			"            for(let j=0; j<fcList[i][\"name\"].length; j++) {               \r",
																			"                if(fcList[i][\"name\"][j][\"value\"] == forwardingName) {\r",
																			"                    fcPortList = fcList[i][\"fc-port\"];\r",
																			"                    for(let k=0;k<fcPortList.length;k++) {\r",
																			"                        if(fcPortList[k][\"port-direction\"] == \"core-model-1-4:PORT_DIRECTION_TYPE_OUTPUT\") {\r",
																			"                            outputFcPortList.push(fcPortList[k]);\r",
																			"                        }\r",
																			"                    }\r",
																			"                    return outputFcPortList;\r",
																			"                }\r",
																			"            }\r",
																			"        }\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																			"    }\r",
																			"    return outputFcPortList;\r",
																			"}\r",
																			"\r",
																			"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
																			"    let actualInstance;\r",
																			"    actualInstance = {};\r",
																			"    try {\r",
																			"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
																			"            let sampleUuid;\r",
																			"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
																			"            if( sampleUuid == expectedUuid ) {\r",
																			"                actualInstance = actualLtpList[i];\r",
																			"                return actualInstance;\r",
																			"            }\r",
																			"        }\r",
																			"\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																			"    }\r",
																			"    return undefined;\r",
																			"}\r",
																			"\r",
																			"function FindServingLtp(clientLtp, ltpList) {\r",
																			"    let servingLtp;\r",
																			"    servingLtp = {};\r",
																			"    try{\r",
																			"        let serverLtpUuid;\r",
																			"        serverLtpUuid = clientLtp[\"server-ltp\"][0];\r",
																			"        for( let i=0; i<ltpList.length; i++ ) {\r",
																			"            let sampleUuid;\r",
																			"            sampleUuid = ltpList[i][\"uuid\"];\r",
																			"            if( sampleUuid == serverLtpUuid ) {\r",
																			"                servingLtp = ltpList[i];\r",
																			"                return servingLtp;\r",
																			"            }\r",
																			"        }\r",
																			"    } catch(error) {\r",
																			"        console.log(error);\r",
																			"        console.log(\"! Exception in function : FindServingLtp. \")\r",
																			"    }\r",
																			"    return servingLtp;\r",
																			"}\r",
																			"\r",
																			"\r",
																			"function FindOperationClientLtp(serverLtp, ltpList, operationName) {\r",
																			"    let operationClientLtp;\r",
																			"    operationClientLtp = {};\r",
																			"    try {\r",
																			"        let clientLtpList;\r",
																			"        clientLtpList = serverLtp[\"client-ltp\"];\r",
																			"        let operationClientInstances;\r",
																			"        operationClientInstances = [];\r",
																			"        for ( let i=0; i<clientLtpList.length; i++ ) {\r",
																			"            for ( let j=0; j<ltpList.length; j++ ) {\r",
																			"                if( ltpList[j][\"uuid\"].includes(\"-op-c-\") ) {\r",
																			"                    if( ltpList[j][\"uuid\"] == clientLtpList[i] ) {\r",
																			"                        operationClientInstances.push(ltpList[j]);\r",
																			"                        break;\r",
																			"                    }\r",
																			"                }\r",
																			"            }\r",
																			"        }\r",
																			"        for( let i=0; i<operationClientInstances.length; i++ ) {\r",
																			"            let sampleOperationName;\r",
																			"            sampleOperationName = operationClientInstances[i][\"layer-protocol\"][0][\"operation-client-interface-1-0:operation-client-interface-pac\"][\"operation-client-interface-configuration\"][\"operation-name\"];\r",
																			"            if(sampleOperationName.includes(operationName)) {\r",
																			"                operationClientLtp = operationClientInstances[i];\r",
																			"                return operationClientLtp;\r",
																			"            }\r",
																			"        }\r",
																			"    } catch(error) {\r",
																			"        console.log(error);\r",
																			"        console.log(\"! Exception in function : FindOperationClientLtp. \")\r",
																			"    }\r",
																			"    return operationClientLtp;\r",
																			"}\r",
																			"\r",
																			"\r",
																			"function FindOperationClientUsingCallback(callback, fcList, ltpList) {\r",
																			"    let operationClientLtp;\r",
																			"    try {\r",
																			"        let outputFcPortList = FindOutputFcPortList(callback, fcList);\r",
																			"        let randomOutputFcPort = outputFcPortList[Math.floor(Math.random() * outputFcPortList.length)];\r",
																			"        let outputLtpUuid = randomOutputFcPort[\"logical-termination-point\"];\r",
																			"        operationClientLtp = FindActualInstanceByUuid(outputLtpUuid, ltpList);\r",
																			"    } catch (error) {\r",
																			"        console.log(error);\r",
																			"        console.log(\"! Exception in function FindOperationClientUsingCallback. \");\r",
																			"    }\r",
																			"    return  operationClientLtp\r",
																			"}\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "GET",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "200",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "reference ExecutionAndTraceLog/core-model-1-4:control-construct",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"var AUTHORIZATION;\r",
																			"var applicationProtocol;\r",
																			"var applicationAddress;\r",
																			"var applicationPort;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"    let executionAndTraceLogTcpClientLtp;\r",
																			"    executionAndTraceLogTcpClientLtp = pm.collectionVariables.get(\"executionAndTraceLogTcpClientLtp\");\r",
																			"\r",
																			"    applicationProtocol = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																			"    applicationProtocol = applicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																			"    applicationAddress = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																			"    if(applicationAddress.hasOwnProperty(\"ip-address\")) {\r",
																			"        applicationAddress = applicationAddress[\"ip-address\"][\"ipv-4-address\"];\r",
																			"    } else {\r",
																			"        applicationAddress = applicationAddress[\"domain-name\"];\r",
																			"    }\r",
																			"    applicationPort = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																			" \r",
																			"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Environment variables could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Request Body\r",
																			"****************************************************************************************/\r",
																			"var REQUEST_BODY;\r",
																			"try {\r",
																			"    REQUEST_BODY = \"\";\r",
																			"} catch (error) {\r",
																			"    console.log(\"!Could not define request body. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = applicationProtocol + \"://\" + applicationAddress + \":\" + applicationPort + \"/core-model-1-4:control-construct\";\r",
																			"    //URI = \"http://9d098835-4e91-48f3-9761-04a82ff2843e.mock.pstmn.io\" + \"/core-model-1-4:control-construct\";\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var ltpList;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"    \r",
																			"    let responseCode;\r",
																			"    responseCode = parseInt(response.code);\r",
																			"    \r",
																			"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																			"        let responseObject;\r",
																			"        responseObject = JSON.parse(response.stream);\r",
																			"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																			"\r",
																			"    } else {\r",
																			"        ltpList = [];\r",
																			"    }\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! ltpList could not be extracted.\");\r",
																			"}\r",
																			"\r",
																			"var listRecordsOfFlowOperationKey;\r",
																			"try {\r",
																			"    listRecordsOfFlowOperationKey = FindOperationKeyForOperationName(\"/v1/list-records-of-flow\", ltpList);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Reference objects could not be extracted.\");\r",
																			"} \r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.collectionVariables.set(\"listRecordsOfFlowOperationKey\", listRecordsOfFlowOperationKey);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Collection variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"function FindOperationKeyForOperationName(operationName, ltpList) {\r",
																			"    let operationKey;\r",
																			"    operationKey = \"\";\r",
																			"    try {\r",
																			"         let sampleUuid;\r",
																			"         for ( let i=0; i<ltpList.length; i++) {\r",
																			"            sampleUuid = ltpList[i][\"uuid\"];\r",
																			"            if(sampleUuid.includes(\"op-s-\")){\r",
																			"                let sampleOperationName;\r",
																			"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																			"                if(sampleOperationName == operationName) {\r",
																			"                    operationKey = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																			"                    return operationKey; \r",
																			"                }\r",
																			"            }\r",
																			"         }\r",
																			"\r",
																			"    } catch (error) {\r",
																			"        console.log(\" ! Exception in function : FindOperationKeyForOperationName\")\r",
																			"    }\r",
																			"    return operationKey;\r",
																			"}\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "200",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Dummy /v1/regard-application - application created?",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"var OPERATION_KEY;\r",
																			"var CURRENT_ORIGINATOR;\r",
																			"var dummyApplicationName;\r",
																			"var dummyReleaseNumber;\r",
																			"var dummyProtocol;\r",
																			"var dummyAddress;\r",
																			"var dummyPort;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"    let ltpList;\r",
																			"    ltpList = APPLICATION[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																			"\r",
																			"    CURRENT_ORIGINATOR = FindHttpServerApplicationName(ltpList);\r",
																			"\r",
																			"    let currentOperationServer;\r",
																			"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																			"    \r",
																			"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																			"\r",
																			"    dummyApplicationName = GenerateRandomString(12);\r",
																			"    dummyReleaseNumber = RandomReleaseNumber();\r",
																			"\r",
																			"    dummyProtocol = RandomProtocol();\r",
																			"\r",
																			"    let dummyIpv4Address = RandomIpAddress();\r",
																			"    dummyAddress = {\r",
																			"        \"ip-address\": {\r",
																			"            \"ipv-4-address\": dummyIpv4Address\r",
																			"        }\r",
																			"    };\r",
																			"    dummyPort = RandomTcpPort();\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Input Data could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Dummy Parameters\r",
																			"****************************************************************************************/\r",
																			"var USER_NAME;\r",
																			"var ORIGINATOR;\r",
																			"var X_CORRELATOR;\r",
																			"var TRACE_INDICATOR;\r",
																			"var CUSTOMER_JOURNEY;\r",
																			"try {\r",
																			"    USER_NAME = APPLICATION.userName;\r",
																			"    ORIGINATOR = \"Postman\";\r",
																			"    X_CORRELATOR = CreateXCorrelator();\r",
																			"    TRACE_INDICATOR = \"1\";\r",
																			"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																			"    \r",
																			"} catch (error) {\r",
																			"    console.log(\"! Could not define dummy values for parameters. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Request Body\r",
																			"****************************************************************************************/\r",
																			"var REQUEST_BODY;\r",
																			"try {\r",
																			"    REQUEST_BODY = '{'\r",
																			"        + '\"application-name\" : ' + '\"' + dummyApplicationName + '\",'\r",
																			"        + '\"release-number\" : ' + '\"' + dummyReleaseNumber + '\",'\r",
																			"        + '\"protocol\" : ' + '\"' + dummyProtocol + '\",'\r",
																			"        + '\"address\" : ' + JSON.stringify(dummyAddress) + ','\r",
																			"        + '\"port\" : ' +  dummyPort\r",
																			"    +'}';\r",
																			"} catch (error) {\r",
																			"    console.log(\"!Could not define request body. \");\r",
																			"}\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.collectionVariables.set(\"user\", USER_NAME);\r",
																			"    pm.collectionVariables.set(\"originator\", ORIGINATOR);\r",
																			"    pm.collectionVariables.set(\"xCorrelator\", X_CORRELATOR);\r",
																			"    pm.collectionVariables.set(\"traceIndicator\", TRACE_INDICATOR);\r",
																			"    pm.collectionVariables.set(\"customerJourney\", CUSTOMER_JOURNEY);\r",
																			"    pm.collectionVariables.set(\"currentOriginator\", CURRENT_ORIGINATOR);\r",
																			"    \r",
																			"    pm.collectionVariables.set(\"dummyApplicationName\", dummyApplicationName);\r",
																			"    pm.collectionVariables.set(\"dummyReleaseNumber\", dummyReleaseNumber);\r",
																			"    pm.collectionVariables.set(\"dummyProtocol\", dummyProtocol);\r",
																			"    pm.collectionVariables.set(\"dummyAddress\", dummyAddress);\r",
																			"    pm.collectionVariables.set(\"dummyPort\", dummyPort);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Collection variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + \"/v1/regard-application\";\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																			"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																			"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																			"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																			"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"function CreateXCorrelator() {\r",
																			"    let xCorrelator;\r",
																			"    xCorrelator = \"\";\r",
																			"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(12);\r",
																			"    return xCorrelator;\r",
																			"}\r",
																			"\r",
																			"function GenerateRandomHexString(length) {\r",
																			"    var randomRandomHexString = \"\";\r",
																			"    while (randomRandomHexString.length < length) {\r",
																			"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																			"    }\r",
																			"    return randomRandomHexString.substring(0,length);\r",
																			"}\r",
																			"\r",
																			"function FindHttpServerApplicationName(ltpList) {\r",
																			"    let applicationName;\r",
																			"    applicationName = \"\";\r",
																			"    for( let i=0; i<ltpList.length; i++ ) {\r",
																			"        let sampleUuid;\r",
																			"        sampleUuid = ltpList[i][\"uuid\"];\r",
																			"        if(sampleUuid.includes(\"http-s-\")) {\r",
																			"            applicationName = ltpList[i][\"layer-protocol\"][0][\"http-server-interface-1-0:http-server-interface-pac\"][\"http-server-interface-capability\"][\"application-name\"];\r",
																			"            return applicationName;\r",
																			"        }\r",
																			"    }\r",
																			"    return applicationName;\r",
																			"}\r",
																			"\r",
																			"function GenerateRandomString(length) {\r",
																			"    let randomString;\r",
																			"    randomString = \"\";\r",
																			"    try {\r",
																			"        let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r",
																			"        let charactersLength = characters.length;\r",
																			"        for (let i = 0; i < length; i++) {\r",
																			"            randomString += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																			"        }\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Could not generate random string. \");\r",
																			"    }\r",
																			"    return randomString;\r",
																			"}\r",
																			"\r",
																			"function RandomReleaseNumber() {\r",
																			"    let releaseNumber;\r",
																			"    let releaseNumberParts = [];\r",
																			"    for  (let i=0; i<3 ; i++) {\r",
																			"        releaseNumberParts[i] = Math.floor(Math.random() * 10);\r",
																			"    }\r",
																			"    releaseNumber = releaseNumberParts[0] + \".\" + releaseNumberParts[1] + \".\" + releaseNumberParts[2];\r",
																			"    return releaseNumber;\r",
																			"}\r",
																			"\r",
																			"function RandomIpAddress() {\r",
																			"    let randomAddress\r",
																			"    let addressParts = [];\r",
																			"    for ( let i=0; i<4; i++ ) {\r",
																			"        addressParts[i] = String(Math.floor(Math.random() * 256));\r",
																			"    }\r",
																			"    randomAddress = addressParts[0] + \".\" + addressParts[1] + \".\" + addressParts[2] + \".\" + addressParts[3];\r",
																			"    return randomAddress;\r",
																			"}\r",
																			"\r",
																			"function RandomTcpPort() {\r",
																			"    let randomPort;\r",
																			"    randomPort = 2000 + Math.floor( Math.random() * 1000 );\r",
																			"    return randomPort;\r",
																			"}\r",
																			"\r",
																			"function RandomProtocol() {\r",
																			"    let protocolList;\r",
																			"    protocolList = [  \"HTTP\", \"HTTPS\" ];\r",
																			"    let protocolIndex = Math.floor(Math.random() * protocolList.length);\r",
																			"    let randomProtocol = protocolList[protocolIndex]; \r",
																			"\r",
																			"    return randomProtocol;\r",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var RESPONSE_CODE;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"\r",
																			"    RESPONSE_CODE = parseInt(response.code);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Response Code could not be extracted.\");\r",
																			"}    \r",
																			"\r",
																			"const currentCount = 0;\r",
																			"try {\r",
																			"\tpm.collectionVariables.set(\"currentCount\", currentCount);\r",
																			"\r",
																			"} catch(error) {\r",
																			"    console.log(\" !Could not set currentCount. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Testing\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.test(\"POST /v1/regard-application responds 204\", function () {\r",
																			"        pm.expect(RESPONSE_CODE).to.equal(204);\r",
																			"    });\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Testing could not be executed.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "204",
																		"type": "default"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Expected ExecutionAndTraceLog/v1/list-records-of-flow for /v1/regard-application:: Update FC notified?",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"var OPERATION_KEY;\r",
																			"var applicationProtocol;\r",
																			"var applicationAddress;\r",
																			"var applicationPort;\r",
																			"var xCorrelatorUnderTest;\r",
																			"var latestMatch;\r",
																			"var numberOfRecords;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"    let executionAndTraceLogTcpClientLtp;\r",
																			"    executionAndTraceLogTcpClientLtp = pm.collectionVariables.get(\"executionAndTraceLogTcpClientLtp\");\r",
																			"    \r",
																			"    applicationProtocol = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																			"    applicationProtocol = applicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																			"    applicationAddress = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																			"    if(applicationAddress.hasOwnProperty(\"ip-address\")) {\r",
																			"        applicationAddress = applicationAddress[\"ip-address\"][\"ipv-4-address\"];\r",
																			"    } else {\r",
																			"        applicationAddress = applicationAddress[\"domain-name\"];\r",
																			"    }\r",
																			"    applicationPort = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																			"\r",
																			"    OPERATION_KEY = pm.collectionVariables.get(\"listRecordsOfFlowOperationKey\");\r",
																			"    xCorrelatorUnderTest = pm.collectionVariables.get(\"xCorrelator\");\r",
																			"    latestMatch = 0;\r",
																			"    numberOfRecords = 100;\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error)\r",
																			"    console.log(\"! Input Data could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Dummy Parameters\r",
																			"****************************************************************************************/\r",
																			"var USER_NAME;\r",
																			"var ORIGINATOR;\r",
																			"var X_CORRELATOR;\r",
																			"var TRACE_INDICATOR;\r",
																			"var CUSTOMER_JOURNEY;\r",
																			"try {\r",
																			"    USER_NAME = APPLICATION.userName;\r",
																			"    ORIGINATOR = \"Postman\";\r",
																			"    X_CORRELATOR = CreateXCorrelator();\r",
																			"    TRACE_INDICATOR = \"1\";\r",
																			"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																			"    \r",
																			"} catch (error) {\r",
																			"    console.log(\"! Could not define dummy values for parameters. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Request Body\r",
																			"****************************************************************************************/\r",
																			"var REQUEST_BODY;\r",
																			"try {\r",
																			"    REQUEST_BODY = '{'\r",
																			"                + '\"x-correlator\": \"' + xCorrelatorUnderTest +'\",'\r",
																			"                + '\"latest-match\": ' + latestMatch + ','\r",
																			"                + '\"number-of-records\":' + numberOfRecords\r",
																			"                + '}';\r",
																			"} catch (error) {\r",
																			"    console.log(\"!Could not define request body. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = applicationProtocol + \"://\" + applicationAddress + \":\" + applicationPort + \"/v1/list-records-of-flow\";\r",
																			"    //URI = \"http://9d098835-4e91-48f3-9761-04a82ff2843e.mock.pstmn.io/v1/list-records-of-flow\";\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																			"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																			"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																			"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																			"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"function CreateXCorrelator() {\r",
																			"    let xCorrelator;\r",
																			"    xCorrelator = \"\";\r",
																			"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(12);\r",
																			"    return xCorrelator;\r",
																			"}\r",
																			"\r",
																			"function GenerateRandomHexString(length) {\r",
																			"    var randomRandomHexString = \"\";\r",
																			"    while (randomRandomHexString.length < length) {\r",
																			"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																			"    }\r",
																			"    return randomRandomHexString.substring(0, length);\r",
																			"}\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Constant variables\r",
																			"****************************************************************************************/\r",
																			"const SERIAL_TRACE_INDICATOR = \".4\";\r",
																			"var retryMaxCount;\r",
																			"var retryWaitingPeriod;\r",
																			"var currentCount;\r",
																			"try {\r",
																			"    retryMaxCount = pm.environment.get(\"retryMaxCount\");\r",
																			"    retryWaitingPeriod = pm.environment.get(\"retryWaitingPeriod\");\r",
																			"    currentCount = pm.collectionVariables.get(\"currentCount\");\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Could not load constant variables Data. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var expectedXCorrelator;\r",
																			"var expectedUser;\r",
																			"var expectedOriginator;\r",
																			"var expectedTraceIndicator;\r",
																			"var expectedApplicationName;\r",
																			"var expectedReleaseNumber;\r",
																			"var expectedOperationName;\r",
																			"try {\r",
																			"    expectedXCorrelator = pm.collectionVariables.get(\"xCorrelator\");\r",
																			"    expectedUser = pm.collectionVariables.get(\"user\");\r",
																			"    expectedOriginator = pm.collectionVariables.get(\"currentOriginator\");\r",
																			"    expectedTraceIndicator = pm.collectionVariables.get(\"traceIndicator\");\r",
																			"    \r",
																			"    //Increment traceIndicator:\r",
																			"    expectedTraceIndicator = expectedTraceIndicator + SERIAL_TRACE_INDICATOR;\r",
																			"\r",
																			"    let expectedHttpClientLtp;\r",
																			"    expectedHttpClientLtp = pm.collectionVariables.get(\"applicationLayerTopologyHttpClientLtp\");\r",
																			"    expectedApplicationName = expectedHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																			"    expectedReleaseNumber = expectedHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																			"\r",
																			"    let expectedOperationClient;\r",
																			"    expectedOperationClient = pm.collectionVariables.get(\"updateFcOperationClientLtp\");\r",
																			"    expectedOperationName = expectedOperationClient[\"layer-protocol\"][0][\"operation-client-interface-1-0:operation-client-interface-pac\"][\"operation-client-interface-configuration\"][\"operation-name\"];\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Could not load Input Data. \");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var RESPONSE_CODE;\r",
																			"var serviceRecordList;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"    \r",
																			"    RESPONSE_CODE = parseInt(response.code);\r",
																			"\r",
																			"    if(Math.floor(RESPONSE_CODE/100) === 2) {\r",
																			"        serviceRecordList = JSON.parse(response.stream);\r",
																			"    }\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Response Code could not be extracted.\");\r",
																			"}    \r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Testing\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.test(\"POST ExecutionAndTraceLog/v1/list-records-of-flow responds 200\", function () {\r",
																			"        pm.expect(RESPONSE_CODE).to.equal(200);\r",
																			"    });\r",
																			"\r",
																			"    let foundAnEntryWithTheExpectedHeaderValuesInEatl;\r",
																			"    foundAnEntryWithTheExpectedHeaderValuesInEatl = false;\r",
																			"    let responseCodeofTriggeredForwarding;\r",
																			"    responseCodeofTriggeredForwarding = 0;\r",
																			"    for(let i=0; i<serviceRecordList.length; i++)  {\r",
																			"        if( serviceRecordList[i][\"application-name\"] == expectedApplicationName\r",
																			"                && serviceRecordList[i][\"release-number\"] == expectedReleaseNumber\r",
																			"                && serviceRecordList[i][\"operation-name\"] == expectedOperationName\r",
																			"                && serviceRecordList[i][\"x-correlator\"] == expectedXCorrelator\r",
																			"                && serviceRecordList[i][\"user\"] == expectedUser\r",
																			"                && serviceRecordList[i][\"originator\"] == expectedOriginator\r",
																			"                && serviceRecordList[i][\"trace-indicator\"] == expectedTraceIndicator ) {\r",
																			"\r",
																			"            foundAnEntryWithTheExpectedHeaderValuesInEatl = true;\r",
																			"            responseCodeofTriggeredForwarding =  serviceRecordList[i][\"response-code\"];\r",
																			"            break;\r",
																			"        }\r",
																			"    }\r",
																			"\r",
																			"    if (foundAnEntryWithTheExpectedHeaderValuesInEatl == false) {\r",
																			"        if( (currentCount < retryMaxCount) ) {\r",
																			"            setTimeout(()=>{\r",
																			"                postman.setNextRequest(request.name);\r",
																			"                currentCount = currentCount + 1;\r",
																			"                pm.collectionVariables.set(\"currentCount\", currentCount);\r",
																			"            }, retryWaitingPeriod);\r",
																			"        } else {\r",
																			"            pm.test(\"Update FC is successfully notified\", function () {\r",
																			"                pm.expect(foundAnEntryWithTheExpectedHeaderValuesInEatl).to.be.true;        \r",
																			"            });\r",
																			"        }\r",
																			"    } else {\r",
																			"        pm.test(\"Update FC is successfully notifiedT with response-code 204\", function () {\r",
																			"            pm.expect(responseCodeofTriggeredForwarding).to.equal(204);    \r",
																			"        });\r",
																			"    }\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Testing could not be executed.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "200",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Dummy /v1/disregard-application",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"var OPERATION_KEY;\r",
																			"var dummyApplicationName;\r",
																			"var dummyReleaseNumber;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"    let currentOperationServer;\r",
																			"    currentOperationServer = pm.collectionVariables.get(\"disregardApplicationOperationServer\");\r",
																			"    \r",
																			"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																			"\r",
																			"    dummyApplicationName = pm.collectionVariables.get(\"dummyApplicationName\");\r",
																			"    dummyReleaseNumber = pm.collectionVariables.get(\"dummyReleaseNumber\");\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Input Data could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Dummy Parameters\r",
																			"****************************************************************************************/\r",
																			"var USER_NAME;\r",
																			"var ORIGINATOR;\r",
																			"var X_CORRELATOR;\r",
																			"var TRACE_INDICATOR;\r",
																			"var CUSTOMER_JOURNEY;\r",
																			"try {\r",
																			"    USER_NAME = APPLICATION.userName;\r",
																			"    ORIGINATOR = \"Postman\";\r",
																			"    X_CORRELATOR = CreateXCorrelator();\r",
																			"    TRACE_INDICATOR = \"1\";\r",
																			"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																			"    \r",
																			"} catch (error) {\r",
																			"    console.log(\"! Could not define dummy values for parameters. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Request Body\r",
																			"****************************************************************************************/\r",
																			"var REQUEST_BODY;\r",
																			"try {\r",
																			"    REQUEST_BODY = '{'\r",
																			"        + '\"application-name\" : ' + '\"' + dummyApplicationName + '\",'\r",
																			"        + '\"release-number\" : ' + '\"' + dummyReleaseNumber + '\"'\r",
																			"    +'}';\r",
																			"} catch (error) {\r",
																			"    console.log(\"!Could not define request body. \");\r",
																			"}\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + \"/v1/disregard-application\";\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																			"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																			"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																			"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																			"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"function CreateXCorrelator() {\r",
																			"    let xCorrelator;\r",
																			"    xCorrelator = \"\";\r",
																			"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(12);\r",
																			"    return xCorrelator;\r",
																			"}\r",
																			"\r",
																			"function GenerateRandomHexString(length) {\r",
																			"    var randomRandomHexString = \"\";\r",
																			"    while (randomRandomHexString.length < length) {\r",
																			"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																			"    }\r",
																			"    return randomRandomHexString.substring(0,length);\r",
																			"}\r",
																			"\r",
																			"function GenerateRandomString(length) {\r",
																			"    let randomString;\r",
																			"    randomString = \"\";\r",
																			"    try {\r",
																			"        let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r",
																			"        let charactersLength = characters.length;\r",
																			"        for (let i = 0; i < length; i++) {\r",
																			"            randomString += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																			"        }\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Could not generate random string. \");\r",
																			"    }\r",
																			"    return randomString;\r",
																			"}\r",
																			"\r",
																			"function RandomReleaseNumber() {\r",
																			"    let releaseNumber;\r",
																			"    let releaseNumberParts = [];\r",
																			"    for  (let i=0; i<3 ; i++) {\r",
																			"        releaseNumberParts[i] = Math.floor(Math.random() * 10);\r",
																			"    }\r",
																			"    releaseNumber = releaseNumberParts[0] + \".\" + releaseNumberParts[1] + \".\" + releaseNumberParts[2];\r",
																			"    return releaseNumber;\r",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "POST",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "204",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Check /core-model-1-4:control-construct",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"var AUTHORIZATION;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																			"\r",
																			"    oamPath = \"/core-model-1-4:control-construct\";\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Environment variables could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Request Body\r",
																			"****************************************************************************************/\r",
																			"var REQUEST_BODY;\r",
																			"try {\r",
																			"    REQUEST_BODY = \"\";\r",
																			"} catch (error) {\r",
																			"    console.log(\"!Could not define request body. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + oamPath;\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var expectedLogicalTerminationPoint;\r",
																			"var expectedForwardingConstruct;\r",
																			"try {\r",
																			"    expectedLogicalTerminationPoint = pm.collectionVariables.get(\"ltpList\");\r",
																			"    expectedForwardingConstruct = pm.collectionVariables.get(\"fcList\");\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Collection variables could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var RESPONSE_CODE;\r",
																			"var RESPONSE;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"\r",
																			"    RESPONSE_CODE = parseInt(response.code);\r",
																			"\r",
																			"    if (Math.floor(RESPONSE_CODE / 100) === 2) {\r",
																			"        RESPONSE = JSON.parse(response.stream);\r",
																			"    } else {\r",
																			"        RESPONSE = [];\r",
																			"    }\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Result value lists could not be extracted.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Testing\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.test(\"GET /core-model-1-4:control-construct responds 200\", function () {\r",
																			"        pm.expect(RESPONSE_CODE).to.equal(200);\r",
																			"    });\r",
																			"\r",
																			"    let actualLtpList;\r",
																			"    actualLtpList = RESPONSE[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																			"\r",
																			"    pm.test(\"Received logical-termination-point is same as intial instance \", function () {\r",
																			"        pm.expect(actualLtpList).to.deep.equal(expectedLogicalTerminationPoint);\r",
																			"    });\r",
																			"\r",
																			"    let actualFcList;\r",
																			"    actualFcList = RESPONSE[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
																			"\r",
																			"    pm.test(\"Received forwarding-construct is same as intial instance \", function () {\r",
																			"        pm.expect(actualFcList).to.deep.equal(expectedForwardingConstruct);\r",
																			"    });\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Testing could not be executed.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "200",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														}
													],
													"description": "##Gets application-create trigger update FC notified?\n#### Requires:\n- ExecutionAndTraceLog/OamLog server to operate\n\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  -  search CC for output fc-port of ServiceRequestCausesLoggingRequest, \nits corresponding op-c, http-c and tcp-c, storing them for later verification request \n  - searching CC for output-fc-port of ServiceRequestCausesFcUpdateRequest, its corresponding op-c, http-c, storing them.\n  - searching CC for op-s of /v1/regard-application and /v1/disregard-application, storing operation-key\n- GETting EaTL/CC (while using IP, protocol and port from above)\n  - searching CC for op-c of /v1/list-records-of-flow, storing operation-key\n- POST /v1/regard-application with\n  - dummy values generated for application-name, release-number, address, protocol, port \n  - operation-key from above\n  - reasonable parameter\n\n#### Testing:\n- POST ExecutionAndTraceLog/v1/list-records-of-flow with \n   - IP and port from above\n   - operation-key from above\n   - DummyValue of x-correlator\n   - checking response for entry with application data from ServiceRequestCausesFcUpdateRequest\n   - checking same record for containing DummyXCorrelator &DummyTraceIndicator\n\n#### Clearing:\n- /v1/disregard-application with values according to generated dummy values.\n\n#### Clearance check:\n- Check if the logical-termination-point instance is the same as initial configuration\n- Check if the forwarding-construct instance is the same as initial configuration"
												}
											]
										}
									]
								},
								{
									"name": "Exit",
									"item": [
										{
											"name": "for exiting /v1/regard-application",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var URI;\r",
															"try {\r",
															"    URI = pm.environment.get(\"dummyUri\");\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Loading Input Data failed.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Updating Environmental Variables and Determining the next Step\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    pm.variables.clear();\r",
															"\r",
															"    let REQUEST_BODY;\r",
															"    REQUEST_BODY = \"\";\r",
															"\r",
															"    let AUTHORIZATION;\r",
															"    AUTHORIZATION = \"\";\r",
															"\r",
															"    let OPERATION_KEY;\r",
															"    OPERATION_KEY = \"\";\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
															"    pm.request.headers.upsert({key:\"operationKey\", value:OPERATION_KEY});\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:\"application/json\"});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Setting Local Variables and Preparing the Request failed.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "/v1/disregard-application",
							"item": [
								{
									"name": "Continuous Integration",
									"item": [
										{
											"name": "Service Idempotent?",
											"item": [
												{
													"name": "reference /core-model-1-4:control-construct",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n-----  /v1/disregard-application integration -- is service idempotent? -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Environment variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY = \"\";\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var ltpList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    let responseCode;\r",
																	"    responseCode = parseInt(response.code);\r",
																	"    \r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        let responseObject;\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																	"\r",
																	"    } else {\r",
																	"        ltpList = [];\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! ltpList could not be extracted.\");\r",
																	"}\r",
																	"\r",
																	"var currentOperationServer;\r",
																	"try {\r",
																	"    currentOperationServer = FindOperationServer(\"/v1/disregard-application\", ltpList);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Reference objects could not be extracted.\");\r",
																	"} \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.clear();\r",
																	"    \r",
																	"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function FindOperationServer(operationName, ltpList) {\r",
																	"    let operationServer;\r",
																	"    operationServer = \"\";\r",
																	"    try {\r",
																	"        let sampleUuid;\r",
																	"        for(let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"op-s-\")) {\r",
																	"                let sampleOperationName;\r",
																	"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																	"                if(sampleOperationName == operationName) {\r",
																	"                    operationServer = ltpList[i];\r",
																	"                    return operationServer;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																	"    }\r",
																	"    return operationServer;\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected  /v1/disregard-application - service idempotent?",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"var dummyApplicationName;\r",
																	"var dummyReleaseNumber;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"    \r",
																	"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"\r",
																	"    dummyApplicationName = GenerateRandomString(12);\r",
																	"    dummyReleaseNumber = RandomReleaseNumber();\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"        + '\"application-name\" : ' + '\"' + dummyApplicationName + '\",'\r",
																	"        + '\"release-number\" : ' + '\"' + dummyReleaseNumber + '\"'\r",
																	"    +'}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/disregard-application\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomString(length) {\r",
																	"    let randomString;\r",
																	"    randomString = \"\";\r",
																	"    try {\r",
																	"        let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r",
																	"        let charactersLength = characters.length;\r",
																	"        for (let i = 0; i < length; i++) {\r",
																	"            randomString += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Could not generate random string. \");\r",
																	"    }\r",
																	"    return randomString;\r",
																	"}\r",
																	"\r",
																	"function RandomReleaseNumber() {\r",
																	"    let releaseNumber;\r",
																	"    let releaseNumberParts = [];\r",
																	"    for  (let i=0; i<3 ; i++) {\r",
																	"        releaseNumberParts[i] = Math.floor(Math.random() * 10);\r",
																	"    }\r",
																	"    releaseNumber = releaseNumberParts[0] + \".\" + releaseNumberParts[1] + \".\" + releaseNumberParts[2];\r",
																	"    return releaseNumber;\r",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"POST /v1/disregard-application responds 204\", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(204);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "204",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"description": "## Is service idempotent?\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for op-s of /v1/disregard-application, storing operation-key\n\n- POST /v1/disregard-application\n    - all attributes filled with random values\n    -operation-key from above\n    - reasonable parameters\n\n#### Testing:\n- checking for ResponseCode==204 (not 400 because of idempotence)\n\n#### Clearing:\n- not applicable"
										},
										{
											"name": "request header parameter completeness",
											"item": [
												{
													"name": "reference /core-model-1-4:control-construct",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n-----  /v1/disregard-application integration -- request headers parameters completeness -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Environment variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY = \"\";\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var ltpList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    let responseCode;\r",
																	"    responseCode = parseInt(response.code);\r",
																	"    \r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        let responseObject;\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																	"\r",
																	"    } else {\r",
																	"        ltpList = [];\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! ltpList could not be extracted.\");\r",
																	"}\r",
																	"\r",
																	"var currentOperationServer;\r",
																	"try {\r",
																	"    currentOperationServer = FindOperationServer(\"/v1/disregard-application\", ltpList);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Reference objects could not be extracted.\");\r",
																	"} \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.clear();\r",
																	"    \r",
																	"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function FindOperationServer(operationName, ltpList) {\r",
																	"    let operationServer;\r",
																	"    operationServer = \"\";\r",
																	"    try {\r",
																	"        let sampleUuid;\r",
																	"        for(let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"op-s-\")) {\r",
																	"                let sampleOperationName;\r",
																	"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																	"                if(sampleOperationName == operationName) {\r",
																	"                    operationServer = ltpList[i];\r",
																	"                    return operationServer;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																	"    }\r",
																	"    return operationServer;\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected  /v1/disregard-application- request header parameter completeness",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"var dummyApplicationName;\r",
																	"var dummyReleaseNumber;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"    \r",
																	"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"\r",
																	"    dummyApplicationName = GenerateRandomString(12);\r",
																	"    dummyReleaseNumber = RandomReleaseNumber();\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"        + '\"application-name\" : ' + '\"' + dummyApplicationName + '\",'\r",
																	"        + '\"release-number\" : ' + '\"' + dummyReleaseNumber + '\"'\r",
																	"    +'}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/disregard-application\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    let parameters;\r",
																	"    parameters = [\"user\", \"originator\", \"x-correlator\", \"trace-indicator\", \"customer-journey\"];\r",
																	"\r",
																	"    let missingParameter;\r",
																	"    missingParameter = GetMissingParameter(parameters);\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"    pm.request.headers.remove(missingParameter);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	"\r",
																	"function GetMissingParameter(parameters) {\r",
																	"    let missingParameter;\r",
																	"    missingParameter = parameters[Math.floor(Math.random()*parameters.length)];\r",
																	"    return missingParameter;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomString(length) {\r",
																	"    let randomString;\r",
																	"    randomString = \"\";\r",
																	"    try {\r",
																	"        let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r",
																	"        let charactersLength = characters.length;\r",
																	"        for (let i = 0; i < length; i++) {\r",
																	"            randomString += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Could not generate random string. \");\r",
																	"    }\r",
																	"    return randomString;\r",
																	"}\r",
																	"\r",
																	"function RandomReleaseNumber() {\r",
																	"    let releaseNumber;\r",
																	"    let releaseNumberParts = [];\r",
																	"    for  (let i=0; i<3 ; i++) {\r",
																	"        releaseNumberParts[i] = Math.floor(Math.random() * 10);\r",
																	"    }\r",
																	"    releaseNumber = releaseNumberParts[0] + \".\" + releaseNumberParts[1] + \".\" + releaseNumberParts[2];\r",
																	"    return releaseNumber;\r",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"As expected, POST /v1/disregard-application responds 400, because of missing parameter\", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "400",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"description": "## Get parameters checked for completeness?\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for op-s of /v1/disregard-application, storing operation-key\n- POST /v1/disregard-application\n  - all attributes filled with random value\n  - operation-key from above\n  - BUT one randomly chosen parameter (user, originator, x-correlator, trace-indicator or customer-journey) missing (not empty string!)\n\n#### Testing:\n- checking for ResponseCode == 400\n\n#### Clearing:\n- not applicable"
										},
										{
											"name": "originator parameter correctness",
											"item": [
												{
													"name": "reference /core-model-1-4:control-construct",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n-----  /v1/disregard-application integration -- originator correctness check -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Environment variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY = \"\";\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var ltpList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    let responseCode;\r",
																	"    responseCode = parseInt(response.code);\r",
																	"    \r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        let responseObject;\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																	"\r",
																	"    } else {\r",
																	"        ltpList = [];\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! ltpList could not be extracted.\");\r",
																	"}\r",
																	"\r",
																	"var currentOperationServer;\r",
																	"try {\r",
																	"    currentOperationServer = FindOperationServer(\"/v1/disregard-application\", ltpList);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Reference objects could not be extracted.\");\r",
																	"} \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.clear();\r",
																	"    \r",
																	"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function FindOperationServer(operationName, ltpList) {\r",
																	"    let operationServer;\r",
																	"    operationServer = \"\";\r",
																	"    try {\r",
																	"        let sampleUuid;\r",
																	"        for(let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"op-s-\")) {\r",
																	"                let sampleOperationName;\r",
																	"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																	"                if(sampleOperationName == operationName) {\r",
																	"                    operationServer = ltpList[i];\r",
																	"                    return operationServer;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																	"    }\r",
																	"    return operationServer;\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected  /v1/disregard-application too short originator",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n----- originator parameter correctness check - length too short -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"var dummyApplicationName;\r",
																	"var dummyReleaseNumber;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"    \r",
																	"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"\r",
																	"    dummyApplicationName = GenerateRandomString(12);\r",
																	"    dummyReleaseNumber = RandomReleaseNumber();\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var FAULTY_ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    FAULTY_ORIGINATOR = GenerateFaultyOriginator();\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"        + '\"application-name\" : ' + '\"' + dummyApplicationName + '\",'\r",
																	"        + '\"release-number\" : ' + '\"' + dummyReleaseNumber + '\"'\r",
																	"    +'}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/disregard-application\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:FAULTY_ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"function GenerateFaultyOriginator() {\r",
																	"    let faultyOriginator;\r",
																	"    let length;\r",
																	"    let minLength;\r",
																	"    minLength = 0;\r",
																	"    let maxLength;\r",
																	"    maxLength = 2;\r",
																	"    length = Math.floor(Math.random() * maxLength) + minLength;\r",
																	"    faultyOriginator = GenerateRandomString(length);\r",
																	"    return faultyOriginator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomString(length) {\r",
																	"    let randomString;\r",
																	"    randomString = \"\";\r",
																	"    try {\r",
																	"        let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r",
																	"        let charactersLength = characters.length;\r",
																	"        for (let i = 0; i < length; i++) {\r",
																	"            randomString += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Could not generate random string. \");\r",
																	"    }\r",
																	"    return randomString;\r",
																	"}\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomString(length) {\r",
																	"    let randomString;\r",
																	"    randomString = \"\";\r",
																	"    try {\r",
																	"        let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r",
																	"        let charactersLength = characters.length;\r",
																	"        for (let i = 0; i < length; i++) {\r",
																	"            randomString += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Could not generate random string. \");\r",
																	"    }\r",
																	"    return randomString;\r",
																	"}\r",
																	"\r",
																	"function RandomReleaseNumber() {\r",
																	"    let releaseNumber;\r",
																	"    let releaseNumberParts = [];\r",
																	"    for  (let i=0; i<3 ; i++) {\r",
																	"        releaseNumberParts[i] = Math.floor(Math.random() * 10);\r",
																	"    }\r",
																	"    releaseNumber = releaseNumberParts[0] + \".\" + releaseNumberParts[1] + \".\" + releaseNumberParts[2];\r",
																	"    return releaseNumber;\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"As expected, POST /v1/disregard-application responds 400, because of faulty originator parameter(too short string)\", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "400",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"description": "## Gets originator checked for compliance with specification?\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for op-s of /v1/disregard-application, storing operation-key\n- POST /v1/disregard-application\n  - all attributes flled with random values\n  - all parameters with realistic values, BUT\n    originator set to have value of other data-type and originator set to be a string of 0, 1 or 2 (random) letters length (too short)\n\n#### Testing:\n- checking for ResponseCode==400\n\n#### Clearing:\n- not applicable"
										},
										{
											"name": "x-correlator pattern",
											"item": [
												{
													"name": "reference /core-model-1-4:control-construct",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n-----/v1/disregard-application integration -- x-correlator pattern correctness check -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Environment variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY = \"\";\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var ltpList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    let responseCode;\r",
																	"    responseCode = parseInt(response.code);\r",
																	"    \r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        let responseObject;\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																	"\r",
																	"    } else {\r",
																	"        ltpList = [];\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! ltpList could not be extracted.\");\r",
																	"}\r",
																	"\r",
																	"var currentOperationServer;\r",
																	"try {\r",
																	"    currentOperationServer = FindOperationServer(\"/v1/disregard-application\", ltpList);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Reference objects could not be extracted.\");\r",
																	"} \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.clear();\r",
																	"    \r",
																	"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function FindOperationServer(operationName, ltpList) {\r",
																	"    let operationServer;\r",
																	"    operationServer = \"\";\r",
																	"    try {\r",
																	"        let sampleUuid;\r",
																	"        for(let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"op-s-\")) {\r",
																	"                let sampleOperationName;\r",
																	"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																	"                if(sampleOperationName == operationName) {\r",
																	"                    operationServer = ltpList[i];\r",
																	"                    return operationServer;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																	"    }\r",
																	"    return operationServer;\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected  /v1/disregard-application with Too short x-correlator",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n----- x-correlator parameter correctness check - too short -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"var dummyApplicationName;\r",
																	"var dummyReleaseNumber;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"    \r",
																	"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"\r",
																	"    dummyApplicationName = GenerateRandomString(12);\r",
																	"    dummyReleaseNumber = RandomReleaseNumber();\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var FAULTY_X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    FAULTY_X_CORRELATOR = GenerateFaultyXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(error)\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"        + '\"application-name\" : ' + '\"' + dummyApplicationName + '\",'\r",
																	"        + '\"release-number\" : ' + '\"' + dummyReleaseNumber + '\"'\r",
																	"    +'}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/disregard-application\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:FAULTY_X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function GenerateFaultyXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomString(length) {\r",
																	"    let randomString;\r",
																	"    randomString = \"\";\r",
																	"    try {\r",
																	"        let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r",
																	"        let charactersLength = characters.length;\r",
																	"        for (let i = 0; i < length; i++) {\r",
																	"            randomString += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Could not generate random string. \");\r",
																	"    }\r",
																	"    return randomString;\r",
																	"}\r",
																	"\r",
																	"function RandomReleaseNumber() {\r",
																	"    let releaseNumber;\r",
																	"    let releaseNumberParts = [];\r",
																	"    for  (let i=0; i<3 ; i++) {\r",
																	"        releaseNumberParts[i] = Math.floor(Math.random() * 10);\r",
																	"    }\r",
																	"    releaseNumber = releaseNumberParts[0] + \".\" + releaseNumberParts[1] + \".\" + releaseNumberParts[2];\r",
																	"    return releaseNumber;\r",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"As expected, POST /v1/disregard-application responds 400, because of too short x-correlator value \", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "400",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected  /v1/disregard-application with Too long x-correlator",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n----- x-correlator parameter correctness check - too long -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"var dummyApplicationName;\r",
																	"var dummyReleaseNumber;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"    \r",
																	"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"\r",
																	"    dummyApplicationName = GenerateRandomString(12);\r",
																	"    dummyReleaseNumber = RandomReleaseNumber();\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var FAULTY_X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    FAULTY_X_CORRELATOR = GenerateFaultyXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(error)\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"        + '\"application-name\" : ' + '\"' + dummyApplicationName + '\",'\r",
																	"        + '\"release-number\" : ' + '\"' + dummyReleaseNumber + '\"'\r",
																	"    +'}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/disregard-application\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:FAULTY_X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function GenerateFaultyXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomString(length) {\r",
																	"    let randomString;\r",
																	"    randomString = \"\";\r",
																	"    try {\r",
																	"        let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r",
																	"        let charactersLength = characters.length;\r",
																	"        for (let i = 0; i < length; i++) {\r",
																	"            randomString += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Could not generate random string. \");\r",
																	"    }\r",
																	"    return randomString;\r",
																	"}\r",
																	"\r",
																	"function RandomReleaseNumber() {\r",
																	"    let releaseNumber;\r",
																	"    let releaseNumberParts = [];\r",
																	"    for  (let i=0; i<3 ; i++) {\r",
																	"        releaseNumberParts[i] = Math.floor(Math.random() * 10);\r",
																	"    }\r",
																	"    releaseNumber = releaseNumberParts[0] + \".\" + releaseNumberParts[1] + \".\" + releaseNumberParts[2];\r",
																	"    return releaseNumber;\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"As expected, POST /v1/disregard-application responds 400, because of too long x-correlator value \", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "400",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected /v1/disregard-application with incorrect characters count x-correlator",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n----- x-correlator parameter correctness check - incorrect characters count -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"var dummyApplicationName;\r",
																	"var dummyReleaseNumber;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"    \r",
																	"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"\r",
																	"    dummyApplicationName = GenerateRandomString(12);\r",
																	"    dummyReleaseNumber = RandomReleaseNumber();\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var FAULTY_X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    FAULTY_X_CORRELATOR = GenerateFaultyXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(error)\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"        + '\"application-name\" : ' + '\"' + dummyApplicationName + '\",'\r",
																	"        + '\"release-number\" : ' + '\"' + dummyReleaseNumber + '\"'\r",
																	"    +'}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/disregard-application\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:FAULTY_X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function GenerateFaultyXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"\r",
																	"    let faultyElementLength;\r",
																	"    faultyElementLength = Math.floor(Math.random() * 3) + 1;\r",
																	"    let faultyElement;\r",
																	"    faultyElement = GenerateRandomHexString(faultyElementLength);\r",
																	"\r",
																	"    let xCorrelatorParts;\r",
																	"    xCorrelatorParts = xCorrelator.split(\"-\");\r",
																	"    let faultyXCorrelatorPart;\r",
																	"    faultyXCorrelatorPart = Math.floor(Math.random() * xCorrelatorParts.length);\r",
																	"\r",
																	"    xCorrelatorParts[faultyXCorrelatorPart] = faultyElement;\r",
																	"    xCorrelator = xCorrelatorParts.join(\"-\");\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomString(length) {\r",
																	"    let randomString;\r",
																	"    randomString = \"\";\r",
																	"    try {\r",
																	"        let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r",
																	"        let charactersLength = characters.length;\r",
																	"        for (let i = 0; i < length; i++) {\r",
																	"            randomString += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Could not generate random string. \");\r",
																	"    }\r",
																	"    return randomString;\r",
																	"}\r",
																	"\r",
																	"function RandomReleaseNumber() {\r",
																	"    let releaseNumber;\r",
																	"    let releaseNumberParts = [];\r",
																	"    for  (let i=0; i<3 ; i++) {\r",
																	"        releaseNumberParts[i] = Math.floor(Math.random() * 10);\r",
																	"    }\r",
																	"    releaseNumber = releaseNumberParts[0] + \".\" + releaseNumberParts[1] + \".\" + releaseNumberParts[2];\r",
																	"    return releaseNumber;\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"As expected, POST /v1/disregard-application responds 400, because of incorrect character count of x-correlator value \", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "400",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected  /v1/disregard-application with incorrect separator x-correlator",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n----- x-correlator parameter correctness check - incorrect separator -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"var dummyApplicationName;\r",
																	"var dummyReleaseNumber;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"    \r",
																	"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"\r",
																	"    dummyApplicationName = GenerateRandomString(12);\r",
																	"    dummyReleaseNumber = RandomReleaseNumber();\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var FAULTY_X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    FAULTY_X_CORRELATOR = GenerateFaultyXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(error)\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"        + '\"application-name\" : ' + '\"' + dummyApplicationName + '\",'\r",
																	"        + '\"release-number\" : ' + '\"' + dummyReleaseNumber + '\"'\r",
																	"    +'}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/disregard-application\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:FAULTY_X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function GenerateFaultyXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"\r",
																	"    let separators;\r",
																	"    separators = \".:;/\";\r",
																	"    let separatorsLength;\r",
																	"    separatorsLength = separators.length;\r",
																	"\r",
																	"    let faultySeparator;\r",
																	"    faultySeparator = separators.charAt(Math.floor(Math.random() * separatorsLength));\r",
																	"\r",
																	"    xCorrelator += GenerateRandomHexString(8) + faultySeparator;\r",
																	"    xCorrelator += GenerateRandomHexString(4) + faultySeparator;\r",
																	"    xCorrelator += GenerateRandomHexString(4) + faultySeparator;\r",
																	"    xCorrelator += GenerateRandomHexString(4) + faultySeparator;\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomString(length) {\r",
																	"    let randomString;\r",
																	"    randomString = \"\";\r",
																	"    try {\r",
																	"        let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r",
																	"        let charactersLength = characters.length;\r",
																	"        for (let i = 0; i < length; i++) {\r",
																	"            randomString += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Could not generate random string. \");\r",
																	"    }\r",
																	"    return randomString;\r",
																	"}\r",
																	"\r",
																	"function RandomReleaseNumber() {\r",
																	"    let releaseNumber;\r",
																	"    let releaseNumberParts = [];\r",
																	"    for  (let i=0; i<3 ; i++) {\r",
																	"        releaseNumberParts[i] = Math.floor(Math.random() * 10);\r",
																	"    }\r",
																	"    releaseNumber = releaseNumberParts[0] + \".\" + releaseNumberParts[1] + \".\" + releaseNumberParts[2];\r",
																	"    return releaseNumber;\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"As expected, POST /v1/disregard-application responds 400, because of incorrect separator in x-correlator value \", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "400",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"description": "## Gets x-correlator checked for complying the pattern?\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for op-s of /v1/disregard-application, storing operation-key\n- POST /v1/disregard-application\n  - all attributes flled with random values\n  - operation-key from above\n  - reasonable parameters, BUT dummyXCorrelators differing from the pattern in various ways (e.g. empty string)\n\n#### Testing:\n- checking for ResponseCode==400\n\n#### Clearing:\n- not applicable"
										},
										{
											"name": "trace-indicator pattern",
											"item": [
												{
													"name": "reference /core-model-1-4:control-construct",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n----- /v1/disregard-application integration -- trace-indicator pattern correctness check -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Environment variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY = \"\";\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var ltpList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    let responseCode;\r",
																	"    responseCode = parseInt(response.code);\r",
																	"    \r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        let responseObject;\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																	"\r",
																	"    } else {\r",
																	"        ltpList = [];\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! ltpList could not be extracted.\");\r",
																	"}\r",
																	"\r",
																	"var currentOperationServer;\r",
																	"try {\r",
																	"    currentOperationServer = FindOperationServer(\"/v1/disregard-application\", ltpList);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Reference objects could not be extracted.\");\r",
																	"} \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.clear();\r",
																	"    \r",
																	"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function FindOperationServer(operationName, ltpList) {\r",
																	"    let operationServer;\r",
																	"    operationServer = \"\";\r",
																	"    try {\r",
																	"        let sampleUuid;\r",
																	"        for(let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"op-s-\")) {\r",
																	"                let sampleOperationName;\r",
																	"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																	"                if(sampleOperationName == operationName) {\r",
																	"                    operationServer = ltpList[i];\r",
																	"                    return operationServer;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																	"    }\r",
																	"    return operationServer;\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected  /v1/disregard-application with letters in trace-indicator",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n----- trace-indicator parameter correctness check - presence of letters -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"var dummyApplicationName;\r",
																	"var dummyReleaseNumber;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"    \r",
																	"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"\r",
																	"    dummyApplicationName = GenerateRandomString(12);\r",
																	"    dummyReleaseNumber = RandomReleaseNumber();\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var FAULTY_TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    FAULTY_TRACE_INDICATOR = GenerateFaultyTraceIndicator();\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(error)\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"        + '\"application-name\" : ' + '\"' + dummyApplicationName + '\",'\r",
																	"        + '\"release-number\" : ' + '\"' + dummyReleaseNumber + '\"'\r",
																	"    +'}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/disregard-application\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:FAULTY_TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"function GenerateFaultyTraceIndicator() {\r",
																	"    let traceIndicator;\r",
																	"    traceIndicator = \"\";\r",
																	"\r",
																	"    let traceIndicatorParts;\r",
																	"    traceIndicatorParts = [];\r",
																	"    for(let i=0; i<3; i++) {\r",
																	"        traceIndicatorParts[i] = Math.floor(Math.random() * 10);\r",
																	"    }\r",
																	"    let characters;\r",
																	"    characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r",
																	"    let charactersLength;\r",
																	"    charactersLength = characters.length;\r",
																	"    let faultyElement;\r",
																	"    faultyElement = characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																	"\r",
																	"    let faultyTraceIndicatorPart;\r",
																	"    faultyTraceIndicatorPart = Math.floor(Math.random() * 3);\r",
																	"\r",
																	"    traceIndicatorParts[faultyTraceIndicatorPart] = faultyElement;\r",
																	"    traceIndicator = traceIndicatorParts.join(\".\");\r",
																	"\r",
																	"    return traceIndicator;\r",
																	"}\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomString(length) {\r",
																	"    let randomString;\r",
																	"    randomString = \"\";\r",
																	"    try {\r",
																	"        let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r",
																	"        let charactersLength = characters.length;\r",
																	"        for (let i = 0; i < length; i++) {\r",
																	"            randomString += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Could not generate random string. \");\r",
																	"    }\r",
																	"    return randomString;\r",
																	"}\r",
																	"\r",
																	"function RandomReleaseNumber() {\r",
																	"    let releaseNumber;\r",
																	"    let releaseNumberParts = [];\r",
																	"    for  (let i=0; i<3 ; i++) {\r",
																	"        releaseNumberParts[i] = Math.floor(Math.random() * 10);\r",
																	"    }\r",
																	"    releaseNumber = releaseNumberParts[0] + \".\" + releaseNumberParts[1] + \".\" + releaseNumberParts[2];\r",
																	"    return releaseNumber;\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"As expected, POST /v1/disregard-application responds 400, because of presence of letters in trace-indicator value \", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "400",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected  /v1/disregard-application with incorrect separator trace-indicator",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n----- trace-indicator parameter correctness check - incorrect separator -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"var dummyApplicationName;\r",
																	"var dummyReleaseNumber;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"    \r",
																	"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"\r",
																	"    dummyApplicationName = GenerateRandomString(12);\r",
																	"    dummyReleaseNumber = RandomReleaseNumber();\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var FAULTY_TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    FAULTY_TRACE_INDICATOR = GenerateFaultyTraceIndicator();\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(error)\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"        + '\"application-name\" : ' + '\"' + dummyApplicationName + '\",'\r",
																	"        + '\"release-number\" : ' + '\"' + dummyReleaseNumber + '\"'\r",
																	"    +'}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/disregard-application\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:FAULTY_TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"function GenerateFaultyTraceIndicator() {\r",
																	"    let traceIndicator;\r",
																	"    traceIndicator = \"\";\r",
																	"\r",
																	"    let traceIndicatorParts;\r",
																	"    traceIndicatorParts = [];\r",
																	"    for(let i=0; i<3; i++) {\r",
																	"        traceIndicatorParts[i] = Math.floor(Math.random() * 10);\r",
																	"    }\r",
																	"    let separators;\r",
																	"    separators = \"-:;/\";\r",
																	"    let separatorsLength;\r",
																	"    separatorsLength = separators.length;\r",
																	"\r",
																	"    let faultySeparator;\r",
																	"    faultySeparator = separators.charAt(Math.floor(Math.random() * separatorsLength));\r",
																	"\r",
																	"    traceIndicator = traceIndicatorParts.join(faultySeparator);\r",
																	"\r",
																	"    return traceIndicator;\r",
																	"}\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomString(length) {\r",
																	"    let randomString;\r",
																	"    randomString = \"\";\r",
																	"    try {\r",
																	"        let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r",
																	"        let charactersLength = characters.length;\r",
																	"        for (let i = 0; i < length; i++) {\r",
																	"            randomString += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Could not generate random string. \");\r",
																	"    }\r",
																	"    return randomString;\r",
																	"}\r",
																	"\r",
																	"function RandomReleaseNumber() {\r",
																	"    let releaseNumber;\r",
																	"    let releaseNumberParts = [];\r",
																	"    for  (let i=0; i<3 ; i++) {\r",
																	"        releaseNumberParts[i] = Math.floor(Math.random() * 10);\r",
																	"    }\r",
																	"    releaseNumber = releaseNumberParts[0] + \".\" + releaseNumberParts[1] + \".\" + releaseNumberParts[2];\r",
																	"    return releaseNumber;\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"As expected, POST /v1/disregard-application responds 400, because of incorrect separator in trace-indicator value \", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "400",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"description": "## Gets trace-indicator checked for complying the pattern?\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for op-s of /v1/disregard-application, storing operation-key\n- POST /v1/disregard-application\n  - all attributes flled with random values\n  - operation-key from above\n  - reasonable parameters, BUT dummyTraceIndicator differing from the pattern in various ways (e.g. empty string)\n\n#### Testing:\n- checking for ResponseCode==400\n\n#### Clearing:\n- not applicable"
										},
										{
											"name": "security key missing?",
											"item": [
												{
													"name": "Expected  /v1/disregard-application - security key missing?",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n----- /v1/disregard-application integration -- securitykey missing? -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var dummyApplicationName;\r",
																	"var dummyReleaseNumber;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    dummyApplicationName = GenerateRandomString(12);\r",
																	"    dummyReleaseNumber = RandomReleaseNumber();\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"        + '\"application-name\" : ' + '\"' + dummyApplicationName + '\",'\r",
																	"        + '\"release-number\" : ' + '\"' + dummyReleaseNumber + '\"'\r",
																	"    +'}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/disregard-application\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomString(length) {\r",
																	"    let randomString;\r",
																	"    randomString = \"\";\r",
																	"    try {\r",
																	"        let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r",
																	"        let charactersLength = characters.length;\r",
																	"        for (let i = 0; i < length; i++) {\r",
																	"            randomString += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Could not generate random string. \");\r",
																	"    }\r",
																	"    return randomString;\r",
																	"}\r",
																	"\r",
																	"function RandomReleaseNumber() {\r",
																	"    let releaseNumber;\r",
																	"    let releaseNumberParts = [];\r",
																	"    for  (let i=0; i<3 ; i++) {\r",
																	"        releaseNumberParts[i] = Math.floor(Math.random() * 10);\r",
																	"    }\r",
																	"    releaseNumber = releaseNumberParts[0] + \".\" + releaseNumberParts[1] + \".\" + releaseNumberParts[2];\r",
																	"    return releaseNumber;\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"As expected, POST /v1/disregard-application responds 401, because of missing operation-key\", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(401);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "401",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"description": "## Gets security key checked for availability?\n#### Preparation:\n- POST /v1/disregard-application\n  - all attributes flled with random values\n  - reasonable parameters\n  - BUT operationKey parameter missing (does not mean empty string)\n\n#### Testing:\n- checking for ResponseCode==401\n\n#### Clearing:\n- not applicable"
										},
										{
											"name": "security key checked?",
											"item": [
												{
													"name": "Expected  /v1/disregard-application - security key checked?",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n----- /v1/disregard-application integration -- securitykey checked? -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var dummyApplicationName;\r",
																	"var dummyReleaseNumber;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    dummyApplicationName = GenerateRandomString(12);\r",
																	"    dummyReleaseNumber = RandomReleaseNumber();\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"        + '\"application-name\" : ' + '\"' + dummyApplicationName + '\",'\r",
																	"        + '\"release-number\" : ' + '\"' + dummyReleaseNumber + '\"'\r",
																	"    +'}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy security key\r",
																	"****************************************************************************************/\r",
																	"var FAULTY_OPERATION_KEY;\r",
																	"try {\r",
																	"    FAULTY_OPERATION_KEY = GenerateRandomHexString(32);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy value for operationKey. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/disregard-application\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({ key: \"operation-key\", value: FAULTY_OPERATION_KEY });\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomString(length) {\r",
																	"    let randomString;\r",
																	"    randomString = \"\";\r",
																	"    try {\r",
																	"        let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r",
																	"        let charactersLength = characters.length;\r",
																	"        for (let i = 0; i < length; i++) {\r",
																	"            randomString += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Could not generate random string. \");\r",
																	"    }\r",
																	"    return randomString;\r",
																	"}\r",
																	"\r",
																	"function RandomReleaseNumber() {\r",
																	"    let releaseNumber;\r",
																	"    let releaseNumberParts = [];\r",
																	"    for  (let i=0; i<3 ; i++) {\r",
																	"        releaseNumberParts[i] = Math.floor(Math.random() * 10);\r",
																	"    }\r",
																	"    releaseNumber = releaseNumberParts[0] + \".\" + releaseNumberParts[1] + \".\" + releaseNumberParts[2];\r",
																	"    return releaseNumber;\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"As expected, POST /v1/disregard-application responds 401, because of incorrect operation-key\", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(401);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "401",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"description": "## Gets security key checked for correctness?\n#### Preparation:\n- POST /v1/disregard-application\n  - all attributes flled with random values\n  - reasonable parameters\n  - BUT operationKey parameter with random dummy value\n\n#### Testing:\n- checking for ResponseCode==401\n\n#### Clearing:\n- not applicable"
										},
										{
											"name": "response header completeness",
											"item": [
												{
													"name": "reference /core-model-1-4:control-construct",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n----- /v1/disregard-application integration -- response header completeness -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Environment variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY = \"\";\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var ltpList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    let responseCode;\r",
																	"    responseCode = parseInt(response.code);\r",
																	"    \r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        let responseObject;\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																	"\r",
																	"    } else {\r",
																	"        ltpList = [];\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! ltpList could not be extracted.\");\r",
																	"}\r",
																	"\r",
																	"var currentOperationServer;\r",
																	"try {\r",
																	"    currentOperationServer = FindOperationServer(\"/v1/disregard-application\", ltpList);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Reference objects could not be extracted.\");\r",
																	"} \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.clear();\r",
																	"    \r",
																	"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function FindOperationServer(operationName, ltpList) {\r",
																	"    let operationServer;\r",
																	"    operationServer = \"\";\r",
																	"    try {\r",
																	"        let sampleUuid;\r",
																	"        for(let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"op-s-\")) {\r",
																	"                let sampleOperationName;\r",
																	"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																	"                if(sampleOperationName == operationName) {\r",
																	"                    operationServer = ltpList[i];\r",
																	"                    return operationServer;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																	"    }\r",
																	"    return operationServer;\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected  /v1/disregard-application response header parameter completeness",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"var dummyApplicationName;\r",
																	"var dummyReleaseNumber;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"    \r",
																	"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"\r",
																	"    dummyApplicationName = GenerateRandomString(12);\r",
																	"    dummyReleaseNumber = RandomReleaseNumber();\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"        + '\"application-name\" : ' + '\"' + dummyApplicationName + '\",'\r",
																	"        + '\"release-number\" : ' + '\"' + dummyReleaseNumber + '\"'\r",
																	"    +'}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/disregard-application\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomString(length) {\r",
																	"    let randomString;\r",
																	"    randomString = \"\";\r",
																	"    try {\r",
																	"        let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r",
																	"        let charactersLength = characters.length;\r",
																	"        for (let i = 0; i < length; i++) {\r",
																	"            randomString += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Could not generate random string. \");\r",
																	"    }\r",
																	"    return randomString;\r",
																	"}\r",
																	"\r",
																	"function RandomReleaseNumber() {\r",
																	"    let releaseNumber;\r",
																	"    let releaseNumberParts = [];\r",
																	"    for  (let i=0; i<3 ; i++) {\r",
																	"        releaseNumberParts[i] = Math.floor(Math.random() * 10);\r",
																	"    }\r",
																	"    releaseNumber = releaseNumberParts[0] + \".\" + releaseNumberParts[1] + \".\" + releaseNumberParts[2];\r",
																	"    return releaseNumber;\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"var response;\r",
																	"try {\r",
																	"    response = pm.response;\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"POST /v1/disregard-application responds 204\", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(204);\r",
																	"    });\r",
																	"    pm.test(\"Response headers contain 'x-correlator'\", function () {\r",
																	"        response.to.have.header(\"x-correlator\");\r",
																	"    });\r",
																	"    pm.test(\"Response headers contain 'exec-time'\", function () {\r",
																	"        response.to.have.header(\"exec-time\");\r",
																	"    });\r",
																	"    pm.test(\"Response headers contain 'backend-time'\", function () {\r",
																	"        response.to.have.header(\"backend-time\");\r",
																	"    });\r",
																	"    pm.test(\"Response headers contain 'life-cycle-state'\", function () {\r",
																	"        response.to.have.header(\"life-cycle-state\");\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "204",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"description": "## Contains response complete set of headers?\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for op-s of /v1/disregard-application, storing operation-key\n\n- POST /v1/disregard-application\n  - all attributes filled with random values\n  - operation-key from above\n  - reasonable parameters\n\n#### Testing:\n- checking for ResponseCode==204\n- checking for ResponseHeaders (x-correlator, exec-time, backend-time and life-cycle-state) being present and checking for correctness of type of each parameter.\n\n#### Clearing:\n- not applicable"
										},
										{
											"name": "x-correlator responded?",
											"item": [
												{
													"name": "reference /core-model-1-4:control-construct",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n----- /v1/disregard-application integration -- x-correlator responded? -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Environment variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY = \"\";\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var ltpList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    let responseCode;\r",
																	"    responseCode = parseInt(response.code);\r",
																	"    \r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        let responseObject;\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																	"\r",
																	"    } else {\r",
																	"        ltpList = [];\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! ltpList could not be extracted.\");\r",
																	"}\r",
																	"\r",
																	"var currentOperationServer;\r",
																	"try {\r",
																	"    currentOperationServer = FindOperationServer(\"/v1/disregard-application\", ltpList);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Reference objects could not be extracted.\");\r",
																	"} \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.clear();\r",
																	"    \r",
																	"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function FindOperationServer(operationName, ltpList) {\r",
																	"    let operationServer;\r",
																	"    operationServer = \"\";\r",
																	"    try {\r",
																	"        let sampleUuid;\r",
																	"        for(let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"op-s-\")) {\r",
																	"                let sampleOperationName;\r",
																	"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																	"                if(sampleOperationName == operationName) {\r",
																	"                    operationServer = ltpList[i];\r",
																	"                    return operationServer;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																	"    }\r",
																	"    return operationServer;\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected /v1/disregard-application - correct x-correlator responded?",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"var dummyApplicationName;\r",
																	"var dummyReleaseNumber;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"    \r",
																	"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"\r",
																	"    dummyApplicationName = GenerateRandomString(12);\r",
																	"    dummyReleaseNumber = RandomReleaseNumber();\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"        + '\"application-name\" : ' + '\"' + dummyApplicationName + '\",'\r",
																	"        + '\"release-number\" : ' + '\"' + dummyReleaseNumber + '\"'\r",
																	"    +'}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.set(\"user\", USER_NAME);\r",
																	"    pm.collectionVariables.set(\"originator\", ORIGINATOR);\r",
																	"    pm.collectionVariables.set(\"xCorrelator\", X_CORRELATOR);\r",
																	"    pm.collectionVariables.set(\"traceIndicator\", TRACE_INDICATOR);\r",
																	"    pm.collectionVariables.set(\"customerJourney\", CUSTOMER_JOURNEY);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/disregard-application\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomString(length) {\r",
																	"    let randomString;\r",
																	"    randomString = \"\";\r",
																	"    try {\r",
																	"        let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r",
																	"        let charactersLength = characters.length;\r",
																	"        for (let i = 0; i < length; i++) {\r",
																	"            randomString += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Could not generate random string. \");\r",
																	"    }\r",
																	"    return randomString;\r",
																	"}\r",
																	"\r",
																	"function RandomReleaseNumber() {\r",
																	"    let releaseNumber;\r",
																	"    let releaseNumberParts = [];\r",
																	"    for  (let i=0; i<3 ; i++) {\r",
																	"        releaseNumberParts[i] = Math.floor(Math.random() * 10);\r",
																	"    }\r",
																	"    releaseNumber = releaseNumberParts[0] + \".\" + releaseNumberParts[1] + \".\" + releaseNumberParts[2];\r",
																	"    return releaseNumber;\r",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var expectedXCorrelator;\r",
																	"try {\r",
																	"    expectedXCorrelator = pm.collectionVariables.get(\"xCorrelator\");\r",
																	"   \r",
																	"} catch(error) {\r",
																	"    console.log(\"! Could not load input data. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"var actualXCorrelator;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"    let RESPONSE_HEADERS;\r",
																	"    RESPONSE_HEADERS = pm.response.headers;  \r",
																	"    \r",
																	"    actualXCorrelator = RESPONSE_HEADERS.get(\"x-correlator\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"POST /v1/disregard-application responds 204\", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(204);\r",
																	"    });\r",
																	"    pm.test(\"Provides expected x-correlator: \" + expectedXCorrelator, function () {\r",
																	"        pm.expect(actualXCorrelator).to.equal(expectedXCorrelator);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "204",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"description": "## Is the initial x-correlator ín the response?\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for op-s of /v1/disregard-application, storing operation-key\n\n- POST /v1/disregard-application\n  - all attributes filled with random values\n  - operation-key from above\n  - reasonable parameters\n\n#### Testing:\n- checking for ResponseCode==204\n- checking for response headers containing x-correlator==dummyXCorrelator\n\n#### Clearing:\n- not applicable"
										},
										{
											"name": "life-cycle-state responded?",
											"item": [
												{
													"name": "reference /core-model-1-4:control-construct",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n----- /v1/disregard-application integration -- life-cycle-state responded? -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Environment variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY = \"\";\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var ltpList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    let responseCode;\r",
																	"    responseCode = parseInt(response.code);\r",
																	"    \r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        let responseObject;\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																	"\r",
																	"    } else {\r",
																	"        ltpList = [];\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! ltpList could not be extracted.\");\r",
																	"}\r",
																	"\r",
																	"var currentOperationServer;\r",
																	"try {\r",
																	"    currentOperationServer = FindOperationServer(\"/v1/disregard-application\", ltpList);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Reference objects could not be extracted.\");\r",
																	"} \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.clear();\r",
																	"    \r",
																	"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"    \r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function FindOperationServer(operationName, ltpList) {\r",
																	"    let operationServer;\r",
																	"    operationServer = \"\";\r",
																	"    try {\r",
																	"        let sampleUuid;\r",
																	"        for(let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"op-s-\")) {\r",
																	"                let sampleOperationName;\r",
																	"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																	"                if(sampleOperationName == operationName) {\r",
																	"                    operationServer = ltpList[i];\r",
																	"                    return operationServer;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																	"    }\r",
																	"    return operationServer;\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected  /v1/disregard-application correct life-cycle-state responded?",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"var dummyApplicationName;\r",
																	"var dummyReleaseNumber;\r",
																	"var LIFE_CYCLE_STATE;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"    \r",
																	"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"\r",
																	"    dummyApplicationName = GenerateRandomString(12);\r",
																	"    dummyReleaseNumber = RandomReleaseNumber();\r",
																	"\r",
																	"    let lifeCycleState;\r",
																	"    lifeCycleState = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"life-cycle-state\"];\r",
																	"    let prefixLength = ('operation-server-interface-1-0:LIFE_CYCLE_STATE_TYPE_').length;     \r",
																	"    LIFE_CYCLE_STATE = lifeCycleState.substring(prefixLength);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"        + '\"application-name\" : ' + '\"' + dummyApplicationName + '\",'\r",
																	"        + '\"release-number\" : ' + '\"' + dummyReleaseNumber + '\"'\r",
																	"    +'}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.set(\"expectedLifeCycleState\", LIFE_CYCLE_STATE);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/disregard-application\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomString(length) {\r",
																	"    let randomString;\r",
																	"    randomString = \"\";\r",
																	"    try {\r",
																	"        let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r",
																	"        let charactersLength = characters.length;\r",
																	"        for (let i = 0; i < length; i++) {\r",
																	"            randomString += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Could not generate random string. \");\r",
																	"    }\r",
																	"    return randomString;\r",
																	"}\r",
																	"\r",
																	"function RandomReleaseNumber() {\r",
																	"    let releaseNumber;\r",
																	"    let releaseNumberParts = [];\r",
																	"    for  (let i=0; i<3 ; i++) {\r",
																	"        releaseNumberParts[i] = Math.floor(Math.random() * 10);\r",
																	"    }\r",
																	"    releaseNumber = releaseNumberParts[0] + \".\" + releaseNumberParts[1] + \".\" + releaseNumberParts[2];\r",
																	"    return releaseNumber;\r",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var expectedLifeCycleState;\r",
																	"try {\r",
																	"    expectedLifeCycleState = pm.collectionVariables.get(\"expectedLifeCycleState\");\r",
																	"   \r",
																	"} catch(error) {\r",
																	"    console.log(\"! Could not load input data. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"var actualLifeCycleState;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"    let RESPONSE_HEADERS;\r",
																	"    RESPONSE_HEADERS = pm.response.headers;  \r",
																	"    \r",
																	"    actualLifeCycleState = RESPONSE_HEADERS.get(\"life-cycle-state\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"POST /v1/disregard-application responds 204\", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(204);\r",
																	"    });\r",
																	"    pm.test(\"Provides expected life-cycle-state: \" + expectedLifeCycleState, function () {\r",
																	"        pm.expect(actualLifeCycleState).to.equal(expectedLifeCycleState);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "204",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"description": "## Is the correct life-cycle-state ín the response?\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for op-s of /v1/disregard-application, storing operation-key\n\n- POST /v1/disregard-application\n  - all attributes filled with random values\n  - operation-key from above\n  - reasonable parameters\n\n#### Testing:\n- checking for ResponseCode==204\n- checking for response headers containing life-cycle-state is equal to the value as present in the control-construct for /v1/disregard-application/configuration/life-cycle-state\n\n#### Clearing:\n- not applicable"
										},
										{
											"name": "Request notified?",
											"item": [
												{
													"name": "reference /core-model-1-4:control-construct",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n-----  /v1/disregard-application integration -- request notified? -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Environment variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY = \"\";\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var ltpList;\r",
																	"var fcList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    let responseCode;\r",
																	"    responseCode = parseInt(response.code);\r",
																	"    \r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        let responseObject;\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																	"        fcList = responseObject[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
																	"\r",
																	"    } else {\r",
																	"        ltpList = [];\r",
																	"        fcList = [];\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! ltpList could not be extracted.\");\r",
																	"}\r",
																	"\r",
																	"var currentOperationServer;\r",
																	"var executionAndTraceLogHttpClientLtp;\r",
																	"var executionAndTraceLogTcpClientLtp;\r",
																	"var httpServerLtp;\r",
																	"try {\r",
																	"    currentOperationServer = FindOperationServer(\"/v1/disregard-application\", ltpList);\r",
																	"        \r",
																	"    //Execution And Trace Log\r",
																	"    let recordServiceRequestOperationClientLtp = FindOperationClientUsingCallback(\"ServiceRequestCausesLoggingRequest\", fcList, ltpList)\r",
																	"    executionAndTraceLogHttpClientLtp = FindServingLtp(recordServiceRequestOperationClientLtp, ltpList);\r",
																	"    executionAndTraceLogTcpClientLtp = FindServingLtp(executionAndTraceLogHttpClientLtp, ltpList);\r",
																	"\r",
																	"    httpServerLtp = FindHttpServerLtp(ltpList);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Reference objects could not be extracted.\");\r",
																	"} \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.clear();\r",
																	"    \r",
																	"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																	"    pm.collectionVariables.set(\"executionAndTraceLogHttpClientLtp\", executionAndTraceLogHttpClientLtp);\r",
																	"    pm.collectionVariables.set(\"executionAndTraceLogTcpClientLtp\", executionAndTraceLogTcpClientLtp);\r",
																	"    pm.collectionVariables.set(\"httpServerLtp\", httpServerLtp);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function FindOperationServer(operationName, ltpList) {\r",
																	"    let operationServer;\r",
																	"    operationServer = \"\";\r",
																	"    try {\r",
																	"        let sampleUuid;\r",
																	"        for(let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"op-s-\")) {\r",
																	"                let sampleOperationName;\r",
																	"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																	"                if(sampleOperationName == operationName) {\r",
																	"                    operationServer = ltpList[i];\r",
																	"                    return operationServer;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																	"    }\r",
																	"    return operationServer;\r",
																	"}\r",
																	"\r",
																	"\r",
																	"function FindOutputFcPortList(forwardingName, fcList) {\r",
																	"    let outputFcPortList;\r",
																	"    outputFcPortList = [];\r",
																	"    try {\r",
																	"        for( let i=0; i<fcList.length; i++ ) {\r",
																	"            for(let j=0; j<fcList[i][\"name\"].length; j++) {               \r",
																	"                if(fcList[i][\"name\"][j][\"value\"] == forwardingName) {\r",
																	"                    fcPortList = fcList[i][\"fc-port\"];\r",
																	"                    for(let k=0;k<fcPortList.length;k++) {\r",
																	"                        if(fcPortList[k][\"port-direction\"] == \"core-model-1-4:PORT_DIRECTION_TYPE_OUTPUT\") {\r",
																	"                            outputFcPortList.push(fcPortList[k]);\r",
																	"                        }\r",
																	"                    }\r",
																	"                    return outputFcPortList;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																	"    }\r",
																	"    return outputFcPortList;\r",
																	"}\r",
																	"\r",
																	"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
																	"    let actualInstance;\r",
																	"    actualInstance = {};\r",
																	"    try {\r",
																	"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
																	"            let sampleUuid;\r",
																	"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
																	"            if( sampleUuid == expectedUuid ) {\r",
																	"                actualInstance = actualLtpList[i];\r",
																	"                return actualInstance;\r",
																	"            }\r",
																	"        }\r",
																	"\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																	"    }\r",
																	"    return undefined;\r",
																	"}\r",
																	"\r",
																	"function FindServingLtp(clientLtp, ltpList) {\r",
																	"    let servingLtp;\r",
																	"    servingLtp = {};\r",
																	"    try{\r",
																	"        let serverLtpUuid;\r",
																	"        serverLtpUuid = clientLtp[\"server-ltp\"][0];\r",
																	"        for( let i=0; i<ltpList.length; i++ ) {\r",
																	"            let sampleUuid;\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if( sampleUuid == serverLtpUuid ) {\r",
																	"                servingLtp = ltpList[i];\r",
																	"                return servingLtp;\r",
																	"            }\r",
																	"        }\r",
																	"    } catch(error) {\r",
																	"        console.log(error);\r",
																	"        console.log(\"! Exception in function : FindServingLtp. \")\r",
																	"    }\r",
																	"    return servingLtp;\r",
																	"}\r",
																	"\r",
																	"function FindHttpServerLtp(ltpList) {\r",
																	"    let httpServerLtp;\r",
																	"    httpServerLtp = {};\r",
																	"    try {\r",
																	"        for( let i=0; i<ltpList.length; i++ ) {\r",
																	"            let sampleUuid;\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"http-s-\")) {\r",
																	"                httpServerLtp = ltpList[i];\r",
																	"                return httpServerLtp;\r",
																	"            }\r",
																	"        } \r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function : FindHttpServerLtp. \");\r",
																	"    }\r",
																	"    return httpServerLtp;\r",
																	"}\r",
																	"\r",
																	"function FindOperationClientUsingCallback(callback, fcList, ltpList) {\r",
																	"    let operationClientLtp\r",
																	"    try {\r",
																	"        let outputFcPortList = FindOutputFcPortList(callback, fcList);\r",
																	"        let randomOutputFcPort = outputFcPortList[Math.floor(Math.random() * outputFcPortList.length)];\r",
																	"        let outputLtpUuid = randomOutputFcPort[\"logical-termination-point\"];\r",
																	"        operationClientLtp = FindActualInstanceByUuid(outputLtpUuid, ltpList);\r",
																	"    } catch (error) {\r",
																	"        console.log(error);\r",
																	"        console.log(\"! Exception in function FindOperationClientUsingCallback. \");\r",
																	"    }\r",
																	"    return  operationClientLtp\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "reference ExecutionAndTraceLog/core-model-1-4:control-construct",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var AUTHORIZATION;\r",
																	"var applicationProtocol;\r",
																	"var applicationAddress;\r",
																	"var applicationPort;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let executionAndTraceLogTcpClientLtp;\r",
																	"    executionAndTraceLogTcpClientLtp = pm.collectionVariables.get(\"executionAndTraceLogTcpClientLtp\");\r",
																	"\r",
																	"    applicationProtocol = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																	"    applicationProtocol = applicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																	"    \r",
																	"    applicationAddress = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																	"    if(applicationAddress.hasOwnProperty(\"ip-address\")) {\r",
																	"        applicationAddress = applicationAddress[\"ip-address\"][\"ipv-4-address\"];\r",
																	"    } else {\r",
																	"        applicationAddress = applicationAddress[\"domain-name\"];\r",
																	"    }\r",
																	"\r",
																	"    applicationPort = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																	" \r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Environment variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = \"\";\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = applicationProtocol + \"://\" + applicationAddress + \":\" + applicationPort + \"/core-model-1-4:control-construct\";\r",
																	"    //URI = \"http://9d098835-4e91-48f3-9761-04a82ff2843e.mock.pstmn.io\" + \"/core-model-1-4:control-construct\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var ltpList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    let responseCode;\r",
																	"    responseCode = parseInt(response.code);\r",
																	"    \r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        let responseObject;\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																	"\r",
																	"    } else {\r",
																	"        ltpList = [];\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! ltpList could not be extracted.\");\r",
																	"}\r",
																	"\r",
																	"var listRecordsOfFlowOperationKey;\r",
																	"try {\r",
																	"    listRecordsOfFlowOperationKey = FindOperationKeyForOperationName(\"/v1/list-records-of-flow\", ltpList);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Reference objects could not be extracted.\");\r",
																	"} \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.set(\"listRecordsOfFlowOperationKey\", listRecordsOfFlowOperationKey);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"function FindOperationKeyForOperationName(operationName, ltpList) {\r",
																	"    let operationKey;\r",
																	"    operationKey = \"\";\r",
																	"    try {\r",
																	"         let sampleUuid;\r",
																	"         for ( let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"op-s-\")){\r",
																	"                let sampleOperationName;\r",
																	"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																	"                if(sampleOperationName == operationName) {\r",
																	"                    operationKey = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"                    return operationKey; \r",
																	"                }\r",
																	"            }\r",
																	"         }\r",
																	"\r",
																	"    } catch (error) {\r",
																	"        console.log(\" ! Exception in function : FindOperationKeyForOperationName\")\r",
																	"    }\r",
																	"    return operationKey;\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "sampling  /v1/disregard-application",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"var dummyApplicationName;\r",
																	"var dummyReleaseNumber;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"    \r",
																	"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"\r",
																	"    dummyApplicationName = GenerateRandomString(12);\r",
																	"    dummyReleaseNumber = RandomReleaseNumber();\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"        + '\"application-name\" : ' + '\"' + dummyApplicationName + '\",'\r",
																	"        + '\"release-number\" : ' + '\"' + dummyReleaseNumber + '\"'\r",
																	"    +'}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.set(\"user\", USER_NAME);\r",
																	"    pm.collectionVariables.set(\"originator\", ORIGINATOR);\r",
																	"    pm.collectionVariables.set(\"xCorrelator\", X_CORRELATOR);\r",
																	"    pm.collectionVariables.set(\"traceIndicator\", TRACE_INDICATOR);\r",
																	"    pm.collectionVariables.set(\"customerJourney\", CUSTOMER_JOURNEY);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/disregard-application\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomString(length) {\r",
																	"    let randomString;\r",
																	"    randomString = \"\";\r",
																	"    try {\r",
																	"        let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r",
																	"        let charactersLength = characters.length;\r",
																	"        for (let i = 0; i < length; i++) {\r",
																	"            randomString += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Could not generate random string. \");\r",
																	"    }\r",
																	"    return randomString;\r",
																	"}\r",
																	"\r",
																	"function RandomReleaseNumber() {\r",
																	"    let releaseNumber;\r",
																	"    let releaseNumberParts = [];\r",
																	"    for  (let i=0; i<3 ; i++) {\r",
																	"        releaseNumberParts[i] = Math.floor(Math.random() * 10);\r",
																	"    }\r",
																	"    releaseNumber = releaseNumberParts[0] + \".\" + releaseNumberParts[1] + \".\" + releaseNumberParts[2];\r",
																	"    return releaseNumber;\r",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const currentCount = 0;\r",
																	"try {\r",
																	"\tpm.collectionVariables.set(\"currentCount\", currentCount);\r",
																	"\r",
																	"} catch(error) {\r",
																	"    console.log(\" !Could not set currentCount. \");\r",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "204",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected ExecutionAndTraceLog/v1/list-records-of-flow for /v1/disregard-application:: Request notified?",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"var applicationProtocol;\r",
																	"var applicationAddress;\r",
																	"var applicationPort;\r",
																	"var xCorrelatorUnderTest;\r",
																	"var latestMatch;\r",
																	"var numberOfRecords;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let executionAndTraceLogTcpClientLtp;\r",
																	"    executionAndTraceLogTcpClientLtp = pm.collectionVariables.get(\"executionAndTraceLogTcpClientLtp\");\r",
																	"    \r",
																	"    applicationProtocol = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																	"    applicationProtocol = applicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																	"    \r",
																	"    applicationAddress = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																	"    if(applicationAddress.hasOwnProperty(\"ip-address\")) {\r",
																	"        applicationAddress = applicationAddress[\"ip-address\"][\"ipv-4-address\"];\r",
																	"    } else {\r",
																	"        applicationAddress = applicationAddress[\"domain-name\"];\r",
																	"    }\r",
																	"\r",
																	"    applicationPort = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																	"\r",
																	"    OPERATION_KEY = pm.collectionVariables.get(\"listRecordsOfFlowOperationKey\");\r",
																	"    xCorrelatorUnderTest = pm.collectionVariables.get(\"xCorrelator\");\r",
																	"    latestMatch = 0;\r",
																	"    numberOfRecords = 100;\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error)\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"                + '\"x-correlator\": \"' + xCorrelatorUnderTest +'\",'\r",
																	"                + '\"latest-match\": ' + latestMatch + ','\r",
																	"                + '\"number-of-records\":' + numberOfRecords\r",
																	"                + '}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = applicationProtocol + \"://\" + applicationAddress + \":\" + applicationPort + \"/v1/list-records-of-flow\";\r",
																	"    //URI = \"http://9d098835-4e91-48f3-9761-04a82ff2843e.mock.pstmn.io/v1/list-records-of-flow\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0, length);\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Constant variables\r",
																	"****************************************************************************************/\r",
																	"var retryMaxCount;\r",
																	"var retryWaitingPeriod;\r",
																	"var currentCount;\r",
																	"try {\r",
																	"    retryMaxCount = pm.environment.get(\"retryMaxCount\");\r",
																	"    retryWaitingPeriod = pm.environment.get(\"retryWaitingPeriod\");\r",
																	"    currentCount = pm.collectionVariables.get(\"currentCount\");\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not load constant variables Data. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var expectedXCorrelator;\r",
																	"var expectedUser;\r",
																	"var expectedOriginator;\r",
																	"var expectedTraceIndicator;\r",
																	"var expectedApplicationName;\r",
																	"var expectedReleaseNumber;\r",
																	"var expectedOperationName;\r",
																	"try {\r",
																	"    expectedXCorrelator = pm.collectionVariables.get(\"xCorrelator\");\r",
																	"    expectedUser = pm.collectionVariables.get(\"user\");\r",
																	"    expectedOriginator = pm.collectionVariables.get(\"originator\");\r",
																	"    expectedTraceIndicator = pm.collectionVariables.get(\"traceIndicator\");\r",
																	"\r",
																	"    let expectedHttpServerLtp;\r",
																	"    expectedHttpServerLtp = pm.collectionVariables.get(\"httpServerLtp\");\r",
																	"    expectedApplicationName = expectedHttpServerLtp[\"layer-protocol\"][0][\"http-server-interface-1-0:http-server-interface-pac\"][\"http-server-interface-capability\"][\"application-name\"];\r",
																	"    expectedReleaseNumber = expectedHttpServerLtp[\"layer-protocol\"][0][\"http-server-interface-1-0:http-server-interface-pac\"][\"http-server-interface-capability\"][\"release-number\"];\r",
																	"\r",
																	"    let expectedOperationServer;\r",
																	"    expectedOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"    expectedOperationName = expectedOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not load Input Data. \");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"var serviceRecordList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"    if(Math.floor(RESPONSE_CODE/100) === 2) {\r",
																	"        serviceRecordList = JSON.parse(response.stream);\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"POST ExecutionAndTraceLog/v1/list-records-of-flow responds 200\", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(200);\r",
																	"    });\r",
																	"\r",
																	"    let foundAnEntryWithTheExpectedHeaderValuesInEatl;\r",
																	"    foundAnEntryWithTheExpectedHeaderValuesInEatl = false;\r",
																	"    let responseCodeofTriggeredForwarding;\r",
																	"    responseCodeofTriggeredForwarding = 0;\r",
																	"    for(let i=0; i<serviceRecordList.length; i++)  {\r",
																	"        if( serviceRecordList[i][\"application-name\"] == expectedApplicationName\r",
																	"                && serviceRecordList[i][\"release-number\"] == expectedReleaseNumber\r",
																	"                && serviceRecordList[i][\"operation-name\"] == expectedOperationName\r",
																	"                && serviceRecordList[i][\"x-correlator\"] == expectedXCorrelator\r",
																	"                && serviceRecordList[i][\"user\"] == expectedUser\r",
																	"                && serviceRecordList[i][\"originator\"] == expectedOriginator\r",
																	"                && serviceRecordList[i][\"trace-indicator\"] == expectedTraceIndicator ) {\r",
																	"\r",
																	"            foundAnEntryWithTheExpectedHeaderValuesInEatl = true;\r",
																	"            responseCodeofTriggeredForwarding =  serviceRecordList[i][\"response-code\"];\r",
																	"            break;\r",
																	"        }\r",
																	"    }\r",
																	"\r",
																	"    if (foundAnEntryWithTheExpectedHeaderValuesInEatl == false) {\r",
																	"        if( (currentCount < retryMaxCount) ) {\r",
																	"            setTimeout(()=>{\r",
																	"                postman.setNextRequest(request.name);\r",
																	"                currentCount = currentCount + 1;\r",
																	"                pm.collectionVariables.set(\"currentCount\", currentCount);\r",
																	"            }, retryWaitingPeriod);\r",
																	"        } else {\r",
																	"            pm.test(\"The request has been notified and the Parameter values have been processed\", function () {\r",
																	"                pm.expect(foundAnEntryWithTheExpectedHeaderValuesInEatl).to.be.true;        \r",
																	"            });\r",
																	"        }\r",
																	"    } else {\r",
																	"        pm.test(\"The request has been notified and the Parameter values have been processed with response-code 204\", function () {\r",
																	"            pm.expect(responseCodeofTriggeredForwarding).to.equal(204);    \r",
																	"        });\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"description": "## Gets the service consumption indicated to EaTL and the Parameters of the request processed?\n\n#### Requires:\n- ExecutionAndTraceLog server to operate\n\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  -  search CC for output fc-port of ServiceRequestCausesLoggingRequest, \nits corresponding op-c, http-c and tcp-c, storing them for later verification request\n  - searching CC for op-s of /v1/disregard-application, storing operation-key\n  - search CC for http-s\n- GETting EaTL/CC (while using IP, protocol and port from above)\n  - searching CC for op-c of /v1/list-records-of-flow, storing operation-key\n- POST /v1/disregard-application\n  - all attributes filed with random values\n  - operation-key from above\n  - reasonable parameters\n\n#### Testing:\n- POST ExecutionAndTraceLog/v1/list-records-of-flow with \n   - IP, protocol and port from above\n   - operation-key from above\n   - DummyValue of x-correlator\n   - checking response for entry with application-name==AA and operation-name==/v1/disregard-application\n   - checking same record for containing DummyXCorrelator &DummyTraceIndicator\n\n#### Clearing:\n- not applicable"
										}
									]
								},
								{
									"name": "Gate",
									"item": [
										{
											"name": "for gating /v1/disregard-application to acceptance testing",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var TYPE_OF_TESTING;\r",
															"var URI;\r",
															"try {\r",
															"    TYPE_OF_TESTING = pm.environment.get(\"typeOfTesting\");\r",
															"    URI = pm.environment.get(\"dummyUri\");\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Loading Input Data failed.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Updating Environmental Variables and Determining the next Step\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    if ( TYPE_OF_TESTING === \"Acceptance\" ) {\r",
															"        postman.setNextRequest();\r",
															"    } else {\r",
															"        postman.setNextRequest(\"for exiting /v1/disregard-application\");\r",
															"    }\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Updating Environmental Variables and Determining the next Step failed.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    pm.variables.clear();\r",
															"\r",
															"    let REQUEST_BODY;\r",
															"    REQUEST_BODY = \"\";\r",
															"\r",
															"    let AUTHORIZATION;\r",
															"    AUTHORIZATION = \"\";\r",
															"\r",
															"    let OPERATION_KEY;\r",
															"    OPERATION_KEY = \"\";\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
															"    pm.request.headers.upsert({key:\"operationKey\", value:OPERATION_KEY});\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:\"application/json\"});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Setting Local Variables and Preparing the Request failed.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Acceptance",
									"item": [
										{
											"name": "life-cycle-state propogated?",
											"item": [
												{
													"name": "reference /core-model-1-4:control-construct",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n----- /v1/disregard-application acceptance -- life-cycle-state propogated? -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Environment variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY = \"\";\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var ltpList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    let responseCode;\r",
																	"    responseCode = parseInt(response.code);\r",
																	"    \r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        let responseObject;\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																	"\r",
																	"    } else {\r",
																	"        ltpList = [];\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! ltpList could not be extracted.\");\r",
																	"}\r",
																	"\r",
																	"var currentOperationServer;\r",
																	"try {\r",
																	"    currentOperationServer = FindOperationServer(\"/v1/disregard-application\", ltpList);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Reference objects could not be extracted.\");\r",
																	"} \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.clear();\r",
																	"    \r",
																	"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function FindOperationServer(operationName, ltpList) {\r",
																	"    let operationServer;\r",
																	"    operationServer = \"\";\r",
																	"    try {\r",
																	"        let sampleUuid;\r",
																	"        for(let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"op-s-\")) {\r",
																	"                let sampleOperationName;\r",
																	"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																	"                if(sampleOperationName == operationName) {\r",
																	"                    operationServer = ltpList[i];\r",
																	"                    return operationServer;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																	"    }\r",
																	"    return operationServer;\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "dummy life-cycle-state",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var operationServerUuid;\r",
																	"var dummyLifeCycleState;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"    \r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"\r",
																	"    operationServerUuid = currentOperationServer[\"uuid\"];\r",
																	"\r",
																	"    currentLifeCycleState = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"life-cycle-state\"];\r",
																	"\r",
																	"    dummyLifeCycleState = GenerateDummyLifeCycleState(currentLifeCycleState);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.set(\"dummyLifeCycleState\", dummyLifeCycleState);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl \r",
																	"            + \"/core-model-1-4:control-construct/logical-termination-point=\"\r",
																	"            + operationServerUuid\r",
																	"            + \"/layer-protocol=0/operation-server-interface-1-0:operation-server-interface-pac/operation-server-interface-configuration/life-cycle-state\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY = '{ '\r",
																	"                    +   '\"operation-server-interface-1-0:life-cycle-state\": \"' + dummyLifeCycleState + '\"'\r",
																	"                    + ' }';\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error)\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"function GenerateDummyLifeCycleState(currentLifeCycleState) {\r",
																	"    let alternativeLifeCycleStateTypeList;\r",
																	"    alternativeLifeCycleStateTypeList = [  \"operation-server-interface-1-0:LIFE_CYCLE_STATE_TYPE_EXPERIMENTAL\",\r",
																	"                                            \"operation-server-interface-1-0:LIFE_CYCLE_STATE_TYPE_OPERATIONAL\",\r",
																	"                                            \"operation-server-interface-1-0:LIFE_CYCLE_STATE_TYPE_DEPRECATED\", \r",
																	"                                            \"operation-server-interface-1-0:LIFE_CYCLE_STATE_TYPE_OBSOLETE\",\r",
																	"                                            \"operation-server-interface-1-0:LIFE_CYCLE_STATE_TYPE_UNKNOWN\",\r",
																	"                                            \"operation-server-interface-1-0:LIFE_CYCLE_STATE_TYPE_NOT_YET_DEFINED\"\r",
																	"                                        ];\r",
																	"    let indexOfCurrentLifeCycleState;\r",
																	"    indexOfCurrentLifeCycleState = alternativeLifeCycleStateTypeList.indexOf(currentLifeCycleState);\r",
																	"    if (indexOfCurrentLifeCycleState > -1) {\r",
																	"        alternativeLifeCycleStateTypeList.splice(indexOfCurrentLifeCycleState, 1);\r",
																	"    }\r",
																	"\r",
																	"    let alternativeLifeCycleState;\r",
																	"    let alternativeLifeCycleStateTypeIndex;\r",
																	"    alternativeLifeCycleStateTypeIndex = Math.floor(Math.random() * alternativeLifeCycleStateTypeList.length);\r",
																	"    alternativeLifeCycleState = alternativeLifeCycleStateTypeList[alternativeLifeCycleStateTypeIndex]; \r",
																	"\r",
																	"    return alternativeLifeCycleState;\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"PUT dummy life-cycle-state responds 204\", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(204);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "204",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected /v1/disregard-application",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"var dummyApplicationName;\r",
																	"var dummyReleaseNumber;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"    \r",
																	"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"\r",
																	"    dummyApplicationName = GenerateRandomString(12);\r",
																	"    dummyReleaseNumber = RandomReleaseNumber();\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"        + '\"application-name\" : ' + '\"' + dummyApplicationName + '\",'\r",
																	"        + '\"release-number\" : ' + '\"' + dummyReleaseNumber + '\"'\r",
																	"    +'}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/disregard-application\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomString(length) {\r",
																	"    let randomString;\r",
																	"    randomString = \"\";\r",
																	"    try {\r",
																	"        let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r",
																	"        let charactersLength = characters.length;\r",
																	"        for (let i = 0; i < length; i++) {\r",
																	"            randomString += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Could not generate random string. \");\r",
																	"    }\r",
																	"    return randomString;\r",
																	"}\r",
																	"\r",
																	"function RandomReleaseNumber() {\r",
																	"    let releaseNumber;\r",
																	"    let releaseNumberParts = [];\r",
																	"    for  (let i=0; i<3 ; i++) {\r",
																	"        releaseNumberParts[i] = Math.floor(Math.random() * 10);\r",
																	"    }\r",
																	"    releaseNumber = releaseNumberParts[0] + \".\" + releaseNumberParts[1] + \".\" + releaseNumberParts[2];\r",
																	"    return releaseNumber;\r",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var expectedLifeCycleState;\r",
																	"try {\r",
																	"    let dummyLifeCycleState;\r",
																	"    dummyLifeCycleState = pm.collectionVariables.get(\"dummyLifeCycleState\");\r",
																	"\r",
																	"    let prefixLength = ('operation-server-interface-1-0:LIFE_CYCLE_STATE_TYPE_').length;     \r",
																	"    expectedLifeCycleState = dummyLifeCycleState.substring(prefixLength);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not load Input Data. \");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"var actualLifeCycleState;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"    let RESPONSE_HEADERS;\r",
																	"    RESPONSE_HEADERS = pm.response.headers;  \r",
																	"\r",
																	"    actualLifeCycleState = RESPONSE_HEADERS.get(\"life-cycle-state\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"Provides dummy life-cycle-state in the header of the response: '\" + expectedLifeCycleState + \"' \", function () {\r",
																	"        pm.expect(actualLifeCycleState).to.equal(expectedLifeCycleState);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "204",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Initial life-cycle-state",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var operationServerUuid;\r",
																	"var initialLifeCycleState;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"\r",
																	"    operationServerUuid = currentOperationServer[\"uuid\"];\r",
																	"\r",
																	"    initialLifeCycleState = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"life-cycle-state\"];\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl \r",
																	"            + \"/core-model-1-4:control-construct/logical-termination-point=\"\r",
																	"            + operationServerUuid\r",
																	"            + \"/layer-protocol=0/operation-server-interface-1-0:operation-server-interface-pac/operation-server-interface-configuration/life-cycle-state\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY =   '{ '\r",
																	"                    +   '\"operation-server-interface-1-0:life-cycle-state\": \"' + initialLifeCycleState + '\"'\r",
																	"                    + ' }';\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"    \r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});  \r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"PUT Initial life-cycle-state responds 204 \", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(204);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "204",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"description": "## Gets lifeCycleState propagated?\n\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for op-s of /v1/disregard-application, storing operation-key\n- PUTting op-s-configuration/life-cycle-state with random alternative value\n- POST /v1/disregard-application\n  - all attributes filled with random values\n  - operation-key from above\n  - reasonable parameters\n\n#### Testing:\n\n*   checking for ResponseCode==204\n*   checking for lifeCycleState being identical with alternative op-s-configuration/life-cycle-state\n    \n\n#### Clearing:\n\n*   PUTting op-s-configuration/life-cycle-state back to original value"
										},
										{
											"name": "Attribute completeness",
											"item": [
												{
													"name": "reference /core-model-1-4:control-construct",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n-----  /v1/disregard-application acceptance -- attribute completeness -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Environment variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY = \"\";\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var ltpList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    let responseCode;\r",
																	"    responseCode = parseInt(response.code);\r",
																	"    \r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        let responseObject;\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																	"\r",
																	"    } else {\r",
																	"        ltpList = [];\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! ltpList could not be extracted.\");\r",
																	"}\r",
																	"\r",
																	"var currentOperationServer;\r",
																	"try {\r",
																	"    currentOperationServer = FindOperationServer(\"/v1/disregard-application\", ltpList);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Reference objects could not be extracted.\");\r",
																	"} \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.clear();\r",
																	"    \r",
																	"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function FindOperationServer(operationName, ltpList) {\r",
																	"    let operationServer;\r",
																	"    operationServer = \"\";\r",
																	"    try {\r",
																	"        let sampleUuid;\r",
																	"        for(let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"op-s-\")) {\r",
																	"                let sampleOperationName;\r",
																	"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																	"                if(sampleOperationName == operationName) {\r",
																	"                    operationServer = ltpList[i];\r",
																	"                    return operationServer;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																	"    }\r",
																	"    return operationServer;\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected /v1/disregard-application - attribute completeness",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"var dummyApplicationName;\r",
																	"var dummyReleaseNumber;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"    \r",
																	"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"\r",
																	"    dummyApplicationName = GenerateRandomString(12);\r",
																	"    dummyReleaseNumber = RandomReleaseNumber();\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"        + '\"application-name\" : ' + '\"' + dummyApplicationName + '\",'\r",
																	"        + '\"release-number\" : ' + '\"' + dummyReleaseNumber + '\"'\r",
																	"    +'}';\r",
																	"\r",
																	"    let attributes;\r",
																	"    attributes = [\"application-name\", \"release-number\"];\r",
																	"    let missingAttribute;\r",
																	"    missingAttribute = GetMissingAttribute(attributes);\r",
																	"\r",
																	"    REQUEST_BODY = JSON.parse(REQUEST_BODY);\r",
																	"    delete REQUEST_BODY[missingAttribute];\r",
																	"    REQUEST_BODY = JSON.stringify(REQUEST_BODY);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/disregard-application\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomString(length) {\r",
																	"    let randomString;\r",
																	"    randomString = \"\";\r",
																	"    try {\r",
																	"        let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r",
																	"        let charactersLength = characters.length;\r",
																	"        for (let i = 0; i < length; i++) {\r",
																	"            randomString += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Could not generate random string. \");\r",
																	"    }\r",
																	"    return randomString;\r",
																	"}\r",
																	"\r",
																	"function RandomReleaseNumber() {\r",
																	"    let releaseNumber;\r",
																	"    let releaseNumberParts = [];\r",
																	"    for  (let i=0; i<3 ; i++) {\r",
																	"        releaseNumberParts[i] = Math.floor(Math.random() * 10);\r",
																	"    }\r",
																	"    releaseNumber = releaseNumberParts[0] + \".\" + releaseNumberParts[1] + \".\" + releaseNumberParts[2];\r",
																	"    return releaseNumber;\r",
																	"}\r",
																	"\r",
																	"function GetMissingAttribute(attributes) {\r",
																	"\tlet missingAttribute;\r",
																	"\tmissingAttribute = attributes[Math.floor(Math.random()*attributes.length)];\r",
																	"\treturn missingAttribute;\r",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"POST /v1/disregard-application responds 400, because of missing attribute\", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "400",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"description": "## Get attributes checked for completeness?\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for op-s of /v1/disregard-application, storing operation-key\n- POST /v1/disregard-application\n  - all attributes filled with random values BUT one randomly chosen attribute missing\n  -operation-key from above\n  - reasonable parameters\n\n#### Testing:\n- checking for ResponseCode==400\n\n#### Clearing:\n- not applicable"
										},
										{
											"name": "Attribute correctness",
											"item": [
												{
													"name": "release-number checked?",
													"item": [
														{
															"name": "reference /core-model-1-4:control-construct",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"console.log(\"\\n-----  /v1/disregard-application acceptance -- release-number attribute checked? -------------------------------\");\r",
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Environment variables could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																			"\r",
																			"    let REQUEST_BODY;\r",
																			"    REQUEST_BODY = \"\";\r",
																			"\r",
																			"    let AUTHORIZATION;\r",
																			"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var ltpList;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"    \r",
																			"    let responseCode;\r",
																			"    responseCode = parseInt(response.code);\r",
																			"    \r",
																			"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																			"        let responseObject;\r",
																			"        responseObject = JSON.parse(response.stream);\r",
																			"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																			"\r",
																			"    } else {\r",
																			"        ltpList = [];\r",
																			"    }\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! ltpList could not be extracted.\");\r",
																			"}\r",
																			"\r",
																			"var currentOperationServer;\r",
																			"try {\r",
																			"    currentOperationServer = FindOperationServer(\"/v1/disregard-application\", ltpList);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Reference objects could not be extracted.\");\r",
																			"} \r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.collectionVariables.clear();\r",
																			"    \r",
																			"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Collection variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"function FindOperationServer(operationName, ltpList) {\r",
																			"    let operationServer;\r",
																			"    operationServer = \"\";\r",
																			"    try {\r",
																			"        let sampleUuid;\r",
																			"        for(let i=0; i<ltpList.length; i++) {\r",
																			"            sampleUuid = ltpList[i][\"uuid\"];\r",
																			"            if(sampleUuid.includes(\"op-s-\")) {\r",
																			"                let sampleOperationName;\r",
																			"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																			"                if(sampleOperationName == operationName) {\r",
																			"                    operationServer = ltpList[i];\r",
																			"                    return operationServer;\r",
																			"                }\r",
																			"            }\r",
																			"        }\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																			"    }\r",
																			"    return operationServer;\r",
																			"}\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "GET",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "200",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Expected /v1/disregard-application - too-short release-number",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"console.log(\"\\n-----  too short release-number -------------------------------\");\r",
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"var OPERATION_KEY;\r",
																			"var dummyApplicationName;\r",
																			"var faultyReleaseNumber;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"    let currentOperationServer;\r",
																			"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																			"    \r",
																			"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																			"\r",
																			"    dummyApplicationName = GenerateRandomString(12);\r",
																			"    faultyReleaseNumber = FaultyReleaseNumber();\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Input Data could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Dummy Parameters\r",
																			"****************************************************************************************/\r",
																			"var USER_NAME;\r",
																			"var ORIGINATOR;\r",
																			"var X_CORRELATOR;\r",
																			"var TRACE_INDICATOR;\r",
																			"var CUSTOMER_JOURNEY;\r",
																			"try {\r",
																			"    USER_NAME = APPLICATION.userName;\r",
																			"    ORIGINATOR = \"Postman\";\r",
																			"    X_CORRELATOR = CreateXCorrelator();\r",
																			"    TRACE_INDICATOR = \"1\";\r",
																			"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																			"    \r",
																			"} catch (error) {\r",
																			"    console.log(\"! Could not define dummy values for parameters. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Request Body\r",
																			"****************************************************************************************/\r",
																			"var REQUEST_BODY;\r",
																			"try {\r",
																			"    REQUEST_BODY = '{'\r",
																			"        + '\"application-name\" : ' + '\"' + dummyApplicationName + '\",'\r",
																			"        + '\"release-number\" : ' + '\"' + faultyReleaseNumber + '\"'\r",
																			"    + '}';\r",
																			"} catch (error) {\r",
																			"    console.log(\"!Could not define request body. \");\r",
																			"}\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + \"/v1/disregard-application\";\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																			"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																			"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																			"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																			"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"function CreateXCorrelator() {\r",
																			"    let xCorrelator;\r",
																			"    xCorrelator = \"\";\r",
																			"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(12);\r",
																			"    return xCorrelator;\r",
																			"}\r",
																			"\r",
																			"function GenerateRandomHexString(length) {\r",
																			"    var randomRandomHexString = \"\";\r",
																			"    while (randomRandomHexString.length < length) {\r",
																			"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																			"    }\r",
																			"    return randomRandomHexString.substring(0,length);\r",
																			"}\r",
																			"\r",
																			"function GenerateRandomString(length) {\r",
																			"    let randomString;\r",
																			"    randomString = \"\";\r",
																			"    try {\r",
																			"        let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r",
																			"        let charactersLength = characters.length;\r",
																			"        for (let i = 0; i < length; i++) {\r",
																			"            randomString += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																			"        }\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Could not generate random string. \");\r",
																			"    }\r",
																			"    return randomString;\r",
																			"}\r",
																			"\r",
																			"function FaultyReleaseNumber() {\r",
																			"    let releaseNumber;\r",
																			"    let releaseNumberParts = [];\r",
																			"    for (let i = 0; i < 2; i++) {\r",
																			"        releaseNumberParts[i] = Math.floor(Math.random() * 10);\r",
																			"    }\r",
																			"    releaseNumber = releaseNumberParts[0] + \".\" + releaseNumberParts[1];\r",
																			"    return releaseNumber;\r",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var RESPONSE_CODE;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"\r",
																			"    RESPONSE_CODE = parseInt(response.code);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Response Code could not be extracted.\");\r",
																			"}    \r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Testing\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.test(\"POST /v1/disregard-application responds 400, because of too short release-number\", function () {\r",
																			"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																			"    });\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Testing could not be executed.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "400",
																		"type": "default"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Expected  /v1/disregard-application - too-long release-number",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"console.log(\"\\n-----  too long release-number -------------------------------\");\r",
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"var OPERATION_KEY;\r",
																			"var dummyApplicationName;\r",
																			"var faultyReleaseNumber;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"    let currentOperationServer;\r",
																			"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																			"    \r",
																			"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																			"\r",
																			"    dummyApplicationName = GenerateRandomString(12);\r",
																			"    faultyReleaseNumber = FaultyReleaseNumber();\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Input Data could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Dummy Parameters\r",
																			"****************************************************************************************/\r",
																			"var USER_NAME;\r",
																			"var ORIGINATOR;\r",
																			"var X_CORRELATOR;\r",
																			"var TRACE_INDICATOR;\r",
																			"var CUSTOMER_JOURNEY;\r",
																			"try {\r",
																			"    USER_NAME = APPLICATION.userName;\r",
																			"    ORIGINATOR = \"Postman\";\r",
																			"    X_CORRELATOR = CreateXCorrelator();\r",
																			"    TRACE_INDICATOR = \"1\";\r",
																			"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																			"    \r",
																			"} catch (error) {\r",
																			"    console.log(\"! Could not define dummy values for parameters. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Request Body\r",
																			"****************************************************************************************/\r",
																			"var REQUEST_BODY;\r",
																			"try {\r",
																			"    REQUEST_BODY = '{'\r",
																			"        + '\"application-name\" : ' + '\"' + dummyApplicationName + '\",'\r",
																			"        + '\"release-number\" : ' + '\"' + faultyReleaseNumber + '\"'\r",
																			"    + '}';\r",
																			"} catch (error) {\r",
																			"    console.log(\"!Could not define request body. \");\r",
																			"}\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + \"/v1/disregard-application\";\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																			"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																			"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																			"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																			"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"function CreateXCorrelator() {\r",
																			"    let xCorrelator;\r",
																			"    xCorrelator = \"\";\r",
																			"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(12);\r",
																			"    return xCorrelator;\r",
																			"}\r",
																			"\r",
																			"function GenerateRandomHexString(length) {\r",
																			"    var randomRandomHexString = \"\";\r",
																			"    while (randomRandomHexString.length < length) {\r",
																			"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																			"    }\r",
																			"    return randomRandomHexString.substring(0,length);\r",
																			"}\r",
																			"\r",
																			"function GenerateRandomString(length) {\r",
																			"    let randomString;\r",
																			"    randomString = \"\";\r",
																			"    try {\r",
																			"        let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r",
																			"        let charactersLength = characters.length;\r",
																			"        for (let i = 0; i < length; i++) {\r",
																			"            randomString += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																			"        }\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Could not generate random string. \");\r",
																			"    }\r",
																			"    return randomString;\r",
																			"}\r",
																			"\r",
																			"function FaultyReleaseNumber() {\r",
																			"    let releaseNumber;\r",
																			"    let releaseNumberParts = [];\r",
																			"    for (let i = 0; i < 4; i++) {\r",
																			"        releaseNumberParts[i] = Math.floor(Math.random() * 10);\r",
																			"    }\r",
																			"    releaseNumber = releaseNumberParts[0] + \".\" + releaseNumberParts[1] + \".\" + releaseNumberParts[2] + \".\" + releaseNumberParts[3];\r",
																			"    return releaseNumber;\r",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var RESPONSE_CODE;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"\r",
																			"    RESPONSE_CODE = parseInt(response.code);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Response Code could not be extracted.\");\r",
																			"}    \r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Testing\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.test(\"POST /v1/disregard-application responds 400, because of too long release-number\", function () {\r",
																			"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																			"    });\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Testing could not be executed.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "400",
																		"type": "default"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Expected  /v1/disregard-application - letters in release-number",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"console.log(\"\\n-----  letters in release-number -------------------------------\");\r",
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"var OPERATION_KEY;\r",
																			"var dummyApplicationName;\r",
																			"var faultyReleaseNumber;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"    let currentOperationServer;\r",
																			"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																			"    \r",
																			"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																			"\r",
																			"    dummyApplicationName = GenerateRandomString(12);\r",
																			"    faultyReleaseNumber = FaultyReleaseNumber();\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Input Data could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Dummy Parameters\r",
																			"****************************************************************************************/\r",
																			"var USER_NAME;\r",
																			"var ORIGINATOR;\r",
																			"var X_CORRELATOR;\r",
																			"var TRACE_INDICATOR;\r",
																			"var CUSTOMER_JOURNEY;\r",
																			"try {\r",
																			"    USER_NAME = APPLICATION.userName;\r",
																			"    ORIGINATOR = \"Postman\";\r",
																			"    X_CORRELATOR = CreateXCorrelator();\r",
																			"    TRACE_INDICATOR = \"1\";\r",
																			"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																			"    \r",
																			"} catch (error) {\r",
																			"    console.log(\"! Could not define dummy values for parameters. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Request Body\r",
																			"****************************************************************************************/\r",
																			"var REQUEST_BODY;\r",
																			"try {\r",
																			"    REQUEST_BODY = '{'\r",
																			"        + '\"application-name\" : ' + '\"' + dummyApplicationName + '\",'\r",
																			"        + '\"release-number\" : ' + '\"' + faultyReleaseNumber + '\"'\r",
																			"    + '}';\r",
																			"} catch (error) {\r",
																			"    console.log(\"!Could not define request body. \");\r",
																			"}\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + \"/v1/disregard-application\";\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																			"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																			"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																			"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																			"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"function CreateXCorrelator() {\r",
																			"    let xCorrelator;\r",
																			"    xCorrelator = \"\";\r",
																			"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(12);\r",
																			"    return xCorrelator;\r",
																			"}\r",
																			"\r",
																			"function GenerateRandomHexString(length) {\r",
																			"    var randomRandomHexString = \"\";\r",
																			"    while (randomRandomHexString.length < length) {\r",
																			"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																			"    }\r",
																			"    return randomRandomHexString.substring(0,length);\r",
																			"}\r",
																			"\r",
																			"function GenerateRandomString(length) {\r",
																			"    let randomString;\r",
																			"    randomString = \"\";\r",
																			"    try {\r",
																			"        let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r",
																			"        let charactersLength = characters.length;\r",
																			"        for (let i = 0; i < length; i++) {\r",
																			"            randomString += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																			"        }\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Could not generate random string. \");\r",
																			"    }\r",
																			"    return randomString;\r",
																			"}\r",
																			"\r",
																			"function FaultyReleaseNumber() {\r",
																			"    let releaseNumber;\r",
																			"    let releaseNumberParts = [];\r",
																			"    for  (let i=0; i<3 ; i++) {\r",
																			"        releaseNumberParts[i] = Math.floor(Math.random() * 10);\r",
																			"    }\r",
																			"    let characters;\r",
																			"    characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r",
																			"    let charactersLength;\r",
																			"    charactersLength = characters.length;\r",
																			"\r",
																			"    let faultyElement;\r",
																			"    faultyElement = characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																			"\r",
																			"    let faultyreleaseNumberPart;\r",
																			"    faultyreleaseNumberPart = Math.floor(Math.random() * 3);\r",
																			"    releaseNumberParts[faultyreleaseNumberPart] = faultyElement;\r",
																			"\r",
																			"    releaseNumber = releaseNumberParts[0] + \".\" + releaseNumberParts[1] + \".\" + releaseNumberParts[2];\r",
																			"    return releaseNumber;\r",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var RESPONSE_CODE;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"\r",
																			"    RESPONSE_CODE = parseInt(response.code);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Response Code could not be extracted.\");\r",
																			"}    \r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Testing\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.test(\"POST /v1/disregard-application responds 400, because of letters in release-number\", function () {\r",
																			"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																			"    });\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Testing could not be executed.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "400",
																		"type": "default"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Expected  /v1/disregard-application - sign in release-number",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"console.log(\"\\n-----  sign in release-number -------------------------------\");\r",
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"var OPERATION_KEY;\r",
																			"var dummyApplicationName;\r",
																			"var faultyReleaseNumber;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"    let currentOperationServer;\r",
																			"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																			"    \r",
																			"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																			"\r",
																			"    dummyApplicationName = GenerateRandomString(12);\r",
																			"    faultyReleaseNumber = FaultyReleaseNumber();\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Input Data could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Dummy Parameters\r",
																			"****************************************************************************************/\r",
																			"var USER_NAME;\r",
																			"var ORIGINATOR;\r",
																			"var X_CORRELATOR;\r",
																			"var TRACE_INDICATOR;\r",
																			"var CUSTOMER_JOURNEY;\r",
																			"try {\r",
																			"    USER_NAME = APPLICATION.userName;\r",
																			"    ORIGINATOR = \"Postman\";\r",
																			"    X_CORRELATOR = CreateXCorrelator();\r",
																			"    TRACE_INDICATOR = \"1\";\r",
																			"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																			"    \r",
																			"} catch (error) {\r",
																			"    console.log(\"! Could not define dummy values for parameters. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Request Body\r",
																			"****************************************************************************************/\r",
																			"var REQUEST_BODY;\r",
																			"try {\r",
																			"    REQUEST_BODY = '{'\r",
																			"        + '\"application-name\" : ' + '\"' + dummyApplicationName + '\",'\r",
																			"        + '\"release-number\" : ' + '\"' + faultyReleaseNumber + '\"'\r",
																			"    + '}';\r",
																			"} catch (error) {\r",
																			"    console.log(\"!Could not define request body. \");\r",
																			"}\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + \"/v1/disregard-application\";\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																			"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																			"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																			"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																			"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"function CreateXCorrelator() {\r",
																			"    let xCorrelator;\r",
																			"    xCorrelator = \"\";\r",
																			"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(12);\r",
																			"    return xCorrelator;\r",
																			"}\r",
																			"\r",
																			"function GenerateRandomHexString(length) {\r",
																			"    var randomRandomHexString = \"\";\r",
																			"    while (randomRandomHexString.length < length) {\r",
																			"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																			"    }\r",
																			"    return randomRandomHexString.substring(0,length);\r",
																			"}\r",
																			"\r",
																			"function GenerateRandomString(length) {\r",
																			"    let randomString;\r",
																			"    randomString = \"\";\r",
																			"    try {\r",
																			"        let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r",
																			"        let charactersLength = characters.length;\r",
																			"        for (let i = 0; i < length; i++) {\r",
																			"            randomString += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																			"        }\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Could not generate random string. \");\r",
																			"    }\r",
																			"    return randomString;\r",
																			"}\r",
																			"\r",
																			"function FaultyReleaseNumber() {\r",
																			"    let releaseNumber;\r",
																			"    let releaseNumberParts = [];\r",
																			"    for  (let i=0; i<3 ; i++) {\r",
																			"        releaseNumberParts[i] = Math.floor(Math.random() * 10);\r",
																			"    }\r",
																			"    let faultyElement;\r",
																			"    faultyElement = Math.random() < 0.5 ? '-' : '+' ;\r",
																			"    releaseNumber = faultyElement + releaseNumberParts[0] + \".\" + releaseNumberParts[1] + \".\" + releaseNumberParts[2];\r",
																			"    return releaseNumber;\r",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var RESPONSE_CODE;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"\r",
																			"    RESPONSE_CODE = parseInt(response.code);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Response Code could not be extracted.\");\r",
																			"}    \r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Testing\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.test(\"POST /v1/disregard-application responds 400, because of sign in release-number\", function () {\r",
																			"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																			"    });\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Testing could not be executed.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "400",
																		"type": "default"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Expected  /v1/disregard-application - incorrect separator in release-number",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"console.log(\"\\n-----  incorrect separators in release-number -------------------------------\");\r",
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"var OPERATION_KEY;\r",
																			"var dummyApplicationName;\r",
																			"var faultyReleaseNumber;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"    let currentOperationServer;\r",
																			"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																			"    \r",
																			"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																			"\r",
																			"    dummyApplicationName = GenerateRandomString(12);\r",
																			"    faultyReleaseNumber = FaultyReleaseNumber();\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Input Data could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Dummy Parameters\r",
																			"****************************************************************************************/\r",
																			"var USER_NAME;\r",
																			"var ORIGINATOR;\r",
																			"var X_CORRELATOR;\r",
																			"var TRACE_INDICATOR;\r",
																			"var CUSTOMER_JOURNEY;\r",
																			"try {\r",
																			"    USER_NAME = APPLICATION.userName;\r",
																			"    ORIGINATOR = \"Postman\";\r",
																			"    X_CORRELATOR = CreateXCorrelator();\r",
																			"    TRACE_INDICATOR = \"1\";\r",
																			"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																			"    \r",
																			"} catch (error) {\r",
																			"    console.log(\"! Could not define dummy values for parameters. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Request Body\r",
																			"****************************************************************************************/\r",
																			"var REQUEST_BODY;\r",
																			"try {\r",
																			"    REQUEST_BODY = '{'\r",
																			"        + '\"application-name\" : ' + '\"' + dummyApplicationName + '\",'\r",
																			"        + '\"release-number\" : ' + '\"' + faultyReleaseNumber + '\"'\r",
																			"    + '}';\r",
																			"} catch (error) {\r",
																			"    console.log(\"!Could not define request body. \");\r",
																			"}\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + \"/v1/disregard-application\";\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																			"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																			"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																			"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																			"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"function CreateXCorrelator() {\r",
																			"    let xCorrelator;\r",
																			"    xCorrelator = \"\";\r",
																			"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(12);\r",
																			"    return xCorrelator;\r",
																			"}\r",
																			"\r",
																			"function GenerateRandomHexString(length) {\r",
																			"    var randomRandomHexString = \"\";\r",
																			"    while (randomRandomHexString.length < length) {\r",
																			"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																			"    }\r",
																			"    return randomRandomHexString.substring(0,length);\r",
																			"}\r",
																			"\r",
																			"function GenerateRandomString(length) {\r",
																			"    let randomString;\r",
																			"    randomString = \"\";\r",
																			"    try {\r",
																			"        let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r",
																			"        let charactersLength = characters.length;\r",
																			"        for (let i = 0; i < length; i++) {\r",
																			"            randomString += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																			"        }\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Could not generate random string. \");\r",
																			"    }\r",
																			"    return randomString;\r",
																			"}\r",
																			"\r",
																			"function FaultyReleaseNumber() {\r",
																			"    let releaseNumber;\r",
																			"    releaseNumber = \"\";\r",
																			"    let releaseNumberParts;\r",
																			"    releaseNumberParts = [];\r",
																			"    for(let i=0; i<3; i++) {\r",
																			"        releaseNumberParts[i] = Math.floor(Math.random() * 10);\r",
																			"    }\r",
																			"    let separators;\r",
																			"    separators = \"-:;/\";\r",
																			"    let separatorsLength;\r",
																			"    separatorsLength = separators.length;\r",
																			"    let faultySeparator;\r",
																			"    faultySeparator = separators.charAt(Math.floor(Math.random() * separatorsLength));\r",
																			"    releaseNumber = releaseNumberParts.join(faultySeparator);\r",
																			"    return releaseNumber;\r",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var RESPONSE_CODE;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"\r",
																			"    RESPONSE_CODE = parseInt(response.code);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Response Code could not be extracted.\");\r",
																			"}    \r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Testing\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.test(\"POST /v1/disregard-application responds 400, because of incorrect separators in release-number\", function () {\r",
																			"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																			"    });\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Testing could not be executed.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "400",
																		"type": "default"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Expected  /v1/disregard-application - multiple digit in placeholder of release-number",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"console.log(\"\\n-----  multiple digit in placeholder of release-number -------------------------------\");\r",
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"var OPERATION_KEY;\r",
																			"var dummyApplicationName;\r",
																			"var faultyReleaseNumber;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"    let currentOperationServer;\r",
																			"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																			"    \r",
																			"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																			"\r",
																			"    dummyApplicationName = GenerateRandomString(12);\r",
																			"    faultyReleaseNumber = FaultyReleaseNumber();\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Input Data could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Dummy Parameters\r",
																			"****************************************************************************************/\r",
																			"var USER_NAME;\r",
																			"var ORIGINATOR;\r",
																			"var X_CORRELATOR;\r",
																			"var TRACE_INDICATOR;\r",
																			"var CUSTOMER_JOURNEY;\r",
																			"try {\r",
																			"    USER_NAME = APPLICATION.userName;\r",
																			"    ORIGINATOR = \"Postman\";\r",
																			"    X_CORRELATOR = CreateXCorrelator();\r",
																			"    TRACE_INDICATOR = \"1\";\r",
																			"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																			"    \r",
																			"} catch (error) {\r",
																			"    console.log(\"! Could not define dummy values for parameters. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Request Body\r",
																			"****************************************************************************************/\r",
																			"var REQUEST_BODY;\r",
																			"try {\r",
																			"    REQUEST_BODY = '{'\r",
																			"        + '\"application-name\" : ' + '\"' + dummyApplicationName + '\",'\r",
																			"        + '\"release-number\" : ' + '\"' + faultyReleaseNumber + '\"'\r",
																			"    + '}';\r",
																			"} catch (error) {\r",
																			"    console.log(\"!Could not define request body. \");\r",
																			"}\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + \"/v1/disregard-application\";\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																			"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																			"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																			"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																			"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"function CreateXCorrelator() {\r",
																			"    let xCorrelator;\r",
																			"    xCorrelator = \"\";\r",
																			"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(12);\r",
																			"    return xCorrelator;\r",
																			"}\r",
																			"\r",
																			"function GenerateRandomHexString(length) {\r",
																			"    var randomRandomHexString = \"\";\r",
																			"    while (randomRandomHexString.length < length) {\r",
																			"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																			"    }\r",
																			"    return randomRandomHexString.substring(0,length);\r",
																			"}\r",
																			"\r",
																			"function GenerateRandomString(length) {\r",
																			"    let randomString;\r",
																			"    randomString = \"\";\r",
																			"    try {\r",
																			"        let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r",
																			"        let charactersLength = characters.length;\r",
																			"        for (let i = 0; i < length; i++) {\r",
																			"            randomString += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																			"        }\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Could not generate random string. \");\r",
																			"    }\r",
																			"    return randomString;\r",
																			"}\r",
																			"\r",
																			"function FaultyReleaseNumber() {\r",
																			"    let releaseNumber;\r",
																			"    releaseNumber = \"\";\r",
																			"    let releaseNumberParts;\r",
																			"    releaseNumberParts = [];\r",
																			"    for(let i=0; i<3; i++) {\r",
																			"        releaseNumberParts[i] = Math.floor(Math.random() * 10);\r",
																			"    }\r",
																			"    let randomFaultyLength = Math.floor(3 + Math.random() * 7);\r",
																			"    let faultyElement = Math.floor(Math.pow(10, randomFaultyLength-1) + Math.random() * (Math.pow(10, randomFaultyLength) - Math.pow(10, randomFaultyLength-1) - 1));\r",
																			"\r",
																			"    let faultyreleaseNumberPart;\r",
																			"    faultyreleaseNumberPart = Math.floor(Math.random() * 3);\r",
																			"    releaseNumberParts[faultyreleaseNumberPart] = faultyElement;\r",
																			"\r",
																			"    releaseNumber = releaseNumberParts[0] + \".\" + releaseNumberParts[1] + \".\" + releaseNumberParts[2];\r",
																			"    return releaseNumber;\r",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var RESPONSE_CODE;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"\r",
																			"    RESPONSE_CODE = parseInt(response.code);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Response Code could not be extracted.\");\r",
																			"}    \r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Testing\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.test(\"POST /v1/disregard-application responds 400, because of multiple digit in placeholder of release-number\", function () {\r",
																			"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																			"    });\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Testing could not be executed.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "400",
																		"type": "default"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														}
													],
													"description": "## Get release-number checked for correctness?\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for op-s of /v1/disregard-application, storing operation-key\n- POST /v1/disregard-application\n  - all attributes filled with random values\n  - operation-key from above\n  - reasonable parameters but release-number attribute with random dummy value (that does not comply specification\n\n#### Testing:\n- checking for ResponseCode==400\n\n#### Clearing:\n- not applicable"
												}
											]
										},
										{
											"name": "Attribute configured?",
											"item": [
												{
													"name": "client deleted?",
													"item": [
														{
															"name": "reference /core-model-1-4:control-construct",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"console.log(\"\\n-----  /v1/disregard-application acceptance -- client deleted? -------------------------------\");\r",
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Environment variables could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																			"\r",
																			"    let REQUEST_BODY;\r",
																			"    REQUEST_BODY = \"\";\r",
																			"\r",
																			"    let AUTHORIZATION;\r",
																			"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var ltpList;\r",
																			"var fcList;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"    \r",
																			"    let responseCode;\r",
																			"    responseCode = parseInt(response.code);\r",
																			"    \r",
																			"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																			"        let responseObject;\r",
																			"        responseObject = JSON.parse(response.stream);\r",
																			"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																			"        fcList = responseObject[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
																			"\r",
																			"    } else {\r",
																			"        ltpList = [];\r",
																			"        fcList = [];\r",
																			"    }\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! ltpList could not be extracted.\");\r",
																			"}\r",
																			"\r",
																			"var currentOperationServer;\r",
																			"var regardApplicationOperationServer;\r",
																			"try {\r",
																			"    currentOperationServer = FindOperationServer(\"/v1/disregard-application\", ltpList);\r",
																			"    regardApplicationOperationServer = FindOperationServer(\"/v1/regard-application\", ltpList);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Reference objects could not be extracted.\");\r",
																			"} \r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.collectionVariables.clear();\r",
																			"    \r",
																			"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																			"    pm.collectionVariables.set(\"regardApplicationOperationServer\", regardApplicationOperationServer);\r",
																			"    pm.collectionVariables.set(\"ltpList\", ltpList);\r",
																			"    pm.collectionVariables.set(\"fcList\", fcList);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Collection variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"function FindOperationServer(operationName, ltpList) {\r",
																			"    let operationServer;\r",
																			"    operationServer = \"\";\r",
																			"    try {\r",
																			"        let sampleUuid;\r",
																			"        for(let i=0; i<ltpList.length; i++) {\r",
																			"            sampleUuid = ltpList[i][\"uuid\"];\r",
																			"            if(sampleUuid.includes(\"op-s-\")) {\r",
																			"                let sampleOperationName;\r",
																			"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																			"                if(sampleOperationName == operationName) {\r",
																			"                    operationServer = ltpList[i];\r",
																			"                    return operationServer;\r",
																			"                }\r",
																			"            }\r",
																			"        }\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																			"    }\r",
																			"    return operationServer;\r",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "GET",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "200",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Dummy /v1/regard-application - application created?",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"var OPERATION_KEY;\r",
																			"var CURRENT_ORIGINATOR;\r",
																			"var dummyApplicationName;\r",
																			"var dummyReleaseNumber;\r",
																			"var dummyProtocol;\r",
																			"var dummyAddress;\r",
																			"var dummyPort;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"    let ltpList;\r",
																			"    ltpList = APPLICATION[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																			"\r",
																			"    CURRENT_ORIGINATOR = FindHttpServerApplicationName(ltpList);\r",
																			"\r",
																			"    let currentOperationServer;\r",
																			"    currentOperationServer = pm.collectionVariables.get(\"regardApplicationOperationServer\");\r",
																			"    \r",
																			"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																			"\r",
																			"    dummyApplicationName = GenerateRandomString(12);\r",
																			"    dummyReleaseNumber = RandomReleaseNumber();\r",
																			"    dummyProtocol = RandomProtocol()\r",
																			"    dummyIpv4Address = RandomIpAddress();\r",
																			"    dummyAddress = {\r",
																			"        \"ip-address\": {\r",
																			"            \"ipv-4-address\": dummyIpv4Address\r",
																			"        }\r",
																			"    };\r",
																			"    dummyPort = RandomTcpPort();\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Input Data could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Dummy Parameters\r",
																			"****************************************************************************************/\r",
																			"var USER_NAME;\r",
																			"var ORIGINATOR;\r",
																			"var X_CORRELATOR;\r",
																			"var TRACE_INDICATOR;\r",
																			"var CUSTOMER_JOURNEY;\r",
																			"try {\r",
																			"    USER_NAME = APPLICATION.userName;\r",
																			"    ORIGINATOR = \"Postman\";\r",
																			"    X_CORRELATOR = CreateXCorrelator();\r",
																			"    TRACE_INDICATOR = \"1\";\r",
																			"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																			"    \r",
																			"} catch (error) {\r",
																			"    console.log(\"! Could not define dummy values for parameters. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Request Body\r",
																			"****************************************************************************************/\r",
																			"var REQUEST_BODY;\r",
																			"try {\r",
																			"    REQUEST_BODY = '{'\r",
																			"        + '\"application-name\" : ' + '\"' + dummyApplicationName + '\",'\r",
																			"        + '\"release-number\" : ' + '\"' + dummyReleaseNumber + '\",'\r",
																			"        + '\"protocol\" : ' + '\"' + dummyProtocol + '\",'\r",
																			"        + '\"address\" : ' + JSON.stringify(dummyAddress) + ','\r",
																			"        + '\"port\" : ' +  dummyPort\r",
																			"    +'}';\r",
																			"} catch (error) {\r",
																			"    console.log(\"!Could not define request body. \");\r",
																			"}\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.collectionVariables.set(\"user\", USER_NAME);\r",
																			"    pm.collectionVariables.set(\"originator\", ORIGINATOR);\r",
																			"    pm.collectionVariables.set(\"xCorrelator\", X_CORRELATOR);\r",
																			"    pm.collectionVariables.set(\"traceIndicator\", TRACE_INDICATOR);\r",
																			"    pm.collectionVariables.set(\"customerJourney\", CUSTOMER_JOURNEY);\r",
																			"    pm.collectionVariables.set(\"currentOriginator\", CURRENT_ORIGINATOR);\r",
																			"    \r",
																			"    pm.collectionVariables.set(\"dummyApplicationName\", dummyApplicationName);\r",
																			"    pm.collectionVariables.set(\"dummyReleaseNumber\", dummyReleaseNumber);\r",
																			"    pm.collectionVariables.set(\"dummyProtocol\", dummyProtocol);\r",
																			"    pm.collectionVariables.set(\"dummyAddress\", dummyAddress);\r",
																			"    pm.collectionVariables.set(\"dummyPort\", dummyPort);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Collection variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + \"/v1/regard-application\";\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																			"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																			"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																			"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																			"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"function CreateXCorrelator() {\r",
																			"    let xCorrelator;\r",
																			"    xCorrelator = \"\";\r",
																			"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(12);\r",
																			"    return xCorrelator;\r",
																			"}\r",
																			"\r",
																			"function GenerateRandomHexString(length) {\r",
																			"    var randomRandomHexString = \"\";\r",
																			"    while (randomRandomHexString.length < length) {\r",
																			"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																			"    }\r",
																			"    return randomRandomHexString.substring(0,length);\r",
																			"}\r",
																			"\r",
																			"function GenerateRandomString(length) {\r",
																			"    let randomString;\r",
																			"    randomString = \"\";\r",
																			"    try {\r",
																			"        let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r",
																			"        let charactersLength = characters.length;\r",
																			"        for (let i = 0; i < length; i++) {\r",
																			"            randomString += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																			"        }\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Could not generate random string. \");\r",
																			"    }\r",
																			"    return randomString;\r",
																			"}\r",
																			"\r",
																			"function RandomReleaseNumber() {\r",
																			"    let releaseNumber;\r",
																			"    let releaseNumberParts = [];\r",
																			"    for  (let i=0; i<3 ; i++) {\r",
																			"        releaseNumberParts[i] = Math.floor(Math.random() * 10);\r",
																			"    }\r",
																			"    releaseNumber = releaseNumberParts[0] + \".\" + releaseNumberParts[1] + \".\" + releaseNumberParts[2];\r",
																			"    return releaseNumber;\r",
																			"}\r",
																			"\r",
																			"function RandomIpAddress() {\r",
																			"    let randomAddress\r",
																			"    let addressParts = [];\r",
																			"    for ( let i=0; i<4; i++ ) {\r",
																			"        addressParts[i] = String(Math.floor(Math.random() * 256));\r",
																			"    }\r",
																			"    randomAddress = addressParts[0] + \".\" + addressParts[1] + \".\" + addressParts[2] + \".\" + addressParts[3];\r",
																			"    return randomAddress;\r",
																			"}\r",
																			"\r",
																			"function RandomTcpPort() {\r",
																			"    let randomPort;\r",
																			"    randomPort = 2000 + Math.floor( Math.random() * 1000 );\r",
																			"    return randomPort;\r",
																			"}\r",
																			"\r",
																			"function FindHttpServerApplicationName(ltpList) {\r",
																			"    let applicationName;\r",
																			"    applicationName = \"\";\r",
																			"    for( let i=0; i<ltpList.length; i++ ) {\r",
																			"        let sampleUuid;\r",
																			"        sampleUuid = ltpList[i][\"uuid\"];\r",
																			"        if(sampleUuid.includes(\"http-s-\")) {\r",
																			"            applicationName = ltpList[i][\"layer-protocol\"][0][\"http-server-interface-1-0:http-server-interface-pac\"][\"http-server-interface-capability\"][\"application-name\"];\r",
																			"            return applicationName;\r",
																			"        }\r",
																			"    }\r",
																			"    return applicationName;\r",
																			"}\r",
																			"\r",
																			"function RandomProtocol() {\r",
																			"    let protocolList;\r",
																			"    protocolList = [  \"HTTP\", \"HTTPS\" ];\r",
																			"    let protocolIndex = Math.floor(Math.random() * protocolList.length);\r",
																			"    let randomProtocol = protocolList[protocolIndex]; \r",
																			"\r",
																			"    return randomProtocol;\r",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var RESPONSE_CODE;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"\r",
																			"    RESPONSE_CODE = parseInt(response.code);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Response Code could not be extracted.\");\r",
																			"}    \r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Testing\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.test(\"POST /v1/regard-application responds 204\", function () {\r",
																			"        pm.expect(RESPONSE_CODE).to.equal(204);\r",
																			"    });\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Testing could not be executed.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "204",
																		"type": "default"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "reference /core-model-1-4:control-construct",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Environment variables could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																			"\r",
																			"    let REQUEST_BODY;\r",
																			"    REQUEST_BODY = \"\";\r",
																			"\r",
																			"    let AUTHORIZATION;\r",
																			"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var expectedApplicationName;\r",
																			"var expectedReleaseNumber;\r",
																			"try {\r",
																			"    expectedApplicationName = pm.collectionVariables.get(\"dummyApplicationName\");\r",
																			"    expectedReleaseNumber = pm.collectionVariables.get(\"dummyReleaseNumber\");\r",
																			"   \r",
																			"} catch(error) {\r",
																			"    console.log(\"! Could not load input data. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var ltpList;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"    \r",
																			"    let responseCode;\r",
																			"    responseCode = parseInt(response.code);\r",
																			"    \r",
																			"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																			"        let responseObject;\r",
																			"        responseObject = JSON.parse(response.stream);\r",
																			"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																			"\r",
																			"    } else {\r",
																			"        ltpList = [];\r",
																			"    }\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! ltpList could not be extracted.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Testing\r",
																			"****************************************************************************************/\r",
																			"var actualHttpClientLtp;\r",
																			"try {\r",
																			"    actualHttpClientLtp = FindHttpClientLtpForApplicationNameAndReleaseNumber(expectedApplicationName, expectedReleaseNumber, ltpList);\r",
																			"\r",
																			"} catch(error) {\r",
																			"    console.log(\"! Expected applicationName and releaseNumber did not lead to an HTTP client.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.collectionVariables.set(\"expectedHttpClientInstance\", actualHttpClientLtp);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Collection variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"function FindHttpClientLtpForApplicationNameAndReleaseNumber(expectedApplicationName, expectedReleaseNumber, ltpList) {\r",
																			"    let httpClientLtp;\r",
																			"    httpClientLtp = {};\r",
																			"    try{\r",
																			"        for( let i=0; i<ltpList.length; i++ ) {\r",
																			"            let sampleUuid;\r",
																			"            sampleUuid = ltpList[i][\"uuid\"];\r",
																			"            if( sampleUuid.includes(\"http-c-\") ) {\r",
																			"                let sampleApplicationName;\r",
																			"                sampleApplicationName = ltpList[i][\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																			"                if( sampleApplicationName == expectedApplicationName ) {\r",
																			"                    let sampleReleaseNumber;\r",
																			"                    sampleReleaseNumber = ltpList[i][\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																			"                    if( sampleReleaseNumber == expectedReleaseNumber ) {\r",
																			"                        httpClientLtp = ltpList[i];\r",
																			"                        return httpClientLtp;\r",
																			"                    }\r",
																			"                }\r",
																			"            }\r",
																			"        }\r",
																			"    } catch(error) {\r",
																			"        console.log(\"! Could not get HTTP client for given application name and release number\");\r",
																			"    }\r",
																			"    return httpClientLtp;\r",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "GET",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "200",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Dummy /v1/disregard-application",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"var OPERATION_KEY;\r",
																			"var dummyApplicationName;\r",
																			"var dummyReleaseNumber;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"    let currentOperationServer;\r",
																			"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																			"    \r",
																			"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																			"\r",
																			"    dummyApplicationName = pm.collectionVariables.get(\"dummyApplicationName\");\r",
																			"    dummyReleaseNumber = pm.collectionVariables.get(\"dummyReleaseNumber\");\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Input Data could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Dummy Parameters\r",
																			"****************************************************************************************/\r",
																			"var USER_NAME;\r",
																			"var ORIGINATOR;\r",
																			"var X_CORRELATOR;\r",
																			"var TRACE_INDICATOR;\r",
																			"var CUSTOMER_JOURNEY;\r",
																			"try {\r",
																			"    USER_NAME = APPLICATION.userName;\r",
																			"    ORIGINATOR = \"Postman\";\r",
																			"    X_CORRELATOR = CreateXCorrelator();\r",
																			"    TRACE_INDICATOR = \"1\";\r",
																			"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																			"    \r",
																			"} catch (error) {\r",
																			"    console.log(\"! Could not define dummy values for parameters. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Request Body\r",
																			"****************************************************************************************/\r",
																			"var REQUEST_BODY;\r",
																			"try {\r",
																			"    REQUEST_BODY = '{'\r",
																			"        + '\"application-name\" : ' + '\"' + dummyApplicationName + '\",'\r",
																			"        + '\"release-number\" : ' + '\"' + dummyReleaseNumber + '\"'\r",
																			"    +'}';\r",
																			"} catch (error) {\r",
																			"    console.log(\"!Could not define request body. \");\r",
																			"}\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + \"/v1/disregard-application\";\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																			"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																			"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																			"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																			"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"function CreateXCorrelator() {\r",
																			"    let xCorrelator;\r",
																			"    xCorrelator = \"\";\r",
																			"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(12);\r",
																			"    return xCorrelator;\r",
																			"}\r",
																			"\r",
																			"function GenerateRandomHexString(length) {\r",
																			"    var randomRandomHexString = \"\";\r",
																			"    while (randomRandomHexString.length < length) {\r",
																			"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																			"    }\r",
																			"    return randomRandomHexString.substring(0,length);\r",
																			"}\r",
																			"\r",
																			"function GenerateRandomString(length) {\r",
																			"    let randomString;\r",
																			"    randomString = \"\";\r",
																			"    try {\r",
																			"        let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r",
																			"        let charactersLength = characters.length;\r",
																			"        for (let i = 0; i < length; i++) {\r",
																			"            randomString += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																			"        }\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Could not generate random string. \");\r",
																			"    }\r",
																			"    return randomString;\r",
																			"}\r",
																			"\r",
																			"function RandomReleaseNumber() {\r",
																			"    let releaseNumber;\r",
																			"    let releaseNumberParts = [];\r",
																			"    for  (let i=0; i<3 ; i++) {\r",
																			"        releaseNumberParts[i] = Math.floor(Math.random() * 10);\r",
																			"    }\r",
																			"    releaseNumber = releaseNumberParts[0] + \".\" + releaseNumberParts[1] + \".\" + releaseNumberParts[2];\r",
																			"    return releaseNumber;\r",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var RESPONSE_CODE;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"\r",
																			"    RESPONSE_CODE = parseInt(response.code);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Response Code could not be extracted.\");\r",
																			"}    \r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Testing\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.test(\"POST /v1/disregard-application responds 204\", function () {\r",
																			"        pm.expect(RESPONSE_CODE).to.equal(204);\r",
																			"    });\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Testing could not be executed.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "POST",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "204",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Expected /core-model-1-4:control-construct",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Environment variables could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																			"\r",
																			"    let REQUEST_BODY;\r",
																			"    REQUEST_BODY = \"\";\r",
																			"\r",
																			"    let AUTHORIZATION;\r",
																			"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var expectedHttpClientInstance;\r",
																			"try {\r",
																			"    expectedHttpClientInstance = pm.collectionVariables.get(\"expectedHttpClientInstance\");\r",
																			"   \r",
																			"} catch(error) {\r",
																			"    console.log(\"! Could not load input data. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var ltpList;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"    \r",
																			"    let responseCode;\r",
																			"    responseCode = parseInt(response.code);\r",
																			"    \r",
																			"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																			"        let responseObject;\r",
																			"        responseObject = JSON.parse(response.stream);\r",
																			"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																			"\r",
																			"    } else {\r",
																			"        ltpList = [];\r",
																			"    }\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! ltpList could not be extracted.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Testing\r",
																			"****************************************************************************************/\r",
																			"var actualHttpClientInstance;\r",
																			"var expectedApplicationName;\r",
																			"var expectedReleaseNumber;\r",
																			"try {\r",
																			"    expectedApplicationName = expectedHttpClientInstance[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																			"    expectedReleaseNumber = expectedHttpClientInstance[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																			"    actualHttpClientInstance = FindHttpClientLtpForApplicationNameAndReleaseNumber(expectedApplicationName, expectedReleaseNumber, ltpList);\r",
																			"\r",
																			"} catch(error) {\r",
																			"    console.log(error)\r",
																			"    console.log(\" !Exception in finding actual http client instance.\");\r",
																			"}\r",
																			"try {\r",
																			"    pm.test(\"As expected, http client instance with application name '\" + expectedApplicationName + \"' and release-number '\" + expectedReleaseNumber + \"' could not be found \" , function () {\r",
																			"        pm.expect(actualHttpClientInstance).to.not.equal(undefined);\r",
																			"        pm.expect(Object.keys(actualHttpClientInstance).length).to.equal(0);\r",
																			"    });\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Testing of HTTP client failed.\");\r",
																			"}\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"function FindHttpClientLtpForApplicationNameAndReleaseNumber(expectedApplicationName, expectedReleaseNumber, ltpList) {\r",
																			"    let httpClientLtp;\r",
																			"    httpClientLtp = {};\r",
																			"    try{\r",
																			"        for( let i=0; i<ltpList.length; i++ ) {\r",
																			"            let sampleUuid;\r",
																			"            sampleUuid = ltpList[i][\"uuid\"];\r",
																			"            if( sampleUuid.includes(\"http-c-\") ) {\r",
																			"                let sampleApplicationName;\r",
																			"                sampleApplicationName = ltpList[i][\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																			"                if( sampleApplicationName == expectedApplicationName ) {\r",
																			"                    let sampleReleaseNumber;\r",
																			"                    sampleReleaseNumber = ltpList[i][\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																			"                    if( sampleReleaseNumber == expectedReleaseNumber ) {\r",
																			"                        httpClientLtp = ltpList[i];\r",
																			"                        return httpClientLtp;\r",
																			"                    }\r",
																			"                }\r",
																			"            }\r",
																			"        }\r",
																			"    } catch(error) {\r",
																			"        console.log(\"! Could not get HTTP client for given application name and release number\");\r",
																			"    }\r",
																			"    return httpClientLtp;\r",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "GET",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "200",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Check /core-model-1-4:control-construct",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"var AUTHORIZATION;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																			"\r",
																			"    oamPath = \"/core-model-1-4:control-construct\";\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Environment variables could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Request Body\r",
																			"****************************************************************************************/\r",
																			"var REQUEST_BODY;\r",
																			"try {\r",
																			"    REQUEST_BODY = \"\";\r",
																			"} catch (error) {\r",
																			"    console.log(\"!Could not define request body. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + oamPath;\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var expectedLogicalTerminationPoint;\r",
																			"var expectedForwardingConstruct;\r",
																			"try {\r",
																			"    expectedLogicalTerminationPoint = pm.collectionVariables.get(\"ltpList\");\r",
																			"    expectedForwardingConstruct = pm.collectionVariables.get(\"fcList\");\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Collection variables could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var RESPONSE_CODE;\r",
																			"var RESPONSE;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"\r",
																			"    RESPONSE_CODE = parseInt(response.code);\r",
																			"\r",
																			"    if (Math.floor(RESPONSE_CODE / 100) === 2) {\r",
																			"        RESPONSE = JSON.parse(response.stream);\r",
																			"    } else {\r",
																			"        RESPONSE = [];\r",
																			"    }\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Result value lists could not be extracted.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Testing\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.test(\"GET /core-model-1-4:control-construct responds 200\", function () {\r",
																			"        pm.expect(RESPONSE_CODE).to.equal(200);\r",
																			"    });\r",
																			"\r",
																			"    let actualLtpList;\r",
																			"    actualLtpList = RESPONSE[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																			"\r",
																			"    pm.test(\"Received logical-termination-point is same as intial instance \", function () {\r",
																			"        pm.expect(actualLtpList).to.deep.equal(expectedLogicalTerminationPoint);\r",
																			"    });\r",
																			"\r",
																			"    let actualFcList;\r",
																			"    actualFcList = RESPONSE[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
																			"\r",
																			"    pm.test(\"Received forwarding-construct is same as intial instance \", function () {\r",
																			"        pm.expect(actualFcList).to.deep.equal(expectedForwardingConstruct);\r",
																			"    });\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Testing could not be executed.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "200",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														}
													],
													"description": "## Get application deleted?\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for op-s of /v1/regard-application, storing operation-key\n  - searching CC for op-s of /v1/disregard-application, storing operation-key\n- POST /v1/regard-application with\n  - dummy values generated for application-name, release-number, address, protocol, port\n  - operation-key from above\n  - reasonable parameter\n- GETing CC (/core-model-1-4:control-construct)\n  - Search CC/find http-c for entry having application-name=dummyApplicationName and release-number=dummyReleaseNumber\n  - store the instance\n- POST /v1/disregard-application with \n  - application-name= dummyApplicationName and release-number=dummyReleaseNumber\n\n#### Testing:\n- checking for ResponseCode==204\n- GETing CC (/core-model-1-4:control-construct)\n- verify that CC/http-c of application-name=dummyApplicationName and its corresponding release-number to be absent\n\n#### Clearing:\n-NA\n\n#### Clearance check:\n- Check if the logical-termination-point instance is the same as initial configuration\n- Check if the forwarding-construct instance is the same as initial configuration"
												}
											]
										},
										{
											"name": "FC-port deleted?",
											"item": [
												{
													"name": "NewApplicationCausesRequestForInquiringOamRequestApprovals",
													"item": [
														{
															"name": "reference /core-model-1-4:control-construct",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"console.log(\"\\n-----  /v1/disregard-application acceptance -- fc-port deleted for NewApplicationCausesRequestForInquiringOamRequestApprovals -------------------------------\");\r",
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Environment variables could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																			"\r",
																			"    let REQUEST_BODY;\r",
																			"    REQUEST_BODY = \"\";\r",
																			"\r",
																			"    let AUTHORIZATION;\r",
																			"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var ltpList;\r",
																			"var fcList;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"    \r",
																			"    let responseCode;\r",
																			"    responseCode = parseInt(response.code);\r",
																			"    \r",
																			"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																			"        let responseObject;\r",
																			"        responseObject = JSON.parse(response.stream);\r",
																			"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																			"        fcList = responseObject[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
																			"\r",
																			"    } else {\r",
																			"        ltpList = [];\r",
																			"        fcList = [];\r",
																			"    }\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! ltpList could not be extracted.\");\r",
																			"}\r",
																			"\r",
																			"var currentOperationServer;\r",
																			"var regardApplicationOperationServer;\r",
																			"var inquireOamRequestApprovalsOperationClientLtp;\r",
																			"var httpClientLtp;\r",
																			"var tcpClientLtp;\r",
																			"try {\r",
																			"    currentOperationServer = FindOperationServer(\"/v1/disregard-application\", ltpList);\r",
																			"    regardApplicationOperationServer = FindOperationServer(\"/v1/regard-application\", ltpList);\r",
																			"\r",
																			"    //Inquiring OAM approvals\r",
																			"    let outputFcPortListInquireOamRequestApprovals;\r",
																			"    outputFcPortListInquireOamRequestApprovals = FindOutputFcPortList(\"NewApplicationCausesRequestForInquiringOamRequestApprovals\", fcList);\r",
																			"    let ltpInstance = FindRandomLtpInstancesFromFc(outputFcPortListInquireOamRequestApprovals, ltpList)\r",
																			"    httpClientLtp = ltpInstance.httpClientLtp;\r",
																			"    inquireOamRequestApprovalsOperationClientLtp = ltpInstance.operationClientLtp;\r",
																			"    tcpClientLtp = FindServingLtp(httpClientLtp, ltpList);\r",
																			"\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Reference objects could not be extracted.\");\r",
																			"} \r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.collectionVariables.clear();\r",
																			"    \r",
																			"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																			"    pm.collectionVariables.set(\"regardApplicationOperationServer\", regardApplicationOperationServer);\r",
																			"    pm.collectionVariables.set(\"inquireOamRequestApprovalsOperationClientLtp\", inquireOamRequestApprovalsOperationClientLtp);\r",
																			"    pm.collectionVariables.set(\"httpClientLtp\", httpClientLtp);\r",
																			"    pm.collectionVariables.set(\"tcpClientLtp\", tcpClientLtp);\r",
																			"    pm.collectionVariables.set(\"ltpList\", ltpList);\r",
																			"    pm.collectionVariables.set(\"fcList\", fcList);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Collection variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"function FindOperationServer(operationName, ltpList) {\r",
																			"    let operationServer;\r",
																			"    operationServer = \"\";\r",
																			"    try {\r",
																			"        let sampleUuid;\r",
																			"        for(let i=0; i<ltpList.length; i++) {\r",
																			"            sampleUuid = ltpList[i][\"uuid\"];\r",
																			"            if(sampleUuid.includes(\"op-s-\")) {\r",
																			"                let sampleOperationName;\r",
																			"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																			"                if(sampleOperationName == operationName) {\r",
																			"                    operationServer = ltpList[i];\r",
																			"                    return operationServer;\r",
																			"                }\r",
																			"            }\r",
																			"        }\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																			"    }\r",
																			"    return operationServer;\r",
																			"}\r",
																			"\r",
																			"function FindOutputFcPortList(forwardingName, fcList) {\r",
																			"    let outputFcPortList;\r",
																			"    outputFcPortList = [];\r",
																			"    try {\r",
																			"        for( let i=0; i<fcList.length; i++ ) {\r",
																			"            for(let j=0; j<fcList[i][\"name\"].length; j++) {               \r",
																			"                if(fcList[i][\"name\"][j][\"value\"] == forwardingName) {\r",
																			"                    fcPortList = fcList[i][\"fc-port\"];\r",
																			"                    for(let k=0;k<fcPortList.length;k++) {\r",
																			"                        if(fcPortList[k][\"port-direction\"] == \"core-model-1-4:PORT_DIRECTION_TYPE_OUTPUT\") {\r",
																			"                            outputFcPortList.push(fcPortList[k]);\r",
																			"                        }\r",
																			"                    }\r",
																			"                    return outputFcPortList;\r",
																			"                }\r",
																			"            }\r",
																			"        }\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																			"    }\r",
																			"    return outputFcPortList;\r",
																			"}\r",
																			"\r",
																			"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
																			"    let actualInstance;\r",
																			"    actualInstance = {};\r",
																			"    try {\r",
																			"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
																			"            let sampleUuid;\r",
																			"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
																			"            if( sampleUuid == expectedUuid ) {\r",
																			"                actualInstance = actualLtpList[i];\r",
																			"                return actualInstance;\r",
																			"            }\r",
																			"        }\r",
																			"\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																			"    }\r",
																			"    return undefined;\r",
																			"}\r",
																			"\r",
																			"function FindServingLtp(clientLtp, ltpList) {\r",
																			"    let servingLtp;\r",
																			"    servingLtp = {};\r",
																			"    try{\r",
																			"        let serverLtpUuid;\r",
																			"        serverLtpUuid = clientLtp[\"server-ltp\"][0];\r",
																			"        for( let i=0; i<ltpList.length; i++ ) {\r",
																			"            let sampleUuid;\r",
																			"            sampleUuid = ltpList[i][\"uuid\"];\r",
																			"            if( sampleUuid == serverLtpUuid ) {\r",
																			"                servingLtp = ltpList[i];\r",
																			"                return servingLtp;\r",
																			"            }\r",
																			"        }\r",
																			"    } catch(error) {\r",
																			"        console.log(error);\r",
																			"        console.log(\"! Exception in function : FindServingLtp. \")\r",
																			"    }\r",
																			"    return servingLtp;\r",
																			"}\r",
																			"\r",
																			"\r",
																			"function FindRandomLtpInstancesFromFc(outputFcPortList, ltpList) {\r",
																			"    let ltpInstance = {};\r",
																			"    try {\r",
																			"        for ( let i=0; i<outputFcPortList.length; i++ ) {\r",
																			"            let randomOutputFcPort = outputFcPortList[Math.floor(Math.random() * outputFcPortList.length)];\r",
																			"            let outputLtpUuid = randomOutputFcPort[\"logical-termination-point\"];\r",
																			"            let operationClientLtp = FindActualInstanceByUuid(outputLtpUuid, ltpList);\r",
																			"\r",
																			"            let httpClientLtp = FindServingLtp(operationClientLtp, ltpList);\r",
																			"            let sampleApplicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																			"\r",
																			"            if (sampleApplicationName != \"AdministratorAdministration\") {\r",
																			"\t\t\t\tltpInstance = { httpClientLtp, operationClientLtp };\r",
																			"                break;\r",
																			"            }\r",
																			"        }\r",
																			"    } catch(error) {\r",
																			"        console.log(error);\r",
																			"        console.log(\"! Exception in function : FindRandomLtpInstancesFromFc. \")\r",
																			"    } \r",
																			"    return ltpInstance;\r",
																			"}\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "GET",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "200",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Dummy /v1/regard-application",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"var OPERATION_KEY;\r",
																			"var CURRENT_ORIGINATOR;\r",
																			"var dummyApplicationName;\r",
																			"var dummyReleaseNumber;\r",
																			"var dummyProtocol;\r",
																			"var dummyAddress;\r",
																			"var dummyPort;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"    let ltpList;\r",
																			"    ltpList = APPLICATION[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																			"\r",
																			"    CURRENT_ORIGINATOR = FindHttpServerApplicationName(ltpList);\r",
																			"\r",
																			"    let currentOperationServer;\r",
																			"    currentOperationServer = pm.collectionVariables.get(\"regardApplicationOperationServer\");\r",
																			"    \r",
																			"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																			"\r",
																			"    dummyApplicationName = GenerateRandomString(12);\r",
																			"    dummyReleaseNumber = RandomReleaseNumber();\r",
																			"    dummyProtocol = RandomProtocol()\r",
																			"    dummyIpv4Address = RandomIpAddress();\r",
																			"    dummyAddress = {\r",
																			"        \"ip-address\": {\r",
																			"            \"ipv-4-address\": dummyIpv4Address\r",
																			"        }\r",
																			"    };\r",
																			"    dummyPort = RandomTcpPort();\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Input Data could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Dummy Parameters\r",
																			"****************************************************************************************/\r",
																			"var USER_NAME;\r",
																			"var ORIGINATOR;\r",
																			"var X_CORRELATOR;\r",
																			"var TRACE_INDICATOR;\r",
																			"var CUSTOMER_JOURNEY;\r",
																			"try {\r",
																			"    USER_NAME = APPLICATION.userName;\r",
																			"    ORIGINATOR = \"Postman\";\r",
																			"    X_CORRELATOR = CreateXCorrelator();\r",
																			"    TRACE_INDICATOR = \"1\";\r",
																			"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																			"    \r",
																			"} catch (error) {\r",
																			"    console.log(\"! Could not define dummy values for parameters. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Request Body\r",
																			"****************************************************************************************/\r",
																			"var REQUEST_BODY;\r",
																			"try {\r",
																			"    REQUEST_BODY = '{'\r",
																			"        + '\"application-name\" : ' + '\"' + dummyApplicationName + '\",'\r",
																			"        + '\"release-number\" : ' + '\"' + dummyReleaseNumber + '\",'\r",
																			"        + '\"protocol\" : ' + '\"' + dummyProtocol + '\",'\r",
																			"        + '\"address\" : ' + JSON.stringify(dummyAddress) + ','\r",
																			"        + '\"port\" : ' +  dummyPort\r",
																			"    +'}';\r",
																			"} catch (error) {\r",
																			"    console.log(\"!Could not define request body. \");\r",
																			"}\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.collectionVariables.set(\"user\", USER_NAME);\r",
																			"    pm.collectionVariables.set(\"originator\", ORIGINATOR);\r",
																			"    pm.collectionVariables.set(\"xCorrelator\", X_CORRELATOR);\r",
																			"    pm.collectionVariables.set(\"traceIndicator\", TRACE_INDICATOR);\r",
																			"    pm.collectionVariables.set(\"customerJourney\", CUSTOMER_JOURNEY);\r",
																			"    pm.collectionVariables.set(\"currentOriginator\", CURRENT_ORIGINATOR);\r",
																			"    \r",
																			"    pm.collectionVariables.set(\"dummyApplicationName\", dummyApplicationName);\r",
																			"    pm.collectionVariables.set(\"dummyReleaseNumber\", dummyReleaseNumber);\r",
																			"    pm.collectionVariables.set(\"dummyProtocol\", dummyProtocol);\r",
																			"    pm.collectionVariables.set(\"dummyAddress\", dummyAddress);\r",
																			"    pm.collectionVariables.set(\"dummyPort\", dummyPort);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Collection variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + \"/v1/regard-application\";\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																			"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																			"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																			"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																			"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"function CreateXCorrelator() {\r",
																			"    let xCorrelator;\r",
																			"    xCorrelator = \"\";\r",
																			"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(12);\r",
																			"    return xCorrelator;\r",
																			"}\r",
																			"\r",
																			"function GenerateRandomHexString(length) {\r",
																			"    var randomRandomHexString = \"\";\r",
																			"    while (randomRandomHexString.length < length) {\r",
																			"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																			"    }\r",
																			"    return randomRandomHexString.substring(0,length);\r",
																			"}\r",
																			"\r",
																			"function GenerateRandomString(length) {\r",
																			"    let randomString;\r",
																			"    randomString = \"\";\r",
																			"    try {\r",
																			"        let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r",
																			"        let charactersLength = characters.length;\r",
																			"        for (let i = 0; i < length; i++) {\r",
																			"            randomString += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																			"        }\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Could not generate random string. \");\r",
																			"    }\r",
																			"    return randomString;\r",
																			"}\r",
																			"\r",
																			"function RandomReleaseNumber() {\r",
																			"    let releaseNumber;\r",
																			"    let releaseNumberParts = [];\r",
																			"    for  (let i=0; i<3 ; i++) {\r",
																			"        releaseNumberParts[i] = Math.floor(Math.random() * 10);\r",
																			"    }\r",
																			"    releaseNumber = releaseNumberParts[0] + \".\" + releaseNumberParts[1] + \".\" + releaseNumberParts[2];\r",
																			"    return releaseNumber;\r",
																			"}\r",
																			"\r",
																			"function RandomIpAddress() {\r",
																			"    let randomAddress\r",
																			"    let addressParts = [];\r",
																			"    for ( let i=0; i<4; i++ ) {\r",
																			"        addressParts[i] = String(Math.floor(Math.random() * 256));\r",
																			"    }\r",
																			"    randomAddress = addressParts[0] + \".\" + addressParts[1] + \".\" + addressParts[2] + \".\" + addressParts[3];\r",
																			"    return randomAddress;\r",
																			"}\r",
																			"\r",
																			"function RandomTcpPort() {\r",
																			"    let randomPort;\r",
																			"    randomPort = 2000 + Math.floor( Math.random() * 1000 );\r",
																			"    return randomPort;\r",
																			"}\r",
																			"\r",
																			"function FindHttpServerApplicationName(ltpList) {\r",
																			"    let applicationName;\r",
																			"    applicationName = \"\";\r",
																			"    for( let i=0; i<ltpList.length; i++ ) {\r",
																			"        let sampleUuid;\r",
																			"        sampleUuid = ltpList[i][\"uuid\"];\r",
																			"        if(sampleUuid.includes(\"http-s-\")) {\r",
																			"            applicationName = ltpList[i][\"layer-protocol\"][0][\"http-server-interface-1-0:http-server-interface-pac\"][\"http-server-interface-capability\"][\"application-name\"];\r",
																			"            return applicationName;\r",
																			"        }\r",
																			"    }\r",
																			"    return applicationName;\r",
																			"}\r",
																			"\r",
																			"\r",
																			"function RandomProtocol() {\r",
																			"    let protocolList;\r",
																			"    protocolList = [  \"HTTP\", \"HTTPS\" ];\r",
																			"    let protocolIndex = Math.floor(Math.random() * protocolList.length);\r",
																			"    let randomProtocol = protocolList[protocolIndex]; \r",
																			"\r",
																			"    return randomProtocol;\r",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var RESPONSE_CODE;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"\r",
																			"    RESPONSE_CODE = parseInt(response.code);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Response Code could not be extracted.\");\r",
																			"}    \r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Testing\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.test(\"POST /v1/regard-application responds 204\", function () {\r",
																			"        pm.expect(RESPONSE_CODE).to.equal(204);\r",
																			"    });\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Testing could not be executed.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "204",
																		"type": "default"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "reference /core-model-1-4:control-construct",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Environment variables could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																			"\r",
																			"    let REQUEST_BODY;\r",
																			"    REQUEST_BODY = \"\";\r",
																			"\r",
																			"    let AUTHORIZATION;\r",
																			"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var expectedApplicationName;\r",
																			"var expectedReleaseNumber;\r",
																			"var expectedOperationName;\r",
																			"try {\r",
																			"    expectedApplicationName = pm.collectionVariables.get(\"dummyApplicationName\");\r",
																			"    expectedReleaseNumber = pm.collectionVariables.get(\"dummyReleaseNumber\");\r",
																			"\r",
																			"    let expectedOperationClient;\r",
																			"    expectedOperationClient = pm.collectionVariables.get(\"inquireOamRequestApprovalsOperationClientLtp\");\r",
																			"    expectedOperationName = expectedOperationClient[\"layer-protocol\"][0][\"operation-client-interface-1-0:operation-client-interface-pac\"][\"operation-client-interface-configuration\"][\"operation-name\"];\r",
																			"   \r",
																			"} catch(error) {\r",
																			"    console.log(\"! Could not load input data. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var ltpList;\r",
																			"var fcList;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"    \r",
																			"    let responseCode;\r",
																			"    responseCode = parseInt(response.code);\r",
																			"    \r",
																			"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																			"        let responseObject;\r",
																			"        responseObject = JSON.parse(response.stream);\r",
																			"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																			"        fcList = responseObject[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
																			"\r",
																			"    } else {\r",
																			"        ltpList = [];\r",
																			"        fcList = [];\r",
																			"    }\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! ltpList could not be extracted.\");\r",
																			"}\r",
																			"\r",
																			"var expectedOutputFcPort;\r",
																			"try {\r",
																			"    let actualHttpClient;\r",
																			"    actualHttpClient = FindHttpClientWithApplicationNameAndReleaseNumber(expectedApplicationName, expectedReleaseNumber, ltpList);\r",
																			"\r",
																			"    let actualOperationClientLtp;\r",
																			"    actualOperationClientLtp = FindOperationClientLtp(actualHttpClient, ltpList, expectedOperationName);\r",
																			"\r",
																			"    let actualFcPortList;\r",
																			"    actualFcPortList = FindOutputFcPortList(\"NewApplicationCausesRequestForInquiringOamRequestApprovals\", fcList);\r",
																			"    \r",
																			"    for(let i=0; i<actualFcPortList.length; i++) {\r",
																			"       if( actualFcPortList[i][\"logical-termination-point\"] == actualOperationClientLtp[\"uuid\"]) {\r",
																			"           expectedOutputFcPort = actualFcPortList[i];\r",
																			"       }\r",
																			"    }\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Reference objects could not be extracted.\");\r",
																			"} \r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.collectionVariables.set(\"expectedOutputFcPort\", expectedOutputFcPort);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Collection variables could not be set.\");\r",
																			"}\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"function FindHttpClientWithApplicationNameAndReleaseNumber(applicationName, releaseNumber, ltpList) {\r",
																			"    let httpClient;\r",
																			"    httpClient = {};\r",
																			"    try {\r",
																			"        for ( let i=0; i<ltpList.length; i++ ) {\r",
																			"            let sampleUuid;\r",
																			"            sampleUuid = ltpList[i][\"uuid\"];\r",
																			"            if(sampleUuid.includes(\"http-c-\")) {\r",
																			"                let sampleApplicationName;\r",
																			"                sampleApplicationName = ltpList[i][\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																			"                let sampleReleaseNumber;\r",
																			"                sampleReleaseNumber = ltpList[i][\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																			"                if(( sampleApplicationName == applicationName ) && ( sampleReleaseNumber == releaseNumber )) {\r",
																			"                    httpClient = ltpList[i];\r",
																			"                    return httpClient;\r",
																			"                }\r",
																			"            }\r",
																			"        }\r",
																			"    } catch (error) {\r",
																			"        console.log(error);\r",
																			"        console.log(\"! Exception in function FindHttpClientWithApplicationNameAndReleaseNumber. \");\r",
																			"    }\r",
																			"    return httpClient;\r",
																			"}\r",
																			"\r",
																			"function FindOperationClientLtp(serverLtp, ltpList, operationName) {\r",
																			"    let operationClientLtp;\r",
																			"    operationClientLtp = {};\r",
																			"    try {\r",
																			"        let clientLtpList;\r",
																			"        clientLtpList = serverLtp[\"client-ltp\"];\r",
																			"        let operationClientInstances;\r",
																			"        operationClientInstances = [];\r",
																			"        if(clientLtpList != undefined) {\r",
																			"            for ( let i=0; i<clientLtpList.length; i++ ) {\r",
																			"                for ( let j=0; j<ltpList.length; j++ ) {\r",
																			"                    if( ltpList[j][\"uuid\"].includes(\"-op-c-\") ) {\r",
																			"                        if( ltpList[j][\"uuid\"] == clientLtpList[i] ) {\r",
																			"                            operationClientInstances.push(ltpList[j]);\r",
																			"                            break;\r",
																			"                        }\r",
																			"                    }\r",
																			"                }\r",
																			"            }\r",
																			"            for( let i=0; i<operationClientInstances.length; i++ ) {\r",
																			"                let sampleOperationName;\r",
																			"                sampleOperationName = operationClientInstances[i][\"layer-protocol\"][0][\"operation-client-interface-1-0:operation-client-interface-pac\"][\"operation-client-interface-configuration\"][\"operation-name\"];\r",
																			"                if(sampleOperationName.includes(operationName)) {\r",
																			"                    operationClientLtp = operationClientInstances[i];\r",
																			"                    return operationClientLtp;\r",
																			"                }\r",
																			"            }\r",
																			"        }\r",
																			"    } catch(error) {\r",
																			"        console.log(error);\r",
																			"        console.log(\"! Exception in function : FindOperationClientLtp. \")\r",
																			"    }\r",
																			"    return operationClientLtp;\r",
																			"}\r",
																			"\r",
																			"function FindOutputFcPortList(forwardingName, fcList) {\r",
																			"    let outputFcPortList;\r",
																			"    outputFcPortList = [];\r",
																			"    try {\r",
																			"        for( let i=0; i<fcList.length; i++ ) {\r",
																			"            for(let j=0; j<fcList[i][\"name\"].length; j++) {               \r",
																			"                if(fcList[i][\"name\"][j][\"value\"] == forwardingName) {\r",
																			"                    fcPortList = fcList[i][\"fc-port\"];\r",
																			"                    for(let k=0;k<fcPortList.length;k++) {\r",
																			"                        if(fcPortList[k][\"port-direction\"] == \"core-model-1-4:PORT_DIRECTION_TYPE_OUTPUT\") {\r",
																			"                            outputFcPortList.push(fcPortList[k]);\r",
																			"                        }\r",
																			"                    }\r",
																			"                    return outputFcPortList;\r",
																			"                }\r",
																			"            }\r",
																			"        }\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																			"    }\r",
																			"    return outputFcPortList;\r",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "GET",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "200",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Expected  /v1/disregard-application",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"var OPERATION_KEY;\r",
																			"var dummyApplicationName;\r",
																			"var dummyReleaseNumber;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"    let currentOperationServer;\r",
																			"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																			"    \r",
																			"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																			"\r",
																			"    dummyApplicationName = pm.collectionVariables.get(\"dummyApplicationName\");\r",
																			"    dummyReleaseNumber = pm.collectionVariables.get(\"dummyReleaseNumber\");\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Input Data could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Dummy Parameters\r",
																			"****************************************************************************************/\r",
																			"var USER_NAME;\r",
																			"var ORIGINATOR;\r",
																			"var X_CORRELATOR;\r",
																			"var TRACE_INDICATOR;\r",
																			"var CUSTOMER_JOURNEY;\r",
																			"try {\r",
																			"    USER_NAME = APPLICATION.userName;\r",
																			"    ORIGINATOR = \"Postman\";\r",
																			"    X_CORRELATOR = CreateXCorrelator();\r",
																			"    TRACE_INDICATOR = \"1\";\r",
																			"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																			"    \r",
																			"} catch (error) {\r",
																			"    console.log(\"! Could not define dummy values for parameters. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Request Body\r",
																			"****************************************************************************************/\r",
																			"var REQUEST_BODY;\r",
																			"try {\r",
																			"    REQUEST_BODY = '{'\r",
																			"        + '\"application-name\" : ' + '\"' + dummyApplicationName + '\",'\r",
																			"        + '\"release-number\" : ' + '\"' + dummyReleaseNumber + '\"'\r",
																			"    +'}';\r",
																			"} catch (error) {\r",
																			"    console.log(\"!Could not define request body. \");\r",
																			"}\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + \"/v1/disregard-application\";\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																			"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																			"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																			"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																			"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"function CreateXCorrelator() {\r",
																			"    let xCorrelator;\r",
																			"    xCorrelator = \"\";\r",
																			"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(12);\r",
																			"    return xCorrelator;\r",
																			"}\r",
																			"\r",
																			"function GenerateRandomHexString(length) {\r",
																			"    var randomRandomHexString = \"\";\r",
																			"    while (randomRandomHexString.length < length) {\r",
																			"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																			"    }\r",
																			"    return randomRandomHexString.substring(0,length);\r",
																			"}\r",
																			"\r",
																			"function GenerateRandomString(length) {\r",
																			"    let randomString;\r",
																			"    randomString = \"\";\r",
																			"    try {\r",
																			"        let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r",
																			"        let charactersLength = characters.length;\r",
																			"        for (let i = 0; i < length; i++) {\r",
																			"            randomString += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																			"        }\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Could not generate random string. \");\r",
																			"    }\r",
																			"    return randomString;\r",
																			"}\r",
																			"\r",
																			"function RandomReleaseNumber() {\r",
																			"    let releaseNumber;\r",
																			"    let releaseNumberParts = [];\r",
																			"    for  (let i=0; i<3 ; i++) {\r",
																			"        releaseNumberParts[i] = Math.floor(Math.random() * 10);\r",
																			"    }\r",
																			"    releaseNumber = releaseNumberParts[0] + \".\" + releaseNumberParts[1] + \".\" + releaseNumberParts[2];\r",
																			"    return releaseNumber;\r",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var RESPONSE_CODE;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"\r",
																			"    RESPONSE_CODE = parseInt(response.code);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Response Code could not be extracted.\");\r",
																			"}    \r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Testing\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.test(\"POST /v1/disregard-application responds 204\", function () {\r",
																			"        pm.expect(RESPONSE_CODE).to.equal(204);\r",
																			"    });\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Testing could not be executed.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "204",
																		"type": "default"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Expected /core-model-1-4:control-construct",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Environment variables could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																			"\r",
																			"    let REQUEST_BODY;\r",
																			"    REQUEST_BODY = \"\";\r",
																			"\r",
																			"    let AUTHORIZATION;\r",
																			"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var expectedFcPortLocalId;\r",
																			"try {\r",
																			"    let expectedOutputFcPort;\r",
																			"    expectedOutputFcPort = pm.collectionVariables.get(\"expectedOutputFcPort\");\r",
																			"    expectedFcPortLocalId = expectedOutputFcPort[\"local-id\"];\r",
																			"   \r",
																			"} catch(error) {\r",
																			"    console.log(\"! Could not load input data. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var fcList;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"    \r",
																			"    let responseCode;\r",
																			"    responseCode = parseInt(response.code);\r",
																			"    \r",
																			"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																			"        let responseObject;\r",
																			"        responseObject = JSON.parse(response.stream);\r",
																			"        fcList = responseObject[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
																			"\r",
																			"    } else {\r",
																			"        fcList = [];\r",
																			"    }\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! ltpList could not be extracted.\");\r",
																			"}\r",
																			"var expectedOutputFcPortEntryFound;\r",
																			"try {\r",
																			"    let actualFcPortList;\r",
																			"    actualFcPortList = FindOutputFcPortList(\"NewApplicationCausesRequestForInquiringOamRequestApprovals\", fcList);\r",
																			"\r",
																			"    let actualFcPortLocalIds;\r",
																			"    actualFcPortLocalIds = [];\r",
																			"    for(let i=0; i<actualFcPortList.length; i++) {\r",
																			"        actualFcPortLocalIds.push(actualFcPortList[i][\"local-id\"]);\r",
																			"    }\r",
																			"    if(actualFcPortLocalIds.includes(expectedFcPortLocalId)) {\r",
																			"        expectedOutputFcPortEntryFound = true;\r",
																			"    } else {\r",
																			"        expectedOutputFcPortEntryFound = false;\r",
																			"    }\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Reference objects could not be extracted.\");\r",
																			"} \r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Testing\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.test(\"As expected, the application has been disregarded: \", function () {\r",
																			"        pm.expect(expectedOutputFcPortEntryFound).to.equal(false);\r",
																			"    });\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Testing could not be executed.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"function FindOutputFcPortList(forwardingName, fcList) {\r",
																			"    let outputFcPortList;\r",
																			"    outputFcPortList = [];\r",
																			"    try {\r",
																			"        for( let i=0; i<fcList.length; i++ ) {\r",
																			"            for(let j=0; j<fcList[i][\"name\"].length; j++) {               \r",
																			"                if(fcList[i][\"name\"][j][\"value\"] == forwardingName) {\r",
																			"                    fcPortList = fcList[i][\"fc-port\"];\r",
																			"                    for(let k=0;k<fcPortList.length;k++) {\r",
																			"                        if(fcPortList[k][\"port-direction\"] == \"core-model-1-4:PORT_DIRECTION_TYPE_OUTPUT\") {\r",
																			"                            outputFcPortList.push(fcPortList[k]);\r",
																			"                        }\r",
																			"                    }\r",
																			"                    return outputFcPortList;\r",
																			"                }\r",
																			"            }\r",
																			"        }\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																			"    }\r",
																			"    return outputFcPortList;\r",
																			"}\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "GET",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "200",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Check /core-model-1-4:control-construct",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"var AUTHORIZATION;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																			"\r",
																			"    oamPath = \"/core-model-1-4:control-construct\";\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Environment variables could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Request Body\r",
																			"****************************************************************************************/\r",
																			"var REQUEST_BODY;\r",
																			"try {\r",
																			"    REQUEST_BODY = \"\";\r",
																			"} catch (error) {\r",
																			"    console.log(\"!Could not define request body. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + oamPath;\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var expectedLogicalTerminationPoint;\r",
																			"var expectedForwardingConstruct;\r",
																			"try {\r",
																			"    expectedLogicalTerminationPoint = pm.collectionVariables.get(\"ltpList\");\r",
																			"    expectedForwardingConstruct = pm.collectionVariables.get(\"fcList\");\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Collection variables could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var RESPONSE_CODE;\r",
																			"var RESPONSE;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"\r",
																			"    RESPONSE_CODE = parseInt(response.code);\r",
																			"\r",
																			"    if (Math.floor(RESPONSE_CODE / 100) === 2) {\r",
																			"        RESPONSE = JSON.parse(response.stream);\r",
																			"    } else {\r",
																			"        RESPONSE = [];\r",
																			"    }\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Result value lists could not be extracted.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Testing\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.test(\"GET /core-model-1-4:control-construct responds 200\", function () {\r",
																			"        pm.expect(RESPONSE_CODE).to.equal(200);\r",
																			"    });\r",
																			"\r",
																			"    let actualLtpList;\r",
																			"    actualLtpList = RESPONSE[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																			"\r",
																			"    pm.test(\"Received logical-termination-point is same as intial instance \", function () {\r",
																			"        pm.expect(actualLtpList).to.deep.equal(expectedLogicalTerminationPoint);\r",
																			"    });\r",
																			"\r",
																			"    let actualFcList;\r",
																			"    actualFcList = RESPONSE[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
																			"\r",
																			"    pm.test(\"Received forwarding-construct is same as intial instance \", function () {\r",
																			"        pm.expect(actualFcList).to.deep.equal(expectedForwardingConstruct);\r",
																			"    });\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Testing could not be executed.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "200",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														}
													],
													"description": "##Gets the fc-port deleted for changes in forwarding-construct\n\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for op-s of /v1/regard-application, storing operation-key\n  - searching CC for op-s of /v1/disregard-application, storing operation-key\n- POST /v1/regard-application with\n  - dummy values generated for application-name, release-number, address, protocol, port\n  - operation-key from above\n  - reasonable parameter\n- GET CC, search for op-c of inquire-oam-request-approvals, store the forwarding-construct.\n- POST /v1/disregard-application\n  - with attributes filled with random values\n  - operation-key from above\n\n#### Testing:\n- Checking for response code 204\n- Getting CC, \n  - searching for the forwarding-construct NewApplicationCausesRequestForInquiringOamRequestApprovals\n  - searching for OUTPUT fc-port for previously chosen uuid and logical-termination-point (entry should be absent)\n\n#### Clearing:\n- not applicable\n\n#### Clearance check:\n- Check if the logical-temination-point instance is the same as initial configuration\n- Check if the forwarding-construct is the same as initial value"
												}
											]
										},
										{
											"name": "Delete LTP and dependents notified?",
											"item": [
												{
													"name": "client delete",
													"item": [
														{
															"name": "reference /core-model-1-4:control-construct",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"console.log(\"\\n-----  /v1/disregard-application acceptance -- client delete notified to ALT? -------------------------------\");\r",
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Environment variables could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																			"\r",
																			"    let REQUEST_BODY;\r",
																			"    REQUEST_BODY = \"\";\r",
																			"\r",
																			"    let AUTHORIZATION;\r",
																			"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var ltpList;\r",
																			"var fcList;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"    \r",
																			"    let responseCode;\r",
																			"    responseCode = parseInt(response.code);\r",
																			"    \r",
																			"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																			"        let responseObject;\r",
																			"        responseObject = JSON.parse(response.stream);\r",
																			"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																			"        fcList = responseObject[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
																			"\r",
																			"    } else {\r",
																			"        ltpList = [];\r",
																			"        fcList = [];\r",
																			"    }\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! ltpList could not be extracted.\");\r",
																			"}\r",
																			"\r",
																			"var currentOperationServer;\r",
																			"var regardApplicationOperationServer;\r",
																			"var executionAndTraceLogHttpClientLtp;\r",
																			"var executionAndTraceLogTcpClientLtp;\r",
																			"var applicationLayerTopologyHttpClientLtp;\r",
																			"var deleteLtpAndDependentsOperationClientLtp;\r",
																			"try {\r",
																			"    currentOperationServer = FindOperationServer(\"/v1/disregard-application\", ltpList);\r",
																			"    regardApplicationOperationServer = FindOperationServer(\"/v1/regard-application\", ltpList);\r",
																			"\r",
																			"    //Execution And Trace Log    \r",
																			"    let recordServiceRequestOperationClientLtp = FindOperationClientUsingCallback(\"ServiceRequestCausesLoggingRequest\", fcList, ltpList)\r",
																			"    executionAndTraceLogHttpClientLtp = FindServingLtp(recordServiceRequestOperationClientLtp, ltpList);\r",
																			"    executionAndTraceLogTcpClientLtp = FindServingLtp(executionAndTraceLogHttpClientLtp, ltpList);\r",
																			"\r",
																			"    //Ltp Delete Request\r",
																			"    deleteLtpAndDependentsOperationClientLtp = FindOperationClientUsingCallback(\"ServiceRequestCausesLtpDeletionRequest\", fcList, ltpList)\r",
																			"    applicationLayerTopologyHttpClientLtp = FindServingLtp(deleteLtpAndDependentsOperationClientLtp, ltpList);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Reference objects could not be extracted.\");\r",
																			"} \r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.collectionVariables.clear();\r",
																			"    \r",
																			"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																			"    pm.collectionVariables.set(\"regardApplicationOperationServer\", regardApplicationOperationServer);\r",
																			"    pm.collectionVariables.set(\"executionAndTraceLogHttpClientLtp\", executionAndTraceLogHttpClientLtp);\r",
																			"    pm.collectionVariables.set(\"executionAndTraceLogTcpClientLtp\", executionAndTraceLogTcpClientLtp);\r",
																			"    pm.collectionVariables.set(\"applicationLayerTopologyHttpClientLtp\", applicationLayerTopologyHttpClientLtp);\r",
																			"    pm.collectionVariables.set(\"deleteLtpAndDependentsOperationClientLtp\", deleteLtpAndDependentsOperationClientLtp);\r",
																			"    pm.collectionVariables.set(\"ltpList\", ltpList);\r",
																			"    pm.collectionVariables.set(\"fcList\", fcList);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Collection variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"function FindOperationServer(operationName, ltpList) {\r",
																			"    let operationServer;\r",
																			"    operationServer = \"\";\r",
																			"    try {\r",
																			"        let sampleUuid;\r",
																			"        for(let i=0; i<ltpList.length; i++) {\r",
																			"            sampleUuid = ltpList[i][\"uuid\"];\r",
																			"            if(sampleUuid.includes(\"op-s-\")) {\r",
																			"                let sampleOperationName;\r",
																			"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																			"                if(sampleOperationName == operationName) {\r",
																			"                    operationServer = ltpList[i];\r",
																			"                    return operationServer;\r",
																			"                }\r",
																			"            }\r",
																			"        }\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																			"    }\r",
																			"    return operationServer;\r",
																			"}\r",
																			"\r",
																			"\r",
																			"function FindOperationClientLtp(serverLtp, ltpList, operationName) {\r",
																			"    let operationClientLtp;\r",
																			"    operationClientLtp = {};\r",
																			"    try {\r",
																			"        let clientLtpList;\r",
																			"        clientLtpList = serverLtp[\"client-ltp\"];\r",
																			"        let operationClientInstances;\r",
																			"        operationClientInstances = [];\r",
																			"        for ( let i=0; i<clientLtpList.length; i++ ) {\r",
																			"            for ( let j=0; j<ltpList.length; j++ ) {\r",
																			"                if( ltpList[j][\"uuid\"].includes(\"-op-c-\") ) {\r",
																			"                    if( ltpList[j][\"uuid\"] == clientLtpList[i] ) {\r",
																			"                        operationClientInstances.push(ltpList[j]);\r",
																			"                        break;\r",
																			"                    }\r",
																			"                }\r",
																			"            }\r",
																			"        }\r",
																			"        for( let i=0; i<operationClientInstances.length; i++ ) {\r",
																			"            let sampleOperationName;\r",
																			"            sampleOperationName = operationClientInstances[i][\"layer-protocol\"][0][\"operation-client-interface-1-0:operation-client-interface-pac\"][\"operation-client-interface-configuration\"][\"operation-name\"];\r",
																			"            if(sampleOperationName.includes(operationName)) {\r",
																			"                operationClientLtp = operationClientInstances[i];\r",
																			"                return operationClientLtp;\r",
																			"            }\r",
																			"        }\r",
																			"    } catch(error) {\r",
																			"        console.log(error);\r",
																			"        console.log(\"! Exception in function : FindOperationClientLtp. \")\r",
																			"    }\r",
																			"    return operationClientLtp;\r",
																			"}\r",
																			"\r",
																			"\r",
																			"function FindOutputFcPortList(forwardingName, fcList) {\r",
																			"    let outputFcPortList;\r",
																			"    outputFcPortList = [];\r",
																			"    try {\r",
																			"        for( let i=0; i<fcList.length; i++ ) {\r",
																			"            for(let j=0; j<fcList[i][\"name\"].length; j++) {               \r",
																			"                if(fcList[i][\"name\"][j][\"value\"] == forwardingName) {\r",
																			"                    fcPortList = fcList[i][\"fc-port\"];\r",
																			"                    for(let k=0;k<fcPortList.length;k++) {\r",
																			"                        if(fcPortList[k][\"port-direction\"] == \"core-model-1-4:PORT_DIRECTION_TYPE_OUTPUT\") {\r",
																			"                            outputFcPortList.push(fcPortList[k]);\r",
																			"                        }\r",
																			"                    }\r",
																			"                    return outputFcPortList;\r",
																			"                }\r",
																			"            }\r",
																			"        }\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																			"    }\r",
																			"    return outputFcPortList;\r",
																			"}\r",
																			"\r",
																			"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
																			"    let actualInstance;\r",
																			"    actualInstance = {};\r",
																			"    try {\r",
																			"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
																			"            let sampleUuid;\r",
																			"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
																			"            if( sampleUuid == expectedUuid ) {\r",
																			"                actualInstance = actualLtpList[i];\r",
																			"                return actualInstance;\r",
																			"            }\r",
																			"        }\r",
																			"\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																			"    }\r",
																			"    return undefined;\r",
																			"}\r",
																			"\r",
																			"function FindServingLtp(clientLtp, ltpList) {\r",
																			"    let servingLtp;\r",
																			"    servingLtp = {};\r",
																			"    try{\r",
																			"        let serverLtpUuid;\r",
																			"        serverLtpUuid = clientLtp[\"server-ltp\"][0];\r",
																			"        for( let i=0; i<ltpList.length; i++ ) {\r",
																			"            let sampleUuid;\r",
																			"            sampleUuid = ltpList[i][\"uuid\"];\r",
																			"            if( sampleUuid == serverLtpUuid ) {\r",
																			"                servingLtp = ltpList[i];\r",
																			"                return servingLtp;\r",
																			"            }\r",
																			"        }\r",
																			"    } catch(error) {\r",
																			"        console.log(error);\r",
																			"        console.log(\"! Exception in function : FindServingLtp. \")\r",
																			"    }\r",
																			"    return servingLtp;\r",
																			"}\r",
																			"\r",
																			"function FindOperationClientUsingCallback(callback, fcList, ltpList) {\r",
																			"    let operationClientLtp\r",
																			"    try {\r",
																			"        let outputFcPortList = FindOutputFcPortList(callback, fcList);\r",
																			"        let randomOutputFcPort = outputFcPortList[Math.floor(Math.random() * outputFcPortList.length)];\r",
																			"        let outputLtpUuid = randomOutputFcPort[\"logical-termination-point\"];\r",
																			"        operationClientLtp = FindActualInstanceByUuid(outputLtpUuid, ltpList);\r",
																			"    } catch (error) {\r",
																			"        console.log(error);\r",
																			"        console.log(\"! Exception in function FindOperationClientUsingCallback. \");\r",
																			"    }\r",
																			"    return  operationClientLtp\r",
																			"}\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "GET",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "200",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "reference ExecutionAndTraceLog/core-model-1-4:control-construct",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"var AUTHORIZATION;\r",
																			"var applicationProtocol;\r",
																			"var applicationAddress;\r",
																			"var applicationPort;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"    let executionAndTraceLogTcpClientLtp;\r",
																			"    executionAndTraceLogTcpClientLtp = pm.collectionVariables.get(\"executionAndTraceLogTcpClientLtp\");\r",
																			"\r",
																			"    applicationProtocol = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																			"    applicationProtocol = applicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																			"    applicationAddress = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																			"    if(applicationAddress.hasOwnProperty(\"ip-address\")) {\r",
																			"        applicationAddress = applicationAddress[\"ip-address\"][\"ipv-4-address\"];\r",
																			"    } else {\r",
																			"        applicationAddress = applicationAddress[\"domain-name\"];\r",
																			"    }\r",
																			"    applicationPort = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																			" \r",
																			"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Environment variables could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Request Body\r",
																			"****************************************************************************************/\r",
																			"var REQUEST_BODY;\r",
																			"try {\r",
																			"    REQUEST_BODY = \"\";\r",
																			"} catch (error) {\r",
																			"    console.log(\"!Could not define request body. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = applicationProtocol + \"://\" + applicationAddress + \":\" + applicationPort + \"/core-model-1-4:control-construct\";\r",
																			"    //URI = \"http://9d098835-4e91-48f3-9761-04a82ff2843e.mock.pstmn.io\" + \"/core-model-1-4:control-construct\";\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var ltpList;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"    \r",
																			"    let responseCode;\r",
																			"    responseCode = parseInt(response.code);\r",
																			"    \r",
																			"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																			"        let responseObject;\r",
																			"        responseObject = JSON.parse(response.stream);\r",
																			"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																			"\r",
																			"    } else {\r",
																			"        ltpList = [];\r",
																			"    }\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! ltpList could not be extracted.\");\r",
																			"}\r",
																			"\r",
																			"var listRecordsOfFlowOperationKey;\r",
																			"try {\r",
																			"    listRecordsOfFlowOperationKey = FindOperationKeyForOperationName(\"/v1/list-records-of-flow\", ltpList);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Reference objects could not be extracted.\");\r",
																			"} \r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.collectionVariables.set(\"listRecordsOfFlowOperationKey\", listRecordsOfFlowOperationKey);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Collection variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"function FindOperationKeyForOperationName(operationName, ltpList) {\r",
																			"    let operationKey;\r",
																			"    operationKey = \"\";\r",
																			"    try {\r",
																			"         let sampleUuid;\r",
																			"         for ( let i=0; i<ltpList.length; i++) {\r",
																			"            sampleUuid = ltpList[i][\"uuid\"];\r",
																			"            if(sampleUuid.includes(\"op-s-\")){\r",
																			"                let sampleOperationName;\r",
																			"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																			"                if(sampleOperationName == operationName) {\r",
																			"                    operationKey = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																			"                    return operationKey; \r",
																			"                }\r",
																			"            }\r",
																			"         }\r",
																			"\r",
																			"    } catch (error) {\r",
																			"        console.log(\" ! Exception in function : FindOperationKeyForOperationName\")\r",
																			"    }\r",
																			"    return operationKey;\r",
																			"}\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "200",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Dummy /v1/regard-application - application created?",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"var OPERATION_KEY;\r",
																			"var CURRENT_ORIGINATOR;\r",
																			"var dummyApplicationName;\r",
																			"var dummyReleaseNumber;\r",
																			"var dummyProtocol;\r",
																			"var dummyAddress;\r",
																			"var dummyPort;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"    let ltpList;\r",
																			"    ltpList = APPLICATION[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																			"\r",
																			"    CURRENT_ORIGINATOR = FindHttpServerApplicationName(ltpList);\r",
																			"\r",
																			"    let currentOperationServer;\r",
																			"    currentOperationServer = pm.collectionVariables.get(\"regardApplicationOperationServer\");\r",
																			"    \r",
																			"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																			"\r",
																			"    dummyApplicationName = GenerateRandomString(12);\r",
																			"    dummyReleaseNumber = RandomReleaseNumber();\r",
																			"    dummyProtocol = RandomProtocol()\r",
																			"    dummyIpv4Address = RandomIpAddress();\r",
																			"    dummyAddress = {\r",
																			"        \"ip-address\": {\r",
																			"            \"ipv-4-address\": dummyIpv4Address\r",
																			"        }\r",
																			"    };\r",
																			"    dummyPort = RandomTcpPort();\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Input Data could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Dummy Parameters\r",
																			"****************************************************************************************/\r",
																			"var USER_NAME;\r",
																			"var ORIGINATOR;\r",
																			"var X_CORRELATOR;\r",
																			"var TRACE_INDICATOR;\r",
																			"var CUSTOMER_JOURNEY;\r",
																			"try {\r",
																			"    USER_NAME = APPLICATION.userName;\r",
																			"    ORIGINATOR = \"Postman\";\r",
																			"    X_CORRELATOR = CreateXCorrelator();\r",
																			"    TRACE_INDICATOR = \"1\";\r",
																			"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																			"    \r",
																			"} catch (error) {\r",
																			"    console.log(\"! Could not define dummy values for parameters. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Request Body\r",
																			"****************************************************************************************/\r",
																			"var REQUEST_BODY;\r",
																			"try {\r",
																			"    REQUEST_BODY = '{'\r",
																			"        + '\"application-name\" : ' + '\"' + dummyApplicationName + '\",'\r",
																			"        + '\"release-number\" : ' + '\"' + dummyReleaseNumber + '\",'\r",
																			"        + '\"protocol\" : ' + '\"' + dummyProtocol + '\",'\r",
																			"        + '\"address\" : ' + JSON.stringify(dummyAddress) + ','\r",
																			"        + '\"port\" : ' +  dummyPort\r",
																			"    +'}';\r",
																			"} catch (error) {\r",
																			"    console.log(\"!Could not define request body. \");\r",
																			"}\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.collectionVariables.set(\"user\", USER_NAME);\r",
																			"    pm.collectionVariables.set(\"originator\", ORIGINATOR);\r",
																			"    pm.collectionVariables.set(\"xCorrelator\", X_CORRELATOR);\r",
																			"    pm.collectionVariables.set(\"traceIndicator\", TRACE_INDICATOR);\r",
																			"    pm.collectionVariables.set(\"customerJourney\", CUSTOMER_JOURNEY);\r",
																			"    pm.collectionVariables.set(\"currentOriginator\", CURRENT_ORIGINATOR);\r",
																			"    \r",
																			"    pm.collectionVariables.set(\"dummyApplicationName\", dummyApplicationName);\r",
																			"    pm.collectionVariables.set(\"dummyReleaseNumber\", dummyReleaseNumber);\r",
																			"    pm.collectionVariables.set(\"dummyProtocol\", dummyProtocol);\r",
																			"    pm.collectionVariables.set(\"dummyAddress\", dummyAddress);\r",
																			"    pm.collectionVariables.set(\"dummyPort\", dummyPort);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Collection variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + \"/v1/regard-application\";\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																			"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																			"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																			"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																			"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"function CreateXCorrelator() {\r",
																			"    let xCorrelator;\r",
																			"    xCorrelator = \"\";\r",
																			"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(12);\r",
																			"    return xCorrelator;\r",
																			"}\r",
																			"\r",
																			"function GenerateRandomHexString(length) {\r",
																			"    var randomRandomHexString = \"\";\r",
																			"    while (randomRandomHexString.length < length) {\r",
																			"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																			"    }\r",
																			"    return randomRandomHexString.substring(0,length);\r",
																			"}\r",
																			"\r",
																			"function GenerateRandomString(length) {\r",
																			"    let randomString;\r",
																			"    randomString = \"\";\r",
																			"    try {\r",
																			"        let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r",
																			"        let charactersLength = characters.length;\r",
																			"        for (let i = 0; i < length; i++) {\r",
																			"            randomString += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																			"        }\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Could not generate random string. \");\r",
																			"    }\r",
																			"    return randomString;\r",
																			"}\r",
																			"\r",
																			"function RandomReleaseNumber() {\r",
																			"    let releaseNumber;\r",
																			"    let releaseNumberParts = [];\r",
																			"    for  (let i=0; i<3 ; i++) {\r",
																			"        releaseNumberParts[i] = Math.floor(Math.random() * 10);\r",
																			"    }\r",
																			"    releaseNumber = releaseNumberParts[0] + \".\" + releaseNumberParts[1] + \".\" + releaseNumberParts[2];\r",
																			"    return releaseNumber;\r",
																			"}\r",
																			"\r",
																			"function RandomIpAddress() {\r",
																			"    let randomAddress\r",
																			"    let addressParts = [];\r",
																			"    for ( let i=0; i<4; i++ ) {\r",
																			"        addressParts[i] = String(Math.floor(Math.random() * 256));\r",
																			"    }\r",
																			"    randomAddress = addressParts[0] + \".\" + addressParts[1] + \".\" + addressParts[2] + \".\" + addressParts[3];\r",
																			"    return randomAddress;\r",
																			"}\r",
																			"\r",
																			"function RandomTcpPort() {\r",
																			"    let randomPort;\r",
																			"    randomPort = 2000 + Math.floor( Math.random() * 1000 );\r",
																			"    return randomPort;\r",
																			"}\r",
																			"\r",
																			"function FindHttpServerApplicationName(ltpList) {\r",
																			"    let applicationName;\r",
																			"    applicationName = \"\";\r",
																			"    for( let i=0; i<ltpList.length; i++ ) {\r",
																			"        let sampleUuid;\r",
																			"        sampleUuid = ltpList[i][\"uuid\"];\r",
																			"        if(sampleUuid.includes(\"http-s-\")) {\r",
																			"            applicationName = ltpList[i][\"layer-protocol\"][0][\"http-server-interface-1-0:http-server-interface-pac\"][\"http-server-interface-capability\"][\"application-name\"];\r",
																			"            return applicationName;\r",
																			"        }\r",
																			"    }\r",
																			"    return applicationName;\r",
																			"}\r",
																			"\r",
																			"function RandomProtocol() {\r",
																			"    let protocolList;\r",
																			"    protocolList = [  \"HTTP\", \"HTTPS\" ];\r",
																			"    let protocolIndex = Math.floor(Math.random() * protocolList.length);\r",
																			"    let randomProtocol = protocolList[protocolIndex]; \r",
																			"\r",
																			"    return randomProtocol;\r",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var RESPONSE_CODE;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"\r",
																			"    RESPONSE_CODE = parseInt(response.code);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Response Code could not be extracted.\");\r",
																			"}    \r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Testing\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.test(\"POST /v1/regard-application responds 204\", function () {\r",
																			"        pm.expect(RESPONSE_CODE).to.equal(204);\r",
																			"    });\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Testing could not be executed.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "204",
																		"type": "default"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Dummy /v1/disregard-application",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"var OPERATION_KEY;\r",
																			"var CURRENT_ORIGINATOR;\r",
																			"var dummyApplicationName;\r",
																			"var dummyReleaseNumber;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"    let ltpList;\r",
																			"    ltpList = APPLICATION[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																			"\r",
																			"    CURRENT_ORIGINATOR = FindHttpServerApplicationName(ltpList);\r",
																			"\r",
																			"    let currentOperationServer;\r",
																			"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																			"\r",
																			"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																			"\r",
																			"    dummyApplicationName = pm.collectionVariables.get(\"dummyApplicationName\");\r",
																			"    dummyReleaseNumber = pm.collectionVariables.get(\"dummyReleaseNumber\");\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Input Data could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Dummy Parameters\r",
																			"****************************************************************************************/\r",
																			"var USER_NAME;\r",
																			"var ORIGINATOR;\r",
																			"var X_CORRELATOR;\r",
																			"var TRACE_INDICATOR;\r",
																			"var CUSTOMER_JOURNEY;\r",
																			"try {\r",
																			"    USER_NAME = APPLICATION.userName;\r",
																			"    ORIGINATOR = \"Postman\";\r",
																			"    X_CORRELATOR = CreateXCorrelator();\r",
																			"    TRACE_INDICATOR = \"1\";\r",
																			"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Could not define dummy values for parameters. \");\r",
																			"}\r",
																			"setTimeout(function () { }, 3000);\r",
																			"/****************************************************************************************\r",
																			"* Defining Request Body\r",
																			"****************************************************************************************/\r",
																			"var REQUEST_BODY;\r",
																			"try {\r",
																			"    REQUEST_BODY = '{'\r",
																			"        + '\"application-name\" : ' + '\"' + dummyApplicationName + '\",'\r",
																			"        + '\"release-number\" : ' + '\"' + dummyReleaseNumber + '\"'\r",
																			"        + '}';\r",
																			"} catch (error) {\r",
																			"    console.log(\"!Could not define request body. \");\r",
																			"}\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.collectionVariables.set(\"user\", USER_NAME);\r",
																			"    pm.collectionVariables.set(\"originator\", ORIGINATOR);\r",
																			"    pm.collectionVariables.set(\"xCorrelator\", X_CORRELATOR);\r",
																			"    pm.collectionVariables.set(\"traceIndicator\", TRACE_INDICATOR);\r",
																			"    pm.collectionVariables.set(\"customerJourney\", CUSTOMER_JOURNEY);\r",
																			"    pm.collectionVariables.set(\"currentOriginator\", CURRENT_ORIGINATOR);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Collection variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + \"/v1/disregard-application\";\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({ key: \"operation-key\", value: OPERATION_KEY });\r",
																			"\r",
																			"    pm.request.headers.upsert({ key: \"user\", value: USER_NAME });\r",
																			"    pm.request.headers.upsert({ key: \"originator\", value: ORIGINATOR });\r",
																			"    pm.request.headers.upsert({ key: \"x-correlator\", value: X_CORRELATOR });\r",
																			"    pm.request.headers.upsert({ key: \"trace-indicator\", value: TRACE_INDICATOR });\r",
																			"    pm.request.headers.upsert({ key: \"customer-journey\", value: CUSTOMER_JOURNEY });\r",
																			"\r",
																			"    pm.request.headers.upsert({ key: \"Accept\", value: ACCEPT });\r",
																			"    pm.request.headers.upsert({ key: \"Content-Type\", value: CONTENT_TYPE });\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"function CreateXCorrelator() {\r",
																			"    let xCorrelator;\r",
																			"    xCorrelator = \"\";\r",
																			"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(12);\r",
																			"    return xCorrelator;\r",
																			"}\r",
																			"\r",
																			"function GenerateRandomHexString(length) {\r",
																			"    var randomRandomHexString = \"\";\r",
																			"    while (randomRandomHexString.length < length) {\r",
																			"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																			"    }\r",
																			"    return randomRandomHexString.substring(0, length);\r",
																			"}\r",
																			"\r",
																			"function GenerateRandomString(length) {\r",
																			"    let randomString;\r",
																			"    randomString = \"\";\r",
																			"    try {\r",
																			"        let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r",
																			"        let charactersLength = characters.length;\r",
																			"        for (let i = 0; i < length; i++) {\r",
																			"            randomString += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																			"        }\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Could not generate random string. \");\r",
																			"    }\r",
																			"    return randomString;\r",
																			"}\r",
																			"\r",
																			"function RandomReleaseNumber() {\r",
																			"    let releaseNumber;\r",
																			"    let releaseNumberParts = [];\r",
																			"    for (let i = 0; i < 3; i++) {\r",
																			"        releaseNumberParts[i] = Math.floor(Math.random() * 10);\r",
																			"    }\r",
																			"    releaseNumber = releaseNumberParts[0] + \".\" + releaseNumberParts[1] + \".\" + releaseNumberParts[2];\r",
																			"    return releaseNumber;\r",
																			"}\r",
																			"\r",
																			"function FindHttpServerApplicationName(ltpList) {\r",
																			"    let applicationName;\r",
																			"    applicationName = \"\";\r",
																			"    for( let i=0; i<ltpList.length; i++ ) {\r",
																			"        let sampleUuid;\r",
																			"        sampleUuid = ltpList[i][\"uuid\"];\r",
																			"        if(sampleUuid.includes(\"http-s-\")) {\r",
																			"            applicationName = ltpList[i][\"layer-protocol\"][0][\"http-server-interface-1-0:http-server-interface-pac\"][\"http-server-interface-capability\"][\"application-name\"];\r",
																			"            return applicationName;\r",
																			"        }\r",
																			"    }\r",
																			"    return applicationName;\r",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var RESPONSE_CODE;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"\r",
																			"    RESPONSE_CODE = parseInt(response.code);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Response Code could not be extracted.\");\r",
																			"}    \r",
																			"\r",
																			"const currentCount = 0;\r",
																			"try {\r",
																			"\tpm.collectionVariables.set(\"currentCount\", currentCount);\r",
																			"\r",
																			"} catch(error) {\r",
																			"    console.log(\" !Could not set currentCount. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Testing\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.test(\"POST /v1/disregard-application responds 204\", function () {\r",
																			"        pm.expect(RESPONSE_CODE).to.equal(204);\r",
																			"    });\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Testing could not be executed.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "POST",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "204",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Expected ExecutionAndTraceLog/v1/list-records-of-flow for /v1/disregard-application:: Delete LTP and dependents notified?",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"var OPERATION_KEY;\r",
																			"var applicationProtocol;\r",
																			"var applicationAddress;\r",
																			"var applicationPort;\r",
																			"var xCorrelatorUnderTest;\r",
																			"var latestMatch;\r",
																			"var numberOfRecords;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"    let executionAndTraceLogTcpClientLtp;\r",
																			"    executionAndTraceLogTcpClientLtp = pm.collectionVariables.get(\"executionAndTraceLogTcpClientLtp\");\r",
																			"    \r",
																			"    applicationProtocol = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																			"    applicationProtocol = applicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																			"    applicationAddress = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																			"    if(applicationAddress.hasOwnProperty(\"ip-address\")) {\r",
																			"        applicationAddress = applicationAddress[\"ip-address\"][\"ipv-4-address\"];\r",
																			"    } else {\r",
																			"        applicationAddress = applicationAddress[\"domain-name\"];\r",
																			"    }\r",
																			"    applicationPort = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																			"\r",
																			"    OPERATION_KEY = pm.collectionVariables.get(\"listRecordsOfFlowOperationKey\");\r",
																			"    xCorrelatorUnderTest = pm.collectionVariables.get(\"xCorrelator\");\r",
																			"    latestMatch = 0;\r",
																			"    numberOfRecords = 100;\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error)\r",
																			"    console.log(\"! Input Data could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Dummy Parameters\r",
																			"****************************************************************************************/\r",
																			"var USER_NAME;\r",
																			"var ORIGINATOR;\r",
																			"var X_CORRELATOR;\r",
																			"var TRACE_INDICATOR;\r",
																			"var CUSTOMER_JOURNEY;\r",
																			"try {\r",
																			"    USER_NAME = APPLICATION.userName;\r",
																			"    ORIGINATOR = \"Postman\";\r",
																			"    X_CORRELATOR = CreateXCorrelator();\r",
																			"    TRACE_INDICATOR = \"1\";\r",
																			"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																			"    \r",
																			"} catch (error) {\r",
																			"    console.log(\"! Could not define dummy values for parameters. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Request Body\r",
																			"****************************************************************************************/\r",
																			"var REQUEST_BODY;\r",
																			"try {\r",
																			"    REQUEST_BODY = '{'\r",
																			"                + '\"x-correlator\": \"' + xCorrelatorUnderTest +'\",'\r",
																			"                + '\"latest-match\": ' + latestMatch + ','\r",
																			"                + '\"number-of-records\":' + numberOfRecords\r",
																			"                + '}';\r",
																			"} catch (error) {\r",
																			"    console.log(\"!Could not define request body. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = applicationProtocol + \"://\" + applicationAddress + \":\" + applicationPort + \"/v1/list-records-of-flow\";\r",
																			"    //URI = \"http://9d098835-4e91-48f3-9761-04a82ff2843e.mock.pstmn.io/v1/list-records-of-flow\";\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																			"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																			"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																			"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																			"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"function CreateXCorrelator() {\r",
																			"    let xCorrelator;\r",
																			"    xCorrelator = \"\";\r",
																			"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(12);\r",
																			"    return xCorrelator;\r",
																			"}\r",
																			"\r",
																			"function GenerateRandomHexString(length) {\r",
																			"    var randomRandomHexString = \"\";\r",
																			"    while (randomRandomHexString.length < length) {\r",
																			"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																			"    }\r",
																			"    return randomRandomHexString.substring(0, length);\r",
																			"}\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Constant variables\r",
																			"****************************************************************************************/\r",
																			"const SERIAL_TRACE_INDICATOR = \".1\";\r",
																			"var retryMaxCount;\r",
																			"var retryWaitingPeriod;\r",
																			"var currentCount;\r",
																			"try {\r",
																			"    retryMaxCount = pm.environment.get(\"retryMaxCount\");\r",
																			"    retryWaitingPeriod = pm.environment.get(\"retryWaitingPeriod\");\r",
																			"    currentCount = pm.collectionVariables.get(\"currentCount\");\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Could not load constant variables Data. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var expectedXCorrelator;\r",
																			"var expectedUser;\r",
																			"var expectedOriginator;\r",
																			"var expectedTraceIndicator;\r",
																			"var expectedApplicationName;\r",
																			"var expectedReleaseNumber;\r",
																			"var expectedOperationName;\r",
																			"try {\r",
																			"    expectedXCorrelator = pm.collectionVariables.get(\"xCorrelator\");\r",
																			"    expectedUser = pm.collectionVariables.get(\"user\");\r",
																			"    expectedOriginator = pm.collectionVariables.get(\"currentOriginator\");\r",
																			"    expectedTraceIndicator = pm.collectionVariables.get(\"traceIndicator\");\r",
																			"    \r",
																			"    //Increment traceIndicator:\r",
																			"    expectedTraceIndicator = expectedTraceIndicator + SERIAL_TRACE_INDICATOR;\r",
																			"\r",
																			"    let expectedHttpClientLtp;\r",
																			"    expectedHttpClientLtp = pm.collectionVariables.get(\"applicationLayerTopologyHttpClientLtp\");\r",
																			"    expectedApplicationName = expectedHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																			"    expectedReleaseNumber = expectedHttpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																			"\r",
																			"    let expectedOperationClient;\r",
																			"    expectedOperationClient = pm.collectionVariables.get(\"deleteLtpAndDependentsOperationClientLtp\");\r",
																			"    expectedOperationName = expectedOperationClient[\"layer-protocol\"][0][\"operation-client-interface-1-0:operation-client-interface-pac\"][\"operation-client-interface-configuration\"][\"operation-name\"];\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Could not load Input Data. \");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var RESPONSE_CODE;\r",
																			"var serviceRecordList;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"    \r",
																			"    RESPONSE_CODE = parseInt(response.code);\r",
																			"\r",
																			"    if(Math.floor(RESPONSE_CODE/100) === 2) {\r",
																			"        serviceRecordList = JSON.parse(response.stream);\r",
																			"    }\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Response Code could not be extracted.\");\r",
																			"}    \r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Testing\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.test(\"POST ExecutionAndTraceLog/v1/list-records-of-flow responds 200\", function () {\r",
																			"        pm.expect(RESPONSE_CODE).to.equal(200);\r",
																			"    });\r",
																			"\r",
																			"    let foundAnEntryWithTheExpectedHeaderValuesInEatl;\r",
																			"    foundAnEntryWithTheExpectedHeaderValuesInEatl = false;\r",
																			"    let responseCodeofTriggeredForwarding;\r",
																			"    responseCodeofTriggeredForwarding = 0;\r",
																			"    for(let i=0; i<serviceRecordList.length; i++)  {\r",
																			"        if( serviceRecordList[i][\"application-name\"] == expectedApplicationName\r",
																			"                && serviceRecordList[i][\"release-number\"] == expectedReleaseNumber\r",
																			"                && serviceRecordList[i][\"operation-name\"] == expectedOperationName\r",
																			"                && serviceRecordList[i][\"x-correlator\"] == expectedXCorrelator\r",
																			"                && serviceRecordList[i][\"user\"] == expectedUser\r",
																			"                && serviceRecordList[i][\"originator\"] == expectedOriginator\r",
																			"                && serviceRecordList[i][\"trace-indicator\"] == expectedTraceIndicator ) {\r",
																			"\r",
																			"            foundAnEntryWithTheExpectedHeaderValuesInEatl = true;\r",
																			"            responseCodeofTriggeredForwarding =  serviceRecordList[i][\"response-code\"];\r",
																			"            break;\r",
																			"        }\r",
																			"    }\r",
																			"\r",
																			"    if (foundAnEntryWithTheExpectedHeaderValuesInEatl == false) {\r",
																			"        if( (currentCount < retryMaxCount) ) {\r",
																			"            setTimeout(()=>{\r",
																			"                postman.setNextRequest(request.name);\r",
																			"                currentCount = currentCount + 1;\r",
																			"                pm.collectionVariables.set(\"currentCount\", currentCount);\r",
																			"            }, retryWaitingPeriod);\r",
																			"        } else {\r",
																			"            pm.test(\"Delete in LTP-and-dependents is successfully notified to ALT\", function () {\r",
																			"                pm.expect(foundAnEntryWithTheExpectedHeaderValuesInEatl).to.be.true;        \r",
																			"            });\r",
																			"        }\r",
																			"    } else {\r",
																			"        pm.test(\"Delete in LTP-and-dependents is successfully notified to ALT with response-code 204\", function () {\r",
																			"            pm.expect(responseCodeofTriggeredForwarding).to.equal(204);    \r",
																			"        });\r",
																			"    }\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Testing could not be executed.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "200",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Check /core-model-1-4:control-construct",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"var AUTHORIZATION;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																			"\r",
																			"    oamPath = \"/core-model-1-4:control-construct\";\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Environment variables could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Request Body\r",
																			"****************************************************************************************/\r",
																			"var REQUEST_BODY;\r",
																			"try {\r",
																			"    REQUEST_BODY = \"\";\r",
																			"} catch (error) {\r",
																			"    console.log(\"!Could not define request body. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + oamPath;\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var expectedLogicalTerminationPoint;\r",
																			"var expectedForwardingConstruct;\r",
																			"try {\r",
																			"    expectedLogicalTerminationPoint = pm.collectionVariables.get(\"ltpList\");\r",
																			"    expectedForwardingConstruct = pm.collectionVariables.get(\"fcList\");\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Collection variables could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var RESPONSE_CODE;\r",
																			"var RESPONSE;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"\r",
																			"    RESPONSE_CODE = parseInt(response.code);\r",
																			"\r",
																			"    if (Math.floor(RESPONSE_CODE / 100) === 2) {\r",
																			"        RESPONSE = JSON.parse(response.stream);\r",
																			"    } else {\r",
																			"        RESPONSE = [];\r",
																			"    }\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Result value lists could not be extracted.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Testing\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.test(\"GET /core-model-1-4:control-construct responds 200\", function () {\r",
																			"        pm.expect(RESPONSE_CODE).to.equal(200);\r",
																			"    });\r",
																			"\r",
																			"    let actualLtpList;\r",
																			"    actualLtpList = RESPONSE[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																			"\r",
																			"    pm.test(\"Received logical-termination-point is same as intial instance \", function () {\r",
																			"        pm.expect(actualLtpList).to.deep.equal(expectedLogicalTerminationPoint);\r",
																			"    });\r",
																			"\r",
																			"    let actualFcList;\r",
																			"    actualFcList = RESPONSE[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
																			"\r",
																			"    pm.test(\"Received forwarding-construct is same as intial instance \", function () {\r",
																			"        pm.expect(actualFcList).to.deep.equal(expectedForwardingConstruct);\r",
																			"    });\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Testing could not be executed.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "200",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														}
													],
													"description": "##Gets disregard-application trigger delete-ltp-and-dependents to ALT?\n#### Requires:\n- ExecutionAndTraceLog/OamLog server to operate\n\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)   \n  - search CC for output fc-port of ServiceRequestCausesLoggingRequest, \nits corresponding op-c, http-c and tcp-c, storing them for later verification request.\n  - searching CC for output-fc-port of ServiceRequestCausesLtpDeletionRequest, its corresponding op-c, http-c, storing them.\n  - searching CC for op-s of /v1/regard-application and /v1/disregard-application, storing operation-key\n- GETting EaTL/CC (while using IP, protocol and port from above)\n  - searching CC for op-c of /v1/list-records-of-flow, storing operation-key\n- POST /v1/regard-application with\n  - dummy values generated for application-name, release-number, address, protocol, port\n  - operation-key from above\n  - reasonable parameter\n- POST /v1/disregard-application with  \n  - DummyApplicationName and DummyReleaseNumber \n  - all parameters with random DummyValues\n\n#### Testing:\n- POST ExecutionAndTraceLog/v1/list-records-of-flow with \n   - IP and port from above\n   - operation-key from above\n   - DummyValue of x-correlator\n   - checking response for entry with application data from ServiceRequestCausesLtpDeletionRequest\n   - checking same record for containing DummyXCorrelator &DummyTraceIndicator\n\n#### Clearing:\n- not applicable\n\n#### Clearance check:\n- Check if the logical-termination-point instance is the same as initial configuration\n- Check if the forwarding-construct instance is the same as initial configuration"
												}
											]
										}
									]
								},
								{
									"name": "Exit",
									"item": [
										{
											"name": "for exiting /v1/disregard-application",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var URI;\r",
															"try {\r",
															"    URI = pm.environment.get(\"dummyUri\");\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Loading Input Data failed.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Updating Environmental Variables and Determining the next Step\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    pm.variables.clear();\r",
															"\r",
															"    let REQUEST_BODY;\r",
															"    REQUEST_BODY = \"\";\r",
															"\r",
															"    let AUTHORIZATION;\r",
															"    AUTHORIZATION = \"\";\r",
															"\r",
															"    let OPERATION_KEY;\r",
															"    OPERATION_KEY = \"\";\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
															"    pm.request.headers.upsert({key:\"operationKey\", value:OPERATION_KEY});\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:\"application/json\"});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Setting Local Variables and Preparing the Request failed.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "/v1/list-applications",
							"item": [
								{
									"name": "Continuous Integration",
									"item": [
										{
											"name": "Service Idempotent?",
											"item": [
												{
													"name": "reference /core-model-1-4:control-construct",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n-----  /v1/list-applications integration -- is service idempotent? -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Environment variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY = \"\";\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var ltpList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    let responseCode;\r",
																	"    responseCode = parseInt(response.code);\r",
																	"    \r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        let responseObject;\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																	"\r",
																	"    } else {\r",
																	"        ltpList = [];\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! ltpList could not be extracted.\");\r",
																	"}\r",
																	"\r",
																	"var currentOperationServer;\r",
																	"try {\r",
																	"    currentOperationServer = FindOperationServer(\"/v1/list-applications\", ltpList);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Reference objects could not be extracted.\");\r",
																	"} \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.clear();\r",
																	"    \r",
																	"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function FindOperationServer(operationName, ltpList) {\r",
																	"    let operationServer;\r",
																	"    operationServer = \"\";\r",
																	"    try {\r",
																	"        let sampleUuid;\r",
																	"        for(let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"op-s-\")) {\r",
																	"                let sampleOperationName;\r",
																	"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																	"                if(sampleOperationName == operationName) {\r",
																	"                    operationServer = ltpList[i];\r",
																	"                    return operationServer;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																	"    }\r",
																	"    return operationServer;\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected  /v1/list-applications - service idempotent?",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"    \r",
																	"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = \"\";\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/list-applications\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"POST /v1/list-applications responds 200\", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(200);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"description": "## Is service idempotent?\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for op-s of /v1/list-applications, storing operation-key\n- POST /v1/list-applications\n   - operation-key from above\n   - reasonable parameters\n\n#### Testing:\n- checking for ResponseCode==200\n\n#### Clearing:\n- not applicable"
										},
										{
											"name": "request header parameter completeness",
											"item": [
												{
													"name": "reference /core-model-1-4:control-construct",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n-----  /v1/list-applications integration -- request headers parameters completeness -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Environment variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY = \"\";\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var ltpList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    let responseCode;\r",
																	"    responseCode = parseInt(response.code);\r",
																	"    \r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        let responseObject;\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																	"\r",
																	"    } else {\r",
																	"        ltpList = [];\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! ltpList could not be extracted.\");\r",
																	"}\r",
																	"\r",
																	"var currentOperationServer;\r",
																	"try {\r",
																	"    currentOperationServer = FindOperationServer(\"/v1/list-applications\", ltpList);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Reference objects could not be extracted.\");\r",
																	"} \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.clear();\r",
																	"    \r",
																	"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function FindOperationServer(operationName, ltpList) {\r",
																	"    let operationServer;\r",
																	"    operationServer = \"\";\r",
																	"    try {\r",
																	"        let sampleUuid;\r",
																	"        for(let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"op-s-\")) {\r",
																	"                let sampleOperationName;\r",
																	"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																	"                if(sampleOperationName == operationName) {\r",
																	"                    operationServer = ltpList[i];\r",
																	"                    return operationServer;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																	"    }\r",
																	"    return operationServer;\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected  /v1/list-applications- request header parameter completeness",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"    \r",
																	"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = \"\";\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/list-applications\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    let parameters;\r",
																	"    parameters = [\"user\", \"originator\", \"x-correlator\", \"trace-indicator\", \"customer-journey\"];\r",
																	"\r",
																	"    let missingParameter;\r",
																	"    missingParameter = GetMissingParameter(parameters);\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"    pm.request.headers.remove(missingParameter);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	"\r",
																	"function GetMissingParameter(parameters) {\r",
																	"    let missingParameter;\r",
																	"    missingParameter = parameters[Math.floor(Math.random()*parameters.length)];\r",
																	"    return missingParameter;\r",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"As expected, POST  /v1/list-applications responds 400, because of missing parameter\", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "400",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"description": "## Get parameters checked for completeness?\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for op-s of /v1/list-applications, storing operation-key\n- POST /v1/list-applications\n   - operation-key from above\n   - BUT one randomly chosen parameter (user, originator, x-correlator, trace-indicator or customer-journey) missing (not empty string!)\n\n#### Testing:\n- checking for ResponseCode == 400\n\n#### Clearing:\n- not applicable"
										},
										{
											"name": "originator parameter correctness",
											"item": [
												{
													"name": "reference /core-model-1-4:control-construct",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n-----  /v1/list-applications integration -- originator correctness check -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Environment variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY = \"\";\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var ltpList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    let responseCode;\r",
																	"    responseCode = parseInt(response.code);\r",
																	"    \r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        let responseObject;\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																	"\r",
																	"    } else {\r",
																	"        ltpList = [];\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! ltpList could not be extracted.\");\r",
																	"}\r",
																	"\r",
																	"var currentOperationServer;\r",
																	"try {\r",
																	"    currentOperationServer = FindOperationServer(\"/v1/list-applications\", ltpList);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Reference objects could not be extracted.\");\r",
																	"} \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.clear();\r",
																	"    \r",
																	"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function FindOperationServer(operationName, ltpList) {\r",
																	"    let operationServer;\r",
																	"    operationServer = \"\";\r",
																	"    try {\r",
																	"        let sampleUuid;\r",
																	"        for(let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"op-s-\")) {\r",
																	"                let sampleOperationName;\r",
																	"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																	"                if(sampleOperationName == operationName) {\r",
																	"                    operationServer = ltpList[i];\r",
																	"                    return operationServer;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																	"    }\r",
																	"    return operationServer;\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected  /v1/list-applications too short originator",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n----- originator parameter correctness check - length too short -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"    \r",
																	"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var FAULTY_ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    FAULTY_ORIGINATOR = GenerateFaultyOriginator();\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = \"\";\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/list-applications\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:FAULTY_ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"function GenerateFaultyOriginator() {\r",
																	"    let faultyOriginator;\r",
																	"    let length;\r",
																	"    let minLength;\r",
																	"    minLength = 0;\r",
																	"    let maxLength;\r",
																	"    maxLength = 2;\r",
																	"    length = Math.floor(Math.random() * maxLength) + minLength;\r",
																	"    faultyOriginator = GenerateRandomString(length);\r",
																	"    return faultyOriginator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomString(length) {\r",
																	"    let randomString;\r",
																	"    randomString = \"\";\r",
																	"    try {\r",
																	"        let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r",
																	"        let charactersLength = characters.length;\r",
																	"        for (let i = 0; i < length; i++) {\r",
																	"            randomString += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Could not generate random string. \");\r",
																	"    }\r",
																	"    return randomString;\r",
																	"}\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"As expected, POST /v1/list-applications responds 400, because of faulty originator parameter(too short string)\", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "400",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"description": "## Gets originator checked for compliance with specification?\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for op-s of /v1/list-applications, storing operation-key\n- POST /v1/list-applications\n    - all parameters with realistic values, \nBUT originator set to be a string of 0, 1 or 2 (random) letters length (too short).\n\n#### Testing:\n- checking for ResponseCode==400\n\n#### Clearing:\n- not applicable"
										},
										{
											"name": "x-correlator pattern",
											"item": [
												{
													"name": "reference /core-model-1-4:control-construct",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n----- /v1/list-applications integration -- x-correlator pattern correctness check -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Environment variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY = \"\";\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var ltpList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    let responseCode;\r",
																	"    responseCode = parseInt(response.code);\r",
																	"    \r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        let responseObject;\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																	"\r",
																	"    } else {\r",
																	"        ltpList = [];\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! ltpList could not be extracted.\");\r",
																	"}\r",
																	"\r",
																	"var currentOperationServer;\r",
																	"try {\r",
																	"    currentOperationServer = FindOperationServer(\"/v1/list-applications\", ltpList);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Reference objects could not be extracted.\");\r",
																	"} \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.clear();\r",
																	"    \r",
																	"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function FindOperationServer(operationName, ltpList) {\r",
																	"    let operationServer;\r",
																	"    operationServer = \"\";\r",
																	"    try {\r",
																	"        let sampleUuid;\r",
																	"        for(let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"op-s-\")) {\r",
																	"                let sampleOperationName;\r",
																	"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																	"                if(sampleOperationName == operationName) {\r",
																	"                    operationServer = ltpList[i];\r",
																	"                    return operationServer;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																	"    }\r",
																	"    return operationServer;\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected  /v1/list-applications with Too short x-correlator",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n----- x-correlator parameter correctness check - too short -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"    \r",
																	"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var FAULTY_X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    FAULTY_X_CORRELATOR = GenerateFaultyXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(error)\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = \"\";\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/list-applications\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:FAULTY_X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function GenerateFaultyXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"As expected, POST /v1/list-applications responds 400, because of too short x-correlator value \", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "400",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected  /v1/list-applications with Too long x-correlator",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n----- x-correlator parameter correctness check - too long -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"    \r",
																	"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var FAULTY_X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    FAULTY_X_CORRELATOR = GenerateFaultyXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(error)\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = \"\";\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/list-applications\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:FAULTY_X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function GenerateFaultyXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"As expected, POST /v1/list-applications responds 400, because of too long x-correlator value \", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "400",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected /v1/list-applications with incorrect characters count x-correlator",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n----- x-correlator parameter correctness check - incorrect characters count -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"    \r",
																	"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var FAULTY_X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    FAULTY_X_CORRELATOR = GenerateFaultyXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(error)\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = \"\";\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/list-applications\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:FAULTY_X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function GenerateFaultyXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"\r",
																	"    let faultyElementLength;\r",
																	"    faultyElementLength = Math.floor(Math.random() * 3) + 1;\r",
																	"    let faultyElement;\r",
																	"    faultyElement = GenerateRandomHexString(faultyElementLength);\r",
																	"\r",
																	"    let xCorrelatorParts;\r",
																	"    xCorrelatorParts = xCorrelator.split(\"-\");\r",
																	"    let faultyXCorrelatorPart;\r",
																	"    faultyXCorrelatorPart = Math.floor(Math.random() * xCorrelatorParts.length);\r",
																	"\r",
																	"    xCorrelatorParts[faultyXCorrelatorPart] = faultyElement;\r",
																	"    xCorrelator = xCorrelatorParts.join(\"-\");\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"As expected, POST /v1/list-applications responds 400, because of incorrect character count of x-correlator value \", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "400",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected  /v1/list-applications with incorrect separator x-correlator",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n----- x-correlator parameter correctness check - incorrect separator -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"    \r",
																	"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var FAULTY_X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    FAULTY_X_CORRELATOR = GenerateFaultyXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(error)\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = \"\";\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/list-applications\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:FAULTY_X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function GenerateFaultyXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"\r",
																	"    let separators;\r",
																	"    separators = \".:;/\";\r",
																	"    let separatorsLength;\r",
																	"    separatorsLength = separators.length;\r",
																	"\r",
																	"    let faultySeparator;\r",
																	"    faultySeparator = separators.charAt(Math.floor(Math.random() * separatorsLength));\r",
																	"\r",
																	"    xCorrelator += GenerateRandomHexString(8) + faultySeparator;\r",
																	"    xCorrelator += GenerateRandomHexString(4) + faultySeparator;\r",
																	"    xCorrelator += GenerateRandomHexString(4) + faultySeparator;\r",
																	"    xCorrelator += GenerateRandomHexString(4) + faultySeparator;\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"As expected, POST /v1/list-applications responds 400, because of incorrect separator in x-correlator value \", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "400",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"description": "## Gets x-correlator checked for complying the pattern?\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for op-s of /v1/list-applications, storing operation-key\n- POST /v1/list-applications\n   - operation-key from above\n   - reasonable parameters, BUT dummyXCorrelators differing from the pattern in various ways (e.g. empty string)\n\n#### Testing:\n- checking for ResponseCode==400\n\n#### Clearing:\n- not applicable"
										},
										{
											"name": "trace-indicator pattern",
											"item": [
												{
													"name": "reference /core-model-1-4:control-construct",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n----- /v1/list-applications integration -- trace-indicator pattern correctness check -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Environment variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY = \"\";\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var ltpList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    let responseCode;\r",
																	"    responseCode = parseInt(response.code);\r",
																	"    \r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        let responseObject;\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																	"\r",
																	"    } else {\r",
																	"        ltpList = [];\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! ltpList could not be extracted.\");\r",
																	"}\r",
																	"\r",
																	"var currentOperationServer;\r",
																	"try {\r",
																	"    currentOperationServer = FindOperationServer(\"/v1/list-applications\", ltpList);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Reference objects could not be extracted.\");\r",
																	"} \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.clear();\r",
																	"    \r",
																	"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function FindOperationServer(operationName, ltpList) {\r",
																	"    let operationServer;\r",
																	"    operationServer = \"\";\r",
																	"    try {\r",
																	"        let sampleUuid;\r",
																	"        for(let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"op-s-\")) {\r",
																	"                let sampleOperationName;\r",
																	"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																	"                if(sampleOperationName == operationName) {\r",
																	"                    operationServer = ltpList[i];\r",
																	"                    return operationServer;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																	"    }\r",
																	"    return operationServer;\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected  /v1/list-applications with letters in trace-indicator",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n----- trace-indicator parameter correctness check - presence of letters -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"    \r",
																	"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var FAULTY_TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    FAULTY_TRACE_INDICATOR = GenerateFaultyTraceIndicator();\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(error)\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = \"\";\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/list-applications\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:FAULTY_TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"function GenerateFaultyTraceIndicator() {\r",
																	"    let traceIndicator;\r",
																	"    traceIndicator = \"\";\r",
																	"\r",
																	"    let traceIndicatorParts;\r",
																	"    traceIndicatorParts = [];\r",
																	"    for(let i=0; i<3; i++) {\r",
																	"        traceIndicatorParts[i] = Math.floor(Math.random() * 10);\r",
																	"    }\r",
																	"    let characters;\r",
																	"    characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r",
																	"    let charactersLength;\r",
																	"    charactersLength = characters.length;\r",
																	"    let faultyElement;\r",
																	"    faultyElement = characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																	"\r",
																	"    let faultyTraceIndicatorPart;\r",
																	"    faultyTraceIndicatorPart = Math.floor(Math.random() * 3);\r",
																	"\r",
																	"    traceIndicatorParts[faultyTraceIndicatorPart] = faultyElement;\r",
																	"    traceIndicator = traceIndicatorParts.join(\".\");\r",
																	"\r",
																	"    return traceIndicator;\r",
																	"}\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"As expected, POST /v1/list-applications responds 400, because of presence of letters in trace-indicator value \", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "400",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected  /v1/list-applications with incorrect separator trace-indicator",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n----- trace-indicator parameter correctness check - incorrect separator -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"    \r",
																	"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var FAULTY_TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    FAULTY_TRACE_INDICATOR = GenerateFaultyTraceIndicator();\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(error)\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = \"\";\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/list-applications\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:FAULTY_TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"function GenerateFaultyTraceIndicator() {\r",
																	"    let traceIndicator;\r",
																	"    traceIndicator = \"\";\r",
																	"\r",
																	"    let traceIndicatorParts;\r",
																	"    traceIndicatorParts = [];\r",
																	"    for(let i=0; i<3; i++) {\r",
																	"        traceIndicatorParts[i] = Math.floor(Math.random() * 10);\r",
																	"    }\r",
																	"    let separators;\r",
																	"    separators = \"-:;/\";\r",
																	"    let separatorsLength;\r",
																	"    separatorsLength = separators.length;\r",
																	"\r",
																	"    let faultySeparator;\r",
																	"    faultySeparator = separators.charAt(Math.floor(Math.random() * separatorsLength));\r",
																	"\r",
																	"    traceIndicator = traceIndicatorParts.join(faultySeparator);\r",
																	"\r",
																	"    return traceIndicator;\r",
																	"}\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"As expected, POST /v1/list-applications responds 400, because of incorrect separator in trace-indicator value \", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "400",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"description": "## Gets trace-indicator checked for complying the pattern?\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for op-s of /v1/list-applications, storing operation-key\n- POST /v1/list-applications\n  - operation-key from above\n  - reasonable parameters, BUT dummyTraceIndicator differing from the pattern in various ways (e.g. empty string)\n\n#### Testing:\n- checking for ResponseCode==400\n\n#### Clearing:\n- not applicable"
										},
										{
											"name": "security key missing?",
											"item": [
												{
													"name": "Expected /v1/list-applications- security key missing?",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n----- /v1/list-applications integration -- security key missing? -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = \"\";\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/list-applications\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"As expected, POST /v1/list-applications responds 401, because of missing operation-key\", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(401);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "401",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"description": "## Gets security key checked for availability?\n#### Preparation:\n- POST /v1/list-applications\n  - reasonable parameters\n  - BUT operationKey parameter missing (does not mean empty string)\n\n#### Testing:\n- checking for ResponseCode==401\n\n#### Clearing:\n- not applicable"
										},
										{
											"name": "security key checked?",
											"item": [
												{
													"name": "Expected  /v1/list-applications - security key checked?",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n----- /v1/list-applications integration -- security key checked? -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = \"\";\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy security key\r",
																	"****************************************************************************************/\r",
																	"var FAULTY_OPERATION_KEY;\r",
																	"try {\r",
																	"    FAULTY_OPERATION_KEY = GenerateRandomHexString(32);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy value for operationKey. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/list-applications\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({ key: \"operation-key\", value: FAULTY_OPERATION_KEY });\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"As expected, POST /v1/list-applications responds 401, because of incorrect operation-key\", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(401);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "401",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"description": "## Gets security key checked for correctness?\n#### Preparation:\n- POST /v1/list-applications\n  - reasonable parameters\n  - BUT operationKey parameter with random dummy value\n\n#### Testing:\n- checking for ResponseCode==401\n\n#### Clearing:\n- not applicable"
										},
										{
											"name": "response header completeness",
											"item": [
												{
													"name": "reference /core-model-1-4:control-construct",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n----- /v1/list-applications integration -- response header completeness -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Environment variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY = \"\";\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var ltpList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    let responseCode;\r",
																	"    responseCode = parseInt(response.code);\r",
																	"    \r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        let responseObject;\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																	"\r",
																	"    } else {\r",
																	"        ltpList = [];\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! ltpList could not be extracted.\");\r",
																	"}\r",
																	"\r",
																	"var currentOperationServer;\r",
																	"try {\r",
																	"    currentOperationServer = FindOperationServer(\"/v1/list-applications\", ltpList);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Reference objects could not be extracted.\");\r",
																	"} \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.clear();\r",
																	"    \r",
																	"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function FindOperationServer(operationName, ltpList) {\r",
																	"    let operationServer;\r",
																	"    operationServer = \"\";\r",
																	"    try {\r",
																	"        let sampleUuid;\r",
																	"        for(let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"op-s-\")) {\r",
																	"                let sampleOperationName;\r",
																	"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																	"                if(sampleOperationName == operationName) {\r",
																	"                    operationServer = ltpList[i];\r",
																	"                    return operationServer;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																	"    }\r",
																	"    return operationServer;\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected  /v1/list-applications response header parameter completeness",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"    \r",
																	"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = \"\";\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/list-applications\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"var response;\r",
																	"try {\r",
																	"    response = pm.response;\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"POST /v1/list-applications responds 200\", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(200);\r",
																	"    });\r",
																	"    pm.test(\"Response headers contain 'x-correlator'\", function () {\r",
																	"        response.to.have.header(\"x-correlator\");\r",
																	"    });\r",
																	"    pm.test(\"Response headers contain 'exec-time'\", function () {\r",
																	"        response.to.have.header(\"exec-time\");\r",
																	"    });\r",
																	"    pm.test(\"Response headers contain 'backend-time'\", function () {\r",
																	"        response.to.have.header(\"backend-time\");\r",
																	"    });\r",
																	"    pm.test(\"Response headers contain 'life-cycle-state'\", function () {\r",
																	"        response.to.have.header(\"life-cycle-state\");\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"description": "## Contains response complete set of headers?\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for op-s of /v1/list-applications, storing operation-key\n- POST /v1/list-applications\n - operation-key from above\n  - reasonable parameters\n\n#### Testing:\n- checking for ResponseCode==200\n- checking for ResponseHeaders (x-correlator, exec-time, backend-time and life-cycle-state) being present and checking for correctness of type of each parameter.\n\n#### Clearing:\n- not applicable"
										},
										{
											"name": "x-correlator responded?",
											"item": [
												{
													"name": "reference /core-model-1-4:control-construct",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n----- /v1/list-applications integration -- x-correlator responded? -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Environment variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY = \"\";\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var ltpList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    let responseCode;\r",
																	"    responseCode = parseInt(response.code);\r",
																	"    \r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        let responseObject;\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																	"\r",
																	"    } else {\r",
																	"        ltpList = [];\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! ltpList could not be extracted.\");\r",
																	"}\r",
																	"\r",
																	"var currentOperationServer;\r",
																	"try {\r",
																	"    currentOperationServer = FindOperationServer(\"/v1/list-applications\", ltpList);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Reference objects could not be extracted.\");\r",
																	"} \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.clear();\r",
																	"    \r",
																	"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function FindOperationServer(operationName, ltpList) {\r",
																	"    let operationServer;\r",
																	"    operationServer = \"\";\r",
																	"    try {\r",
																	"        let sampleUuid;\r",
																	"        for(let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"op-s-\")) {\r",
																	"                let sampleOperationName;\r",
																	"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																	"                if(sampleOperationName == operationName) {\r",
																	"                    operationServer = ltpList[i];\r",
																	"                    return operationServer;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																	"    }\r",
																	"    return operationServer;\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected /v1/list-applications- correct x-correlator responded?",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"    \r",
																	"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = \"\";\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.set(\"user\", USER_NAME);\r",
																	"    pm.collectionVariables.set(\"originator\", ORIGINATOR);\r",
																	"    pm.collectionVariables.set(\"xCorrelator\", X_CORRELATOR);\r",
																	"    pm.collectionVariables.set(\"traceIndicator\", TRACE_INDICATOR);\r",
																	"    pm.collectionVariables.set(\"customerJourney\", CUSTOMER_JOURNEY);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/list-applications\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var expectedXCorrelator;\r",
																	"try {\r",
																	"    expectedXCorrelator = pm.collectionVariables.get(\"xCorrelator\");\r",
																	"   \r",
																	"} catch(error) {\r",
																	"    console.log(\"! Could not load input data. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"var actualXCorrelator;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"    let RESPONSE_HEADERS;\r",
																	"    RESPONSE_HEADERS = pm.response.headers;  \r",
																	"    \r",
																	"    actualXCorrelator = RESPONSE_HEADERS.get(\"x-correlator\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"POST /v1/list-applications responds 200\", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(200);\r",
																	"    });\r",
																	"    pm.test(\"Provides expected x-correlator: \" + expectedXCorrelator, function () {\r",
																	"        pm.expect(actualXCorrelator).to.equal(expectedXCorrelator);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"description": "## Is the initial x-correlator ín the response?\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for op-s of /v1/list-applications, storing operation-key\n- POST /v1/list-applications\n  - operation-key from above\n  - reasonable parameters\n\n#### Testing:\n- checking for ResponseCode==200\n- checking for response headers containing x-correlator==dummyXCorrelator\n\n#### Clearing:\n- not applicable"
										},
										{
											"name": "life-cycle-state responded?",
											"item": [
												{
													"name": "reference /core-model-1-4:control-construct",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n----- /v1/list-applications integration -- life-cycle-state responded? -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Environment variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY = \"\";\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var ltpList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    let responseCode;\r",
																	"    responseCode = parseInt(response.code);\r",
																	"    \r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        let responseObject;\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																	"\r",
																	"    } else {\r",
																	"        ltpList = [];\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! ltpList could not be extracted.\");\r",
																	"}\r",
																	"\r",
																	"var currentOperationServer;\r",
																	"try {\r",
																	"    currentOperationServer = FindOperationServer(\"/v1/list-applications\", ltpList);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Reference objects could not be extracted.\");\r",
																	"} \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.clear();\r",
																	"    \r",
																	"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function FindOperationServer(operationName, ltpList) {\r",
																	"    let operationServer;\r",
																	"    operationServer = \"\";\r",
																	"    try {\r",
																	"        let sampleUuid;\r",
																	"        for(let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"op-s-\")) {\r",
																	"                let sampleOperationName;\r",
																	"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																	"                if(sampleOperationName == operationName) {\r",
																	"                    operationServer = ltpList[i];\r",
																	"                    return operationServer;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																	"    }\r",
																	"    return operationServer;\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected  /v1/list-applications correct life-cycle-state responded?",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"var LIFE_CYCLE_STATE;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"    \r",
																	"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"\r",
																	"    let lifeCycleState;\r",
																	"    lifeCycleState = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"life-cycle-state\"];\r",
																	"    let prefixLength = ('operation-server-interface-1-0:LIFE_CYCLE_STATE_TYPE_').length;     \r",
																	"    LIFE_CYCLE_STATE = lifeCycleState.substring(prefixLength);\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = \"\";\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.set(\"expectedLifeCycleState\", LIFE_CYCLE_STATE);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/list-applications\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var expectedLifeCycleState;\r",
																	"try {\r",
																	"    expectedLifeCycleState = pm.collectionVariables.get(\"expectedLifeCycleState\");\r",
																	"   \r",
																	"} catch(error) {\r",
																	"    console.log(\"! Could not load input data. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"var actualLifeCycleState;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"    let RESPONSE_HEADERS;\r",
																	"    RESPONSE_HEADERS = pm.response.headers;  \r",
																	"    \r",
																	"    actualLifeCycleState = RESPONSE_HEADERS.get(\"life-cycle-state\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"POST /v1/list-applications responds 200\", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(200);\r",
																	"    });\r",
																	"    pm.test(\"Provides expected life-cycle-state: \" + expectedLifeCycleState, function () {\r",
																	"        pm.expect(actualLifeCycleState).to.equal(expectedLifeCycleState);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"description": "## Is the correct life-cycle-state ín the response?\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for op-s of /v1/list-applications, storing operation-key\n- POST /v1/list-applications\n  - operation-key from above\n  - reasonable parameters\"\n\n#### Testing:\n- checking for ResponseCode==200\n- checking for response headers containing life-cycle-state is equal to the value as present in the control-construct for /v1/list-applications/configuration/life-cycle-state\n\n#### Clearing:\n- not applicable"
										},
										{
											"name": "Request notified?",
											"item": [
												{
													"name": "reference /core-model-1-4:control-construct",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n----- /v1/list-applications integration -- request notified? -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Environment variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY = \"\";\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var ltpList;\r",
																	"var fcList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    let responseCode;\r",
																	"    responseCode = parseInt(response.code);\r",
																	"    \r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        let responseObject;\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																	"        fcList = responseObject[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
																	"\r",
																	"    } else {\r",
																	"        ltpList = [];\r",
																	"        fcList = [];\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! ltpList could not be extracted.\");\r",
																	"}\r",
																	"\r",
																	"var currentOperationServer;\r",
																	"var executionAndTraceLogHttpClientLtp;\r",
																	"var executionAndTraceLogTcpClientLtp;\r",
																	"var httpServerLtp;\r",
																	"try {\r",
																	"    currentOperationServer = FindOperationServer(\"/v1/list-applications\", ltpList);\r",
																	"        \r",
																	"    //Execution And Trace Log\r",
																	"    let recordServiceRequestOperationClientLtp = FindOperationClientUsingCallback(\"ServiceRequestCausesLoggingRequest\", fcList, ltpList)\r",
																	"    executionAndTraceLogHttpClientLtp = FindServingLtp(recordServiceRequestOperationClientLtp, ltpList);\r",
																	"    executionAndTraceLogTcpClientLtp = FindServingLtp(executionAndTraceLogHttpClientLtp, ltpList);\r",
																	"\r",
																	"    httpServerLtp = FindHttpServerLtp(ltpList);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Reference objects could not be extracted.\");\r",
																	"} \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.clear();\r",
																	"    \r",
																	"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																	"    pm.collectionVariables.set(\"executionAndTraceLogHttpClientLtp\", executionAndTraceLogHttpClientLtp);\r",
																	"    pm.collectionVariables.set(\"executionAndTraceLogTcpClientLtp\", executionAndTraceLogTcpClientLtp);\r",
																	"    pm.collectionVariables.set(\"httpServerLtp\", httpServerLtp);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function FindOperationServer(operationName, ltpList) {\r",
																	"    let operationServer;\r",
																	"    operationServer = \"\";\r",
																	"    try {\r",
																	"        let sampleUuid;\r",
																	"        for(let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"op-s-\")) {\r",
																	"                let sampleOperationName;\r",
																	"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																	"                if(sampleOperationName == operationName) {\r",
																	"                    operationServer = ltpList[i];\r",
																	"                    return operationServer;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																	"    }\r",
																	"    return operationServer;\r",
																	"}\r",
																	"\r",
																	"\r",
																	"function FindOutputFcPortList(forwardingName, fcList) {\r",
																	"    let outputFcPortList;\r",
																	"    outputFcPortList = [];\r",
																	"    try {\r",
																	"        for( let i=0; i<fcList.length; i++ ) {\r",
																	"            for(let j=0; j<fcList[i][\"name\"].length; j++) {               \r",
																	"                if(fcList[i][\"name\"][j][\"value\"] == forwardingName) {\r",
																	"                    fcPortList = fcList[i][\"fc-port\"];\r",
																	"                    for(let k=0;k<fcPortList.length;k++) {\r",
																	"                        if(fcPortList[k][\"port-direction\"] == \"core-model-1-4:PORT_DIRECTION_TYPE_OUTPUT\") {\r",
																	"                            outputFcPortList.push(fcPortList[k]);\r",
																	"                        }\r",
																	"                    }\r",
																	"                    return outputFcPortList;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																	"    }\r",
																	"    return outputFcPortList;\r",
																	"}\r",
																	"\r",
																	"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
																	"    let actualInstance;\r",
																	"    actualInstance = {};\r",
																	"    try {\r",
																	"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
																	"            let sampleUuid;\r",
																	"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
																	"            if( sampleUuid == expectedUuid ) {\r",
																	"                actualInstance = actualLtpList[i];\r",
																	"                return actualInstance;\r",
																	"            }\r",
																	"        }\r",
																	"\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																	"    }\r",
																	"    return undefined;\r",
																	"}\r",
																	"\r",
																	"function FindServingLtp(clientLtp, ltpList) {\r",
																	"    let servingLtp;\r",
																	"    servingLtp = {};\r",
																	"    try{\r",
																	"        let serverLtpUuid;\r",
																	"        serverLtpUuid = clientLtp[\"server-ltp\"][0];\r",
																	"        for( let i=0; i<ltpList.length; i++ ) {\r",
																	"            let sampleUuid;\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if( sampleUuid == serverLtpUuid ) {\r",
																	"                servingLtp = ltpList[i];\r",
																	"                return servingLtp;\r",
																	"            }\r",
																	"        }\r",
																	"    } catch(error) {\r",
																	"        console.log(error);\r",
																	"        console.log(\"! Exception in function : FindServingLtp. \")\r",
																	"    }\r",
																	"    return servingLtp;\r",
																	"}\r",
																	"\r",
																	"function FindHttpServerLtp(ltpList) {\r",
																	"    let httpServerLtp;\r",
																	"    httpServerLtp = {};\r",
																	"    try {\r",
																	"        for( let i=0; i<ltpList.length; i++ ) {\r",
																	"            let sampleUuid;\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"http-s-\")) {\r",
																	"                httpServerLtp = ltpList[i];\r",
																	"                return httpServerLtp;\r",
																	"            }\r",
																	"        } \r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function : FindHttpServerLtp. \");\r",
																	"    }\r",
																	"    return httpServerLtp;\r",
																	"}\r",
																	"\r",
																	"function FindOperationClientUsingCallback(callback, fcList, ltpList) {\r",
																	"    let operationClientLtp\r",
																	"    try {\r",
																	"        let outputFcPortList = FindOutputFcPortList(callback, fcList);\r",
																	"        let randomOutputFcPort = outputFcPortList[Math.floor(Math.random() * outputFcPortList.length)];\r",
																	"        let outputLtpUuid = randomOutputFcPort[\"logical-termination-point\"];\r",
																	"        operationClientLtp = FindActualInstanceByUuid(outputLtpUuid, ltpList);\r",
																	"    } catch (error) {\r",
																	"        console.log(error);\r",
																	"        console.log(\"! Exception in function FindOperationClientUsingCallback. \");\r",
																	"    }\r",
																	"    return  operationClientLtp\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "reference ExecutionAndTraceLog/core-model-1-4:control-construct",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var AUTHORIZATION;\r",
																	"var applicationProtocol;\r",
																	"var applicationAddress;\r",
																	"var applicationPort;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let executionAndTraceLogTcpClientLtp;\r",
																	"    executionAndTraceLogTcpClientLtp = pm.collectionVariables.get(\"executionAndTraceLogTcpClientLtp\");\r",
																	"\r",
																	"    applicationProtocol = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																	"    applicationProtocol = applicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																	"\r",
																	"    applicationAddress = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																	"    if(applicationAddress.hasOwnProperty(\"ip-address\")) {\r",
																	"        applicationAddress = applicationAddress[\"ip-address\"][\"ipv-4-address\"];\r",
																	"    } else {\r",
																	"        applicationAddress = applicationAddress[\"domain-name\"];\r",
																	"    }\r",
																	"    applicationPort = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																	" \r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Environment variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = \"\";\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = applicationProtocol + \"://\" + applicationAddress + \":\" + applicationPort + \"/core-model-1-4:control-construct\";\r",
																	"    //URI = \"http://9d098835-4e91-48f3-9761-04a82ff2843e.mock.pstmn.io\" + \"/core-model-1-4:control-construct\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var ltpList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    let responseCode;\r",
																	"    responseCode = parseInt(response.code);\r",
																	"    \r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        let responseObject;\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																	"\r",
																	"    } else {\r",
																	"        ltpList = [];\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! ltpList could not be extracted.\");\r",
																	"}\r",
																	"\r",
																	"var listRecordsOfFlowOperationKey;\r",
																	"try {\r",
																	"    listRecordsOfFlowOperationKey = FindOperationKeyForOperationName(\"/v1/list-records-of-flow\", ltpList);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Reference objects could not be extracted.\");\r",
																	"} \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.set(\"listRecordsOfFlowOperationKey\", listRecordsOfFlowOperationKey);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"function FindOperationKeyForOperationName(operationName, ltpList) {\r",
																	"    let operationKey;\r",
																	"    operationKey = \"\";\r",
																	"    try {\r",
																	"         let sampleUuid;\r",
																	"         for ( let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"op-s-\")){\r",
																	"                let sampleOperationName;\r",
																	"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																	"                if(sampleOperationName == operationName) {\r",
																	"                    operationKey = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"                    return operationKey; \r",
																	"                }\r",
																	"            }\r",
																	"         }\r",
																	"\r",
																	"    } catch (error) {\r",
																	"        console.log(\" ! Exception in function : FindOperationKeyForOperationName\")\r",
																	"    }\r",
																	"    return operationKey;\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "sampling /v1/list-applications",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"    \r",
																	"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = \"\";\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.set(\"user\", USER_NAME);\r",
																	"    pm.collectionVariables.set(\"originator\", ORIGINATOR);\r",
																	"    pm.collectionVariables.set(\"xCorrelator\", X_CORRELATOR);\r",
																	"    pm.collectionVariables.set(\"traceIndicator\", TRACE_INDICATOR);\r",
																	"    pm.collectionVariables.set(\"customerJourney\", CUSTOMER_JOURNEY);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/list-applications\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const currentCount = 0;\r",
																	"try {\r",
																	"\tpm.collectionVariables.set(\"currentCount\", currentCount);\r",
																	"\r",
																	"} catch(error) {\r",
																	"    console.log(\" !Could not set currentCount. \");\r",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected ExecutionAndTraceLog/v1/list-records-of-flow for /v1/list-applications:: Request notified?",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"var applicationProtocol;\r",
																	"var applicationAddress;\r",
																	"var applicationPort;\r",
																	"var xCorrelatorUnderTest;\r",
																	"var latestMatch;\r",
																	"var numberOfRecords;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let executionAndTraceLogTcpClientLtp;\r",
																	"    executionAndTraceLogTcpClientLtp = pm.collectionVariables.get(\"executionAndTraceLogTcpClientLtp\");\r",
																	"    \r",
																	"    applicationProtocol = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																	"    applicationProtocol = applicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																	"    applicationAddress = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																	"    if(applicationAddress.hasOwnProperty(\"ip-address\")) {\r",
																	"        applicationAddress = applicationAddress[\"ip-address\"][\"ipv-4-address\"];\r",
																	"    } else {\r",
																	"        applicationAddress = applicationAddress[\"domain-name\"];\r",
																	"    }\r",
																	"    applicationPort = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																	"\r",
																	"    OPERATION_KEY = pm.collectionVariables.get(\"listRecordsOfFlowOperationKey\");\r",
																	"    xCorrelatorUnderTest = pm.collectionVariables.get(\"xCorrelator\");\r",
																	"    latestMatch = 0;\r",
																	"    numberOfRecords = 100;\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error)\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"                + '\"x-correlator\": \"' + xCorrelatorUnderTest +'\",'\r",
																	"                + '\"latest-match\": ' + latestMatch + ','\r",
																	"                + '\"number-of-records\":' + numberOfRecords\r",
																	"                + '}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI =  applicationProtocol + \"://\" + applicationAddress + \":\" + applicationPort + \"/v1/list-records-of-flow\";\r",
																	"    //URI = \"http://9d098835-4e91-48f3-9761-04a82ff2843e.mock.pstmn.io/v1/list-records-of-flow\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0, length);\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Constant variables\r",
																	"****************************************************************************************/\r",
																	"var retryMaxCount;\r",
																	"var retryWaitingPeriod;\r",
																	"var currentCount;\r",
																	"try {\r",
																	"    retryMaxCount = pm.environment.get(\"retryMaxCount\");\r",
																	"    retryWaitingPeriod = pm.environment.get(\"retryWaitingPeriod\");\r",
																	"    currentCount = pm.collectionVariables.get(\"currentCount\");\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not load constant variables Data. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var expectedXCorrelator;\r",
																	"var expectedUser;\r",
																	"var expectedOriginator;\r",
																	"var expectedTraceIndicator;\r",
																	"var expectedApplicationName;\r",
																	"var expectedReleaseNumber;\r",
																	"var expectedOperationName;\r",
																	"try {\r",
																	"    expectedXCorrelator = pm.collectionVariables.get(\"xCorrelator\");\r",
																	"    expectedUser = pm.collectionVariables.get(\"user\");\r",
																	"    expectedOriginator = pm.collectionVariables.get(\"originator\");\r",
																	"    expectedTraceIndicator = pm.collectionVariables.get(\"traceIndicator\");\r",
																	"\r",
																	"    let expectedHttpServerLtp;\r",
																	"    expectedHttpServerLtp = pm.collectionVariables.get(\"httpServerLtp\");\r",
																	"    expectedApplicationName = expectedHttpServerLtp[\"layer-protocol\"][0][\"http-server-interface-1-0:http-server-interface-pac\"][\"http-server-interface-capability\"][\"application-name\"];\r",
																	"    expectedReleaseNumber = expectedHttpServerLtp[\"layer-protocol\"][0][\"http-server-interface-1-0:http-server-interface-pac\"][\"http-server-interface-capability\"][\"release-number\"];\r",
																	"\r",
																	"    let expectedOperationServer;\r",
																	"    expectedOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"    expectedOperationName = expectedOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not load Input Data. \");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"var serviceRecordList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"    if(Math.floor(RESPONSE_CODE/100) === 2) {\r",
																	"        serviceRecordList = JSON.parse(response.stream);\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"POST ExecutionAndTraceLog/v1/list-records-of-flow responds 200\", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(200);\r",
																	"    });\r",
																	"\r",
																	"    let foundAnEntryWithTheExpectedHeaderValuesInEatl;\r",
																	"    foundAnEntryWithTheExpectedHeaderValuesInEatl = false;\r",
																	"    let responseCodeofTriggeredForwarding;\r",
																	"    responseCodeofTriggeredForwarding = 0;\r",
																	"    for(let i=0; i<serviceRecordList.length; i++)  {\r",
																	"        if( serviceRecordList[i][\"application-name\"] == expectedApplicationName\r",
																	"                && serviceRecordList[i][\"release-number\"] == expectedReleaseNumber\r",
																	"                && serviceRecordList[i][\"operation-name\"] == expectedOperationName\r",
																	"                && serviceRecordList[i][\"x-correlator\"] == expectedXCorrelator\r",
																	"                && serviceRecordList[i][\"user\"] == expectedUser\r",
																	"                && serviceRecordList[i][\"originator\"] == expectedOriginator\r",
																	"                && serviceRecordList[i][\"trace-indicator\"] == expectedTraceIndicator ) {\r",
																	"\r",
																	"            foundAnEntryWithTheExpectedHeaderValuesInEatl = true;\r",
																	"            responseCodeofTriggeredForwarding =  serviceRecordList[i][\"response-code\"];\r",
																	"            break;\r",
																	"        }\r",
																	"    }\r",
																	"\r",
																	"    if (foundAnEntryWithTheExpectedHeaderValuesInEatl == false) {\r",
																	"        if( (currentCount < retryMaxCount) ) {\r",
																	"            setTimeout(()=>{\r",
																	"                postman.setNextRequest(request.name);\r",
																	"                currentCount = currentCount + 1;\r",
																	"                pm.collectionVariables.set(\"currentCount\", currentCount);\r",
																	"            }, retryWaitingPeriod);\r",
																	"        } else {\r",
																	"            pm.test(\"The request has been notified and the Parameter values have been processed\", function () {\r",
																	"                pm.expect(foundAnEntryWithTheExpectedHeaderValuesInEatl).to.be.true;        \r",
																	"            });\r",
																	"        }\r",
																	"    } else {\r",
																	"        pm.test(\"The request has been notified and the Parameter values have been processed with response-code 200\", function () {\r",
																	"            pm.expect(responseCodeofTriggeredForwarding).to.equal(200);    \r",
																	"        });\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"description": "## Gets the service consumption indicated to EaTL and the Parameters of the request processed?\n\n#### Requires:\n- ExecutionAndTraceLog server to operate\n\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  -  search CC for output fc-port of ServiceRequestCausesLoggingRequest, \nits corresponding op-c, http-c and tcp-c, storing them for later verification request\n  - searching CC for op-s of /v1/list-applications, storing operation-key\n- GETting EaTL/CC (while using IP, protocol and port from above)\n  - searching CC for op-c of /v1/list-records-of-flow, storing operation-key\n- POST /v1/list-applications\n  - operation-key from above\n  - reasonable parameters\n\n#### Testing:\n- POST ExecutionAndTraceLog/v1/list-records-of-flow with \n   - IP, protocol and port from above\n   - operation-key from above\n   - DummyValue of x-correlator\n   - checking response for entry with application-name==AA and operation-name==/v1/list-applications\n   - checking same record for containing DummyXCorrelator &DummyTraceIndicator\n\n#### Clearing:\n- not applicable"
										}
									]
								},
								{
									"name": "Gate",
									"item": [
										{
											"name": "for gating /v1/list-applications to acceptance testing",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var TYPE_OF_TESTING;\r",
															"var URI;\r",
															"try {\r",
															"    TYPE_OF_TESTING = pm.environment.get(\"typeOfTesting\");\r",
															"    URI = pm.environment.get(\"dummyUri\");\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Loading Input Data failed.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Updating Environmental Variables and Determining the next Step\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    if ( TYPE_OF_TESTING === \"Acceptance\" ) {\r",
															"        postman.setNextRequest();\r",
															"    } else {\r",
															"        postman.setNextRequest(\"for exiting /v1/list-applications\");\r",
															"    }\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Updating Environmental Variables and Determining the next Step failed.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    pm.variables.clear();\r",
															"\r",
															"    let REQUEST_BODY;\r",
															"    REQUEST_BODY = \"\";\r",
															"\r",
															"    let AUTHORIZATION;\r",
															"    AUTHORIZATION = \"\";\r",
															"\r",
															"    let OPERATION_KEY;\r",
															"    OPERATION_KEY = \"\";\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
															"    pm.request.headers.upsert({key:\"operationKey\", value:OPERATION_KEY});\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:\"application/json\"});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Setting Local Variables and Preparing the Request failed.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Acceptance",
									"item": [
										{
											"name": "Response body completeness",
											"item": [
												{
													"name": "reference /core-model-1-4:control-construct",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n----- /v1/list-applications acceptance -- Response body completeness -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Environment variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY = \"\";\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var ltpList;\r",
																	"var fcList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    let responseCode;\r",
																	"    responseCode = parseInt(response.code);\r",
																	"    \r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        let responseObject;\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																	"        fcList = responseObject[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
																	"\r",
																	"    } else {\r",
																	"        ltpList = [];\r",
																	"        fcList = [];\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! ltpList could not be extracted.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"var currentOperationServer;\r",
																	"try {\r",
																	"    currentOperationServer = FindOperationServer(\"/v1/list-applications\", ltpList);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Reference objects could not be extracted.\");\r",
																	"} \r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.clear();\r",
																	"    \r",
																	"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																	"    pm.collectionVariables.set(\"ltpList\", ltpList);\r",
																	"    pm.collectionVariables.set(\"fcList\", fcList);\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function FindOperationServer(operationName, ltpList) {\r",
																	"    let operationServer;\r",
																	"    operationServer = \"\";\r",
																	"    try {\r",
																	"        let sampleUuid;\r",
																	"        for(let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"op-s-\")) {\r",
																	"                let sampleOperationName;\r",
																	"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																	"                if(sampleOperationName == operationName) {\r",
																	"                    operationServer = ltpList[i];\r",
																	"                    return operationServer;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																	"    }\r",
																	"    return operationServer;\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected /v1/list-applications",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"    \r",
																	"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = \"\";\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/list-applications\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var expectedApplicationsList;\r",
																	"try {\r",
																	"    let APPLICATION;\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"    let ltpList;\r",
																	"    ltpList = pm.collectionVariables.get(\"ltpList\");\r",
																	"    let fcList;\r",
																	"    fcList = pm.collectionVariables.get(\"fcList\");\r",
																	"    expectedApplicationsList = GetListOfApplicationsFromFc(\"NewApplicationCausesRequestForInquiringOamRequestApprovals\", ltpList, fcList);\r",
																	"\r",
																	"    } catch (error) {\r",
																	"    console.log(\"! Could not load Input Data. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"var actualApplicationsList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"    if ( Math.floor(RESPONSE_CODE/100) === 2 ) {\r",
																	"        actualApplicationsList = JSON.parse(response.stream);\r",
																	"    } else {\r",
																	"        actualApplicationsList = {};\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"POST /v1/list-applications responds 200\", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(200);\r",
																	"    });\r",
																	"\r",
																	"    let schema;\r",
																	"    schema = \r",
																	"    {\r",
																	"        \"type\": \"array\",\r",
																	"        \"uniqueItems\": true,\r",
																	"        \"items\": {\r",
																	"            \"type\": \"object\",\r",
																	"            \"required\": [\r",
																	"            \"application-name\",\r",
																	"            \"release-number\",\r",
																	"            \"protocol\",\r",
																	"            \"address\",\r",
																	"            \"port\"\r",
																	"            ],\r",
																	"            \"properties\": {\r",
																	"            \"application-name\": {\r",
																	"                \"type\": \"string\",\r",
																	"                \"description\": \"'from [/core-model-1-4:control-construct/logical-termination-point=okm-2-0-1-http-c-*/layer-protocol=0/http-client-interface-1-0:http-client-interface-pac/http-client-interface-configuration/application-name]'\\n\"\r",
																	"            },\r",
																	"            \"release-number\": {\r",
																	"                \"type\": \"string\",\r",
																	"                \"description\": \"'from [/core-model-1-4:control-construct/logical-termination-point=okm-2-0-1-http-c-*/layer-protocol=0/http-client-interface-1-0:http-client-interface-pac/http-client-interface-configuration/release-number]'\\n\"\r",
																	"            },\r",
																	"            \"protocol\": {\r",
																	"                \"type\": \"string\",\r",
																	"                \"description\": \"'from [/core-model-1-4:control-construct/logical-termination-point=okm-2-0-1-tcp-c-*/layer-protocol=0/tcp-client-interface-1-0:tcp-client-interface-pac/tcp-client-interface-configuration/remote-protocol]'\\n\"\r",
																	"            },\r",
																	"            \"address\": {\r",
																	"                \"type\": \"object\",\r",
																	"                \"properties\": {\r",
																	"                \"ip-address\": {\r",
																	"                    \"type\": \"object\",\r",
																	"                    \"properties\": {\r",
																	"                    \"ipv-4-address\": {\r",
																	"                        \"type\": \"string\",\r",
																	"                        \"description\": \"'from [/core-model-1-4:control-construct/logical-termination-point=okm-2-0-1-tcp-c-*/layer-protocol=0/tcp-client-interface-1-0:tcp-client-interface-pac/tcp-client-interface-configuration/remote-address/ip-address/ipv-4-address]'\\n\"\r",
																	"                    }\r",
																	"                    }\r",
																	"                },\r",
																	"                \"domain-name\": {\r",
																	"                    \"type\": \"string\",\r",
																	"                    \"description\": \"'from [/core-model-1-4:control-construct/logical-termination-point=okm-2-0-1-tcp-c-*/layer-protocol=0/tcp-client-interface-1-0:tcp-client-interface-pac/tcp-client-interface-configuration/remote-address/domain-name]'\\n\"\r",
																	"                }\r",
																	"                }\r",
																	"            },\r",
																	"            \"port\": {\r",
																	"                \"type\": \"integer\",\r",
																	"                \"description\": \"'from [/core-model-1-4:control-construct/logical-termination-point=okm-2-0-1-tcp-c-*/layer-protocol=0/tcp-client-interface-1-0:tcp-client-interface-pac/tcp-client-interface-configuration/remote-port]'\\n\"\r",
																	"            }\r",
																	"            }\r",
																	"        }\r",
																	"    }\r",
																	"    let schemaValidation;\r",
																	"    schemaValidation = tv4.validateMultiple(actualApplicationsList, schema, true, true);\r",
																	"    console.log(schemaValidation);\r",
																	"    pm.test(\"Valid schema for  /v1/list-applications \", function () {\r",
																	"        pm.expect(schemaValidation.valid).to.be.true;\r",
																	"    });\r",
																	"\r",
																	"    pm.test(\"Provides the number of applications information as expected \" + expectedApplicationsList.length, function () {\r",
																	"        pm.expect(actualApplicationsList.length).to.equal(expectedApplicationsList.length);\r",
																	"    });\r",
																	"\r",
																	"    for ( let expectedApplicationIndex=0; expectedApplicationIndex<expectedApplicationsList.length; expectedApplicationIndex++ ) {\r",
																	"        let expectedApplicationName;\r",
																	"        expectedApplicationName = expectedApplicationsList[expectedApplicationIndex][\"application-name\"];\r",
																	"        let expectedReleaseNumber;\r",
																	"        expectedReleaseNumber = expectedApplicationsList[expectedApplicationIndex][\"release-number\"];\r",
																	"        let actualApplicationInstance;\r",
																	"        actualApplicationInstance = FindActualApplicationInstance(expectedApplicationName, expectedReleaseNumber, actualApplicationsList);\r",
																	"        pm.test(\"Application '\" + expectedApplicationName + \"' and release-number '\" +expectedReleaseNumber+ \"' could be found\", function () {\r",
																	"            pm.expect(actualApplicationInstance).to.not.be.an('undefined');\r",
																	"            pm.expect(Object.keys(actualApplicationInstance).length).to.not.equal(0);\r",
																	"        });\r",
																	"\r",
																	"        if(actualApplicationInstance != undefined ) {\r",
																	"            expectedProtocol = expectedApplicationsList[expectedApplicationIndex][\"protocol\"]\r",
																	"            \r",
																	"            pm.test(\" Provides expected protocol '\" +expectedProtocol+ \"' for \"+expectedApplicationName+\":\"+expectedReleaseNumber, function () {\r",
																	"                pm.expect(actualApplicationInstance[\"protocol\"]).to.equal(expectedProtocol);\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\" Provides expected remote-address '\" +JSON.stringify(expectedApplicationsList[expectedApplicationIndex][\"address\"]) + \"' for \"+expectedApplicationName+\":\"+expectedReleaseNumber, function () {\r",
																	"                pm.expect(JSON.stringify(actualApplicationInstance[\"address\"])).to.equal(JSON.stringify(expectedApplicationsList[expectedApplicationIndex][\"address\"]));\r",
																	"            });\r",
																	"            pm.test(\" Provides expected port '\" +expectedApplicationsList[expectedApplicationIndex][\"port\"]+ \"' for \"+expectedApplicationName+\":\"+expectedReleaseNumber, function () {\r",
																	"                pm.expect(actualApplicationInstance[\"port\"]).to.equal(expectedApplicationsList[expectedApplicationIndex][\"port\"]);\r",
																	"            });\r",
																	"        }\r",
																	"    }\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"function FindServingLtp(clientLtp, ltpList) {\r",
																	"    let servingLtp;\r",
																	"    servingLtp = {};\r",
																	"    try{\r",
																	"        let serverLtpUuid;\r",
																	"        serverLtpUuid = clientLtp[\"server-ltp\"][0];\r",
																	"        for( let i=0; i<ltpList.length; i++ ) {\r",
																	"            let sampleUuid;\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if( sampleUuid == serverLtpUuid ) {\r",
																	"                servingLtp = ltpList[i];\r",
																	"                return servingLtp;\r",
																	"            }\r",
																	"        }\r",
																	"    } catch(error) {\r",
																	"        console.log(error);\r",
																	"        console.log(\"! Exception in function : FindServingLtp. \")\r",
																	"    }\r",
																	"    return servingLtp;\r",
																	"}\r",
																	"\r",
																	"function FindActualApplicationInstance(expectedApplicationName, expectedReleaseNumber, actualApplicationsList) {\r",
																	"    let actualApplicationInstance;\r",
																	"    actualApplicationInstance = {};\r",
																	"    try {\r",
																	"        for ( let i=0; i<actualApplicationsList.length; i++ ) {\r",
																	"            let sampleApplicationName;\r",
																	"            sampleApplicationName = actualApplicationsList[i][\"application-name\"];\r",
																	"            let sampleReleaseNumber;\r",
																	"            sampleReleaseNumber = actualApplicationsList[i][\"release-number\"];\r",
																	"            if(( sampleApplicationName == expectedApplicationName ) && ( sampleReleaseNumber == expectedReleaseNumber )) {\r",
																	"                actualApplicationInstance = actualApplicationsList[i];\r",
																	"                return actualApplicationInstance;\r",
																	"            }\r",
																	"        }\r",
																	"\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function FindActualApplicationInstance. \");\r",
																	"    }\r",
																	"    return actualApplicationInstance;\r",
																	"}\r",
																	"\r",
																	"\r",
																	"function FindOutputFcPortList(forwardingName, fcList) {\r",
																	"    let outputFcPortList;\r",
																	"    outputFcPortList = [];\r",
																	"    try {\r",
																	"        for( let i=0; i<fcList.length; i++ ) {\r",
																	"            for(let j=0; j<fcList[i][\"name\"].length; j++) {               \r",
																	"                if(fcList[i][\"name\"][j][\"value\"] == forwardingName) {\r",
																	"                    fcPortList = fcList[i][\"fc-port\"];\r",
																	"                    for(let k=0;k<fcPortList.length;k++) {\r",
																	"                        if(fcPortList[k][\"port-direction\"] == \"core-model-1-4:PORT_DIRECTION_TYPE_OUTPUT\") {\r",
																	"                            outputFcPortList.push(fcPortList[k]);\r",
																	"                        }\r",
																	"                    }\r",
																	"                    return outputFcPortList;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																	"    }\r",
																	"    return outputFcPortList;\r",
																	"}\r",
																	"\r",
																	"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
																	"    let actualInstance;\r",
																	"    actualInstance = {};\r",
																	"    try {\r",
																	"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
																	"            let sampleUuid;\r",
																	"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
																	"            if( sampleUuid == expectedUuid ) {\r",
																	"                actualInstance = actualLtpList[i];\r",
																	"                return actualInstance;\r",
																	"            }\r",
																	"        }\r",
																	"\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																	"    }\r",
																	"    return undefined;\r",
																	"}\r",
																	"\r",
																	"function GetListOfApplicationsFromFc(forwardingName, ltpList, fcList) {\r",
																	"    let applicationsList;\r",
																	"    applicationsList = [];\r",
																	"    try {\r",
																	"        let outputFcPortList;\r",
																	"        outputFcPortList = FindOutputFcPortList(forwardingName, fcList);\r",
																	"\r",
																	"        for ( let i=0; i<outputFcPortList.length; i++ ) {\r",
																	"            let applicationInstance;\r",
																	"            applicationInstance = {};\r",
																	"\r",
																	"            let operationClientLtp;\r",
																	"            operationClientLtp = FindActualInstanceByUuid(outputFcPortList[i][\"logical-termination-point\"], ltpList);\r",
																	"\r",
																	"            httpClientLtp = FindServingLtp(operationClientLtp, ltpList);\r",
																	"            tcpClientLtp = FindServingLtp(httpClientLtp, ltpList);\r",
																	"\r",
																	"            applicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																	"            releaseNumber = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																	"\r",
																	"            protocol = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																	"            protocol = protocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																	"            address = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																	"            port = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																	"\r",
																	"            applicationInstance = {\r",
																	"                            \"application-name\": applicationName,\r",
																	"                            \"release-number\": releaseNumber,\r",
																	"                            \"address\": address,\r",
																	"                            \"protocol\": protocol,\r",
																	"                            \"port\": port\r",
																	"                        };\r",
																	"            applicationsList.push(applicationInstance);\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function GetListOfApplicationsFromFc. \");\r",
																	"    }\r",
																	"    return applicationsList;\r",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"description": "##Gets the response body checked for presence and correctness of each required attributes against load file\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for op-s of /v1/list-applications, storing it.\n- POST /v1/list-applications with\n  - operation-key from above\n  - reasonable parameters \n\n#### Testing:\n- Checking for response-code 200\n- Extract applicationName, releaseNumber, address, protocol and port from output fc-port of NewApplicationCausesRequestForInquiringOamRequestApprovals and store it in expectedApplicationsList.\n- Generate schema based on the specification\n- Checking the response body for each attribute against the generated schema\n- Checking the response body attributes against expectedApplicationsList.\n\n#### Clearing:\n- not applicable"
										},
										{
											"name": "vs oam put",
											"item": [
												{
													"name": "reference /core-model-1-4:control-construct",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n----- /v1/list-applications acceptance -- vs oam put -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Environment variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY = \"\";\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var ltpList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    let responseCode;\r",
																	"    responseCode = parseInt(response.code);\r",
																	"    \r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        let responseObject;\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																	"\r",
																	"    } else {\r",
																	"        ltpList = [];\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! ltpList could not be extracted.\");\r",
																	"}\r",
																	"\r",
																	"var currentOperationServer;\r",
																	"try {\r",
																	"    currentOperationServer = FindOperationServer(\"/v1/list-applications\", ltpList);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Reference objects could not be extracted.\");\r",
																	"} \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.clear();\r",
																	"\r",
																	"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																	"    pm.collectionVariables.set(\"ltpList\", ltpList);  \r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"function FindOperationServer(operationName, ltpList) {\r",
																	"    let operationServer;\r",
																	"    operationServer = \"\";\r",
																	"    try {\r",
																	"        let sampleUuid;\r",
																	"        for(let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"op-s-\")) {\r",
																	"                let sampleOperationName;\r",
																	"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																	"                if(sampleOperationName == operationName) {\r",
																	"                    operationServer = ltpList[i];\r",
																	"                    return operationServer;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																	"    }\r",
																	"    return operationServer;\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "reference /v1/list-applications",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"    \r",
																	"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = \"\";\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/list-applications\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var ltpList;\r",
																	"try {\r",
																	"    ltpList = pm.collectionVariables.get(\"ltpList\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Exception in extracting input data. \");\r",
																	"}\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"var applicationsList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"    if (Math.floor(RESPONSE_CODE / 100) === 2) {\r",
																	"    applicationsList = JSON.parse(response.stream);\r",
																	"    } else {\r",
																	"    applicationsList = [];\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Result value lists could not be extracted.\");\r",
																	"}\r",
																	"\r",
																	"var httpClientLtp;\r",
																	"var tcpClientLtp;\r",
																	"try {\r",
																	"    let randomApplicationInstance = FindRandomApplicationsInstance(applicationsList);\r",
																	"    httpClientLtp = FindHttpClientForApplicationName(randomApplicationInstance[\"application-name\"], ltpList);\r",
																	"    tcpClientLtp = FindServingLtp(httpClientLtp, ltpList);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Reference objects could not be extracted.\");\r",
																	"} \r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.set(\"httpClientLtp\", httpClientLtp);\r",
																	"    pm.collectionVariables.set(\"tcpClientLtp\", tcpClientLtp);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"POST /v1/list-applications responds 200\", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(200);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"function FindHttpClientForApplicationName(applicationName, ltpList) {\r",
																	"    let httpClientLtp;\r",
																	"    try {\r",
																	"        let sampleUuid;\r",
																	"        for(let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"http-c-\")) {\r",
																	"                let sampleApplicationName;\r",
																	"                sampleApplicationName = ltpList[i][\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																	"                if(sampleApplicationName == applicationName) {\r",
																	"                    httpClientLtp = ltpList[i];\r",
																	"                    return httpClientLtp;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function : FindHttpClientForApplicationName. \");\r",
																	"    }\r",
																	"    return httpClientLtp;\r",
																	"}\r",
																	"\r",
																	"function FindRandomApplicationsInstance(applicationsList) {\r",
																	"    let randomApplicationInstance;\r",
																	"    randomApplicationInstance = {};\r",
																	"    let applicationInstanceList;\r",
																	"    applicationInstanceList = [];\r",
																	"    try {\r",
																	"        for(let i=0; i<applicationsList.length; i++) {\r",
																	"            let applicationName;\r",
																	"            applicationName = applicationsList[i][\"application-name\"];\r",
																	"            if(applicationName != \"AdministratorAdministration\") {\r",
																	"                applicationInstanceList.push(applicationsList[i]);\r",
																	"            }\r",
																	"        }\r",
																	"        const random = Math.floor(Math.random() * applicationInstanceList.length);\r",
																	"        randomApplicationInstance = applicationInstanceList[random];\r",
																	"    } catch (error) {\r",
																	"        console.log(error);\r",
																	"        console.log(\"! Exception in function FindRandomApplicationsInstance. \");\r",
																	"    }\r",
																	"    return randomApplicationInstance;\r",
																	"}\r",
																	"\r",
																	"function FindServingLtp(clientLtp, ltpList) {\r",
																	"    let servingLtp;\r",
																	"    servingLtp = {};\r",
																	"    try{\r",
																	"        let serverLtpUuid;\r",
																	"        serverLtpUuid = clientLtp[\"server-ltp\"][0];\r",
																	"        for( let i=0; i<ltpList.length; i++ ) {\r",
																	"            let sampleUuid;\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if( sampleUuid == serverLtpUuid ) {\r",
																	"                servingLtp = ltpList[i];\r",
																	"                return servingLtp;\r",
																	"            }\r",
																	"        }\r",
																	"    } catch(error) {\r",
																	"        console.log(error);\r",
																	"        console.log(\"! Exception in function : FindServingLtp. \")\r",
																	"    }\r",
																	"    return servingLtp;\r",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "dummy application-name",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var httpClientUuid;\r",
																	"var dummyApplicationName;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"    \r",
																	"    let httpClientLtp;\r",
																	"    httpClientLtp = pm.collectionVariables.get(\"httpClientLtp\");\r",
																	"\r",
																	"    httpClientUuid = httpClientLtp[\"uuid\"];\r",
																	"\r",
																	"    dummyApplicationName = RandomApplicationName();\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.set(\"dummyApplicationName\", dummyApplicationName);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl\r",
																	"            + \"/core-model-1-4:control-construct/logical-termination-point=\"\r",
																	"            + httpClientUuid\r",
																	"            + \"/layer-protocol=0/http-client-interface-1-0:http-client-interface-pac/http-client-interface-configuration/application-name\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY = '{ '\r",
																	"                    +   '\"http-client-interface-1-0:application-name\": \"' + dummyApplicationName + '\"'\r",
																	"                    + ' }';\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error)\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"function RandomApplicationName() {\r",
																	"    let applicationName;\r",
																	"    let randomString = GenerateRandomString(12);\r",
																	"    randomString = randomString.split(\"\");\r",
																	"    for(let i=0; i<randomString.length; i+=4) {\r",
																	"        randomString[i] = randomString[i].toUpperCase();\r",
																	"    }\r",
																	"    applicationName = randomString.join(\"\"); \r",
																	"    return applicationName;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomString(length) {\r",
																	"    let randomString;\r",
																	"    randomString = \"\";\r",
																	"    try {\r",
																	"        let characters = \"abcdefghijklmnopqrstuvwxyz\";\r",
																	"        let charactersLength = characters.length;\r",
																	"        for (let i = 0; i < length; i++) {\r",
																	"            randomString += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Could not generate random string. \");\r",
																	"    }\r",
																	"    return randomString;\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "204",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "dummy release-number",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var httpClientUuid;\r",
																	"var dummyReleaseNumber;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"    \r",
																	"    let httpClientLtp;\r",
																	"    httpClientLtp = pm.collectionVariables.get(\"httpClientLtp\");\r",
																	"\r",
																	"    httpClientUuid = httpClientLtp[\"uuid\"];\r",
																	"\r",
																	"    dummyReleaseNumber = RandomReleaseNumber();\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.set(\"dummyReleaseNumber\", dummyReleaseNumber);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl \r",
																	"            + \"/core-model-1-4:control-construct/logical-termination-point=\"\r",
																	"            + httpClientUuid\r",
																	"            + \"/layer-protocol=0/http-client-interface-1-0:http-client-interface-pac/http-client-interface-configuration/release-number\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY = '{ '\r",
																	"                    +   '\"http-client-interface-1-0:release-number\": \"' + dummyReleaseNumber + '\"'\r",
																	"                    + ' }';\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error)\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"function RandomReleaseNumber() {\r",
																	"    let releaseNumber;\r",
																	"    let releaseNumberParts = [];\r",
																	"    for  (let i=0; i<3 ; i++) {\r",
																	"        releaseNumberParts[i] = Math.floor(Math.random() * 10);\r",
																	"    }\r",
																	"    releaseNumber = releaseNumberParts[0] + \".\" + releaseNumberParts[1] + \".\" + releaseNumberParts[2];\r",
																	"    return releaseNumber;\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "204",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "dummy remote-protocol",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var tcpClientUuid;\r",
																	"var dummyRemoteProtocol;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"    \r",
																	"    let tcpClientLtp;\r",
																	"    tcpClientLtp = pm.collectionVariables.get(\"tcpClientLtp\");\r",
																	"\r",
																	"    tcpClientUuid = tcpClientLtp[\"uuid\"];\r",
																	"\r",
																	"    let currentRemoteProtocol;\r",
																	"    currentRemoteProtocol = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																	"\r",
																	"    dummyRemoteProtocol = GenerateDummyRemoteProtocol(currentRemoteProtocol);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.set(\"dummyRemoteProtocol\", dummyRemoteProtocol);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl \r",
																	"            + \"/core-model-1-4:control-construct/logical-termination-point=\"\r",
																	"            + tcpClientUuid\r",
																	"            + \"/layer-protocol=0/tcp-client-interface-1-0:tcp-client-interface-pac/tcp-client-interface-configuration/remote-protocol\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY = '{ '\r",
																	"                    +   '\"tcp-client-interface-1-0:remote-protocol\": \"' + dummyRemoteProtocol + '\"'\r",
																	"                    + ' }';\r",
																	"    \r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error)\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"function GenerateDummyRemoteProtocol(currentProtocol) {\r",
																	"    let alternativeProtocolList;\r",
																	"    alternativeProtocolList = [  \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTP\",\r",
																	"                                    \"tcp-client-interface-1-0:PROTOCOL_TYPE_HTTPS\"\r",
																	"                                ];\r",
																	"    let indexOfCurrentProtocol;\r",
																	"    indexOfCurrentProtocol = alternativeProtocolList.indexOf(currentProtocol);\r",
																	"    if (indexOfCurrentProtocol > -1) {\r",
																	"        alternativeProtocolList.splice(indexOfCurrentProtocol, 1);\r",
																	"    }\r",
																	"\r",
																	"    let alternativeProtocol;\r",
																	"    let alternativeProtocolIndex;\r",
																	"    alternativeProtocolIndex = Math.floor(Math.random() * alternativeProtocolList.length);\r",
																	"    alternativeProtocol = alternativeProtocolList[alternativeProtocolIndex]; \r",
																	"\r",
																	"    return alternativeProtocol;\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "204",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "dummy remote-address",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var tcpClientUuid;\r",
																	"var dummyRemoteAddress;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"    \r",
																	"    let tcpClientLtp;\r",
																	"    tcpClientLtp = pm.collectionVariables.get(\"tcpClientLtp\");\r",
																	"\r",
																	"    tcpClientUuid = tcpClientLtp[\"uuid\"];\r",
																	"\r",
																	"    dummyRemoteAddress = RandomIpAddress();\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.set(\"dummyRemoteAddress\", dummyRemoteAddress);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl \r",
																	"            + \"/core-model-1-4:control-construct/logical-termination-point=\"\r",
																	"            + tcpClientUuid\r",
																	"            + \"/layer-protocol=0/tcp-client-interface-1-0:tcp-client-interface-pac/tcp-client-interface-configuration/remote-address\";\r",
																	"    \r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY = '{ '\r",
																	"            +   '\"tcp-client-interface-1-0:remote-address\": {' \r",
																	"                + '\"ip-address\": {'\r",
																	"                +   '\"ipv-4-address\": \"' + dummyRemoteAddress + '\"'\r",
																	"                +   '}'\r",
																	"                +  '}'\r",
																	"            + ' }';\r",
																	"    \r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error)\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"function RandomIpAddress() {\r",
																	"    let randomAddress\r",
																	"    let addressParts = [];\r",
																	"    for ( let i=0; i<4; i++ ) {\r",
																	"        addressParts[i] = String(Math.floor(Math.random() * 256));\r",
																	"    }\r",
																	"    randomAddress = addressParts[0] + \".\" + addressParts[1] + \".\" + addressParts[2] + \".\" + addressParts[3];\r",
																	"    return randomAddress;\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "204",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "dummy remote-port",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var tcpClientUuid;\r",
																	"var dummyRemotePort;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"    \r",
																	"    let tcpClientLtp;\r",
																	"    tcpClientLtp = pm.collectionVariables.get(\"tcpClientLtp\");\r",
																	"\r",
																	"    tcpClientUuid = tcpClientLtp[\"uuid\"];\r",
																	"\r",
																	"    dummyRemotePort = RandomTcpPort();\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.set(\"dummyRemotePort\", dummyRemotePort);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl \r",
																	"            + \"/core-model-1-4:control-construct/logical-termination-point=\"\r",
																	"            + tcpClientUuid\r",
																	"            + \"/layer-protocol=0/tcp-client-interface-1-0:tcp-client-interface-pac/tcp-client-interface-configuration/remote-port\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY = '{ '\r",
																	"                    +   '\"tcp-client-interface-1-0:remote-port\": ' + dummyRemotePort\r",
																	"                    + ' }';\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error)\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"function RandomTcpPort() {\r",
																	"    let randomPort;\r",
																	"    randomPort = 2000 + Math.floor( Math.random() * 1000 );\r",
																	"    return randomPort;\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "204",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected /v1/list-applications",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"    \r",
																	"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = \"\";\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/list-applications\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var expectedApplicationName;\r",
																	"var expectedDummyReleaseNumber;\r",
																	"var expectedDummyRemoteAddress;\r",
																	"var expectedDummyRemotePort;\r",
																	"try {\r",
																	"    expectedApplicationName = pm.collectionVariables.get(\"dummyApplicationName\");\r",
																	"    expectedDummyReleaseNumber = pm.collectionVariables.get(\"dummyReleaseNumber\");\r",
																	"    expectedDummyRemoteProtocol = pm.collectionVariables.get(\"dummyRemoteProtocol\");\r",
																	"    expectedDummyRemoteProtocol = expectedDummyRemoteProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																	"\r",
																	"    expectedDummyRemoteAddress = pm.collectionVariables.get(\"dummyRemoteAddress\");\r",
																	"    expectedDummyRemotePort = pm.collectionVariables.get(\"dummyRemotePort\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"var actualApplicationsList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"    if (Math.floor(RESPONSE_CODE / 100) === 2) {\r",
																	"    actualApplicationsList = JSON.parse(response.stream);\r",
																	"    } else {\r",
																	"    actualApplicationsList = [];\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Result value lists could not be extracted.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"POST /v1/list-applications\", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(200);\r",
																	"    });\r",
																	"\r",
																	"    let actualApplicationInstance;\r",
																	"    actualApplicationInstance = FindActualApplicationInstance(expectedApplicationName, expectedDummyReleaseNumber, actualApplicationsList);\r",
																	"     pm.test(\"Application '\" + expectedApplicationName + \"' and release-number '\"+ expectedDummyReleaseNumber+\"' could be found\", function () {\r",
																	"        pm.expect(actualApplicationInstance).to.not.be.an('undefined');\r",
																	"        pm.expect(Object.keys(actualApplicationInstance).length).to.not.equal(0);\r",
																	"    });\r",
																	"    if(actualApplicationInstance != undefined ) {\r",
																	"        pm.test(\" Provides expected protocol '\" +expectedDummyRemoteProtocol+ \"'\", function () {\r",
																	"            pm.expect(actualApplicationInstance[\"protocol\"]).to.equal(expectedDummyRemoteProtocol);\r",
																	"        });\r",
																	"        pm.test(\" Provides expected address '\" +expectedDummyRemoteAddress+ \"'\", function () {\r",
																	"            pm.expect(actualApplicationInstance[\"address\"][\"ip-address\"][\"ipv-4-address\"]).to.equal(expectedDummyRemoteAddress);\r",
																	"        });\r",
																	"        pm.test(\" Provides expected port '\" +expectedDummyRemotePort+ \"'\", function () {\r",
																	"            pm.expect(actualApplicationInstance[\"port\"]).to.equal(expectedDummyRemotePort);\r",
																	"        });\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function FindActualApplicationInstance(expectedApplicationName, expectedReleaseNumber, actualApplicationsList) {\r",
																	"    let actualApplicationInstance = {};\r",
																	"    try {\r",
																	"        for ( let i=0; i<actualApplicationsList.length; i++ ) {\r",
																	"            let sampleApplicationName = actualApplicationsList[i][\"application-name\"];\r",
																	"            let sampleReleaseNumber = actualApplicationsList[i][\"release-number\"];\r",
																	"            if(( sampleApplicationName == expectedApplicationName ) && ( sampleReleaseNumber == expectedReleaseNumber )) {\r",
																	"                actualApplicationInstance = actualApplicationsList[i];\r",
																	"                return actualApplicationInstance;\r",
																	"            }\r",
																	"        }\r",
																	"\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function FindActualApplicationInstance. \");\r",
																	"    }\r",
																	"    return actualApplicationInstance;\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "initial application-name",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var httpClientUuid;\r",
																	"var initialApplicationName;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"    \r",
																	"    let httpClientLtp;\r",
																	"    httpClientLtp = pm.collectionVariables.get(\"httpClientLtp\");\r",
																	"\r",
																	"    httpClientUuid = httpClientLtp[\"uuid\"];\r",
																	"\r",
																	"    initialApplicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl \r",
																	"            + \"/core-model-1-4:control-construct/logical-termination-point=\"\r",
																	"            + httpClientUuid\r",
																	"            + \"/layer-protocol=0/http-client-interface-1-0:http-client-interface-pac/http-client-interface-configuration/application-name\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY = '{ '\r",
																	"                    +   '\"http-client-interface-1-0:application-name\": \"' + initialApplicationName + '\"'\r",
																	"                    + ' }';\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error)\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "204",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "initial release-number",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var httpClientUuid;\r",
																	"var initialReleaseNumber;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"    \r",
																	"    let httpClientLtp;\r",
																	"    httpClientLtp = pm.collectionVariables.get(\"httpClientLtp\");\r",
																	"\r",
																	"    httpClientUuid = httpClientLtp[\"uuid\"];\r",
																	"\r",
																	"    initialReleaseNumber = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl \r",
																	"            + \"/core-model-1-4:control-construct/logical-termination-point=\"\r",
																	"            + httpClientUuid\r",
																	"            + \"/layer-protocol=0/http-client-interface-1-0:http-client-interface-pac/http-client-interface-configuration/release-number\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY = '{ '\r",
																	"                    +   '\"http-client-interface-1-0:release-number\": \"' + initialReleaseNumber + '\"'\r",
																	"                    + ' }';\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error)\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "204",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "initial remote-protocol",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var tcpClientUuid;\r",
																	"var initialRemoteProtocol;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"    \r",
																	"    let tcpClientLtp;\r",
																	"    tcpClientLtp = pm.collectionVariables.get(\"tcpClientLtp\");\r",
																	"\r",
																	"    tcpClientUuid = tcpClientLtp[\"uuid\"];\r",
																	"\r",
																	"    initialRemoteProtocol = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl \r",
																	"            + \"/core-model-1-4:control-construct/logical-termination-point=\"\r",
																	"            + tcpClientUuid\r",
																	"            + \"/layer-protocol=0/tcp-client-interface-1-0:tcp-client-interface-pac/tcp-client-interface-configuration/remote-protocol\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY = '{ '\r",
																	"                    +   '\"tcp-client-interface-1-0:remote-protocol\": \"' + initialRemoteProtocol + '\"'\r",
																	"                    + ' }';\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error)\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "204",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "initial remote-address",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var tcpClientUuid;\r",
																	"var initialRemoteAddress;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"    \r",
																	"    let tcpClientLtp;\r",
																	"    tcpClientLtp = pm.collectionVariables.get(\"tcpClientLtp\");\r",
																	"\r",
																	"    tcpClientUuid = tcpClientLtp[\"uuid\"];\r",
																	"\r",
																	"    initialRemoteAddress = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error)\r",
																	"    console.log(\"! Variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"var URI;\r",
																	"try {\r",
																	"    URI = APPLICATION.serverUrl \r",
																	"            + \"/core-model-1-4:control-construct/logical-termination-point=\"\r",
																	"            + tcpClientUuid\r",
																	"            + \"/layer-protocol=0/tcp-client-interface-1-0:tcp-client-interface-pac/tcp-client-interface-configuration/remote-address\";\r",
																	"\r",
																	"    if(initialRemoteAddress.hasOwnProperty(\"ip-address\")) {\r",
																	"        REQUEST_BODY = '{ '\r",
																	"            +   '\"tcp-client-interface-1-0:remote-address\": {' \r",
																	"                + '\"ip-address\": {'\r",
																	"                +   '\"ipv-4-address\": \"' + initialRemoteAddress[\"ip-address\"][\"ipv-4-address\"] + '\"'\r",
																	"                +   '}'\r",
																	"                +  '}'\r",
																	"            + ' }';\r",
																	"    } else if(initialRemoteAddress.hasOwnProperty(\"domain-name\")) {\r",
																	"        REQUEST_BODY = '{ '\r",
																	"            +   '\"tcp-client-interface-1-0:remote-address\": {' \r",
																	"                +   '\"domain-name\": \"' + initialRemoteAddress[\"domain-name\"] + '\"'\r",
																	"                +   '}'\r",
																	"            + ' }';\r",
																	"    };\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error)\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "204",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "initial remote-port",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var tcpClientUuid;\r",
																	"var initialRemotePort;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"    \r",
																	"    let tcpClientLtp;\r",
																	"    tcpClientLtp = pm.collectionVariables.get(\"tcpClientLtp\");\r",
																	"\r",
																	"    tcpClientUuid = tcpClientLtp[\"uuid\"];\r",
																	"\r",
																	"    initialRemotePort = tcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl \r",
																	"            + \"/core-model-1-4:control-construct/logical-termination-point=\"\r",
																	"            + tcpClientUuid\r",
																	"            + \"/layer-protocol=0/tcp-client-interface-1-0:tcp-client-interface-pac/tcp-client-interface-configuration/remote-port\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY = '{ '\r",
																	"                    +   '\"tcp-client-interface-1-0:remote-port\": ' + initialRemotePort\r",
																	"                    + ' }';\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error)\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "204",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Check /core-model-1-4:control-construct/logical-termination-point",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Environment variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY = \"\";\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var expectedLogicalTerminationPoint;\r",
																	"try {\r",
																	"    expectedLogicalTerminationPoint = pm.collectionVariables.get(\"ltpList\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"var RESPONSE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"    if (Math.floor(RESPONSE_CODE / 100) === 2) {\r",
																	"        RESPONSE = JSON.parse(response.stream);\r",
																	"    } else {\r",
																	"        RESPONSE = [];\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Result value lists could not be extracted.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"GET /core-model-1-4:control-construct responds 200\", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(200);\r",
																	"    });\r",
																	"\r",
																	"    let actualLtpList;\r",
																	"    actualLtpList = RESPONSE[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																	"\r",
																	"    pm.test(\"Received logical-termination-point is same as intial instance \", function () {\r",
																	"        pm.expect(actualLtpList).to.deep.equal(expectedLogicalTerminationPoint);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"description": "##Gets the response body checked for changes against oam configurations\n\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for op-s of /v1/list-applications, storing it.\n- POST /v1/list-applications with\n  - operation-key from above\n  - reasonable parameters\n  - Response: extract http-c\n- PUT random values to each configurable parameters of chosen http-c and tcp-c, store dummy values\n- POST /v1/list-applications with\n   - operation-key from above\n   - reasonable parameters\n\n#### Testing:\n- Checking for response-code 200\n- checking the response body for each attribute against the configured values\n\n#### Clearing\n- PUT configured values with initial original values\n\n#### Clearance check:\n- Check if the logical-temination-point instance is the same as initial configuration"
										},
										{
											"name": "life-cycle-state propogated?",
											"item": [
												{
													"name": "reference /core-model-1-4:control-construct",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n----- /v1/list-applications acceptance -- life-cycle-state propogated? -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Environment variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY = \"\";\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var ltpList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    let responseCode;\r",
																	"    responseCode = parseInt(response.code);\r",
																	"    \r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        let responseObject;\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																	"\r",
																	"    } else {\r",
																	"        ltpList = [];\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! ltpList could not be extracted.\");\r",
																	"}\r",
																	"\r",
																	"var currentOperationServer;\r",
																	"try {\r",
																	"    currentOperationServer = FindOperationServer(\"/v1/list-applications\", ltpList);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Reference objects could not be extracted.\");\r",
																	"} \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.clear();\r",
																	"    \r",
																	"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function FindOperationServer(operationName, ltpList) {\r",
																	"    let operationServer;\r",
																	"    operationServer = \"\";\r",
																	"    try {\r",
																	"        let sampleUuid;\r",
																	"        for(let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"op-s-\")) {\r",
																	"                let sampleOperationName;\r",
																	"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																	"                if(sampleOperationName == operationName) {\r",
																	"                    operationServer = ltpList[i];\r",
																	"                    return operationServer;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																	"    }\r",
																	"    return operationServer;\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "dummy life-cycle-state",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var operationServerUuid;\r",
																	"var dummyLifeCycleState;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"    \r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"\r",
																	"    operationServerUuid = currentOperationServer[\"uuid\"];\r",
																	"\r",
																	"    currentLifeCycleState = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"life-cycle-state\"];\r",
																	"\r",
																	"    dummyLifeCycleState = GenerateDummyLifeCycleState(currentLifeCycleState);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.set(\"dummyLifeCycleState\", dummyLifeCycleState);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl \r",
																	"            + \"/core-model-1-4:control-construct/logical-termination-point=\"\r",
																	"            + operationServerUuid\r",
																	"            + \"/layer-protocol=0/operation-server-interface-1-0:operation-server-interface-pac/operation-server-interface-configuration/life-cycle-state\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY = '{ '\r",
																	"                    +   '\"operation-server-interface-1-0:life-cycle-state\": \"' + dummyLifeCycleState + '\"'\r",
																	"                    + ' }';\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error)\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"function GenerateDummyLifeCycleState(currentLifeCycleState) {\r",
																	"    let alternativeLifeCycleStateTypeList;\r",
																	"    alternativeLifeCycleStateTypeList = [  \"operation-server-interface-1-0:LIFE_CYCLE_STATE_TYPE_EXPERIMENTAL\",\r",
																	"                                            \"operation-server-interface-1-0:LIFE_CYCLE_STATE_TYPE_OPERATIONAL\",\r",
																	"                                            \"operation-server-interface-1-0:LIFE_CYCLE_STATE_TYPE_DEPRECATED\", \r",
																	"                                            \"operation-server-interface-1-0:LIFE_CYCLE_STATE_TYPE_OBSOLETE\",\r",
																	"                                            \"operation-server-interface-1-0:LIFE_CYCLE_STATE_TYPE_UNKNOWN\",\r",
																	"                                            \"operation-server-interface-1-0:LIFE_CYCLE_STATE_TYPE_NOT_YET_DEFINED\"\r",
																	"                                        ];\r",
																	"    let indexOfCurrentLifeCycleState;\r",
																	"    indexOfCurrentLifeCycleState = alternativeLifeCycleStateTypeList.indexOf(currentLifeCycleState);\r",
																	"    if (indexOfCurrentLifeCycleState > -1) {\r",
																	"        alternativeLifeCycleStateTypeList.splice(indexOfCurrentLifeCycleState, 1);\r",
																	"    }\r",
																	"\r",
																	"    let alternativeLifeCycleState;\r",
																	"    let alternativeLifeCycleStateTypeIndex;\r",
																	"    alternativeLifeCycleStateTypeIndex = Math.floor(Math.random() * alternativeLifeCycleStateTypeList.length);\r",
																	"    alternativeLifeCycleState = alternativeLifeCycleStateTypeList[alternativeLifeCycleStateTypeIndex]; \r",
																	"\r",
																	"    return alternativeLifeCycleState;\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"PUT dummy life-cycle-state responds 204\", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(204);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "204",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected /v1/list-applications",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"    \r",
																	"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = \"\";\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/list-applications\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var expectedLifeCycleState;\r",
																	"try {\r",
																	"    let dummyLifeCycleState;\r",
																	"    dummyLifeCycleState = pm.collectionVariables.get(\"dummyLifeCycleState\");\r",
																	"\r",
																	"    let prefixLength = ('operation-server-interface-1-0:LIFE_CYCLE_STATE_TYPE_').length;     \r",
																	"    expectedLifeCycleState = dummyLifeCycleState.substring(prefixLength);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not load Input Data. \");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"var actualLifeCycleState;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"    let RESPONSE_HEADERS;\r",
																	"    RESPONSE_HEADERS = pm.response.headers;  \r",
																	"\r",
																	"    actualLifeCycleState = RESPONSE_HEADERS.get(\"life-cycle-state\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"Provides dummy life-cycle-state in the header of the response: '\" + expectedLifeCycleState + \"' \", function () {\r",
																	"        pm.expect(actualLifeCycleState).to.equal(expectedLifeCycleState);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Initial life-cycle-state",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var operationServerUuid;\r",
																	"var initialLifeCycleState;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"\r",
																	"    operationServerUuid = currentOperationServer[\"uuid\"];\r",
																	"\r",
																	"    initialLifeCycleState = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"life-cycle-state\"];\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl \r",
																	"            + \"/core-model-1-4:control-construct/logical-termination-point=\"\r",
																	"            + operationServerUuid\r",
																	"            + \"/layer-protocol=0/operation-server-interface-1-0:operation-server-interface-pac/operation-server-interface-configuration/life-cycle-state\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY =   '{ '\r",
																	"                    +   '\"operation-server-interface-1-0:life-cycle-state\": \"' + initialLifeCycleState + '\"'\r",
																	"                    + ' }';\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"    \r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});  \r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"PUT Initial life-cycle-state responds 204 \", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(204);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "204",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"description": "## Gets lifeCycleState propagated?\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for op-s of /v1/list-applications, storing operation-key\n- PUTting op-s-configuration/life-cycle-state with random alternative value\n- POST /v1/list-applications\n  - operation-key from above\n  - reasonable parameters\n\n#### Testing:\n- checking for ResponseCode==200\n- checking for lifeCycleState being identical with alternative op-s-configuration/life-cycle-state\n\n#### Clearing:\n- PUTting op-s-configuration/life-cycle-state back to original value"
										}
									]
								},
								{
									"name": "Exit",
									"item": [
										{
											"name": "for exiting /v1/list-applications",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var URI;\r",
															"try {\r",
															"    URI = pm.environment.get(\"dummyUri\");\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Loading Input Data failed.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Updating Environmental Variables and Determining the next Step\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    pm.variables.clear();\r",
															"\r",
															"    let REQUEST_BODY;\r",
															"    REQUEST_BODY = \"\";\r",
															"\r",
															"    let AUTHORIZATION;\r",
															"    AUTHORIZATION = \"\";\r",
															"\r",
															"    let OPERATION_KEY;\r",
															"    OPERATION_KEY = \"\";\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
															"    pm.request.headers.upsert({key:\"operationKey\", value:OPERATION_KEY});\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:\"application/json\"});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Setting Local Variables and Preparing the Request failed.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "/v1/approve-oam-request",
							"item": [
								{
									"name": "Continuous Integration",
									"item": [
										{
											"name": "Service idempotent?",
											"item": [
												{
													"name": "reference /core-model-1-4:control-construct",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n-----  /v1/approve-oam-request integration -- is service idempotent? -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Environment variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY = \"\";\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var ltpList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    let responseCode;\r",
																	"    responseCode = parseInt(response.code);\r",
																	"    \r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        let responseObject;\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																	"\r",
																	"    } else {\r",
																	"        ltpList = [];\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! ltpList could not be extracted.\");\r",
																	"}\r",
																	"\r",
																	"var currentOperationServer;\r",
																	"var httpClientLtp;\r",
																	"try {\r",
																	"    currentOperationServer = FindOperationServer(\"/v1/approve-oam-request\", ltpList);\r",
																	"    httpClientLtp = FindRandomHttpClientLTP(ltpList);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Reference objects could not be extracted.\");\r",
																	"} \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.clear();\r",
																	"    \r",
																	"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																	"    pm.collectionVariables.set(\"httpClientLtp\", httpClientLtp);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function FindOperationServer(operationName, ltpList) {\r",
																	"    let operationServer;\r",
																	"    operationServer = \"\";\r",
																	"    try {\r",
																	"        let sampleUuid;\r",
																	"        for(let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"op-s-\")) {\r",
																	"                let sampleOperationName;\r",
																	"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																	"                if(sampleOperationName == operationName) {\r",
																	"                    operationServer = ltpList[i];\r",
																	"                    return operationServer;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																	"    }\r",
																	"    return operationServer;\r",
																	"}\r",
																	"\r",
																	"function FindRandomHttpClientLTP(ltpList) {\r",
																	"    let randomHttpClientLtp;\r",
																	"    randomHttpClientLtp = {};\r",
																	"    let httpClientLtpList;\r",
																	"    httpClientLtpList = [];\r",
																	"    try{\r",
																	"        let sampleUuid;\r",
																	"        for ( let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"http-c-\")){\r",
																	"                    httpClientLtpList.push(ltpList[i]);\r",
																	"            }\r",
																	"        }\r",
																	"        if ( httpClientLtpList.length > 0 ) {\r",
																	"            const random = Math.floor(Math.random() * httpClientLtpList.length);\r",
																	"            randomHttpClientLtp = httpClientLtpList[random];\r",
																	"        }\r",
																	"    } catch( error ){\r",
																	"        console.log(error);\r",
																	"        console.log(\"! Exception in function : FindRandomHttpClientLTP. \")\r",
																	"    }\r",
																	"    return randomHttpClientLtp;\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected  /v1/approve-oam-request",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"var applicationName;\r",
																	"var releaseNumber;\r",
																	"var authorization;\r",
																	"var method;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"    \r",
																	"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"\r",
																	"    let httpClientLtp;\r",
																	"    httpClientLtp = pm.collectionVariables.get(\"httpClientLtp\");\r",
																	"\r",
																	"    applicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																	"    releaseNumber = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																	"\r",
																	"    authorization = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    method = \"GET\";\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"        + '\"application-name\" : ' + '\"' + applicationName + '\",'\r",
																	"        + '\"release-number\" : ' + '\"' + releaseNumber + '\",'\r",
																	"        + '\"Authorization\" : ' + '\"' + authorization + '\",'\r",
																	"        + '\"method\" : ' + '\"' + method + '\"'\r",
																	"    +'}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/approve-oam-request\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomString(length) {\r",
																	"    let randomString;\r",
																	"    randomString = \"\";\r",
																	"    try {\r",
																	"        let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r",
																	"        let charactersLength = characters.length;\r",
																	"        for (let i = 0; i < length; i++) {\r",
																	"            randomString += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Could not generate random string. \");\r",
																	"    }\r",
																	"    return randomString;\r",
																	"}\r",
																	"\r",
																	"function RandomReleaseNumber() {\r",
																	"    let releaseNumber;\r",
																	"    let releaseNumberParts = [];\r",
																	"    for  (let i=0; i<3 ; i++) {\r",
																	"        releaseNumberParts[i] = Math.floor(Math.random() * 10);\r",
																	"    }\r",
																	"    releaseNumber = releaseNumberParts[0] + \".\" + releaseNumberParts[1] + \".\" + releaseNumberParts[2];\r",
																	"    return releaseNumber;\r",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"As expected, POST /v1/approve-oam-request responds 200\", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(200);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"description": "## Is service idempotent?\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for op-s of /v1/approve-oam-request, storing operation-key\n  - randomly choosing http-c from ltpList\n- POST /v1/approve-oam-request\n  - all attributes filled with chosen http-c\n  - operation-key from above\n  - authorization code taken from input load file\n  - reasonable parameters\n\n#### Testing:\n- checking for ResponseCode==200\n\n#### Clearing:\n- not applicable"
										},
										{
											"name": "request header parameter completeness",
											"item": [
												{
													"name": "reference /core-model-1-4:control-construct",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n-----  /v1/approve-oam-request integration -- request headers parameters completeness -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Environment variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY = \"\";\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var ltpList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    let responseCode;\r",
																	"    responseCode = parseInt(response.code);\r",
																	"    \r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        let responseObject;\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																	"\r",
																	"    } else {\r",
																	"        ltpList = [];\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! ltpList could not be extracted.\");\r",
																	"}\r",
																	"\r",
																	"var currentOperationServer;\r",
																	"var httpClientLtp;\r",
																	"try {\r",
																	"    currentOperationServer = FindOperationServer(\"/v1/approve-oam-request\", ltpList);\r",
																	"    httpClientLtp = FindRandomHttpClientLTP(ltpList);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Reference objects could not be extracted.\");\r",
																	"} \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.clear();\r",
																	"    \r",
																	"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																	"    pm.collectionVariables.set(\"httpClientLtp\", httpClientLtp);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function FindOperationServer(operationName, ltpList) {\r",
																	"    let operationServer;\r",
																	"    operationServer = \"\";\r",
																	"    try {\r",
																	"        let sampleUuid;\r",
																	"        for(let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"op-s-\")) {\r",
																	"                let sampleOperationName;\r",
																	"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																	"                if(sampleOperationName == operationName) {\r",
																	"                    operationServer = ltpList[i];\r",
																	"                    return operationServer;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																	"    }\r",
																	"    return operationServer;\r",
																	"}\r",
																	"\r",
																	"function FindRandomHttpClientLTP(ltpList) {\r",
																	"    let randomHttpClientLtp;\r",
																	"    randomHttpClientLtp = {};\r",
																	"    let httpClientLtpList;\r",
																	"    httpClientLtpList = [];\r",
																	"    try{\r",
																	"        let sampleUuid;\r",
																	"        for ( let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"http-c-\")){\r",
																	"                    httpClientLtpList.push(ltpList[i]);\r",
																	"            }\r",
																	"        }\r",
																	"        if ( httpClientLtpList.length > 0 ) {\r",
																	"            const random = Math.floor(Math.random() * httpClientLtpList.length);\r",
																	"            randomHttpClientLtp = httpClientLtpList[random];\r",
																	"        }\r",
																	"    } catch( error ){\r",
																	"        console.log(error);\r",
																	"        console.log(\"! Exception in function : FindRandomHttpClientLTP. \")\r",
																	"    }\r",
																	"    return randomHttpClientLtp;\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected  /v1/approve-oam-request - request header parameter completeness",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"var applicationName;\r",
																	"var releaseNumber;\r",
																	"var authorization;\r",
																	"var method;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"    \r",
																	"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"\r",
																	"    let httpClientLtp;\r",
																	"    httpClientLtp = pm.collectionVariables.get(\"httpClientLtp\");\r",
																	"\r",
																	"    applicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																	"    releaseNumber = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																	"\r",
																	"    authorization = APPLICATION.authorizationCode;\r",
																	"    method = \"GET\";\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"        + '\"application-name\" : ' + '\"' + applicationName + '\",'\r",
																	"        + '\"release-number\" : ' + '\"' + releaseNumber + '\",'\r",
																	"        + '\"Authorization\" : ' + '\"' + authorization + '\",'\r",
																	"        + '\"method\" : ' + '\"' + method + '\"'\r",
																	"    +'}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/approve-oam-request\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    let parameters;\r",
																	"    parameters = [\"user\", \"originator\", \"x-correlator\", \"trace-indicator\", \"customer-journey\"];\r",
																	"\r",
																	"    let missingParameter;\r",
																	"    missingParameter = GetMissingParameter(parameters);\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"    pm.request.headers.remove(missingParameter);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomString(length) {\r",
																	"    let randomString;\r",
																	"    randomString = \"\";\r",
																	"    try {\r",
																	"        let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r",
																	"        let charactersLength = characters.length;\r",
																	"        for (let i = 0; i < length; i++) {\r",
																	"            randomString += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Could not generate random string. \");\r",
																	"    }\r",
																	"    return randomString;\r",
																	"}\r",
																	"\r",
																	"function RandomReleaseNumber() {\r",
																	"    let releaseNumber;\r",
																	"    let releaseNumberParts = [];\r",
																	"    for  (let i=0; i<3 ; i++) {\r",
																	"        releaseNumberParts[i] = Math.floor(Math.random() * 10);\r",
																	"    }\r",
																	"    releaseNumber = releaseNumberParts[0] + \".\" + releaseNumberParts[1] + \".\" + releaseNumberParts[2];\r",
																	"    return releaseNumber;\r",
																	"}\r",
																	"\r",
																	"function GetMissingParameter(parameters) {\r",
																	"    let missingParameter;\r",
																	"    missingParameter = parameters[Math.floor(Math.random()*parameters.length)];\r",
																	"    return missingParameter;\r",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"As expected, POST /v1/approve-oam-request responds 400, because of missing parameter\", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "400",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"description": "## Get parameters checked for completeness?\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for op-s of /v1/approve-oam-request, storing operation-key\n  - randomly choosing http-c from ltpList\n- POST /v1/approve-oam-request\n  - all attributes filled with chosen http-c\n  - operation-key from above, \n  - authorization code taken from input load file\n  - BUT one randomly chosen parameter (user, originator, x-correlator, trace-indicator or customer-journey) missing (not empty string!)\n\n#### Testing:\n- checking for ResponseCode == 400\n\n#### Clearing:\n- not applicable"
										},
										{
											"name": "originator parameter correctness",
											"item": [
												{
													"name": "reference /core-model-1-4:control-construct",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n-----  /v1/approve-oam-request integration -- originator correctness check -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Environment variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY = \"\";\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var ltpList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    let responseCode;\r",
																	"    responseCode = parseInt(response.code);\r",
																	"    \r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        let responseObject;\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																	"\r",
																	"    } else {\r",
																	"        ltpList = [];\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! ltpList could not be extracted.\");\r",
																	"}\r",
																	"\r",
																	"var currentOperationServer;\r",
																	"var httpClientLtp;\r",
																	"try {\r",
																	"    currentOperationServer = FindOperationServer(\"/v1/approve-oam-request\", ltpList);\r",
																	"    httpClientLtp = FindRandomHttpClientLTP(ltpList);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Reference objects could not be extracted.\");\r",
																	"} \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.clear();\r",
																	"    \r",
																	"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																	"    pm.collectionVariables.set(\"httpClientLtp\", httpClientLtp);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function FindOperationServer(operationName, ltpList) {\r",
																	"    let operationServer;\r",
																	"    operationServer = \"\";\r",
																	"    try {\r",
																	"        let sampleUuid;\r",
																	"        for(let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"op-s-\")) {\r",
																	"                let sampleOperationName;\r",
																	"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																	"                if(sampleOperationName == operationName) {\r",
																	"                    operationServer = ltpList[i];\r",
																	"                    return operationServer;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																	"    }\r",
																	"    return operationServer;\r",
																	"}\r",
																	"\r",
																	"function FindRandomHttpClientLTP(ltpList) {\r",
																	"    let randomHttpClientLtp;\r",
																	"    randomHttpClientLtp = {};\r",
																	"    let httpClientLtpList;\r",
																	"    httpClientLtpList = [];\r",
																	"    try{\r",
																	"        let sampleUuid;\r",
																	"        for ( let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"http-c-\")){\r",
																	"                    httpClientLtpList.push(ltpList[i]);\r",
																	"            }\r",
																	"        }\r",
																	"        if ( httpClientLtpList.length > 0 ) {\r",
																	"            const random = Math.floor(Math.random() * httpClientLtpList.length);\r",
																	"            randomHttpClientLtp = httpClientLtpList[random];\r",
																	"        }\r",
																	"    } catch( error ){\r",
																	"        console.log(error);\r",
																	"        console.log(\"! Exception in function : FindRandomHttpClientLTP. \")\r",
																	"    }\r",
																	"    return randomHttpClientLtp;\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected /v1/approve-oam-request too short originator",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n----- originator parameter correctness check - length too short -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"var applicationName;\r",
																	"var releaseNumber;\r",
																	"var authorization;\r",
																	"var method;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"    \r",
																	"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"\r",
																	"    let httpClientLtp;\r",
																	"    httpClientLtp = pm.collectionVariables.get(\"httpClientLtp\");\r",
																	"\r",
																	"    applicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																	"    releaseNumber = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																	"\r",
																	"    authorization = APPLICATION.authorizationCode;\r",
																	"    method = \"GET\";\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var FAULTY_ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    FAULTY_ORIGINATOR = GenerateFaultyOriginator();\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"        + '\"application-name\" : ' + '\"' + applicationName + '\",'\r",
																	"        + '\"release-number\" : ' + '\"' + releaseNumber + '\",'\r",
																	"        + '\"Authorization\" : ' + '\"' + authorization + '\",'\r",
																	"        + '\"method\" : ' + '\"' + method + '\"'\r",
																	"    +'}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/approve-oam-request\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:FAULTY_ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"function GenerateFaultyOriginator() {\r",
																	"    let faultyOriginator;\r",
																	"    let length;\r",
																	"    let minLength;\r",
																	"    minLength = 0;\r",
																	"    let maxLength;\r",
																	"    maxLength = 2;\r",
																	"    length = Math.floor(Math.random() * maxLength) + minLength;\r",
																	"    faultyOriginator = GenerateRandomString(length);\r",
																	"    return faultyOriginator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomString(length) {\r",
																	"    let randomString;\r",
																	"    randomString = \"\";\r",
																	"    try {\r",
																	"        let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r",
																	"        let charactersLength = characters.length;\r",
																	"        for (let i = 0; i < length; i++) {\r",
																	"            randomString += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Could not generate random string. \");\r",
																	"    }\r",
																	"    return randomString;\r",
																	"}\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	"\r",
																	"function RandomReleaseNumber() {\r",
																	"    let releaseNumber;\r",
																	"    let releaseNumberParts = [];\r",
																	"    for  (let i=0; i<3 ; i++) {\r",
																	"        releaseNumberParts[i] = Math.floor(Math.random() * 10);\r",
																	"    }\r",
																	"    releaseNumber = releaseNumberParts[0] + \".\" + releaseNumberParts[1] + \".\" + releaseNumberParts[2];\r",
																	"    return releaseNumber;\r",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"As expected, POST /v1/approve-oam-request responds 400, because of faulty originator parameter(too short string)\", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "400",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"description": "## Gets originator checked for compliance with specification?\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for op-s of /v1/approve-oam-request, storing operation-key\n  - randomly choosing http-c from ltpList\n- POST /v1/approve-oam-request\n  - all attributes filled with chosen http-c\n  - operation-key from above\n  - authorization code taken from input load file\n  - all parameters with realistic values, BUT \n    originator set to be a string of 0, 1 or 2 (random) letters length (too short).\n\n#### Testing:\n- checking for ResponseCode==400\n\n#### Clearing:\n- not applicable"
										},
										{
											"name": "x-correlator pattern",
											"item": [
												{
													"name": "reference /core-model-1-4:control-construct",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n----- /v1/approve-oam-request integration -- x-correlator pattern correctness check -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Environment variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY = \"\";\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var ltpList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    let responseCode;\r",
																	"    responseCode = parseInt(response.code);\r",
																	"    \r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        let responseObject;\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																	"\r",
																	"    } else {\r",
																	"        ltpList = [];\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! ltpList could not be extracted.\");\r",
																	"}\r",
																	"\r",
																	"var currentOperationServer;\r",
																	"var httpClientLtp;\r",
																	"try {\r",
																	"    currentOperationServer = FindOperationServer(\"/v1/approve-oam-request\", ltpList);\r",
																	"    httpClientLtp = FindRandomHttpClientLTP(ltpList);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Reference objects could not be extracted.\");\r",
																	"} \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.clear();\r",
																	"    \r",
																	"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																	"    pm.collectionVariables.set(\"httpClientLtp\", httpClientLtp);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function FindOperationServer(operationName, ltpList) {\r",
																	"    let operationServer;\r",
																	"    operationServer = \"\";\r",
																	"    try {\r",
																	"        let sampleUuid;\r",
																	"        for(let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"op-s-\")) {\r",
																	"                let sampleOperationName;\r",
																	"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																	"                if(sampleOperationName == operationName) {\r",
																	"                    operationServer = ltpList[i];\r",
																	"                    return operationServer;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																	"    }\r",
																	"    return operationServer;\r",
																	"}\r",
																	"\r",
																	"function FindRandomHttpClientLTP(ltpList) {\r",
																	"    let randomHttpClientLtp;\r",
																	"    randomHttpClientLtp = {};\r",
																	"    let httpClientLtpList;\r",
																	"    httpClientLtpList = [];\r",
																	"    try{\r",
																	"        let sampleUuid;\r",
																	"        for ( let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"http-c-\")){\r",
																	"                    httpClientLtpList.push(ltpList[i]);\r",
																	"            }\r",
																	"        }\r",
																	"        if ( httpClientLtpList.length > 0 ) {\r",
																	"            const random = Math.floor(Math.random() * httpClientLtpList.length);\r",
																	"            randomHttpClientLtp = httpClientLtpList[random];\r",
																	"        }\r",
																	"    } catch( error ){\r",
																	"        console.log(error);\r",
																	"        console.log(\"! Exception in function : FindRandomHttpClientLTP. \")\r",
																	"    }\r",
																	"    return randomHttpClientLtp;\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected /v1/approve-oam-request with Too short x-correlator",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n----- x-correlator parameter correctness check - too short -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"var applicationName;\r",
																	"var releaseNumber;\r",
																	"var authorization;\r",
																	"var method;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"    \r",
																	"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"\r",
																	"    let httpClientLtp;\r",
																	"    httpClientLtp = pm.collectionVariables.get(\"httpClientLtp\");\r",
																	"\r",
																	"    applicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																	"    releaseNumber = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																	"\r",
																	"    authorization = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    method = \"GET\";\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var FAULTY_X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    FAULTY_X_CORRELATOR = GenerateFaultyXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(error)\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"        + '\"application-name\" : ' + '\"' + applicationName + '\",'\r",
																	"        + '\"release-number\" : ' + '\"' + releaseNumber + '\",'\r",
																	"        + '\"Authorization\" : ' + '\"' + authorization + '\",'\r",
																	"        + '\"method\" : ' + '\"' + method + '\"'\r",
																	"    +'}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/approve-oam-request\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:FAULTY_X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function GenerateFaultyXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomString(length) {\r",
																	"    let randomString;\r",
																	"    randomString = \"\";\r",
																	"    try {\r",
																	"        let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r",
																	"        let charactersLength = characters.length;\r",
																	"        for (let i = 0; i < length; i++) {\r",
																	"            randomString += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Could not generate random string. \");\r",
																	"    }\r",
																	"    return randomString;\r",
																	"}\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function RandomReleaseNumber() {\r",
																	"    let releaseNumber;\r",
																	"    let releaseNumberParts = [];\r",
																	"    for  (let i=0; i<3 ; i++) {\r",
																	"        releaseNumberParts[i] = Math.floor(Math.random() * 10);\r",
																	"    }\r",
																	"    releaseNumber = releaseNumberParts[0] + \".\" + releaseNumberParts[1] + \".\" + releaseNumberParts[2];\r",
																	"    return releaseNumber;\r",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"As expected, POST /v1/approve-oam-request responds 400, because of too short x-correlator value \", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "400",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected /v1/approve-oam-request with Too long x-correlator",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n----- x-correlator parameter correctness check - too long -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"var applicationName;\r",
																	"var releaseNumber;\r",
																	"var authorization;\r",
																	"var method;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"    \r",
																	"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"\r",
																	"    let httpClientLtp;\r",
																	"    httpClientLtp = pm.collectionVariables.get(\"httpClientLtp\");\r",
																	"\r",
																	"    applicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																	"    releaseNumber = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																	"\r",
																	"    authorization = APPLICATION.authorizationCode;\r",
																	"    method = \"GET\";\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var FAULTY_X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    FAULTY_X_CORRELATOR = GenerateFaultyXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(error)\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"        + '\"application-name\" : ' + '\"' + applicationName + '\",'\r",
																	"        + '\"release-number\" : ' + '\"' + releaseNumber + '\",'\r",
																	"        + '\"Authorization\" : ' + '\"' + authorization + '\",'\r",
																	"        + '\"method\" : ' + '\"' + method + '\"'\r",
																	"    +'}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/approve-oam-request\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:FAULTY_X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function GenerateFaultyXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomString(length) {\r",
																	"    let randomString;\r",
																	"    randomString = \"\";\r",
																	"    try {\r",
																	"        let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r",
																	"        let charactersLength = characters.length;\r",
																	"        for (let i = 0; i < length; i++) {\r",
																	"            randomString += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Could not generate random string. \");\r",
																	"    }\r",
																	"    return randomString;\r",
																	"}\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function RandomReleaseNumber() {\r",
																	"    let releaseNumber;\r",
																	"    let releaseNumberParts = [];\r",
																	"    for  (let i=0; i<3 ; i++) {\r",
																	"        releaseNumberParts[i] = Math.floor(Math.random() * 10);\r",
																	"    }\r",
																	"    releaseNumber = releaseNumberParts[0] + \".\" + releaseNumberParts[1] + \".\" + releaseNumberParts[2];\r",
																	"    return releaseNumber;\r",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"As expected, POST /v1/approve-oam-request responds 400, because of too long x-correlator value \", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "400",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected /v1/approve-oam-request with incorrect characters count x-correlator",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n----- x-correlator parameter correctness check - incorrect characters count -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"var applicationName;\r",
																	"var releaseNumber;\r",
																	"var authorization;\r",
																	"var method;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"    \r",
																	"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"\r",
																	"    let httpClientLtp;\r",
																	"    httpClientLtp = pm.collectionVariables.get(\"httpClientLtp\");\r",
																	"\r",
																	"    applicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																	"    releaseNumber = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																	"\r",
																	"    authorization = APPLICATION.authorizationCode;\r",
																	"    method = \"GET\"; \r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var FAULTY_X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    FAULTY_X_CORRELATOR = GenerateFaultyXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(error)\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"        + '\"application-name\" : ' + '\"' + applicationName + '\",'\r",
																	"        + '\"release-number\" : ' + '\"' + releaseNumber + '\",'\r",
																	"        + '\"Authorization\" : ' + '\"' + authorization + '\",'\r",
																	"        + '\"method\" : ' + '\"' + method + '\"'\r",
																	"    +'}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/approve-oam-request\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:FAULTY_X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function GenerateFaultyXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"\r",
																	"    let faultyElementLength;\r",
																	"    faultyElementLength = Math.floor(Math.random() * 3) + 1;\r",
																	"    let faultyElement;\r",
																	"    faultyElement = GenerateRandomHexString(faultyElementLength);\r",
																	"\r",
																	"    let xCorrelatorParts;\r",
																	"    xCorrelatorParts = xCorrelator.split(\"-\");\r",
																	"    let faultyXCorrelatorPart;\r",
																	"    faultyXCorrelatorPart = Math.floor(Math.random() * xCorrelatorParts.length);\r",
																	"\r",
																	"    xCorrelatorParts[faultyXCorrelatorPart] = faultyElement;\r",
																	"    xCorrelator = xCorrelatorParts.join(\"-\");\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomString(length) {\r",
																	"    let randomString;\r",
																	"    randomString = \"\";\r",
																	"    try {\r",
																	"        let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r",
																	"        let charactersLength = characters.length;\r",
																	"        for (let i = 0; i < length; i++) {\r",
																	"            randomString += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Could not generate random string. \");\r",
																	"    }\r",
																	"    return randomString;\r",
																	"}\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function RandomReleaseNumber() {\r",
																	"    let releaseNumber;\r",
																	"    let releaseNumberParts = [];\r",
																	"    for  (let i=0; i<3 ; i++) {\r",
																	"        releaseNumberParts[i] = Math.floor(Math.random() * 10);\r",
																	"    }\r",
																	"    releaseNumber = releaseNumberParts[0] + \".\" + releaseNumberParts[1] + \".\" + releaseNumberParts[2];\r",
																	"    return releaseNumber;\r",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"As expected, POST /v1/approve-oam-request responds 400, because of incorrect character count of x-correlator value \", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "400",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected /v1/approve-oam-request with incorrect separator x-correlator",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n----- x-correlator parameter correctness check - incorrect separator -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"var applicationName;\r",
																	"var releaseNumber;\r",
																	"var authorization;\r",
																	"var method;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"    \r",
																	"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"\r",
																	"    let httpClientLtp;\r",
																	"    httpClientLtp = pm.collectionVariables.get(\"httpClientLtp\");\r",
																	"\r",
																	"    applicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																	"    releaseNumber = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																	"\r",
																	"    authorization = APPLICATION.authorizationCode;\r",
																	"    method = \"GET\";\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var FAULTY_X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    FAULTY_X_CORRELATOR = GenerateFaultyXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(error)\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"        + '\"application-name\" : ' + '\"' + applicationName + '\",'\r",
																	"        + '\"release-number\" : ' + '\"' + releaseNumber + '\",'\r",
																	"        + '\"Authorization\" : ' + '\"' + authorization + '\",'\r",
																	"        + '\"method\" : ' + '\"' + method + '\"'\r",
																	"    +'}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/approve-oam-request\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:FAULTY_X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function GenerateFaultyXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"\r",
																	"    let separators;\r",
																	"    separators = \".:;/\";\r",
																	"    let separatorsLength;\r",
																	"    separatorsLength = separators.length;\r",
																	"\r",
																	"    let faultySeparator;\r",
																	"    faultySeparator = separators.charAt(Math.floor(Math.random() * separatorsLength));\r",
																	"\r",
																	"    xCorrelator += GenerateRandomHexString(8) + faultySeparator;\r",
																	"    xCorrelator += GenerateRandomHexString(4) + faultySeparator;\r",
																	"    xCorrelator += GenerateRandomHexString(4) + faultySeparator;\r",
																	"    xCorrelator += GenerateRandomHexString(4) + faultySeparator;\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomString(length) {\r",
																	"    let randomString;\r",
																	"    randomString = \"\";\r",
																	"    try {\r",
																	"        let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r",
																	"        let charactersLength = characters.length;\r",
																	"        for (let i = 0; i < length; i++) {\r",
																	"            randomString += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Could not generate random string. \");\r",
																	"    }\r",
																	"    return randomString;\r",
																	"}\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function RandomReleaseNumber() {\r",
																	"    let releaseNumber;\r",
																	"    let releaseNumberParts = [];\r",
																	"    for  (let i=0; i<3 ; i++) {\r",
																	"        releaseNumberParts[i] = Math.floor(Math.random() * 10);\r",
																	"    }\r",
																	"    releaseNumber = releaseNumberParts[0] + \".\" + releaseNumberParts[1] + \".\" + releaseNumberParts[2];\r",
																	"    return releaseNumber;\r",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"As expected, POST /v1/approve-oam-request responds 400, because of incorrect separator in x-correlator value \", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "400",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"description": "## Gets x-correlator checked for complying the pattern?\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for op-s of /v1/approve-oam-request, storing operation-key\n  - randomly choosing http-c from ltpList\n- POST /v1/approve-oam-request\n  - all attributes filled with chosen http-c\n  - operation-key from above\n  - authorization code taken from input load file\n  - reasonable parameters, BUT dummyXCorrelators differing from the pattern in various ways (e.g. empty string)\n\n#### Testing:\n- checking for ResponseCode==400\n\n#### Clearing:\n- not applicable"
										},
										{
											"name": "trace-indicator pattern",
											"item": [
												{
													"name": "reference /core-model-1-4:control-construct",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n----- /v1/approve-oam-request integration -- trace-indicator pattern correctness check -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Environment variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY = \"\";\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var ltpList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    let responseCode;\r",
																	"    responseCode = parseInt(response.code);\r",
																	"    \r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        let responseObject;\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																	"\r",
																	"    } else {\r",
																	"        ltpList = [];\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! ltpList could not be extracted.\");\r",
																	"}\r",
																	"\r",
																	"var currentOperationServer;\r",
																	"var httpClientLtp;\r",
																	"try {\r",
																	"    currentOperationServer = FindOperationServer(\"/v1/approve-oam-request\", ltpList);\r",
																	"    httpClientLtp = FindRandomHttpClientLTP(ltpList);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Reference objects could not be extracted.\");\r",
																	"} \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.clear();\r",
																	"    \r",
																	"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																	"    pm.collectionVariables.set(\"httpClientLtp\", httpClientLtp);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function FindOperationServer(operationName, ltpList) {\r",
																	"    let operationServer;\r",
																	"    operationServer = \"\";\r",
																	"    try {\r",
																	"        let sampleUuid;\r",
																	"        for(let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"op-s-\")) {\r",
																	"                let sampleOperationName;\r",
																	"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																	"                if(sampleOperationName == operationName) {\r",
																	"                    operationServer = ltpList[i];\r",
																	"                    return operationServer;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																	"    }\r",
																	"    return operationServer;\r",
																	"}\r",
																	"\r",
																	"function FindRandomHttpClientLTP(ltpList) {\r",
																	"    let randomHttpClientLtp;\r",
																	"    randomHttpClientLtp = {};\r",
																	"    let httpClientLtpList;\r",
																	"    httpClientLtpList = [];\r",
																	"    try{\r",
																	"        let sampleUuid;\r",
																	"        for ( let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"http-c-\")){\r",
																	"                    httpClientLtpList.push(ltpList[i]);\r",
																	"            }\r",
																	"        }\r",
																	"        if ( httpClientLtpList.length > 0 ) {\r",
																	"            const random = Math.floor(Math.random() * httpClientLtpList.length);\r",
																	"            randomHttpClientLtp = httpClientLtpList[random];\r",
																	"        }\r",
																	"    } catch( error ){\r",
																	"        console.log(error);\r",
																	"        console.log(\"! Exception in function : FindRandomHttpClientLTP. \")\r",
																	"    }\r",
																	"    return randomHttpClientLtp;\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected /v1/approve-oam-request with letters in trace-indicator",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n----- trace-indicator parameter correctness check - presence of letters -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"var applicationName;\r",
																	"var releaseNumber;\r",
																	"var authorization;\r",
																	"var method;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"    \r",
																	"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"\r",
																	"    let httpClientLtp;\r",
																	"    httpClientLtp = pm.collectionVariables.get(\"httpClientLtp\");\r",
																	"\r",
																	"    applicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																	"    releaseNumber = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																	"\r",
																	"    authorization = APPLICATION.authorizationCode;\r",
																	"    method = \"GET\";\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var FAULTY_TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    FAULTY_TRACE_INDICATOR = GenerateFaultyTraceIndicator();\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(error)\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"        + '\"application-name\" : ' + '\"' + applicationName + '\",'\r",
																	"        + '\"release-number\" : ' + '\"' + releaseNumber + '\",'\r",
																	"        + '\"Authorization\" : ' + '\"' + authorization + '\",'\r",
																	"        + '\"method\" : ' + '\"' + method + '\"'\r",
																	"    +'}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/approve-oam-request\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:FAULTY_TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"function GenerateFaultyTraceIndicator() {\r",
																	"    let traceIndicator;\r",
																	"    traceIndicator = \"\";\r",
																	"\r",
																	"    let traceIndicatorParts;\r",
																	"    traceIndicatorParts = [];\r",
																	"    for(let i=0; i<3; i++) {\r",
																	"        traceIndicatorParts[i] = Math.floor(Math.random() * 10);\r",
																	"    }\r",
																	"    let characters;\r",
																	"    characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r",
																	"    let charactersLength;\r",
																	"    charactersLength = characters.length;\r",
																	"    let faultyElement;\r",
																	"    faultyElement = characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																	"\r",
																	"    let faultyTraceIndicatorPart;\r",
																	"    faultyTraceIndicatorPart = Math.floor(Math.random() * 3);\r",
																	"\r",
																	"    traceIndicatorParts[faultyTraceIndicatorPart] = faultyElement;\r",
																	"    traceIndicator = traceIndicatorParts.join(\".\");\r",
																	"\r",
																	"    return traceIndicator;\r",
																	"}\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomString(length) {\r",
																	"    let randomString;\r",
																	"    randomString = \"\";\r",
																	"    try {\r",
																	"        let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r",
																	"        let charactersLength = characters.length;\r",
																	"        for (let i = 0; i < length; i++) {\r",
																	"            randomString += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Could not generate random string. \");\r",
																	"    }\r",
																	"    return randomString;\r",
																	"}\r",
																	"\r",
																	"function RandomReleaseNumber() {\r",
																	"    let releaseNumber;\r",
																	"    let releaseNumberParts = [];\r",
																	"    for  (let i=0; i<3 ; i++) {\r",
																	"        releaseNumberParts[i] = Math.floor(Math.random() * 10);\r",
																	"    }\r",
																	"    releaseNumber = releaseNumberParts[0] + \".\" + releaseNumberParts[1] + \".\" + releaseNumberParts[2];\r",
																	"    return releaseNumber;\r",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"As expected, POST /v1/approve-oam-request responds 400, because of presence of letters in trace-indicator value \", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "400",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected /v1/approve-oam-request with incorrect separator trace-indicator",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n----- trace-indicator parameter correctness check - incorrect separator -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"var applicationName;\r",
																	"var releaseNumber;\r",
																	"var authorization;\r",
																	"var method;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"    \r",
																	"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"\r",
																	"    let httpClientLtp;\r",
																	"    httpClientLtp = pm.collectionVariables.get(\"httpClientLtp\");\r",
																	"\r",
																	"    applicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																	"    releaseNumber = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																	"\r",
																	"    authorization = APPLICATION.authorizationCode;\r",
																	"    method = \"GET\";\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var FAULTY_TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    FAULTY_TRACE_INDICATOR = GenerateFaultyTraceIndicator();\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(error)\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"        + '\"application-name\" : ' + '\"' + applicationName + '\",'\r",
																	"        + '\"release-number\" : ' + '\"' + releaseNumber + '\",'\r",
																	"        + '\"Authorization\" : ' + '\"' + authorization + '\",'\r",
																	"        + '\"method\" : ' + '\"' + method + '\"'\r",
																	"    +'}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/approve-oam-request\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:FAULTY_TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"function GenerateFaultyTraceIndicator() {\r",
																	"    let traceIndicator;\r",
																	"    traceIndicator = \"\";\r",
																	"\r",
																	"    let traceIndicatorParts;\r",
																	"    traceIndicatorParts = [];\r",
																	"    for(let i=0; i<3; i++) {\r",
																	"        traceIndicatorParts[i] = Math.floor(Math.random() * 10);\r",
																	"    }\r",
																	"    let separators;\r",
																	"    separators = \"-:;/\";\r",
																	"    let separatorsLength;\r",
																	"    separatorsLength = separators.length;\r",
																	"\r",
																	"    let faultySeparator;\r",
																	"    faultySeparator = separators.charAt(Math.floor(Math.random() * separatorsLength));\r",
																	"\r",
																	"    traceIndicator = traceIndicatorParts.join(faultySeparator);\r",
																	"\r",
																	"    return traceIndicator;\r",
																	"}\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomString(length) {\r",
																	"    let randomString;\r",
																	"    randomString = \"\";\r",
																	"    try {\r",
																	"        let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r",
																	"        let charactersLength = characters.length;\r",
																	"        for (let i = 0; i < length; i++) {\r",
																	"            randomString += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Could not generate random string. \");\r",
																	"    }\r",
																	"    return randomString;\r",
																	"}\r",
																	"\r",
																	"function RandomReleaseNumber() {\r",
																	"    let releaseNumber;\r",
																	"    let releaseNumberParts = [];\r",
																	"    for  (let i=0; i<3 ; i++) {\r",
																	"        releaseNumberParts[i] = Math.floor(Math.random() * 10);\r",
																	"    }\r",
																	"    releaseNumber = releaseNumberParts[0] + \".\" + releaseNumberParts[1] + \".\" + releaseNumberParts[2];\r",
																	"    return releaseNumber;\r",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"As expected, POST /v1/approve-oam-request responds 400, because of incorrect separator in trace-indicator value \", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "400",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"description": "## Gets trace-indicator checked for complying the pattern?\n\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for op-s of /v1/approve-oam-request, storing operation-key\n  - randomly choosing http-c from ltpList\n- POST /v1/approve-oam-request\n  - all attributes filled with chosen http-c\n  - operation-key from above\n  - authorization code taken from input load file\n  - reasonable parameters, BUT dummyTraceIndicator differing from the pattern in various ways (e.g. empty string)\n\n#### Testing:\n- checking for ResponseCode==400\n\n#### Clearing:\n- not applicable"
										},
										{
											"name": "security key missing?",
											"item": [
												{
													"name": "reference /core-model-1-4:control-construct",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n-----/v1/approve-oam-request integration -- securitykey missing? -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Environment variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY = \"\";\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var ltpList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    let responseCode;\r",
																	"    responseCode = parseInt(response.code);\r",
																	"    \r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        let responseObject;\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																	"\r",
																	"    } else {\r",
																	"        ltpList = [];\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! ltpList could not be extracted.\");\r",
																	"}\r",
																	"\r",
																	"var httpClientLtp;\r",
																	"try {\r",
																	"    httpClientLtp = FindRandomHttpClientLTP(ltpList);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Reference objects could not be extracted.\");\r",
																	"} \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.clear();\r",
																	"    \r",
																	"    pm.collectionVariables.set(\"httpClientLtp\", httpClientLtp);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function FindOperationServer(operationName, ltpList) {\r",
																	"    let operationServer;\r",
																	"    operationServer = \"\";\r",
																	"    try {\r",
																	"        let sampleUuid;\r",
																	"        for(let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"op-s-\")) {\r",
																	"                let sampleOperationName;\r",
																	"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																	"                if(sampleOperationName == operationName) {\r",
																	"                    operationServer = ltpList[i];\r",
																	"                    return operationServer;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																	"    }\r",
																	"    return operationServer;\r",
																	"}\r",
																	"\r",
																	"function FindRandomHttpClientLTP(ltpList) {\r",
																	"    let randomHttpClientLtp;\r",
																	"    randomHttpClientLtp = {};\r",
																	"    let httpClientLtpList;\r",
																	"    httpClientLtpList = [];\r",
																	"    try{\r",
																	"        let sampleUuid;\r",
																	"        for ( let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"http-c-\")){\r",
																	"                    httpClientLtpList.push(ltpList[i]);\r",
																	"            }\r",
																	"        }\r",
																	"        if ( httpClientLtpList.length > 0 ) {\r",
																	"            const random = Math.floor(Math.random() * httpClientLtpList.length);\r",
																	"            randomHttpClientLtp = httpClientLtpList[random];\r",
																	"        }\r",
																	"    } catch( error ){\r",
																	"        console.log(error);\r",
																	"        console.log(\"! Exception in function : FindRandomHttpClientLTP. \")\r",
																	"    }\r",
																	"    return randomHttpClientLtp;\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected /v1/approve-oam-request - security key missing?",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var applicationName;\r",
																	"var releaseNumber;\r",
																	"var authorization;\r",
																	"var method;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let httpClientLtp;\r",
																	"    httpClientLtp = pm.collectionVariables.get(\"httpClientLtp\");\r",
																	"\r",
																	"    applicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																	"    releaseNumber = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																	"\r",
																	"    authorization = APPLICATION.authorizationCode;\r",
																	"    method = \"GET\";\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"        + '\"application-name\" : ' + '\"' + applicationName + '\",'\r",
																	"        + '\"release-number\" : ' + '\"' + releaseNumber + '\",'\r",
																	"        + '\"Authorization\" : ' + '\"' + authorization + '\",'\r",
																	"        + '\"method\" : ' + '\"' + method + '\"'\r",
																	"    +'}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/approve-oam-request\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomString(length) {\r",
																	"    let randomString;\r",
																	"    randomString = \"\";\r",
																	"    try {\r",
																	"        let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r",
																	"        let charactersLength = characters.length;\r",
																	"        for (let i = 0; i < length; i++) {\r",
																	"            randomString += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Could not generate random string. \");\r",
																	"    }\r",
																	"    return randomString;\r",
																	"}\r",
																	"\r",
																	"function RandomReleaseNumber() {\r",
																	"    let releaseNumber;\r",
																	"    let releaseNumberParts = [];\r",
																	"    for  (let i=0; i<3 ; i++) {\r",
																	"        releaseNumberParts[i] = Math.floor(Math.random() * 10);\r",
																	"    }\r",
																	"    releaseNumber = releaseNumberParts[0] + \".\" + releaseNumberParts[1] + \".\" + releaseNumberParts[2];\r",
																	"    return releaseNumber;\r",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"As expected, POST /v1/approve-oam-request responds 401, because of missing operation-key\", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(401);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "401",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"description": "## Gets security key checked for availability?\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for op-s of /v1/approve-oam-request, storing operation-key\n  - randomly choosing http-c from ltpList\n- POST /v1/approve-oam-request\n  - all attributes filled with chosen http-c\n  - reasonable parameters\n  - BUT operationKey parameter missing (does not mean empty string)\n\n#### Testing:\n- checking for ResponseCode==401\n\n#### Clearing:\n- not applicable"
										},
										{
											"name": "security key checked?",
											"item": [
												{
													"name": "reference /core-model-1-4:control-construct",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n----- /v1/approve-oam-request integration -- securitykey checked? ------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Environment variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY = \"\";\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var ltpList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    let responseCode;\r",
																	"    responseCode = parseInt(response.code);\r",
																	"    \r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        let responseObject;\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																	"\r",
																	"    } else {\r",
																	"        ltpList = [];\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! ltpList could not be extracted.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"var httpClientLtp;\r",
																	"try {\r",
																	"    httpClientLtp = FindRandomHttpClientLTP(ltpList);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Reference objects could not be extracted.\");\r",
																	"} \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.clear();\r",
																	"    \r",
																	"    pm.collectionVariables.set(\"httpClientLtp\", httpClientLtp);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function FindOperationServer(operationName, ltpList) {\r",
																	"    let operationServer;\r",
																	"    operationServer = \"\";\r",
																	"    try {\r",
																	"        let sampleUuid;\r",
																	"        for(let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"op-s-\")) {\r",
																	"                let sampleOperationName;\r",
																	"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																	"                if(sampleOperationName == operationName) {\r",
																	"                    operationServer = ltpList[i];\r",
																	"                    return operationServer;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																	"    }\r",
																	"    return operationServer;\r",
																	"}\r",
																	"\r",
																	"function FindRandomHttpClientLTP(ltpList) {\r",
																	"    let randomHttpClientLtp;\r",
																	"    randomHttpClientLtp = {};\r",
																	"    let httpClientLtpList;\r",
																	"    httpClientLtpList = [];\r",
																	"    try{\r",
																	"        let sampleUuid;\r",
																	"        for ( let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"http-c-\")){\r",
																	"                    httpClientLtpList.push(ltpList[i]);\r",
																	"            }\r",
																	"        }\r",
																	"        if ( httpClientLtpList.length > 0 ) {\r",
																	"            const random = Math.floor(Math.random() * httpClientLtpList.length);\r",
																	"            randomHttpClientLtp = httpClientLtpList[random];\r",
																	"        }\r",
																	"    } catch( error ){\r",
																	"        console.log(error);\r",
																	"        console.log(\"! Exception in function : FindRandomHttpClientLTP. \")\r",
																	"    }\r",
																	"    return randomHttpClientLtp;\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected /v1/approve-oam-request - security key checked?",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var applicationName;\r",
																	"var releaseNumber;\r",
																	"var authorization;\r",
																	"var method;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let httpClientLtp;\r",
																	"    httpClientLtp = pm.collectionVariables.get(\"httpClientLtp\");\r",
																	"\r",
																	"    applicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																	"    releaseNumber = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																	"\r",
																	"    authorization = APPLICATION.authorizationCode;\r",
																	"    method = \"GET\";\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"        + '\"application-name\" : ' + '\"' + applicationName + '\",'\r",
																	"        + '\"release-number\" : ' + '\"' + releaseNumber + '\",'\r",
																	"        + '\"Authorization\" : ' + '\"' + authorization + '\",'\r",
																	"        + '\"method\" : ' + '\"' + method + '\"'\r",
																	"    +'}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy security key\r",
																	"****************************************************************************************/\r",
																	"var FAULTY_OPERATION_KEY;\r",
																	"try {\r",
																	"    FAULTY_OPERATION_KEY = GenerateRandomHexString(32);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy value for operationKey. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/approve-oam-request\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({ key: \"operation-key\", value: FAULTY_OPERATION_KEY });\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomString(length) {\r",
																	"    let randomString;\r",
																	"    randomString = \"\";\r",
																	"    try {\r",
																	"        let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r",
																	"        let charactersLength = characters.length;\r",
																	"        for (let i = 0; i < length; i++) {\r",
																	"            randomString += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Could not generate random string. \");\r",
																	"    }\r",
																	"    return randomString;\r",
																	"}\r",
																	"\r",
																	"function RandomReleaseNumber() {\r",
																	"    let releaseNumber;\r",
																	"    let releaseNumberParts = [];\r",
																	"    for  (let i=0; i<3 ; i++) {\r",
																	"        releaseNumberParts[i] = Math.floor(Math.random() * 10);\r",
																	"    }\r",
																	"    releaseNumber = releaseNumberParts[0] + \".\" + releaseNumberParts[1] + \".\" + releaseNumberParts[2];\r",
																	"    return releaseNumber;\r",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"As expected, POST /v1/approve-oam-request responds 401, because of incorrect operation-key\", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(401);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "401",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"description": "## Gets security key checked for correctness?\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for op-s of /v1/approve-oam-request, storing operation-key\n  - randomly choosing http-c from ltpList\n- POST /v1/approve-oam-request\n  - all attributes filled with chosen http-c\n  - reasonable parameters\n  - BUT operationKey parameter with random dummy value\n\n#### Testing:\n- checking for ResponseCode==401\n\n#### Clearing:\n- not applicable"
										},
										{
											"name": "response header completeness",
											"item": [
												{
													"name": "reference /core-model-1-4:control-construct",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n----- /v1/approve-oam-request integration -- response header completeness -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Environment variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY = \"\";\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var ltpList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    let responseCode;\r",
																	"    responseCode = parseInt(response.code);\r",
																	"    \r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        let responseObject;\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																	"\r",
																	"    } else {\r",
																	"        ltpList = [];\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! ltpList could not be extracted.\");\r",
																	"}\r",
																	"\r",
																	"var currentOperationServer;\r",
																	"var httpClientLtp;\r",
																	"try {\r",
																	"    currentOperationServer = FindOperationServer(\"/v1/approve-oam-request\", ltpList);\r",
																	"    httpClientLtp = FindRandomHttpClientLTP(ltpList);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Reference objects could not be extracted.\");\r",
																	"} \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.clear();\r",
																	"    \r",
																	"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																	"    pm.collectionVariables.set(\"httpClientLtp\", httpClientLtp);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function FindOperationServer(operationName, ltpList) {\r",
																	"    let operationServer;\r",
																	"    operationServer = \"\";\r",
																	"    try {\r",
																	"        let sampleUuid;\r",
																	"        for(let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"op-s-\")) {\r",
																	"                let sampleOperationName;\r",
																	"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																	"                if(sampleOperationName == operationName) {\r",
																	"                    operationServer = ltpList[i];\r",
																	"                    return operationServer;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																	"    }\r",
																	"    return operationServer;\r",
																	"}\r",
																	"\r",
																	"function FindRandomHttpClientLTP(ltpList) {\r",
																	"    let randomHttpClientLtp;\r",
																	"    randomHttpClientLtp = {};\r",
																	"    let httpClientLtpList;\r",
																	"    httpClientLtpList = [];\r",
																	"    try{\r",
																	"        let sampleUuid;\r",
																	"        for ( let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"http-c-\")){\r",
																	"                    httpClientLtpList.push(ltpList[i]);\r",
																	"            }\r",
																	"        }\r",
																	"        if ( httpClientLtpList.length > 0 ) {\r",
																	"            const random = Math.floor(Math.random() * httpClientLtpList.length);\r",
																	"            randomHttpClientLtp = httpClientLtpList[random];\r",
																	"        }\r",
																	"    } catch( error ){\r",
																	"        console.log(error);\r",
																	"        console.log(\"! Exception in function : FindRandomHttpClientLTP. \")\r",
																	"    }\r",
																	"    return randomHttpClientLtp;\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected /v1/approve-oam-request response header parameter completeness",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"var applicationName;\r",
																	"var releaseNumber;\r",
																	"var authorization;\r",
																	"var method;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"    \r",
																	"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"\r",
																	"    let httpClientLtp;\r",
																	"    httpClientLtp = pm.collectionVariables.get(\"httpClientLtp\");\r",
																	"\r",
																	"    applicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																	"    releaseNumber = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																	"\r",
																	"    authorization = APPLICATION.authorizationCode;\r",
																	"    method = \"GET\";\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"        + '\"application-name\" : ' + '\"' + applicationName + '\",'\r",
																	"        + '\"release-number\" : ' + '\"' + releaseNumber + '\",'\r",
																	"        + '\"Authorization\" : ' + '\"' + authorization + '\",'\r",
																	"        + '\"method\" : ' + '\"' + method + '\"'\r",
																	"    +'}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/approve-oam-request\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomString(length) {\r",
																	"    let randomString;\r",
																	"    randomString = \"\";\r",
																	"    try {\r",
																	"        let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r",
																	"        let charactersLength = characters.length;\r",
																	"        for (let i = 0; i < length; i++) {\r",
																	"            randomString += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Could not generate random string. \");\r",
																	"    }\r",
																	"    return randomString;\r",
																	"}\r",
																	"\r",
																	"function RandomReleaseNumber() {\r",
																	"    let releaseNumber;\r",
																	"    let releaseNumberParts = [];\r",
																	"    for  (let i=0; i<3 ; i++) {\r",
																	"        releaseNumberParts[i] = Math.floor(Math.random() * 10);\r",
																	"    }\r",
																	"    releaseNumber = releaseNumberParts[0] + \".\" + releaseNumberParts[1] + \".\" + releaseNumberParts[2];\r",
																	"    return releaseNumber;\r",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"var response;\r",
																	"try {\r",
																	"    response = pm.response;\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"POST /v1/approve-oam-request responds 200\", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(200);\r",
																	"    });\r",
																	"    pm.test(\"Response headers contain 'x-correlator'\", function () {\r",
																	"        response.to.have.header(\"x-correlator\");\r",
																	"    });\r",
																	"    pm.test(\"Response headers contain 'exec-time'\", function () {\r",
																	"        response.to.have.header(\"exec-time\");\r",
																	"    });\r",
																	"    pm.test(\"Response headers contain 'backend-time'\", function () {\r",
																	"        response.to.have.header(\"backend-time\");\r",
																	"    });\r",
																	"    pm.test(\"Response headers contain 'life-cycle-state'\", function () {\r",
																	"        response.to.have.header(\"life-cycle-state\");\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"description": "## Contains response complete set of headers?\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for op-s of /v1/approve-oam-request, storing operation-key\n  - randomly choosing http-c from ltpList\n\n- POST /v1/approve-oam-request\n  - all attributes filled with chosen http-c\n  - operation-key from above\n  - authorization code taken from input load file\n  - reasonable parameters\n\n#### Testing:\n- checking for ResponseCode==200\n- checking for ResponseHeaders (x-correlator, exec-time, backend-time and life-cycle-state) being present and checking for correctness of type of each parameter.\n\n#### Clearing:\n- not applicable"
										},
										{
											"name": "x-correlator responded?",
											"item": [
												{
													"name": "reference /core-model-1-4:control-construct",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n----- /v1/approve-oam-request integration -- x-correlator responded? -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Environment variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY = \"\";\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var ltpList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    let responseCode;\r",
																	"    responseCode = parseInt(response.code);\r",
																	"    \r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        let responseObject;\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																	"\r",
																	"    } else {\r",
																	"        ltpList = [];\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! ltpList could not be extracted.\");\r",
																	"}\r",
																	"\r",
																	"var currentOperationServer;\r",
																	"var httpClientLtp;\r",
																	"try {\r",
																	"    currentOperationServer = FindOperationServer(\"/v1/approve-oam-request\", ltpList);\r",
																	"    httpClientLtp = FindRandomHttpClientLTP(ltpList);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Reference objects could not be extracted.\");\r",
																	"} \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.clear();\r",
																	"    \r",
																	"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																	"    pm.collectionVariables.set(\"httpClientLtp\", httpClientLtp);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function FindOperationServer(operationName, ltpList) {\r",
																	"    let operationServer;\r",
																	"    operationServer = \"\";\r",
																	"    try {\r",
																	"        let sampleUuid;\r",
																	"        for(let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"op-s-\")) {\r",
																	"                let sampleOperationName;\r",
																	"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																	"                if(sampleOperationName == operationName) {\r",
																	"                    operationServer = ltpList[i];\r",
																	"                    return operationServer;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																	"    }\r",
																	"    return operationServer;\r",
																	"}\r",
																	"\r",
																	"function FindRandomHttpClientLTP(ltpList) {\r",
																	"    let randomHttpClientLtp;\r",
																	"    randomHttpClientLtp = {};\r",
																	"    let httpClientLtpList;\r",
																	"    httpClientLtpList = [];\r",
																	"    try{\r",
																	"        let sampleUuid;\r",
																	"        for ( let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"http-c-\")){\r",
																	"                    httpClientLtpList.push(ltpList[i]);\r",
																	"            }\r",
																	"        }\r",
																	"        if ( httpClientLtpList.length > 0 ) {\r",
																	"            const random = Math.floor(Math.random() * httpClientLtpList.length);\r",
																	"            randomHttpClientLtp = httpClientLtpList[random];\r",
																	"        }\r",
																	"    } catch( error ){\r",
																	"        console.log(error);\r",
																	"        console.log(\"! Exception in function : FindRandomHttpClientLTP. \")\r",
																	"    }\r",
																	"    return randomHttpClientLtp;\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected /v1/approve-oam-request - correct x-correlator responded?",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"var applicationName;\r",
																	"var releaseNumber;\r",
																	"var authorization;\r",
																	"var method;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"    \r",
																	"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"\r",
																	"    let httpClientLtp;\r",
																	"    httpClientLtp = pm.collectionVariables.get(\"httpClientLtp\");\r",
																	"\r",
																	"    applicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																	"    releaseNumber = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																	"\r",
																	"    authorization = APPLICATION.authorizationCode;\r",
																	"    method = \"GET\";\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"        + '\"application-name\" : ' + '\"' + applicationName + '\",'\r",
																	"        + '\"release-number\" : ' + '\"' + releaseNumber + '\",'\r",
																	"        + '\"Authorization\" : ' + '\"' + authorization + '\",'\r",
																	"        + '\"method\" : ' + '\"' + method + '\"'\r",
																	"    +'}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.set(\"user\", USER_NAME);\r",
																	"    pm.collectionVariables.set(\"originator\", ORIGINATOR);\r",
																	"    pm.collectionVariables.set(\"xCorrelator\", X_CORRELATOR);\r",
																	"    pm.collectionVariables.set(\"traceIndicator\", TRACE_INDICATOR);\r",
																	"    pm.collectionVariables.set(\"customerJourney\", CUSTOMER_JOURNEY);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/approve-oam-request\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomString(length) {\r",
																	"    let randomString;\r",
																	"    randomString = \"\";\r",
																	"    try {\r",
																	"        let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r",
																	"        let charactersLength = characters.length;\r",
																	"        for (let i = 0; i < length; i++) {\r",
																	"            randomString += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Could not generate random string. \");\r",
																	"    }\r",
																	"    return randomString;\r",
																	"}\r",
																	"\r",
																	"function RandomReleaseNumber() {\r",
																	"    let releaseNumber;\r",
																	"    let releaseNumberParts = [];\r",
																	"    for  (let i=0; i<3 ; i++) {\r",
																	"        releaseNumberParts[i] = Math.floor(Math.random() * 10);\r",
																	"    }\r",
																	"    releaseNumber = releaseNumberParts[0] + \".\" + releaseNumberParts[1] + \".\" + releaseNumberParts[2];\r",
																	"    return releaseNumber;\r",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var expectedXCorrelator;\r",
																	"try {\r",
																	"    expectedXCorrelator = pm.collectionVariables.get(\"xCorrelator\");\r",
																	"   \r",
																	"} catch(error) {\r",
																	"    console.log(\"! Could not load input data. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"var actualXCorrelator;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"    let RESPONSE_HEADERS;\r",
																	"    RESPONSE_HEADERS = pm.response.headers;  \r",
																	"    \r",
																	"    actualXCorrelator = RESPONSE_HEADERS.get(\"x-correlator\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"POST /v1/approve-oam-request responds 200\", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(200);\r",
																	"    });\r",
																	"    pm.test(\"Provides expected x-correlator: \" + expectedXCorrelator, function () {\r",
																	"        pm.expect(actualXCorrelator).to.equal(expectedXCorrelator);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"description": "## Is the initial x-correlator ín the response?\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for op-s of /v1/approve-oam-request, storing operation-key\n  - randomly choosing http-c from ltpList\n\n- POST /v1/approve-oam-request\n  - all attributes filled with chosen http-c\n  - operation-key from above\n  - authorization code taken from input load file\n  - reasonable parameters\n\n#### Testing:\n- checking for ResponseCode==200\n- checking for response headers containing x-correlator==dummyXCorrelator\n\n#### Clearing:\n- not applicable"
										},
										{
											"name": "life-cycle-state responded?",
											"item": [
												{
													"name": "reference /core-model-1-4:control-construct",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n----- /v1/approve-oam-request integration -- life-cycle-state responded? -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Environment variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY = \"\";\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var ltpList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    let responseCode;\r",
																	"    responseCode = parseInt(response.code);\r",
																	"    \r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        let responseObject;\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																	"\r",
																	"    } else {\r",
																	"        ltpList = [];\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! ltpList could not be extracted.\");\r",
																	"}\r",
																	"\r",
																	"var currentOperationServer;\r",
																	"var httpClientLtp;\r",
																	"try {\r",
																	"    currentOperationServer = FindOperationServer(\"/v1/approve-oam-request\", ltpList);\r",
																	"    httpClientLtp = FindRandomHttpClientLTP(ltpList);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Reference objects could not be extracted.\");\r",
																	"} \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.clear();\r",
																	"    \r",
																	"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																	"    pm.collectionVariables.set(\"httpClientLtp\", httpClientLtp);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function FindOperationServer(operationName, ltpList) {\r",
																	"    let operationServer;\r",
																	"    operationServer = \"\";\r",
																	"    try {\r",
																	"        let sampleUuid;\r",
																	"        for(let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"op-s-\")) {\r",
																	"                let sampleOperationName;\r",
																	"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																	"                if(sampleOperationName == operationName) {\r",
																	"                    operationServer = ltpList[i];\r",
																	"                    return operationServer;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																	"    }\r",
																	"    return operationServer;\r",
																	"}\r",
																	"\r",
																	"function FindRandomHttpClientLTP(ltpList) {\r",
																	"    let randomHttpClientLtp;\r",
																	"    randomHttpClientLtp = {};\r",
																	"    let httpClientLtpList;\r",
																	"    httpClientLtpList = [];\r",
																	"    try{\r",
																	"        let sampleUuid;\r",
																	"        for ( let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"http-c-\")){\r",
																	"                    httpClientLtpList.push(ltpList[i]);\r",
																	"            }\r",
																	"        }\r",
																	"        if ( httpClientLtpList.length > 0 ) {\r",
																	"            const random = Math.floor(Math.random() * httpClientLtpList.length);\r",
																	"            randomHttpClientLtp = httpClientLtpList[random];\r",
																	"        }\r",
																	"    } catch( error ){\r",
																	"        console.log(error);\r",
																	"        console.log(\"! Exception in function : FindRandomHttpClientLTP. \")\r",
																	"    }\r",
																	"    return randomHttpClientLtp;\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected /v1/approve-oam-request correct life-cycle-state responded?",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"var applicationName;\r",
																	"var releaseNumber;\r",
																	"var authorization;\r",
																	"var method;\r",
																	"var LIFE_CYCLE_STATE;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"    \r",
																	"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"\r",
																	"    let httpClientLtp;\r",
																	"    httpClientLtp = pm.collectionVariables.get(\"httpClientLtp\");\r",
																	"\r",
																	"    applicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																	"    releaseNumber = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																	"\r",
																	"    authorization = APPLICATION.authorizationCode;\r",
																	"    method = \"GET\";\r",
																	"\r",
																	"    let lifeCycleState;\r",
																	"    lifeCycleState = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"life-cycle-state\"];\r",
																	"    let prefixLength = ('operation-server-interface-1-0:LIFE_CYCLE_STATE_TYPE_').length;     \r",
																	"    LIFE_CYCLE_STATE = lifeCycleState.substring(prefixLength);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"        + '\"application-name\" : ' + '\"' + applicationName + '\",'\r",
																	"        + '\"release-number\" : ' + '\"' + releaseNumber + '\",'\r",
																	"        + '\"Authorization\" : ' + '\"' + authorization + '\",'\r",
																	"        + '\"method\" : ' + '\"' + method + '\"'\r",
																	"    +'}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.set(\"expectedLifeCycleState\", LIFE_CYCLE_STATE);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/approve-oam-request\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomString(length) {\r",
																	"    let randomString;\r",
																	"    randomString = \"\";\r",
																	"    try {\r",
																	"        let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r",
																	"        let charactersLength = characters.length;\r",
																	"        for (let i = 0; i < length; i++) {\r",
																	"            randomString += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Could not generate random string. \");\r",
																	"    }\r",
																	"    return randomString;\r",
																	"}\r",
																	"\r",
																	"function RandomReleaseNumber() {\r",
																	"    let releaseNumber;\r",
																	"    let releaseNumberParts = [];\r",
																	"    for  (let i=0; i<3 ; i++) {\r",
																	"        releaseNumberParts[i] = Math.floor(Math.random() * 10);\r",
																	"    }\r",
																	"    releaseNumber = releaseNumberParts[0] + \".\" + releaseNumberParts[1] + \".\" + releaseNumberParts[2];\r",
																	"    return releaseNumber;\r",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var expectedLifeCycleState;\r",
																	"try {\r",
																	"    expectedLifeCycleState = pm.collectionVariables.get(\"expectedLifeCycleState\");\r",
																	"   \r",
																	"} catch(error) {\r",
																	"    console.log(\"! Could not load input data. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"var actualLifeCycleState;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"    let RESPONSE_HEADERS;\r",
																	"    RESPONSE_HEADERS = pm.response.headers;  \r",
																	"    \r",
																	"    actualLifeCycleState = RESPONSE_HEADERS.get(\"life-cycle-state\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"POST /v1/approve-oam-request responds 200\", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(200);\r",
																	"    });\r",
																	"    pm.test(\"Provides expected life-cycle-state: \" + expectedLifeCycleState, function () {\r",
																	"        pm.expect(actualLifeCycleState).to.equal(expectedLifeCycleState);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"description": "## Is the correct life-cycle-state ín the response?\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for op-s of /v1/approve-oam-request, storing operation-key\n  - randomly choosing http-c from ltpList\n\n- POST /v1/approve-oam-request\n  - all attributes filled with chosen http-c\n  - operation-key from above\n  - authorization code taken from input load file\n  - reasonable parameters\n\n#### Testing:\n- checking for ResponseCode==200\n- checking for response headers containing life-cycle-state is equal to the value as present in the control-construct for /v1/approve-oam-request/configuration/life-cycle-state\n\n#### Clearing:\n- not applicable"
										},
										{
											"name": "Request notified?",
											"item": [
												{
													"name": "reference /core-model-1-4:control-construct",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n-----  /v1/approve-oam-request integration -- request notified? -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Environment variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY = \"\";\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var ltpList;\r",
																	"var fcList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    let responseCode;\r",
																	"    responseCode = parseInt(response.code);\r",
																	"    \r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        let responseObject;\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																	"        fcList = responseObject[\"core-model-1-4:control-construct\"][\"forwarding-domain\"][0][\"forwarding-construct\"];\r",
																	"\r",
																	"    } else {\r",
																	"        ltpList = [];\r",
																	"        fcList = [];\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! ltpList could not be extracted.\");\r",
																	"}\r",
																	"\r",
																	"var currentOperationServer;\r",
																	"var executionAndTraceLogHttpClientLtp;\r",
																	"var executionAndTraceLogTcpClientLtp;\r",
																	"var httpServerLtp;\r",
																	"var httpClientLtp;\r",
																	"try {\r",
																	"    currentOperationServer = FindOperationServer(\"/v1/approve-oam-request\", ltpList);\r",
																	"    \r",
																	"    //Execution And Trace Log\r",
																	"    let recordServiceRequestOperationClientLtp = FindOperationClientUsingCallback(\"ServiceRequestCausesLoggingRequest\", fcList, ltpList)\r",
																	"    executionAndTraceLogHttpClientLtp = FindServingLtp(recordServiceRequestOperationClientLtp, ltpList);\r",
																	"    executionAndTraceLogTcpClientLtp = FindServingLtp(executionAndTraceLogHttpClientLtp, ltpList);\r",
																	"\r",
																	"    httpServerLtp = FindHttpServerLtp(ltpList);\r",
																	"    httpClientLtp = FindRandomHttpClientLTP(ltpList);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Reference objects could not be extracted.\");\r",
																	"} \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.clear();\r",
																	"    \r",
																	"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																	"    pm.collectionVariables.set(\"executionAndTraceLogHttpClientLtp\", executionAndTraceLogHttpClientLtp);\r",
																	"    pm.collectionVariables.set(\"executionAndTraceLogTcpClientLtp\", executionAndTraceLogTcpClientLtp);\r",
																	"    pm.collectionVariables.set(\"httpServerLtp\", httpServerLtp);\r",
																	"    pm.collectionVariables.set(\"httpClientLtp\", httpClientLtp);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function FindOperationServer(operationName, ltpList) {\r",
																	"    let operationServer;\r",
																	"    operationServer = \"\";\r",
																	"    try {\r",
																	"        let sampleUuid;\r",
																	"        for(let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"op-s-\")) {\r",
																	"                let sampleOperationName;\r",
																	"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																	"                if(sampleOperationName == operationName) {\r",
																	"                    operationServer = ltpList[i];\r",
																	"                    return operationServer;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																	"    }\r",
																	"    return operationServer;\r",
																	"}\r",
																	"\r",
																	"function FindHttpServerLtp(ltpList) {\r",
																	"    let httpServerLtp;\r",
																	"    httpServerLtp = {};\r",
																	"    try {\r",
																	"        for( let i=0; i<ltpList.length; i++ ) {\r",
																	"            let sampleUuid;\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"http-s-\")) {\r",
																	"                httpServerLtp = ltpList[i];\r",
																	"                return httpServerLtp;\r",
																	"            }\r",
																	"        } \r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function : FindHttpServerLtp. \");\r",
																	"    }\r",
																	"    return httpServerLtp;\r",
																	"}\r",
																	"\r",
																	"function FindHttpClientForApplicationName(applicationName, ltpList) {\r",
																	"    let httpClientLtp;\r",
																	"    httpClientLtp = {};\r",
																	"    try {\r",
																	"        let sampleUuid;\r",
																	"        for(let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"http-c-\")) {\r",
																	"                let sampleApplicationName;\r",
																	"                sampleApplicationName = ltpList[i][\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-capability\"][\"application-name\"];\r",
																	"                if(sampleApplicationName == applicationName) {\r",
																	"                    httpClientLtp = ltpList[i];\r",
																	"                    return httpClientLtp;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function : FindHttpClientForApplicationName. \");\r",
																	"    }\r",
																	"    return httpClientLtp;\r",
																	"}\r",
																	"\r",
																	"function FindRandomHttpClientLTP(ltpList) {\r",
																	"    let randomHttpClientLtp;\r",
																	"    randomHttpClientLtp = {};\r",
																	"    let httpClientLtpList;\r",
																	"    httpClientLtpList = [];\r",
																	"    try{\r",
																	"        let sampleUuid;\r",
																	"        for ( let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"http-c-\")){\r",
																	"                    httpClientLtpList.push(ltpList[i]);\r",
																	"            }\r",
																	"        }\r",
																	"        if ( httpClientLtpList.length > 0 ) {\r",
																	"            const random = Math.floor(Math.random() * httpClientLtpList.length);\r",
																	"            randomHttpClientLtp = httpClientLtpList[random];\r",
																	"        }\r",
																	"    } catch( error ){\r",
																	"        console.log(error);\r",
																	"        console.log(\"! Exception in function : FindRandomHttpClientLTP. \")\r",
																	"    }\r",
																	"    return randomHttpClientLtp;\r",
																	"}\r",
																	"\r",
																	"function FindServingLtp(clientLtp, ltpList) {\r",
																	"    let servingLtp;\r",
																	"    servingLtp = {};\r",
																	"    try{\r",
																	"        let serverLtpUuid;\r",
																	"        serverLtpUuid = clientLtp[\"server-ltp\"][0];\r",
																	"        for( let i=0; i<ltpList.length; i++ ) {\r",
																	"            let sampleUuid;\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if( sampleUuid == serverLtpUuid ) {\r",
																	"                servingLtp = ltpList[i];\r",
																	"                return servingLtp;\r",
																	"            }\r",
																	"        }\r",
																	"    } catch(error) {\r",
																	"        console.log(error);\r",
																	"        console.log(\"! Exception in function : FindServingLtp. \")\r",
																	"    }\r",
																	"    return servingLtp;\r",
																	"}\r",
																	"\r",
																	"\r",
																	"function FindOutputFcPortList(forwardingName, fcList) {\r",
																	"    let outputFcPortList;\r",
																	"    outputFcPortList = [];\r",
																	"    try {\r",
																	"        for( let i=0; i<fcList.length; i++ ) {\r",
																	"            for(let j=0; j<fcList[i][\"name\"].length; j++) {               \r",
																	"                if(fcList[i][\"name\"][j][\"value\"] == forwardingName) {\r",
																	"                    fcPortList = fcList[i][\"fc-port\"];\r",
																	"                    for(let k=0;k<fcPortList.length;k++) {\r",
																	"                        if(fcPortList[k][\"port-direction\"] == \"core-model-1-4:PORT_DIRECTION_TYPE_OUTPUT\") {\r",
																	"                            outputFcPortList.push(fcPortList[k]);\r",
																	"                        }\r",
																	"                    }\r",
																	"                    return outputFcPortList;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function FindOutputFcPortList. \");\r",
																	"    }\r",
																	"    return outputFcPortList;\r",
																	"}\r",
																	"\r",
																	"function FindActualInstanceByUuid(expectedUuid, actualLtpList) {\r",
																	"    let actualInstance;\r",
																	"    actualInstance = {};\r",
																	"    try {\r",
																	"        for ( let i=0; i<actualLtpList.length; i++ ) {\r",
																	"            let sampleUuid;\r",
																	"            sampleUuid = actualLtpList[i][\"uuid\"];\r",
																	"            if( sampleUuid == expectedUuid ) {\r",
																	"                actualInstance = actualLtpList[i];\r",
																	"                return actualInstance;\r",
																	"            }\r",
																	"        }\r",
																	"\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function FindActualInstanceByUuid. \");\r",
																	"    }\r",
																	"    return undefined;\r",
																	"}\r",
																	"\r",
																	"\r",
																	"function FindOperationClientUsingCallback(callback, fcList, ltpList) {\r",
																	"    let operationClientLtp\r",
																	"    try {\r",
																	"        let outputFcPortList = FindOutputFcPortList(callback, fcList);\r",
																	"        let randomOutputFcPort = outputFcPortList[Math.floor(Math.random() * outputFcPortList.length)];\r",
																	"        let outputLtpUuid = randomOutputFcPort[\"logical-termination-point\"];\r",
																	"        operationClientLtp = FindActualInstanceByUuid(outputLtpUuid, ltpList);\r",
																	"    } catch (error) {\r",
																	"        console.log(error);\r",
																	"        console.log(\"! Exception in function FindOperationClientUsingCallback. \");\r",
																	"    }\r",
																	"    return  operationClientLtp\r",
																	"}\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "reference ExecutionAndTraceLog/core-model-1-4:control-construct",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var AUTHORIZATION;\r",
																	"var applicationProtocol;\r",
																	"var applicationAddress;\r",
																	"var applicationPort;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let executionAndTraceLogTcpClientLtp;\r",
																	"    executionAndTraceLogTcpClientLtp = pm.collectionVariables.get(\"executionAndTraceLogTcpClientLtp\");\r",
																	"    \r",
																	"    applicationProtocol = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																	"    applicationProtocol = applicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																	"    \r",
																	"    applicationAddress = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																	"    if(applicationAddress.hasOwnProperty(\"ip-address\")) {\r",
																	"        applicationAddress = applicationAddress[\"ip-address\"][\"ipv-4-address\"];\r",
																	"    } else {\r",
																	"        applicationAddress = applicationAddress[\"domain-name\"];\r",
																	"    }\r",
																	"\r",
																	"    applicationPort = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																	" \r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Environment variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = \"\";\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = applicationProtocol + \"://\" + applicationAddress + \":\" + applicationPort + \"/core-model-1-4:control-construct\";\r",
																	"    //URI = \"http://9d098835-4e91-48f3-9761-04a82ff2843e.mock.pstmn.io\" + \"/core-model-1-4:control-construct\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var ltpList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    let responseCode;\r",
																	"    responseCode = parseInt(response.code);\r",
																	"    \r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        let responseObject;\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																	"\r",
																	"    } else {\r",
																	"        ltpList = [];\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! ltpList could not be extracted.\");\r",
																	"}\r",
																	"\r",
																	"var listRecordsOfFlowOperationKey;\r",
																	"try {\r",
																	"    listRecordsOfFlowOperationKey = FindOperationKeyForOperationName(\"/v1/list-records-of-flow\", ltpList);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Reference objects could not be extracted.\");\r",
																	"} \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.set(\"listRecordsOfFlowOperationKey\", listRecordsOfFlowOperationKey);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"function FindOperationKeyForOperationName(operationName, ltpList) {\r",
																	"    let operationKey;\r",
																	"    operationKey = \"\";\r",
																	"    try {\r",
																	"         let sampleUuid;\r",
																	"         for ( let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"op-s-\")){\r",
																	"                let sampleOperationName;\r",
																	"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																	"                if(sampleOperationName == operationName) {\r",
																	"                    operationKey = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"                    return operationKey; \r",
																	"                }\r",
																	"            }\r",
																	"         }\r",
																	"\r",
																	"    } catch (error) {\r",
																	"        console.log(\" ! Exception in function : FindOperationKeyForOperationName\")\r",
																	"    }\r",
																	"    return operationKey;\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "sampling  /v1/approve-oam-request",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"var applicationName;\r",
																	"var releaseNumber;\r",
																	"var authorization;\r",
																	"var method;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"    \r",
																	"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"\r",
																	"    let httpClientLtp;\r",
																	"    httpClientLtp = pm.collectionVariables.get(\"httpClientLtp\");\r",
																	"\r",
																	"    applicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																	"    releaseNumber = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																	"\r",
																	"    authorization = APPLICATION.authorizationCode;\r",
																	"    method = \"GET\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"        + '\"application-name\" : ' + '\"' + applicationName + '\",'\r",
																	"        + '\"release-number\" : ' + '\"' + releaseNumber + '\",'\r",
																	"        + '\"Authorization\" : ' + '\"' + authorization + '\",'\r",
																	"        + '\"method\" : ' + '\"' + method + '\"'\r",
																	"    +'}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.set(\"user\", USER_NAME);\r",
																	"    pm.collectionVariables.set(\"originator\", ORIGINATOR);\r",
																	"    pm.collectionVariables.set(\"xCorrelator\", X_CORRELATOR);\r",
																	"    pm.collectionVariables.set(\"traceIndicator\", TRACE_INDICATOR);\r",
																	"    pm.collectionVariables.set(\"customerJourney\", CUSTOMER_JOURNEY);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/approve-oam-request\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const currentCount = 0;\r",
																	"try {\r",
																	"\tpm.collectionVariables.set(\"currentCount\", currentCount);\r",
																	"\r",
																	"} catch(error) {\r",
																	"    console.log(\" !Could not set currentCount. \");\r",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected ExecutionAndTraceLog/v1/list-records-of-flow for /v1/approve-oam-request:: Request notified?",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"var applicationProtocol;\r",
																	"var applicationAddress;\r",
																	"var applicationPort;\r",
																	"var xCorrelatorUnderTest;\r",
																	"var latestMatch;\r",
																	"var numberOfRecords;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let executionAndTraceLogTcpClientLtp;\r",
																	"    executionAndTraceLogTcpClientLtp = pm.collectionVariables.get(\"executionAndTraceLogTcpClientLtp\");\r",
																	"    \r",
																	"    applicationProtocol = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-protocol\"];\r",
																	"    applicationProtocol = applicationProtocol.substring(('tcp-client-interface-1-0:PROTOCOL_TYPE_').length);\r",
																	"    \r",
																	"    applicationAddress = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-address\"];\r",
																	"    if(applicationAddress.hasOwnProperty(\"ip-address\")) {\r",
																	"        applicationAddress = applicationAddress[\"ip-address\"][\"ipv-4-address\"];\r",
																	"    } else {\r",
																	"        applicationAddress = applicationAddress[\"domain-name\"];\r",
																	"    }\r",
																	"\r",
																	"    applicationPort = executionAndTraceLogTcpClientLtp[\"layer-protocol\"][0][\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"][\"remote-port\"];\r",
																	"\r",
																	"    OPERATION_KEY = pm.collectionVariables.get(\"listRecordsOfFlowOperationKey\");\r",
																	"    xCorrelatorUnderTest = pm.collectionVariables.get(\"xCorrelator\");\r",
																	"    latestMatch = 0;\r",
																	"    numberOfRecords = 100;\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error)\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"                + '\"x-correlator\": \"' + xCorrelatorUnderTest +'\",'\r",
																	"                + '\"latest-match\": ' + latestMatch + ','\r",
																	"                + '\"number-of-records\":' + numberOfRecords\r",
																	"                + '}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = applicationProtocol + \"://\" + applicationAddress + \":\" + applicationPort + \"/v1/list-records-of-flow\";\r",
																	"    //URI = \"http://9d098835-4e91-48f3-9761-04a82ff2843e.mock.pstmn.io/v1/list-records-of-flow\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0, length);\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Constant variables\r",
																	"****************************************************************************************/\r",
																	"var retryMaxCount;\r",
																	"var retryWaitingPeriod;\r",
																	"var currentCount;\r",
																	"try {\r",
																	"    retryMaxCount = pm.environment.get(\"retryMaxCount\");\r",
																	"    retryWaitingPeriod = pm.environment.get(\"retryWaitingPeriod\");\r",
																	"    currentCount = pm.collectionVariables.get(\"currentCount\");\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not load constant variables Data. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var expectedXCorrelator;\r",
																	"var expectedUser;\r",
																	"var expectedOriginator;\r",
																	"var expectedTraceIndicator;\r",
																	"var expectedApplicationName;\r",
																	"var expectedReleaseNumber;\r",
																	"var expectedOperationName;\r",
																	"try {\r",
																	"    expectedXCorrelator = pm.collectionVariables.get(\"xCorrelator\");\r",
																	"    expectedUser = pm.collectionVariables.get(\"user\");\r",
																	"    expectedOriginator = pm.collectionVariables.get(\"originator\");\r",
																	"    expectedTraceIndicator = pm.collectionVariables.get(\"traceIndicator\");\r",
																	"\r",
																	"    let expectedHttpServerLtp;\r",
																	"    expectedHttpServerLtp = pm.collectionVariables.get(\"httpServerLtp\");\r",
																	"    expectedApplicationName = expectedHttpServerLtp[\"layer-protocol\"][0][\"http-server-interface-1-0:http-server-interface-pac\"][\"http-server-interface-capability\"][\"application-name\"];\r",
																	"    expectedReleaseNumber = expectedHttpServerLtp[\"layer-protocol\"][0][\"http-server-interface-1-0:http-server-interface-pac\"][\"http-server-interface-capability\"][\"release-number\"];\r",
																	"\r",
																	"    let expectedOperationServer;\r",
																	"    expectedOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"    expectedOperationName = expectedOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error)\r",
																	"    console.log(\"! Could not load Input Data. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"var serviceRecordList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"    if(Math.floor(RESPONSE_CODE/100) === 2) {\r",
																	"        serviceRecordList = JSON.parse(response.stream);\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"POST ExecutionAndTraceLog/v1/list-records-of-flow responds 200\", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(200);\r",
																	"    });\r",
																	"\r",
																	"    let foundAnEntryWithTheExpectedHeaderValuesInEatl;\r",
																	"    foundAnEntryWithTheExpectedHeaderValuesInEatl = false;\r",
																	"    let responseCodeofTriggeredForwarding;\r",
																	"    responseCodeofTriggeredForwarding = 0;\r",
																	"    for(let i=0; i<serviceRecordList.length; i++)  {\r",
																	"        if( serviceRecordList[i][\"application-name\"] == expectedApplicationName\r",
																	"                && serviceRecordList[i][\"release-number\"] == expectedReleaseNumber\r",
																	"                && serviceRecordList[i][\"operation-name\"] == expectedOperationName\r",
																	"                && serviceRecordList[i][\"x-correlator\"] == expectedXCorrelator\r",
																	"                && serviceRecordList[i][\"user\"] == expectedUser\r",
																	"                && serviceRecordList[i][\"originator\"] == expectedOriginator\r",
																	"                && serviceRecordList[i][\"trace-indicator\"] == expectedTraceIndicator ) {\r",
																	"\r",
																	"            foundAnEntryWithTheExpectedHeaderValuesInEatl = true;\r",
																	"            responseCodeofTriggeredForwarding =  serviceRecordList[i][\"response-code\"];\r",
																	"            break;\r",
																	"        }\r",
																	"    }\r",
																	"\r",
																	"    if (foundAnEntryWithTheExpectedHeaderValuesInEatl == false) {\r",
																	"        if( (currentCount < retryMaxCount) ) {\r",
																	"            setTimeout(()=>{\r",
																	"                postman.setNextRequest(request.name);\r",
																	"                currentCount = currentCount + 1;\r",
																	"                pm.collectionVariables.set(\"currentCount\", currentCount);\r",
																	"            }, retryWaitingPeriod);\r",
																	"        } else {\r",
																	"            pm.test(\"The request has been notified and the Parameter values have been processed\", function () {\r",
																	"                pm.expect(foundAnEntryWithTheExpectedHeaderValuesInEatl).to.be.true;        \r",
																	"            });\r",
																	"        }\r",
																	"    } else {\r",
																	"        pm.test(\"The request has been notified and the Parameter values have been processed with response-code 200\", function () {\r",
																	"            pm.expect(responseCodeofTriggeredForwarding).to.equal(200);    \r",
																	"        });\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"description": "## Gets the service consumption indicated to EaTL and the Parameters of the request processed?\n\n#### Requires:\n- ExecutionAndTraceLog server to operate\n\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - search CC for output fc-port of ServiceRequestCausesLoggingRequest, \nits corresponding op-c, http-c and tcp-c, storing them for later verification request\n  - find randon http-c and store\n  - searching CC for op-s of /v1/approve-oam-request, storing operation-key.\n- GETting EaTL/CC (while using IP, protocol and port from above)\n  - searching CC for op-c of /v1/list-records-of-flow, storing operation-key\n- POST /v1/approve-oam-request\n  - all attributes filled with chosen http-c\n  - operation-key from above\n  - authorization code taken from input load file\n  - reasonable parameters\n\n#### Testing:\n- POST ExecutionAndTraceLog/v1/list-records-of-flow with \n   - IP, protocol and port from above\n   - operation-key from above\n   - DummyValue of x-correlator\n   - checking response for entry with application-name==AA and operation-name==/v1/approve-oam-request\n   - checking same record for containing DummyXCorrelator &DummyTraceIndicator\n\n#### Clearing:\n- not applicable"
										}
									]
								},
								{
									"name": "Gate",
									"item": [
										{
											"name": "for gating /v1/record-service-request to acceptance testing",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var TYPE_OF_TESTING;\r",
															"var URI;\r",
															"try {\r",
															"    TYPE_OF_TESTING = pm.environment.get(\"typeOfTesting\");\r",
															"    URI = pm.environment.get(\"dummyUri\");\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Loading Input Data failed.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Updating Environmental Variables and Determining the next Step\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    if ( TYPE_OF_TESTING === \"Acceptance\" ) {\r",
															"        postman.setNextRequest();\r",
															"    } else {\r",
															"        postman.setNextRequest(\"for exiting /v1/record-service-request\");\r",
															"    }\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Updating Environmental Variables and Determining the next Step failed.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    pm.variables.clear();\r",
															"\r",
															"    let REQUEST_BODY;\r",
															"    REQUEST_BODY = \"\";\r",
															"\r",
															"    let AUTHORIZATION;\r",
															"    AUTHORIZATION = \"\";\r",
															"\r",
															"    let OPERATION_KEY;\r",
															"    OPERATION_KEY = \"\";\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
															"    pm.request.headers.upsert({key:\"operationKey\", value:OPERATION_KEY});\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:\"application/json\"});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Setting Local Variables and Preparing the Request failed.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Acceptance",
									"item": [
										{
											"name": "Response body completeness",
											"item": [
												{
													"name": "valid request",
													"item": [
														{
															"name": "reference /core-model-1-4:control-construct",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"console.log(\"\\n----- /v1/approve-oam-request acceptance -- valid request -------------------------------\");\r",
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Environment variables could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																			"\r",
																			"    let REQUEST_BODY;\r",
																			"    REQUEST_BODY = \"\";\r",
																			"\r",
																			"    let AUTHORIZATION;\r",
																			"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var ltpList;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"    \r",
																			"    let responseCode;\r",
																			"    responseCode = parseInt(response.code);\r",
																			"    \r",
																			"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																			"        let responseObject;\r",
																			"        responseObject = JSON.parse(response.stream);\r",
																			"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																			"        \r",
																			"    } else {\r",
																			"        ltpList = [];\r",
																			"    }\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! ltpList could not be extracted.\");\r",
																			"}\r",
																			"\r",
																			"var currentOperationServer;\r",
																			"var httpClientLtp;\r",
																			"try {\r",
																			"    currentOperationServer = FindOperationServer(\"/v1/approve-oam-request\", ltpList);\r",
																			"    httpClientLtp = FindRandomHttpClientLTP(ltpList);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Reference objects could not be extracted.\");\r",
																			"} \r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.collectionVariables.clear();\r",
																			"    \r",
																			"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																			"    pm.collectionVariables.set(\"httpClientLtp\", httpClientLtp);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Collection variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"function FindOperationServer(operationName, ltpList) {\r",
																			"    let operationServer;\r",
																			"    operationServer = \"\";\r",
																			"    try {\r",
																			"        let sampleUuid;\r",
																			"        for(let i=0; i<ltpList.length; i++) {\r",
																			"            sampleUuid = ltpList[i][\"uuid\"];\r",
																			"            if(sampleUuid.includes(\"op-s-\")) {\r",
																			"                let sampleOperationName;\r",
																			"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																			"                if(sampleOperationName == operationName) {\r",
																			"                    operationServer = ltpList[i];\r",
																			"                    return operationServer;\r",
																			"                }\r",
																			"            }\r",
																			"        }\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																			"    }\r",
																			"    return operationServer;\r",
																			"}\r",
																			"\r",
																			"function FindRandomHttpClientLTP(ltpList) {\r",
																			"    let randomHttpClientLtp;\r",
																			"    randomHttpClientLtp = {};\r",
																			"    let httpClientLtpList;\r",
																			"    httpClientLtpList = [];\r",
																			"    try{\r",
																			"        let sampleUuid;\r",
																			"        for ( let i=0; i<ltpList.length; i++) {\r",
																			"            sampleUuid = ltpList[i][\"uuid\"];\r",
																			"            if(sampleUuid.includes(\"http-c-\")){\r",
																			"                    httpClientLtpList.push(ltpList[i]);\r",
																			"            }\r",
																			"        }\r",
																			"        if ( httpClientLtpList.length > 0 ) {\r",
																			"            const random = Math.floor(Math.random() * httpClientLtpList.length);\r",
																			"            randomHttpClientLtp = httpClientLtpList[random];\r",
																			"        }\r",
																			"    } catch( error ){\r",
																			"        console.log(error);\r",
																			"        console.log(\"! Exception in function : FindRandomHttpClientLTP. \")\r",
																			"    }\r",
																			"    return randomHttpClientLtp;\r",
																			"}\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "GET",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "200",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Expected /v1/approve-oam-request",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"var OPERATION_KEY;\r",
																			"var applicationName;\r",
																			"var releaseNumber;\r",
																			"var authorization;\r",
																			"var method;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"    let currentOperationServer;\r",
																			"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																			"    \r",
																			"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																			"\r",
																			"    let httpClientLtp;\r",
																			"    httpClientLtp = pm.collectionVariables.get(\"httpClientLtp\");\r",
																			"\r",
																			"    applicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																			"    releaseNumber = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																			"\r",
																			"    authorization = APPLICATION.authorizationCode;\r",
																			"    method = \"GET\";\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Input Data could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Dummy Parameters\r",
																			"****************************************************************************************/\r",
																			"var USER_NAME;\r",
																			"var ORIGINATOR;\r",
																			"var X_CORRELATOR;\r",
																			"var TRACE_INDICATOR;\r",
																			"var CUSTOMER_JOURNEY;\r",
																			"try {\r",
																			"    USER_NAME = APPLICATION.userName;\r",
																			"    ORIGINATOR = \"Postman\";\r",
																			"    X_CORRELATOR = CreateXCorrelator();\r",
																			"    TRACE_INDICATOR = \"1\";\r",
																			"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																			"    \r",
																			"} catch (error) {\r",
																			"    console.log(\"! Could not define dummy values for parameters. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Request Body\r",
																			"****************************************************************************************/\r",
																			"var REQUEST_BODY;\r",
																			"try {\r",
																			"    REQUEST_BODY = '{'\r",
																			"        + '\"application-name\" : ' + '\"' + applicationName + '\",'\r",
																			"        + '\"release-number\" : ' + '\"' + releaseNumber + '\",'\r",
																			"        + '\"Authorization\" : ' + '\"' + authorization + '\",'\r",
																			"        + '\"method\" : ' + '\"' + method + '\"'\r",
																			"    +'}';\r",
																			"} catch (error) {\r",
																			"    console.log(\"!Could not define request body. \");\r",
																			"}\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + \"/v1/approve-oam-request\";\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																			"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																			"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																			"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																			"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"function CreateXCorrelator() {\r",
																			"    let xCorrelator;\r",
																			"    xCorrelator = \"\";\r",
																			"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(12);\r",
																			"    return xCorrelator;\r",
																			"}\r",
																			"\r",
																			"function GenerateRandomHexString(length) {\r",
																			"    var randomRandomHexString = \"\";\r",
																			"    while (randomRandomHexString.length < length) {\r",
																			"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																			"    }\r",
																			"    return randomRandomHexString.substring(0,length);\r",
																			"}\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var RESPONSE_CODE;\r",
																			"var RESPONSE;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"\r",
																			"    RESPONSE_CODE = parseInt(response.code);\r",
																			"\r",
																			"    if ( Math.floor(RESPONSE_CODE/100) === 2 ) {\r",
																			"        RESPONSE = JSON.parse(response.stream);\r",
																			"    } else {\r",
																			"        RESPONSE = {};\r",
																			"    }\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Response Code could not be extracted.\");\r",
																			"}    \r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Testing\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.test(\"POST /v1/approve-oam-request responds 200\", function () {\r",
																			"        pm.expect(RESPONSE_CODE).to.equal(200);\r",
																			"    });\r",
																			"\r",
																			"    let schema;\r",
																			"    schema = {\r",
																			"        \"type\": \"object\",\r",
																			"        \"required\": [\r",
																			"            \"oam-request-is-approved\"\r",
																			"        ],\r",
																			"        \"properties\": {\r",
																			"            \"oam-request-is-approved\": {\r",
																			"            \"type\": \"boolean\",\r",
																			"            \"description\": \"'Would be true, IF request::body::application-name could be found in [/core-model-1-4:control-construct/logical-termination-point={uuid1}/layer-protocol=0/http-client-interface-1-0:http-client-interface-pac/http-client-interface-capability/application-name] AND request::body::release-number could be found in [/core-model-1-4:control-construct/logical-termination-point={uuid1}/layer-protocol=0/http-client-interface-1-0:http-client-interface-pac/http-client-interface-configuration/release-number]' for the same value of uuid1 AND request::body::Authorization could be found in [/core-model-1-4:control-construct/profile-collection/profile={uuid2}/admin-profile-1-0:admin-profile-pac/admin-profile-configuration/authorization] AND method would be covered by [/core-model-1-4:control-construct/profile-collection/profile={uuid2}/admin-profile-1-0:admin-profile-pac/admin-profile-configuration/allowed-methods] of the same value of uuid2. Otherwise, would be false.'\\n\"\r",
																			"            },\r",
																			"            \"reason-of-objection\": {\r",
																			"                \"type\": \"string\",\r",
																			"                \"enum\": [\r",
																			"                    \"APPLICATION_NAME_UNKNOWN\",\r",
																			"                    \"RELEASE_NUMBER_UNKNOWN\",\r",
																			"                    \"AUTHORIZATION_CODE_UNKNOWN\",\r",
																			"                    \"METHOD_NOT_ALLOWED\",\r",
																			"                    \"UNKNOWN\"\r",
																			"                ],\r",
																			"                \"description\": \"'This attribute to be represented, if request::response::oam-request-is-approved==false. Reasons to be checked and indicated according to the sequence defined in the enumeration.'\"\r",
																			"            }\r",
																			"        }\r",
																			"        };\r",
																			"\r",
																			"    let schemaValidation;\r",
																			"    schemaValidation = tv4.validateMultiple(RESPONSE, schema, true, true);\r",
																			"    console.log(schemaValidation);\r",
																			"    pm.test(\"Valid schema for /v1/approve-oam-request \", function () {\r",
																			"        pm.expect(schemaValidation.valid).to.be.true;\r",
																			"    });\r",
																			"\r",
																			"    if(schemaValidation.valid == true) {\r",
																			"        pm.test(\"As expected, the number of attributes retrieved in response is (1)\", function () {\r",
																			"            pm.expect(Object.keys(RESPONSE).length).to.equal(1);\r",
																			"        });\r",
																			"        pm.test(\"As expected, value of oam-request-is-approved is 'true'\", function () {\r",
																			"            pm.expect(RESPONSE[\"oam-request-is-approved\"]).to.be.true;\r",
																			"        });\r",
																			"    }\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error)\r",
																			"    console.log(\"! Testing could not be executed.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "200",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														}
													],
													"description": "## Valid request\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for op-s of /v1/approve-oam-request, storing operation-key\n  - randomly choosing http-c from ltpList\n\n- POST /v1/approve-oam-request\n  - all attributes filled with chosen http-c\n  - operation-key from above\n  - authorization code taken from input load file\n  - reasonable parameters\n\n#### Testing:\n- checking for response-code 200\n- checking the response body for each attribute against the specification and load-file\n\n#### Clearing:\n- not applicable"
												},
												{
													"name": "incorrect application-name",
													"item": [
														{
															"name": "reference /core-model-1-4:control-construct",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"console.log(\"\\n----- /v1/approve-oam-request acceptance -- incorrect application-name  -------------------------------\");\r",
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Environment variables could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																			"\r",
																			"    let REQUEST_BODY;\r",
																			"    REQUEST_BODY = \"\";\r",
																			"\r",
																			"    let AUTHORIZATION;\r",
																			"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var ltpList;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"    \r",
																			"    let responseCode;\r",
																			"    responseCode = parseInt(response.code);\r",
																			"    \r",
																			"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																			"        let responseObject;\r",
																			"        responseObject = JSON.parse(response.stream);\r",
																			"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																			"\r",
																			"    } else {\r",
																			"        ltpList = [];\r",
																			"    }\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! ltpList could not be extracted.\");\r",
																			"}\r",
																			"\r",
																			"var currentOperationServer;\r",
																			"var httpClientLtp;\r",
																			"try {\r",
																			"    currentOperationServer = FindOperationServer(\"/v1/approve-oam-request\", ltpList);\r",
																			"    httpClientLtp = FindRandomHttpClientLTP(ltpList);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Reference objects could not be extracted.\");\r",
																			"} \r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.collectionVariables.clear();\r",
																			"    \r",
																			"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																			"    pm.collectionVariables.set(\"httpClientLtp\", httpClientLtp);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Collection variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"function FindOperationServer(operationName, ltpList) {\r",
																			"    let operationServer;\r",
																			"    operationServer = \"\";\r",
																			"    try {\r",
																			"        let sampleUuid;\r",
																			"        for(let i=0; i<ltpList.length; i++) {\r",
																			"            sampleUuid = ltpList[i][\"uuid\"];\r",
																			"            if(sampleUuid.includes(\"op-s-\")) {\r",
																			"                let sampleOperationName;\r",
																			"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																			"                if(sampleOperationName == operationName) {\r",
																			"                    operationServer = ltpList[i];\r",
																			"                    return operationServer;\r",
																			"                }\r",
																			"            }\r",
																			"        }\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																			"    }\r",
																			"    return operationServer;\r",
																			"}\r",
																			"\r",
																			"function FindRandomHttpClientLTP(ltpList) {\r",
																			"    let randomHttpClientLtp;\r",
																			"    randomHttpClientLtp = {};\r",
																			"    let httpClientLtpList;\r",
																			"    httpClientLtpList = [];\r",
																			"    try{\r",
																			"        let sampleUuid;\r",
																			"        for ( let i=0; i<ltpList.length; i++) {\r",
																			"            sampleUuid = ltpList[i][\"uuid\"];\r",
																			"            if(sampleUuid.includes(\"http-c-\")){\r",
																			"                    httpClientLtpList.push(ltpList[i]);\r",
																			"            }\r",
																			"        }\r",
																			"        if ( httpClientLtpList.length > 0 ) {\r",
																			"            const random = Math.floor(Math.random() * httpClientLtpList.length);\r",
																			"            randomHttpClientLtp = httpClientLtpList[random];\r",
																			"        }\r",
																			"    } catch( error ){\r",
																			"        console.log(error);\r",
																			"        console.log(\"! Exception in function : FindRandomHttpClientLTP. \")\r",
																			"    }\r",
																			"    return randomHttpClientLtp;\r",
																			"}\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "GET",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "200",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Expected /v1/approve-oam-request - incorrect application-name",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"var OPERATION_KEY;\r",
																			"var applicationName;\r",
																			"var releaseNumber;\r",
																			"var authorization;\r",
																			"var method;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"    let currentOperationServer;\r",
																			"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																			"    \r",
																			"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																			"\r",
																			"    let httpClientLtp;\r",
																			"    httpClientLtp = pm.collectionVariables.get(\"httpClientLtp\");\r",
																			"\r",
																			"    applicationName = GenerateRandomString(12);\r",
																			"    releaseNumber = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																			"\r",
																			"    authorization = APPLICATION.authorizationCode;\r",
																			"    method = \"GET\";\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Input Data could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Dummy Parameters\r",
																			"****************************************************************************************/\r",
																			"var USER_NAME;\r",
																			"var ORIGINATOR;\r",
																			"var X_CORRELATOR;\r",
																			"var TRACE_INDICATOR;\r",
																			"var CUSTOMER_JOURNEY;\r",
																			"try {\r",
																			"    USER_NAME = APPLICATION.userName;\r",
																			"    ORIGINATOR = \"Postman\";\r",
																			"    X_CORRELATOR = CreateXCorrelator();\r",
																			"    TRACE_INDICATOR = \"1\";\r",
																			"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																			"    \r",
																			"} catch (error) {\r",
																			"    console.log(\"! Could not define dummy values for parameters. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Request Body\r",
																			"****************************************************************************************/\r",
																			"var REQUEST_BODY;\r",
																			"try {\r",
																			"    REQUEST_BODY = '{'\r",
																			"        + '\"application-name\" : ' + '\"' + applicationName + '\",'\r",
																			"        + '\"release-number\" : ' + '\"' + releaseNumber + '\",'\r",
																			"        + '\"Authorization\" : ' + '\"' + authorization + '\",'\r",
																			"        + '\"method\" : ' + '\"' + method + '\"'\r",
																			"    +'}';\r",
																			"} catch (error) {\r",
																			"    console.log(\"!Could not define request body. \");\r",
																			"}\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + \"/v1/approve-oam-request\";\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																			"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																			"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																			"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																			"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"function CreateXCorrelator() {\r",
																			"    let xCorrelator;\r",
																			"    xCorrelator = \"\";\r",
																			"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(12);\r",
																			"    return xCorrelator;\r",
																			"}\r",
																			"\r",
																			"function GenerateRandomHexString(length) {\r",
																			"    var randomRandomHexString = \"\";\r",
																			"    while (randomRandomHexString.length < length) {\r",
																			"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																			"    }\r",
																			"    return randomRandomHexString.substring(0,length);\r",
																			"}\r",
																			"\r",
																			"function GenerateRandomString(length) {\r",
																			"    let randomString;\r",
																			"    randomString = \"\";\r",
																			"    try {\r",
																			"        let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r",
																			"        let charactersLength = characters.length;\r",
																			"        for (let i = 0; i < length; i++) {\r",
																			"            randomString += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																			"        }\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Could not generate random string. \");\r",
																			"    }\r",
																			"    return randomString;\r",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var RESPONSE_CODE;\r",
																			"var RESPONSE;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"\r",
																			"    RESPONSE_CODE = parseInt(response.code);\r",
																			"\r",
																			"    if ( Math.floor(RESPONSE_CODE/100) === 2 ) {\r",
																			"        RESPONSE = JSON.parse(response.stream);\r",
																			"    } else {\r",
																			"        RESPONSE = {};\r",
																			"    }\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Response Code could not be extracted.\");\r",
																			"}    \r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Testing\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.test(\"POST /v1/approve-oam-request responds 200\", function () {\r",
																			"        pm.expect(RESPONSE_CODE).to.equal(200);\r",
																			"    });\r",
																			"\r",
																			"    let schema;\r",
																			"    schema = {\r",
																			"        \"type\": \"object\",\r",
																			"        \"required\": [\r",
																			"            \"oam-request-is-approved\"\r",
																			"        ],\r",
																			"        \"properties\": {\r",
																			"            \"oam-request-is-approved\": {\r",
																			"            \"type\": \"boolean\",\r",
																			"            \"description\": \"'Would be true, IF request::body::application-name could be found in [/core-model-1-4:control-construct/logical-termination-point={uuid1}/layer-protocol=0/http-client-interface-1-0:http-client-interface-pac/http-client-interface-capability/application-name] AND request::body::release-number could be found in [/core-model-1-4:control-construct/logical-termination-point={uuid1}/layer-protocol=0/http-client-interface-1-0:http-client-interface-pac/http-client-interface-configuration/release-number]' for the same value of uuid1 AND request::body::Authorization could be found in [/core-model-1-4:control-construct/profile-collection/profile={uuid2}/admin-profile-1-0:admin-profile-pac/admin-profile-configuration/authorization] AND method would be covered by [/core-model-1-4:control-construct/profile-collection/profile={uuid2}/admin-profile-1-0:admin-profile-pac/admin-profile-configuration/allowed-methods] of the same value of uuid2. Otherwise, would be false.'\\n\"\r",
																			"            },\r",
																			"            \"reason-of-objection\": {\r",
																			"                \"type\": \"string\",\r",
																			"                \"enum\": [\r",
																			"                    \"APPLICATION_NAME_UNKNOWN\",\r",
																			"                    \"RELEASE_NUMBER_UNKNOWN\",\r",
																			"                    \"AUTHORIZATION_CODE_UNKNOWN\",\r",
																			"                    \"METHOD_NOT_ALLOWED\",\r",
																			"                    \"UNKNOWN\"\r",
																			"                ],\r",
																			"                \"description\": \"'This attribute to be represented, if request::response::oam-request-is-approved==false. Reasons to be checked and indicated according to the sequence defined in the enumeration.'\"\r",
																			"            }\r",
																			"        }\r",
																			"        };\r",
																			"\r",
																			"    let schemaValidation;\r",
																			"    schemaValidation = tv4.validateMultiple(RESPONSE, schema, true, true);\r",
																			"    console.log(schemaValidation);\r",
																			"    pm.test(\"Valid schema for /v1/approve-oam-request \", function () {\r",
																			"        pm.expect(schemaValidation.valid).to.be.true;\r",
																			"    });\r",
																			"\r",
																			"    if(schemaValidation.valid == true) {\r",
																			"        pm.test(\"As expected, the number of attributes retrieved in response is (2)\", function () {\r",
																			"            pm.expect(Object.keys(RESPONSE).length).to.equal(2);\r",
																			"        });\r",
																			"        pm.test(\"As expected, value of oam-request-is-approved is 'false'\", function () {\r",
																			"            pm.expect(RESPONSE[\"oam-request-is-approved\"]).to.be.false;\r",
																			"        });\r",
																			"        pm.test(\"As expected, reason-of-objection is 'APPLICATION_NAME_UNKNOWN'\", function () {\r",
																			"            pm.expect(RESPONSE[\"reason-of-objection\"]).to.equal(\"APPLICATION_NAME_UNKNOWN\");\r",
																			"        });\r",
																			"    }\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Testing could not be executed.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "200",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														}
													],
													"description": "## valid response for incorrect application-name?\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for op-s of /v1/approve-oam-request, storing operation-key\n  - randomly choosing http-c from ltpList\n- POST /v1/approve-oam-request\n  - all attributes filled with chosen values  BUT application-name with random dummy value (value not present in ltpList)\n  - operation-key from above\n  - provide authorization from config file\n  - reasonable parameters\n\n#### Testing:\n- Checking for ResponseCode=200\n- Checking if the attribute oam-request-is-approved: false, reason-of-objection: APPLICATION_NAME_UNKNOWN\n\n#### Clearing:\n- not applicable"
												},
												{
													"name": "incorrect release-number",
													"item": [
														{
															"name": "reference /core-model-1-4:control-construct",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"console.log(\"\\n----- /v1/approve-oam-request acceptance -- incorrect release-number -------------------------------\");\r",
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Environment variables could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																			"\r",
																			"    let REQUEST_BODY;\r",
																			"    REQUEST_BODY = \"\";\r",
																			"\r",
																			"    let AUTHORIZATION;\r",
																			"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var ltpList;\r",
																			"\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"    \r",
																			"    let responseCode;\r",
																			"    responseCode = parseInt(response.code);\r",
																			"    \r",
																			"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																			"        let responseObject;\r",
																			"        responseObject = JSON.parse(response.stream);\r",
																			"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																			"\r",
																			"    } else {\r",
																			"        ltpList = [];\r",
																			"    }\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! ltpList could not be extracted.\");\r",
																			"}\r",
																			"\r",
																			"var currentOperationServer;\r",
																			"var httpClientLtp;\r",
																			"try {\r",
																			"    currentOperationServer = FindOperationServer(\"/v1/approve-oam-request\", ltpList);\r",
																			"    httpClientLtp = FindRandomHttpClientLTP(ltpList);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Reference objects could not be extracted.\");\r",
																			"} \r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.collectionVariables.clear();\r",
																			"    \r",
																			"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																			"    pm.collectionVariables.set(\"httpClientLtp\", httpClientLtp);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Collection variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"function FindOperationServer(operationName, ltpList) {\r",
																			"    let operationServer;\r",
																			"    operationServer = \"\";\r",
																			"    try {\r",
																			"        let sampleUuid;\r",
																			"        for(let i=0; i<ltpList.length; i++) {\r",
																			"            sampleUuid = ltpList[i][\"uuid\"];\r",
																			"            if(sampleUuid.includes(\"op-s-\")) {\r",
																			"                let sampleOperationName;\r",
																			"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																			"                if(sampleOperationName == operationName) {\r",
																			"                    operationServer = ltpList[i];\r",
																			"                    return operationServer;\r",
																			"                }\r",
																			"            }\r",
																			"        }\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																			"    }\r",
																			"    return operationServer;\r",
																			"}\r",
																			"\r",
																			"function FindRandomHttpClientLTP(ltpList) {\r",
																			"    let randomHttpClientLtp;\r",
																			"    randomHttpClientLtp = {};\r",
																			"    let httpClientLtpList;\r",
																			"    httpClientLtpList = [];\r",
																			"    try{\r",
																			"        let sampleUuid;\r",
																			"        for ( let i=0; i<ltpList.length; i++) {\r",
																			"            sampleUuid = ltpList[i][\"uuid\"];\r",
																			"            if(sampleUuid.includes(\"http-c-\")){\r",
																			"                    httpClientLtpList.push(ltpList[i]);\r",
																			"            }\r",
																			"        }\r",
																			"        if ( httpClientLtpList.length > 0 ) {\r",
																			"            const random = Math.floor(Math.random() * httpClientLtpList.length);\r",
																			"            randomHttpClientLtp = httpClientLtpList[random];\r",
																			"        }\r",
																			"    } catch( error ){\r",
																			"        console.log(error);\r",
																			"        console.log(\"! Exception in function : FindRandomHttpClientLTP. \")\r",
																			"    }\r",
																			"    return randomHttpClientLtp;\r",
																			"}\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "GET",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "200",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Expected /v1/approve-oam-request - incorrect release-number",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"var OPERATION_KEY;\r",
																			"var applicationName;\r",
																			"var releaseNumber;\r",
																			"var authorization;\r",
																			"var method;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"    let currentOperationServer;\r",
																			"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																			"    \r",
																			"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																			"\r",
																			"    let httpClientLtp;\r",
																			"    httpClientLtp = pm.collectionVariables.get(\"httpClientLtp\");\r",
																			"\r",
																			"    applicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																			"    releaseNumber = RandomReleaseNumber();\r",
																			"    \r",
																			"    authorization = APPLICATION.authorizationCode;\r",
																			"    method = \"GET\";\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Input Data could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Dummy Parameters\r",
																			"****************************************************************************************/\r",
																			"var USER_NAME;\r",
																			"var ORIGINATOR;\r",
																			"var X_CORRELATOR;\r",
																			"var TRACE_INDICATOR;\r",
																			"var CUSTOMER_JOURNEY;\r",
																			"try {\r",
																			"    USER_NAME = APPLICATION.userName;\r",
																			"    ORIGINATOR = \"Postman\";\r",
																			"    X_CORRELATOR = CreateXCorrelator();\r",
																			"    TRACE_INDICATOR = \"1\";\r",
																			"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																			"    \r",
																			"} catch (error) {\r",
																			"    console.log(\"! Could not define dummy values for parameters. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Request Body\r",
																			"****************************************************************************************/\r",
																			"var REQUEST_BODY;\r",
																			"try {\r",
																			"    REQUEST_BODY = '{'\r",
																			"        + '\"application-name\" : ' + '\"' + applicationName + '\",'\r",
																			"        + '\"release-number\" : ' + '\"' + releaseNumber + '\",'\r",
																			"        + '\"Authorization\" : ' + '\"' + authorization + '\",'\r",
																			"        + '\"method\" : ' + '\"' + method + '\"'\r",
																			"    +'}';\r",
																			"} catch (error) {\r",
																			"    console.log(\"!Could not define request body. \");\r",
																			"}\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + \"/v1/approve-oam-request\";\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																			"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																			"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																			"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																			"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"function CreateXCorrelator() {\r",
																			"    let xCorrelator;\r",
																			"    xCorrelator = \"\";\r",
																			"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(12);\r",
																			"    return xCorrelator;\r",
																			"}\r",
																			"\r",
																			"function GenerateRandomHexString(length) {\r",
																			"    var randomRandomHexString = \"\";\r",
																			"    while (randomRandomHexString.length < length) {\r",
																			"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																			"    }\r",
																			"    return randomRandomHexString.substring(0,length);\r",
																			"}\r",
																			"\r",
																			"function RandomReleaseNumber() {\r",
																			"    let releaseNumber;\r",
																			"    let releaseNumberParts = [];\r",
																			"    for  (let i=0; i<3 ; i++) {\r",
																			"        releaseNumberParts[i] = Math.floor(Math.random() * 10);\r",
																			"    }\r",
																			"    releaseNumber = releaseNumberParts[0] + \".\" + releaseNumberParts[1] + \".\" + releaseNumberParts[2];\r",
																			"    return releaseNumber;\r",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var RESPONSE_CODE;\r",
																			"var RESPONSE;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"\r",
																			"    RESPONSE_CODE = parseInt(response.code);\r",
																			"\r",
																			"    if ( Math.floor(RESPONSE_CODE/100) === 2 ) {\r",
																			"        RESPONSE = JSON.parse(response.stream);\r",
																			"    } else {\r",
																			"        RESPONSE = {};\r",
																			"    }\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Response Code could not be extracted.\");\r",
																			"}    \r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Testing\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.test(\"POST /v1/approve-oam-request responds 200\", function () {\r",
																			"        pm.expect(RESPONSE_CODE).to.equal(200);\r",
																			"    });\r",
																			"\r",
																			"    let schema;\r",
																			"    schema = {\r",
																			"        \"type\": \"object\",\r",
																			"        \"required\": [\r",
																			"            \"oam-request-is-approved\"\r",
																			"        ],\r",
																			"        \"properties\": {\r",
																			"            \"oam-request-is-approved\": {\r",
																			"            \"type\": \"boolean\",\r",
																			"            \"description\": \"'Would be true, IF request::body::application-name could be found in [/core-model-1-4:control-construct/logical-termination-point={uuid1}/layer-protocol=0/http-client-interface-1-0:http-client-interface-pac/http-client-interface-capability/application-name] AND request::body::release-number could be found in [/core-model-1-4:control-construct/logical-termination-point={uuid1}/layer-protocol=0/http-client-interface-1-0:http-client-interface-pac/http-client-interface-configuration/release-number]' for the same value of uuid1 AND request::body::Authorization could be found in [/core-model-1-4:control-construct/profile-collection/profile={uuid2}/admin-profile-1-0:admin-profile-pac/admin-profile-configuration/authorization] AND method would be covered by [/core-model-1-4:control-construct/profile-collection/profile={uuid2}/admin-profile-1-0:admin-profile-pac/admin-profile-configuration/allowed-methods] of the same value of uuid2. Otherwise, would be false.'\\n\"\r",
																			"            },\r",
																			"            \"reason-of-objection\": {\r",
																			"                \"type\": \"string\",\r",
																			"                \"enum\": [\r",
																			"                    \"APPLICATION_NAME_UNKNOWN\",\r",
																			"                    \"RELEASE_NUMBER_UNKNOWN\",\r",
																			"                    \"AUTHORIZATION_CODE_UNKNOWN\",\r",
																			"                    \"METHOD_NOT_ALLOWED\",\r",
																			"                    \"UNKNOWN\"\r",
																			"                ],\r",
																			"                \"description\": \"'This attribute to be represented, if request::response::oam-request-is-approved==false. Reasons to be checked and indicated according to the sequence defined in the enumeration.'\"\r",
																			"            }\r",
																			"        }\r",
																			"        };\r",
																			"\r",
																			"    let schemaValidation;\r",
																			"    schemaValidation = tv4.validateMultiple(RESPONSE, schema, true, true);\r",
																			"    console.log(schemaValidation);\r",
																			"    pm.test(\"Valid schema for /v1/approve-oam-request \", function () {\r",
																			"        pm.expect(schemaValidation.valid).to.be.true;\r",
																			"    });\r",
																			"\r",
																			"    if(schemaValidation.valid == true) {\r",
																			"        pm.test(\"As expected, the number of attributes retrieved in response is (2)\", function () {\r",
																			"            pm.expect(Object.keys(RESPONSE).length).to.equal(2);\r",
																			"        });\r",
																			"        pm.test(\"As expected, value of oam-request-is-approved is 'false'\", function () {\r",
																			"            pm.expect(RESPONSE[\"oam-request-is-approved\"]).to.be.false;\r",
																			"        });\r",
																			"        pm.test(\"As expected, reason-of-objection is 'RELEASE_NUMBER_UNKNOWN'\", function () {\r",
																			"            pm.expect(RESPONSE[\"reason-of-objection\"]).to.equal(\"RELEASE_NUMBER_UNKNOWN\");\r",
																			"        });\r",
																			"    }\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Testing could not be executed.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "200",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														}
													],
													"description": "## valid response for incorrect release-number?\n\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for op-s of /v1/approve-oam-request, storing operation-key\n  - randomly choosing http-c from ltpList\n- POST /v1/approve-oam-request\n  - all attributes filled with chosen values  BUT release-number with random dummy value (value not present in ltpList)\n  - operation-key from above\n  - provide authorization from config file\n  - reasonable parameters\n\n#### Testing:\n- Checking for ResponseCode=200\n- Checking if the attribute oam-request-is-approved: false, reason-of-objection: RELEASE_NUMBER_UNKNOWN\n\n#### Clearing:\n- not applicable"
												},
												{
													"name": "incorrect authorization",
													"item": [
														{
															"name": "reference /core-model-1-4:control-construct",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"console.log(\"\\n----- /v1/approve-oam-request acceptance -- incorrect authorization -------------------------------\");\r",
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Environment variables could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																			"\r",
																			"    let REQUEST_BODY;\r",
																			"    REQUEST_BODY = \"\";\r",
																			"\r",
																			"    let AUTHORIZATION;\r",
																			"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var ltpList;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"    \r",
																			"    let responseCode;\r",
																			"    responseCode = parseInt(response.code);\r",
																			"    \r",
																			"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																			"        let responseObject;\r",
																			"        responseObject = JSON.parse(response.stream);\r",
																			"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																			"\r",
																			"    } else {\r",
																			"        ltpList = [];\r",
																			"    }\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! ltpList could not be extracted.\");\r",
																			"}\r",
																			"\r",
																			"var currentOperationServer;\r",
																			"var httpClientLtp;\r",
																			"try {\r",
																			"    currentOperationServer = FindOperationServer(\"/v1/approve-oam-request\", ltpList);\r",
																			"    httpClientLtp = FindRandomHttpClientLTP(ltpList);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Reference objects could not be extracted.\");\r",
																			"} \r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.collectionVariables.clear();\r",
																			"    \r",
																			"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																			"    pm.collectionVariables.set(\"httpClientLtp\", httpClientLtp);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Collection variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"function FindOperationServer(operationName, ltpList) {\r",
																			"    let operationServer;\r",
																			"    operationServer = \"\";\r",
																			"    try {\r",
																			"        let sampleUuid;\r",
																			"        for(let i=0; i<ltpList.length; i++) {\r",
																			"            sampleUuid = ltpList[i][\"uuid\"];\r",
																			"            if(sampleUuid.includes(\"op-s-\")) {\r",
																			"                let sampleOperationName;\r",
																			"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																			"                if(sampleOperationName == operationName) {\r",
																			"                    operationServer = ltpList[i];\r",
																			"                    return operationServer;\r",
																			"                }\r",
																			"            }\r",
																			"        }\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																			"    }\r",
																			"    return operationServer;\r",
																			"}\r",
																			"\r",
																			"function FindRandomHttpClientLTP(ltpList) {\r",
																			"    let randomHttpClientLtp;\r",
																			"    randomHttpClientLtp = {};\r",
																			"    let httpClientLtpList;\r",
																			"    httpClientLtpList = [];\r",
																			"    try{\r",
																			"        let sampleUuid;\r",
																			"        for ( let i=0; i<ltpList.length; i++) {\r",
																			"            sampleUuid = ltpList[i][\"uuid\"];\r",
																			"            if(sampleUuid.includes(\"http-c-\")){\r",
																			"                    httpClientLtpList.push(ltpList[i]);\r",
																			"            }\r",
																			"        }\r",
																			"        if ( httpClientLtpList.length > 0 ) {\r",
																			"            const random = Math.floor(Math.random() * httpClientLtpList.length);\r",
																			"            randomHttpClientLtp = httpClientLtpList[random];\r",
																			"        }\r",
																			"    } catch( error ){\r",
																			"        console.log(error);\r",
																			"        console.log(\"! Exception in function : FindRandomHttpClientLTP. \")\r",
																			"    }\r",
																			"    return randomHttpClientLtp;\r",
																			"}\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "GET",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "200",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Expected /v1/approve-oam-request - incorrect authorization",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"var OPERATION_KEY;\r",
																			"var applicationName;\r",
																			"var releaseNumber;\r",
																			"var authorization;\r",
																			"var method;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"    let currentOperationServer;\r",
																			"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																			"    \r",
																			"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																			"\r",
																			"    let httpClientLtp;\r",
																			"    httpClientLtp = pm.collectionVariables.get(\"httpClientLtp\");\r",
																			"\r",
																			"    applicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																			"    releaseNumber = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																			"\r",
																			"    authorization = GenerateRandomHexString(10);\r",
																			"\r",
																			"    method = \"GET\";\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Input Data could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Dummy Parameters\r",
																			"****************************************************************************************/\r",
																			"var USER_NAME;\r",
																			"var ORIGINATOR;\r",
																			"var X_CORRELATOR;\r",
																			"var TRACE_INDICATOR;\r",
																			"var CUSTOMER_JOURNEY;\r",
																			"try {\r",
																			"    USER_NAME = APPLICATION.userName;\r",
																			"    ORIGINATOR = \"Postman\";\r",
																			"    X_CORRELATOR = CreateXCorrelator();\r",
																			"    TRACE_INDICATOR = \"1\";\r",
																			"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																			"    \r",
																			"} catch (error) {\r",
																			"    console.log(\"! Could not define dummy values for parameters. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Request Body\r",
																			"****************************************************************************************/\r",
																			"var REQUEST_BODY;\r",
																			"try {\r",
																			"    REQUEST_BODY = '{'\r",
																			"        + '\"application-name\" : ' + '\"' + applicationName + '\",'\r",
																			"        + '\"release-number\" : ' + '\"' + releaseNumber + '\",'\r",
																			"        + '\"Authorization\" : ' + '\"' + authorization + '\",'\r",
																			"        + '\"method\" : ' + '\"' + method + '\"'\r",
																			"    +'}';\r",
																			"} catch (error) {\r",
																			"    console.log(\"!Could not define request body. \");\r",
																			"}\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + \"/v1/approve-oam-request\";\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																			"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																			"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																			"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																			"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"function CreateXCorrelator() {\r",
																			"    let xCorrelator;\r",
																			"    xCorrelator = \"\";\r",
																			"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(12);\r",
																			"    return xCorrelator;\r",
																			"}\r",
																			"\r",
																			"function GenerateRandomHexString(length) {\r",
																			"    var randomRandomHexString = \"\";\r",
																			"    while (randomRandomHexString.length < length) {\r",
																			"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																			"    }\r",
																			"    return randomRandomHexString.substring(0,length);\r",
																			"}\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var RESPONSE_CODE;\r",
																			"var RESPONSE;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"\r",
																			"    RESPONSE_CODE = parseInt(response.code);\r",
																			"\r",
																			"    if ( Math.floor(RESPONSE_CODE/100) === 2 ) {\r",
																			"        RESPONSE = JSON.parse(response.stream);\r",
																			"    } else {\r",
																			"        RESPONSE = {};\r",
																			"    }\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Response Code could not be extracted.\");\r",
																			"}    \r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Testing\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.test(\"POST /v1/approve-oam-request responds 200\", function () {\r",
																			"        pm.expect(RESPONSE_CODE).to.equal(200);\r",
																			"    });\r",
																			"\r",
																			"    let schema;\r",
																			"    schema = {\r",
																			"        \"type\": \"object\",\r",
																			"        \"required\": [\r",
																			"            \"oam-request-is-approved\"\r",
																			"        ],\r",
																			"        \"properties\": {\r",
																			"            \"oam-request-is-approved\": {\r",
																			"            \"type\": \"boolean\",\r",
																			"            \"description\": \"'Would be true, IF request::body::application-name could be found in [/core-model-1-4:control-construct/logical-termination-point={uuid1}/layer-protocol=0/http-client-interface-1-0:http-client-interface-pac/http-client-interface-capability/application-name] AND request::body::release-number could be found in [/core-model-1-4:control-construct/logical-termination-point={uuid1}/layer-protocol=0/http-client-interface-1-0:http-client-interface-pac/http-client-interface-configuration/release-number]' for the same value of uuid1 AND request::body::Authorization could be found in [/core-model-1-4:control-construct/profile-collection/profile={uuid2}/admin-profile-1-0:admin-profile-pac/admin-profile-configuration/authorization] AND method would be covered by [/core-model-1-4:control-construct/profile-collection/profile={uuid2}/admin-profile-1-0:admin-profile-pac/admin-profile-configuration/allowed-methods] of the same value of uuid2. Otherwise, would be false.'\\n\"\r",
																			"            },\r",
																			"            \"reason-of-objection\": {\r",
																			"                \"type\": \"string\",\r",
																			"                \"enum\": [\r",
																			"                    \"APPLICATION_NAME_UNKNOWN\",\r",
																			"                    \"RELEASE_NUMBER_UNKNOWN\",\r",
																			"                    \"AUTHORIZATION_CODE_UNKNOWN\",\r",
																			"                    \"METHOD_NOT_ALLOWED\",\r",
																			"                    \"UNKNOWN\"\r",
																			"                ],\r",
																			"                \"description\": \"'This attribute to be represented, if request::response::oam-request-is-approved==false. Reasons to be checked and indicated according to the sequence defined in the enumeration.'\"\r",
																			"            }\r",
																			"        }\r",
																			"        };\r",
																			"\r",
																			"    let schemaValidation;\r",
																			"    schemaValidation = tv4.validateMultiple(RESPONSE, schema, true, true);\r",
																			"    console.log(schemaValidation);\r",
																			"    pm.test(\"Valid schema for /v1/approve-oam-request \", function () {\r",
																			"        pm.expect(schemaValidation.valid).to.be.true;\r",
																			"    });\r",
																			"\r",
																			"    if(schemaValidation.valid == true) {\r",
																			"        pm.test(\"As expected, the number of attributes retrieved in response is (2)\", function () {\r",
																			"            pm.expect(Object.keys(RESPONSE).length).to.equal(2);\r",
																			"        });\r",
																			"        pm.test(\"As expected, value of oam-request-is-approved is 'false'\", function () {\r",
																			"            pm.expect(RESPONSE[\"oam-request-is-approved\"]).to.be.false;\r",
																			"        });\r",
																			"        pm.test(\"As expected, reason-of-objection is 'AUTHORIZATION_CODE_UNKNOWN'\", function () {\r",
																			"            pm.expect(RESPONSE[\"reason-of-objection\"]).to.equal(\"AUTHORIZATION_CODE_UNKNOWN\");\r",
																			"        });\r",
																			"    }\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Testing could not be executed.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "200",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														}
													],
													"description": "## valid response for incorrect authorization?\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for op-s of /v1/approve-oam-request, storing operation-key\n  - randomly choosing http-c from ltpList\n- POST /v1/approve-oam-request\n  - all attributes filled with chosen values  BUT Authorization with random dummy value (value not present in config file)\n  - operation-key from above\n  - reasonable parameters\n\n#### Testing:\n- Checking for ResponseCode=200\n- Checking if the attribute oam-request-is-approved: false, reason-of-objection: AUTHORIZATION_CODE_UNKNOWN\n\n#### Clearing:\n- not applicable"
												},
												{
													"name": "incorrect method",
													"item": [
														{
															"name": "reference /core-model-1-4:control-construct",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"console.log(\"\\n----- /v1/approve-oam-request acceptance -- incorrect method -------------------------------\");\r",
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Environment variables could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																			"\r",
																			"    let REQUEST_BODY;\r",
																			"    REQUEST_BODY = \"\";\r",
																			"\r",
																			"    let AUTHORIZATION;\r",
																			"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var ltpList;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"    \r",
																			"    let responseCode;\r",
																			"    responseCode = parseInt(response.code);\r",
																			"    \r",
																			"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																			"        let responseObject;\r",
																			"        responseObject = JSON.parse(response.stream);\r",
																			"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																			"\r",
																			"    } else {\r",
																			"        ltpList = [];\r",
																			"    }\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! ltpList could not be extracted.\");\r",
																			"}\r",
																			"\r",
																			"var currentOperationServer;\r",
																			"var httpClientLtp;\r",
																			"try {\r",
																			"    currentOperationServer = FindOperationServer(\"/v1/approve-oam-request\", ltpList);\r",
																			"    httpClientLtp = FindRandomHttpClientLTP(ltpList);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Reference objects could not be extracted.\");\r",
																			"} \r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.collectionVariables.clear();\r",
																			"    \r",
																			"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																			"    pm.collectionVariables.set(\"httpClientLtp\", httpClientLtp);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Collection variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"function FindOperationServer(operationName, ltpList) {\r",
																			"    let operationServer;\r",
																			"    operationServer = \"\";\r",
																			"    try {\r",
																			"        let sampleUuid;\r",
																			"        for(let i=0; i<ltpList.length; i++) {\r",
																			"            sampleUuid = ltpList[i][\"uuid\"];\r",
																			"            if(sampleUuid.includes(\"op-s-\")) {\r",
																			"                let sampleOperationName;\r",
																			"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																			"                if(sampleOperationName == operationName) {\r",
																			"                    operationServer = ltpList[i];\r",
																			"                    return operationServer;\r",
																			"                }\r",
																			"            }\r",
																			"        }\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																			"    }\r",
																			"    return operationServer;\r",
																			"}\r",
																			"\r",
																			"function FindRandomHttpClientLTP(ltpList) {\r",
																			"    let randomHttpClientLtp;\r",
																			"    randomHttpClientLtp = {};\r",
																			"    let httpClientLtpList;\r",
																			"    httpClientLtpList = [];\r",
																			"    try{\r",
																			"        let sampleUuid;\r",
																			"        for ( let i=0; i<ltpList.length; i++) {\r",
																			"            sampleUuid = ltpList[i][\"uuid\"];\r",
																			"            if(sampleUuid.includes(\"http-c-\")){\r",
																			"                    httpClientLtpList.push(ltpList[i]);\r",
																			"            }\r",
																			"        }\r",
																			"        if ( httpClientLtpList.length > 0 ) {\r",
																			"            const random = Math.floor(Math.random() * httpClientLtpList.length);\r",
																			"            randomHttpClientLtp = httpClientLtpList[random];\r",
																			"        }\r",
																			"    } catch( error ){\r",
																			"        console.log(error);\r",
																			"        console.log(\"! Exception in function : FindRandomHttpClientLTP. \")\r",
																			"    }\r",
																			"    return randomHttpClientLtp;\r",
																			"}\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "GET",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "200",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Expected /v1/approve-oam-request - incorrect method",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"var OPERATION_KEY;\r",
																			"var applicationName;\r",
																			"var releaseNumber;\r",
																			"var authorization;\r",
																			"var method;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"    let currentOperationServer;\r",
																			"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																			"    \r",
																			"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																			"\r",
																			"    let httpClientLtp;\r",
																			"    httpClientLtp = pm.collectionVariables.get(\"httpClientLtp\");\r",
																			"\r",
																			"    applicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																			"    releaseNumber = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																			"\r",
																			"    authorization = \"Basic Y2ljZC50ZXN0aW5nOmNpY2Q=\";\r",
																			"\r",
																			"    method = GenerateAlternativeMethod(\"GET\");\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Input Data could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Dummy Parameters\r",
																			"****************************************************************************************/\r",
																			"var USER_NAME;\r",
																			"var ORIGINATOR;\r",
																			"var X_CORRELATOR;\r",
																			"var TRACE_INDICATOR;\r",
																			"var CUSTOMER_JOURNEY;\r",
																			"try {\r",
																			"    USER_NAME = APPLICATION.userName;\r",
																			"    ORIGINATOR = \"Postman\";\r",
																			"    X_CORRELATOR = CreateXCorrelator();\r",
																			"    TRACE_INDICATOR = \"1\";\r",
																			"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																			"    \r",
																			"} catch (error) {\r",
																			"    console.log(\"! Could not define dummy values for parameters. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Request Body\r",
																			"****************************************************************************************/\r",
																			"var REQUEST_BODY;\r",
																			"try {\r",
																			"    REQUEST_BODY = '{'\r",
																			"        + '\"application-name\" : ' + '\"' + applicationName + '\",'\r",
																			"        + '\"release-number\" : ' + '\"' + releaseNumber + '\",'\r",
																			"        + '\"Authorization\" : ' + '\"' + authorization + '\",'\r",
																			"        + '\"method\" : ' + '\"' + method + '\"'\r",
																			"    +'}';\r",
																			"} catch (error) {\r",
																			"    console.log(\"!Could not define request body. \");\r",
																			"}\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + \"/v1/approve-oam-request\";\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																			"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																			"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																			"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																			"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"function CreateXCorrelator() {\r",
																			"    let xCorrelator;\r",
																			"    xCorrelator = \"\";\r",
																			"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(12);\r",
																			"    return xCorrelator;\r",
																			"}\r",
																			"\r",
																			"function GenerateRandomHexString(length) {\r",
																			"    var randomRandomHexString = \"\";\r",
																			"    while (randomRandomHexString.length < length) {\r",
																			"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																			"    }\r",
																			"    return randomRandomHexString.substring(0,length);\r",
																			"}\r",
																			"\r",
																			"function GenerateAlternativeMethod(currentMethod) {\r",
																			"    let alternativeMethodList;\r",
																			"    alternativeMethodList = [  'CONNECT', 'DELETE', 'GET', 'HEAD', 'OPTIONS', 'PATCH', 'POST', 'PUT', 'TRACE' ];\r",
																			"    let indexOfCurrentMethod;\r",
																			"    indexOfCurrentMethod = alternativeMethodList.indexOf(currentMethod);\r",
																			"    if (indexOfCurrentMethod > -1) {\r",
																			"        alternativeMethodList.splice(indexOfCurrentMethod, 1);\r",
																			"    }\r",
																			"\r",
																			"    let alternativeMethod;\r",
																			"    let alternativeMethodIndex;\r",
																			"    alternativeMethodIndex = Math.floor(Math.random() * alternativeMethodList.length);\r",
																			"    alternativeMethod = alternativeMethodList[alternativeMethodIndex]; \r",
																			"\r",
																			"    return alternativeMethod;\r",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var RESPONSE_CODE;\r",
																			"var RESPONSE;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"\r",
																			"    RESPONSE_CODE = parseInt(response.code);\r",
																			"\r",
																			"    if ( Math.floor(RESPONSE_CODE/100) === 2 ) {\r",
																			"        RESPONSE = JSON.parse(response.stream);\r",
																			"    } else {\r",
																			"        RESPONSE = {};\r",
																			"    }\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Response Code could not be extracted.\");\r",
																			"}    \r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Testing\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.test(\"POST /v1/approve-oam-request responds 200\", function () {\r",
																			"        pm.expect(RESPONSE_CODE).to.equal(200);\r",
																			"    });\r",
																			"\r",
																			"    let schema;\r",
																			"    schema = {\r",
																			"        \"type\": \"object\",\r",
																			"        \"required\": [\r",
																			"            \"oam-request-is-approved\"\r",
																			"        ],\r",
																			"        \"properties\": {\r",
																			"            \"oam-request-is-approved\": {\r",
																			"            \"type\": \"boolean\",\r",
																			"            \"description\": \"'Would be true, IF request::body::application-name could be found in [/core-model-1-4:control-construct/logical-termination-point={uuid1}/layer-protocol=0/http-client-interface-1-0:http-client-interface-pac/http-client-interface-capability/application-name] AND request::body::release-number could be found in [/core-model-1-4:control-construct/logical-termination-point={uuid1}/layer-protocol=0/http-client-interface-1-0:http-client-interface-pac/http-client-interface-configuration/release-number]' for the same value of uuid1 AND request::body::Authorization could be found in [/core-model-1-4:control-construct/profile-collection/profile={uuid2}/admin-profile-1-0:admin-profile-pac/admin-profile-configuration/authorization] AND method would be covered by [/core-model-1-4:control-construct/profile-collection/profile={uuid2}/admin-profile-1-0:admin-profile-pac/admin-profile-configuration/allowed-methods] of the same value of uuid2. Otherwise, would be false.'\\n\"\r",
																			"            },\r",
																			"            \"reason-of-objection\": {\r",
																			"                \"type\": \"string\",\r",
																			"                \"enum\": [\r",
																			"                    \"APPLICATION_NAME_UNKNOWN\",\r",
																			"                    \"RELEASE_NUMBER_UNKNOWN\",\r",
																			"                    \"AUTHORIZATION_CODE_UNKNOWN\",\r",
																			"                    \"METHOD_NOT_ALLOWED\",\r",
																			"                    \"UNKNOWN\"\r",
																			"                ],\r",
																			"                \"description\": \"'This attribute to be represented, if request::response::oam-request-is-approved==false. Reasons to be checked and indicated according to the sequence defined in the enumeration.'\"\r",
																			"            }\r",
																			"        }\r",
																			"        };\r",
																			"\r",
																			"    let schemaValidation;\r",
																			"    schemaValidation = tv4.validateMultiple(RESPONSE, schema, true, true);\r",
																			"    console.log(schemaValidation);\r",
																			"    pm.test(\"Valid schema for /v1/approve-oam-request \", function () {\r",
																			"        pm.expect(schemaValidation.valid).to.be.true;\r",
																			"    });\r",
																			"\r",
																			"    if(schemaValidation.valid == true) {\r",
																			"        pm.test(\"As expected, the number of attributes retrieved in response is (2)\", function () {\r",
																			"            pm.expect(Object.keys(RESPONSE).length).to.equal(2);\r",
																			"        });\r",
																			"        pm.test(\"As expected, value of oam-request-is-approved is 'false'\", function () {\r",
																			"            pm.expect(RESPONSE[\"oam-request-is-approved\"]).to.be.false;\r",
																			"        });\r",
																			"        pm.test(\"As expected, reason-of-objection is 'METHOD_NOT_ALLOWED'\", function () {\r",
																			"            pm.expect(RESPONSE[\"reason-of-objection\"]).to.equal(\"METHOD_NOT_ALLOWED\");\r",
																			"        });\r",
																			"    }\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Testing could not be executed.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "200",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														}
													],
													"description": "## valid response for incorrect method?\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for op-s of /v1/approve-oam-request, storing operation-key- randomly choosing http-c from ltpList\n- POST /v1/approve-oam-request\n  - all attributes filled with chosen values  BUT Method with random dummy value (random value present in enumeration)\n  - operation-key from above\n  - provide authorization from config file\n  - reasonable parameters\n\n#### Testing:\n- Checking for ResponseCode=200\n- Checking if the attribute oam-request-is-approved: false, reason-of-objection: METHOD_NOT_ALLOWED\n\n#### Clearing:\n- not applicable"
												}
											]
										},
										{
											"name": "life-cycle-state propogated?",
											"item": [
												{
													"name": "reference /core-model-1-4:control-construct",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n----- /v1/approve-oam-request acceptance -- life-cycle-state propogated? -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Environment variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY = \"\";\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var ltpList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    let responseCode;\r",
																	"    responseCode = parseInt(response.code);\r",
																	"    \r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        let responseObject;\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																	"\r",
																	"    } else {\r",
																	"        ltpList = [];\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! ltpList could not be extracted.\");\r",
																	"}\r",
																	"\r",
																	"var currentOperationServer;\r",
																	"var httpClientLtp;\r",
																	"try {\r",
																	"    currentOperationServer = FindOperationServer(\"/v1/approve-oam-request\", ltpList);\r",
																	"    httpClientLtp = FindRandomHttpClientLTP(ltpList);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Reference objects could not be extracted.\");\r",
																	"} \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.clear();\r",
																	"    \r",
																	"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																	"    pm.collectionVariables.set(\"httpClientLtp\", httpClientLtp);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function FindOperationServer(operationName, ltpList) {\r",
																	"    let operationServer;\r",
																	"    operationServer = \"\";\r",
																	"    try {\r",
																	"        let sampleUuid;\r",
																	"        for(let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"op-s-\")) {\r",
																	"                let sampleOperationName;\r",
																	"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																	"                if(sampleOperationName == operationName) {\r",
																	"                    operationServer = ltpList[i];\r",
																	"                    return operationServer;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																	"    }\r",
																	"    return operationServer;\r",
																	"}\r",
																	"\r",
																	"function FindRandomHttpClientLTP(ltpList) {\r",
																	"    let randomHttpClientLtp;\r",
																	"    randomHttpClientLtp = {};\r",
																	"    let httpClientLtpList;\r",
																	"    httpClientLtpList = [];\r",
																	"    try{\r",
																	"        let sampleUuid;\r",
																	"        for ( let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"http-c-\")){\r",
																	"                    httpClientLtpList.push(ltpList[i]);\r",
																	"            }\r",
																	"        }\r",
																	"        if ( httpClientLtpList.length > 0 ) {\r",
																	"            const random = Math.floor(Math.random() * httpClientLtpList.length);\r",
																	"            randomHttpClientLtp = httpClientLtpList[random];\r",
																	"        }\r",
																	"    } catch( error ){\r",
																	"        console.log(error);\r",
																	"        console.log(\"! Exception in function : FindRandomHttpClientLTP. \")\r",
																	"    }\r",
																	"    return randomHttpClientLtp;\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "dummy life-cycle-state",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var operationServerUuid;\r",
																	"var dummyLifeCycleState;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"    \r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"\r",
																	"    operationServerUuid = currentOperationServer[\"uuid\"];\r",
																	"\r",
																	"    currentLifeCycleState = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"life-cycle-state\"];\r",
																	"\r",
																	"    dummyLifeCycleState = GenerateDummyLifeCycleState(currentLifeCycleState);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.set(\"dummyLifeCycleState\", dummyLifeCycleState);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl \r",
																	"            + \"/core-model-1-4:control-construct/logical-termination-point=\"\r",
																	"            + operationServerUuid\r",
																	"            + \"/layer-protocol=0/operation-server-interface-1-0:operation-server-interface-pac/operation-server-interface-configuration/life-cycle-state\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY = '{ '\r",
																	"                    +   '\"operation-server-interface-1-0:life-cycle-state\": \"' + dummyLifeCycleState + '\"'\r",
																	"                    + ' }';\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error)\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"function GenerateDummyLifeCycleState(currentLifeCycleState) {\r",
																	"    let alternativeLifeCycleStateTypeList;\r",
																	"    alternativeLifeCycleStateTypeList = [  \"operation-server-interface-1-0:LIFE_CYCLE_STATE_TYPE_EXPERIMENTAL\",\r",
																	"                                            \"operation-server-interface-1-0:LIFE_CYCLE_STATE_TYPE_OPERATIONAL\",\r",
																	"                                            \"operation-server-interface-1-0:LIFE_CYCLE_STATE_TYPE_DEPRECATED\", \r",
																	"                                            \"operation-server-interface-1-0:LIFE_CYCLE_STATE_TYPE_OBSOLETE\",\r",
																	"                                            \"operation-server-interface-1-0:LIFE_CYCLE_STATE_TYPE_UNKNOWN\",\r",
																	"                                            \"operation-server-interface-1-0:LIFE_CYCLE_STATE_TYPE_NOT_YET_DEFINED\"\r",
																	"                                        ];\r",
																	"    let indexOfCurrentLifeCycleState;\r",
																	"    indexOfCurrentLifeCycleState = alternativeLifeCycleStateTypeList.indexOf(currentLifeCycleState);\r",
																	"    if (indexOfCurrentLifeCycleState > -1) {\r",
																	"        alternativeLifeCycleStateTypeList.splice(indexOfCurrentLifeCycleState, 1);\r",
																	"    }\r",
																	"\r",
																	"    let alternativeLifeCycleState;\r",
																	"    let alternativeLifeCycleStateTypeIndex;\r",
																	"    alternativeLifeCycleStateTypeIndex = Math.floor(Math.random() * alternativeLifeCycleStateTypeList.length);\r",
																	"    alternativeLifeCycleState = alternativeLifeCycleStateTypeList[alternativeLifeCycleStateTypeIndex]; \r",
																	"\r",
																	"    return alternativeLifeCycleState;\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"PUT dummy life-cycle-state responds 204\", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(204);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "204",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected /v1/approve-oam-request",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"var applicationName;\r",
																	"var releaseNumber;\r",
																	"var authorization;\r",
																	"var method;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"    \r",
																	"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"\r",
																	"    let httpClientLtp;\r",
																	"    httpClientLtp = pm.collectionVariables.get(\"httpClientLtp\");\r",
																	"\r",
																	"    applicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																	"    releaseNumber = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																	"\r",
																	"    authorization = APPLICATION.authorizationCode;\r",
																	"    method = \"GET\";\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"        + '\"application-name\" : ' + '\"' + applicationName + '\",'\r",
																	"        + '\"release-number\" : ' + '\"' + releaseNumber + '\",'\r",
																	"        + '\"Authorization\" : ' + '\"' + authorization + '\",'\r",
																	"        + '\"method\" : ' + '\"' + method + '\"'\r",
																	"    +'}';\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/approve-oam-request\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var expectedLifeCycleState;\r",
																	"try {\r",
																	"    let dummyLifeCycleState;\r",
																	"    dummyLifeCycleState = pm.collectionVariables.get(\"dummyLifeCycleState\");\r",
																	"\r",
																	"    let prefixLength = ('operation-server-interface-1-0:LIFE_CYCLE_STATE_TYPE_').length;     \r",
																	"    expectedLifeCycleState = dummyLifeCycleState.substring(prefixLength);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not load Input Data. \");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"var actualLifeCycleState;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"    let RESPONSE_HEADERS;\r",
																	"    RESPONSE_HEADERS = pm.response.headers;  \r",
																	"\r",
																	"    actualLifeCycleState = RESPONSE_HEADERS.get(\"life-cycle-state\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"Provides dummy life-cycle-state in the header of the response: '\" + expectedLifeCycleState + \"' \", function () {\r",
																	"        pm.expect(actualLifeCycleState).to.equal(expectedLifeCycleState);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "204",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Initial life-cycle-state",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var operationServerUuid;\r",
																	"var initialLifeCycleState;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"\r",
																	"    operationServerUuid = currentOperationServer[\"uuid\"];\r",
																	"\r",
																	"    initialLifeCycleState = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"life-cycle-state\"];\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl \r",
																	"            + \"/core-model-1-4:control-construct/logical-termination-point=\"\r",
																	"            + operationServerUuid\r",
																	"            + \"/layer-protocol=0/operation-server-interface-1-0:operation-server-interface-pac/operation-server-interface-configuration/life-cycle-state\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY =   '{ '\r",
																	"                    +   '\"operation-server-interface-1-0:life-cycle-state\": \"' + initialLifeCycleState + '\"'\r",
																	"                    + ' }';\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"    \r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});  \r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"PUT Initial life-cycle-state responds 204 \", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(204);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "204",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"description": "## Gets lifeCycleState propagated?\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for op-s of /v1/approve-oam-request, storing operation-key\n  - randomly choosing http-c from ltpList\n- PUTting op-s-configuration/life-cycle-state with random alternative value\n- POST /v1/approve-oam-request\n  - all attributes filled with random values\n  - operation-key from above\n  - authorization code from input load file\n  - reasonable parameters\n\n#### Testing:\n- checking for ResponseCode==204\n- checking for lifeCycleState being identical with alternative op-s-configuration/life-cycle-state\n\n#### Clearing:\n- PUTting op-s-configuration/life-cycle-state back to original value"
										},
										{
											"name": "Attribute completeness",
											"item": [
												{
													"name": "reference /core-model-1-4:control-construct",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"console.log(\"\\n-----  /v1/approve-oam-request acceptance -- attribute completeness -------------------------------\");\r",
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Environment variables could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																	"\r",
																	"    let REQUEST_BODY;\r",
																	"    REQUEST_BODY = \"\";\r",
																	"\r",
																	"    let AUTHORIZATION;\r",
																	"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var ltpList;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"    \r",
																	"    let responseCode;\r",
																	"    responseCode = parseInt(response.code);\r",
																	"    \r",
																	"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																	"        let responseObject;\r",
																	"        responseObject = JSON.parse(response.stream);\r",
																	"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																	"\r",
																	"    } else {\r",
																	"        ltpList = [];\r",
																	"    }\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! ltpList could not be extracted.\");\r",
																	"}\r",
																	"\r",
																	"var currentOperationServer;\r",
																	"var httpClientLtp;\r",
																	"try {\r",
																	"    currentOperationServer = FindOperationServer(\"/v1/approve-oam-request\", ltpList);\r",
																	"    httpClientLtp = FindRandomHttpClientLTP(ltpList);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Reference objects could not be extracted.\");\r",
																	"} \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.collectionVariables.clear();\r",
																	"    \r",
																	"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																	"    pm.collectionVariables.set(\"httpClientLtp\", httpClientLtp);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Collection variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function FindOperationServer(operationName, ltpList) {\r",
																	"    let operationServer;\r",
																	"    operationServer = \"\";\r",
																	"    try {\r",
																	"        let sampleUuid;\r",
																	"        for(let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"op-s-\")) {\r",
																	"                let sampleOperationName;\r",
																	"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																	"                if(sampleOperationName == operationName) {\r",
																	"                    operationServer = ltpList[i];\r",
																	"                    return operationServer;\r",
																	"                }\r",
																	"            }\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																	"    }\r",
																	"    return operationServer;\r",
																	"}\r",
																	"\r",
																	"function FindRandomHttpClientLTP(ltpList) {\r",
																	"    let randomHttpClientLtp;\r",
																	"    randomHttpClientLtp = {};\r",
																	"    let httpClientLtpList;\r",
																	"    httpClientLtpList = [];\r",
																	"    try{\r",
																	"        let sampleUuid;\r",
																	"        for ( let i=0; i<ltpList.length; i++) {\r",
																	"            sampleUuid = ltpList[i][\"uuid\"];\r",
																	"            if(sampleUuid.includes(\"http-c-\")){\r",
																	"                    httpClientLtpList.push(ltpList[i]);\r",
																	"            }\r",
																	"        }\r",
																	"        if ( httpClientLtpList.length > 0 ) {\r",
																	"            const random = Math.floor(Math.random() * httpClientLtpList.length);\r",
																	"            randomHttpClientLtp = httpClientLtpList[random];\r",
																	"        }\r",
																	"    } catch( error ){\r",
																	"        console.log(error);\r",
																	"        console.log(\"! Exception in function : FindRandomHttpClientLTP. \")\r",
																	"    }\r",
																	"    return randomHttpClientLtp;\r",
																	"}\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "200",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Expected /v1/record-service-request - attribute completeness",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"var APPLICATION;\r",
																	"var OPERATION_KEY;\r",
																	"var applicationName;\r",
																	"var releaseNumber;\r",
																	"var authorization;\r",
																	"var method;\r",
																	"try {\r",
																	"    APPLICATION = pm.environment.get(\"application\");\r",
																	"\r",
																	"    let currentOperationServer;\r",
																	"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																	"    \r",
																	"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																	"\r",
																	"    let httpClientLtp;\r",
																	"    httpClientLtp = pm.collectionVariables.get(\"httpClientLtp\");\r",
																	"\r",
																	"    applicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																	"    releaseNumber = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																	"\r",
																	"    authorization = APPLICATION.authorizationCode;\r",
																	"    method = \"GET\";\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Input Data could not be loaded.\");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Dummy Parameters\r",
																	"****************************************************************************************/\r",
																	"var USER_NAME;\r",
																	"var ORIGINATOR;\r",
																	"var X_CORRELATOR;\r",
																	"var TRACE_INDICATOR;\r",
																	"var CUSTOMER_JOURNEY;\r",
																	"try {\r",
																	"    USER_NAME = APPLICATION.userName;\r",
																	"    ORIGINATOR = \"Postman\";\r",
																	"    X_CORRELATOR = CreateXCorrelator();\r",
																	"    TRACE_INDICATOR = \"1\";\r",
																	"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																	"    \r",
																	"} catch (error) {\r",
																	"    console.log(\"! Could not define dummy values for parameters. \");\r",
																	"}\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Defining Request Body\r",
																	"****************************************************************************************/\r",
																	"var REQUEST_BODY;\r",
																	"try {\r",
																	"    REQUEST_BODY = '{'\r",
																	"        + '\"application-name\" : ' + '\"' + applicationName + '\",'\r",
																	"        + '\"release-number\" : ' + '\"' + releaseNumber + '\",'\r",
																	"        + '\"Authorization\" : ' + '\"' + authorization + '\",'\r",
																	"        + '\"method\" : ' + '\"' + method + '\"'\r",
																	"    +'}';\r",
																	"\r",
																	"    let attributes;\r",
																	"    attributes = [\"application-name\", \"release-number\", \"Authorization\", \"method\"];\r",
																	"    let missingAttribute;\r",
																	"    missingAttribute = GetMissingAttribute(attributes);\r",
																	"\r",
																	"    REQUEST_BODY = JSON.parse(REQUEST_BODY);\r",
																	"    delete REQUEST_BODY[missingAttribute];\r",
																	"    REQUEST_BODY = JSON.stringify(REQUEST_BODY);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"!Could not define request body. \");\r",
																	"}\r",
																	"/****************************************************************************************\r",
																	"* Setting Collection Variables\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Setting Local Variables and Preparing the Request\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    let URI;\r",
																	"    URI = APPLICATION.serverUrl + \"/v1/approve-oam-request\";\r",
																	"\r",
																	"    let ACCEPT;\r",
																	"    ACCEPT = \"application/json\";\r",
																	"\r",
																	"    let CONTENT_TYPE;\r",
																	"    CONTENT_TYPE = \"application/json\";\r",
																	"\r",
																	"    pm.variables.clear();\r",
																	"\r",
																	"    pm.variables.set(\"uri\", URI);\r",
																	"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																	"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																	"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																	"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																	"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																	"\r",
																	"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																	"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(error);\r",
																	"    console.log(\"! Local variables could not be set.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"function CreateXCorrelator() {\r",
																	"    let xCorrelator;\r",
																	"    xCorrelator = \"\";\r",
																	"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																	"    xCorrelator += GenerateRandomHexString(12);\r",
																	"    return xCorrelator;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomString(length) {\r",
																	"    let randomString;\r",
																	"    randomString = \"\";\r",
																	"    try {\r",
																	"        let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r",
																	"        let charactersLength = characters.length;\r",
																	"        for (let i = 0; i < length; i++) {\r",
																	"            randomString += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																	"        }\r",
																	"    } catch (error) {\r",
																	"        console.log(\"! Could not generate random string. \");\r",
																	"    }\r",
																	"    return randomString;\r",
																	"}\r",
																	"\r",
																	"function RandomReleaseNumber() {\r",
																	"    let releaseNumber;\r",
																	"    let releaseNumberParts = [];\r",
																	"    for  (let i=0; i<3 ; i++) {\r",
																	"        releaseNumberParts[i] = Math.floor(Math.random() * 10);\r",
																	"    }\r",
																	"    releaseNumber = releaseNumberParts[0] + \".\" + releaseNumberParts[1] + \".\" + releaseNumberParts[2];\r",
																	"    return releaseNumber;\r",
																	"}\r",
																	"\r",
																	"function GenerateRandomHexString(length) {\r",
																	"    var randomRandomHexString = \"\";\r",
																	"    while (randomRandomHexString.length < length) {\r",
																	"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																	"    }\r",
																	"    return randomRandomHexString.substring(0,length);\r",
																	"}\r",
																	"\r",
																	"function GetMissingAttribute(attributes) {\r",
																	"\tlet missingAttribute;\r",
																	"\tmissingAttribute = attributes[Math.floor(Math.random()*attributes.length)];\r",
																	"\treturn missingAttribute;\r",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"/****************************************************************************************\r",
																	"* Loading Input Data\r",
																	"****************************************************************************************/\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Extracting Result\r",
																	"****************************************************************************************/\r",
																	"var RESPONSE_CODE;\r",
																	"try {\r",
																	"    let response;\r",
																	"    response = pm.response;\r",
																	"\r",
																	"    RESPONSE_CODE = parseInt(response.code);\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Response Code could not be extracted.\");\r",
																	"}    \r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Testing\r",
																	"****************************************************************************************/\r",
																	"try {\r",
																	"    pm.test(\"POST /v1/approve-oam-request responds 400, because of missing attribute\", function () {\r",
																	"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																	"    });\r",
																	"\r",
																	"} catch (error) {\r",
																	"    console.log(\"! Testing could not be executed.\");\r",
																	"}\r",
																	"\r",
																	"\r",
																	"/****************************************************************************************\r",
																	"* Functions\r",
																	"****************************************************************************************/\r",
																	"\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "x-mock-response-code",
																"value": "400",
																"type": "default"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"description": "## Get attributes checked for completeness?\n\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for op-s of /v1/approve-oam-request, storing operation-key\n  - randomly choosing http-c from ltpList\n- POST /v1/approve-oam-request\n  - all attributes filled with random values\n  - operation-key from above\n  - authorization from config file\n  - reasonable parameters, BUT one randomly chosen attribute missing\n\n#### Testing:\n- checking for ResponseCode==400\n\n#### Clearing:\n- not applicable"
										},
										{
											"name": "Attribute correctness",
											"item": [
												{
													"name": "release-number checked?",
													"item": [
														{
															"name": "reference /core-model-1-4:control-construct",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"console.log(\"\\n-----  /v1/approve-oam-request acceptance -- release-number attribute checked? -------------------------------\");\r",
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Environment variables could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																			"\r",
																			"    let REQUEST_BODY;\r",
																			"    REQUEST_BODY = \"\";\r",
																			"\r",
																			"    let AUTHORIZATION;\r",
																			"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var ltpList;\r",
																			"var profileList;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"    \r",
																			"    let responseCode;\r",
																			"    responseCode = parseInt(response.code);\r",
																			"    \r",
																			"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																			"        let responseObject;\r",
																			"        responseObject = JSON.parse(response.stream);\r",
																			"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																			"        profileList = responseObject[\"core-model-1-4:control-construct\"][\"profile-collection\"][\"profile\"];\r",
																			"\r",
																			"    } else {\r",
																			"        ltpList = [];\r",
																			"        profileList = [];\r",
																			"    }\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! ltpList could not be extracted.\");\r",
																			"}\r",
																			"\r",
																			"var currentOperationServer;\r",
																			"var httpClientLtp;\r",
																			"var randomAdminProfile;\r",
																			"try {\r",
																			"    currentOperationServer = FindOperationServer(\"/v1/approve-oam-request\", ltpList);\r",
																			"    httpClientLtp = FindRandomHttpClientLTP(ltpList);\r",
																			"    randomAdminProfile = FindRandomAdminProfileInstance(profileList);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Reference objects could not be extracted.\");\r",
																			"} \r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.collectionVariables.clear();\r",
																			"    \r",
																			"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																			"    pm.collectionVariables.set(\"httpClientLtp\", httpClientLtp);\r",
																			"    pm.collectionVariables.set(\"randomAdminProfile\", randomAdminProfile);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Collection variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"function FindOperationServer(operationName, ltpList) {\r",
																			"    let operationServer;\r",
																			"    operationServer = \"\";\r",
																			"    try {\r",
																			"        let sampleUuid;\r",
																			"        for(let i=0; i<ltpList.length; i++) {\r",
																			"            sampleUuid = ltpList[i][\"uuid\"];\r",
																			"            if(sampleUuid.includes(\"op-s-\")) {\r",
																			"                let sampleOperationName;\r",
																			"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																			"                if(sampleOperationName == operationName) {\r",
																			"                    operationServer = ltpList[i];\r",
																			"                    return operationServer;\r",
																			"                }\r",
																			"            }\r",
																			"        }\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																			"    }\r",
																			"    return operationServer;\r",
																			"}\r",
																			"\r",
																			"function FindRandomHttpClientLTP(ltpList) {\r",
																			"    let randomHttpClientLtp;\r",
																			"    randomHttpClientLtp = {};\r",
																			"    let httpClientLtpList;\r",
																			"    httpClientLtpList = [];\r",
																			"    try{\r",
																			"        let sampleUuid;\r",
																			"        for ( let i=0; i<ltpList.length; i++) {\r",
																			"            sampleUuid = ltpList[i][\"uuid\"];\r",
																			"            if(sampleUuid.includes(\"http-c-\")){\r",
																			"                    httpClientLtpList.push(ltpList[i]);\r",
																			"            }\r",
																			"        }\r",
																			"        if ( httpClientLtpList.length > 0 ) {\r",
																			"            const random = Math.floor(Math.random() * httpClientLtpList.length);\r",
																			"            randomHttpClientLtp = httpClientLtpList[random];\r",
																			"        }\r",
																			"    } catch( error ){\r",
																			"        console.log(error);\r",
																			"        console.log(\"! Exception in function : FindRandomHttpClientLTP. \")\r",
																			"    }\r",
																			"    return randomHttpClientLtp;\r",
																			"}\r",
																			"\r",
																			"function FindRandomAdminProfileInstance(profileList) {\r",
																			"    let randomAdminProfileInstance;\r",
																			"    randomAdminProfileInstance = {};\r",
																			"    let adminProfileList;\r",
																			"    adminProfileList = [];\r",
																			"    try{\r",
																			"        let sampleUuid;\r",
																			"        for ( let i=0; i<profileList.length; i++) {\r",
																			"            sampleUuid = profileList[i][\"uuid\"];\r",
																			"            if(sampleUuid.includes(\"admin-p-\")){\r",
																			"                    adminProfileList.push(profileList[i]);\r",
																			"            }\r",
																			"        }\r",
																			"        if ( adminProfileList.length > 0 ) {\r",
																			"            const random = Math.floor(Math.random() * adminProfileList.length);\r",
																			"            randomAdminProfileInstance = adminProfileList[random];\r",
																			"        }\r",
																			"    } catch( error ){\r",
																			"        console.log(error);\r",
																			"        console.log(\"! Exception in function : FindRandomAdminProfileInstance. \")\r",
																			"    }\r",
																			"    return randomAdminProfileInstance;\r",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "GET",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "200",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Expected /v1/approve-oam-request- too-short release-number",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"console.log(\"\\n-----  too short release-number -------------------------------\");\r",
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"var OPERATION_KEY;\r",
																			"var applicationName;\r",
																			"var releaseNumber;\r",
																			"var authorization;\r",
																			"var method;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"    let currentOperationServer;\r",
																			"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																			"    \r",
																			"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																			"\r",
																			"    let httpClientLtp;\r",
																			"    httpClientLtp = pm.collectionVariables.get(\"httpClientLtp\");\r",
																			"\r",
																			"    applicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																			"    releaseNumber = FaultyReleaseNumber();\r",
																			"\r",
																			"    authorization = APPLICATION.authorizationCode;\r",
																			"\r",
																			"    method = \"GET\";\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Input Data could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Dummy Parameters\r",
																			"****************************************************************************************/\r",
																			"var USER_NAME;\r",
																			"var ORIGINATOR;\r",
																			"var X_CORRELATOR;\r",
																			"var TRACE_INDICATOR;\r",
																			"var CUSTOMER_JOURNEY;\r",
																			"try {\r",
																			"    USER_NAME = APPLICATION.userName;\r",
																			"    ORIGINATOR = \"Postman\";\r",
																			"    X_CORRELATOR = CreateXCorrelator();\r",
																			"    TRACE_INDICATOR = \"1\";\r",
																			"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																			"    \r",
																			"} catch (error) {\r",
																			"    console.log(\"! Could not define dummy values for parameters. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Request Body\r",
																			"****************************************************************************************/\r",
																			"var REQUEST_BODY;\r",
																			"try {\r",
																			"    REQUEST_BODY = '{'\r",
																			"        + '\"application-name\" : ' + '\"' + applicationName + '\",'\r",
																			"        + '\"release-number\" : ' + '\"' + releaseNumber + '\",'\r",
																			"        + '\"Authorization\" : ' + '\"' + authorization + '\",'\r",
																			"        + '\"method\" : ' + '\"' + method + '\"'\r",
																			"    +'}';\r",
																			"} catch (error) {\r",
																			"    console.log(\"!Could not define request body. \");\r",
																			"}\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + \"/v1/approve-oam-request\";\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																			"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																			"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																			"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																			"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"function CreateXCorrelator() {\r",
																			"    let xCorrelator;\r",
																			"    xCorrelator = \"\";\r",
																			"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(12);\r",
																			"    return xCorrelator;\r",
																			"}\r",
																			"\r",
																			"function GenerateRandomHexString(length) {\r",
																			"    var randomRandomHexString = \"\";\r",
																			"    while (randomRandomHexString.length < length) {\r",
																			"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																			"    }\r",
																			"    return randomRandomHexString.substring(0,length);\r",
																			"}\r",
																			"\r",
																			"function FaultyReleaseNumber() {\r",
																			"    let releaseNumber;\r",
																			"    let releaseNumberParts = [];\r",
																			"    for (let i = 0; i < 2; i++) {\r",
																			"        releaseNumberParts[i] = Math.floor(Math.random() * 10);\r",
																			"    }\r",
																			"    releaseNumber = releaseNumberParts[0] + \".\" + releaseNumberParts[1];\r",
																			"    return releaseNumber;\r",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var RESPONSE_CODE;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"\r",
																			"    RESPONSE_CODE = parseInt(response.code);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Response Code could not be extracted.\");\r",
																			"}    \r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Testing\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.test(\"POST /v1/approve-oam-request responds 400, because of too short release-number\", function () {\r",
																			"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																			"    });\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Testing could not be executed.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "400",
																		"type": "default"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Expected  /v1/approve-oam-request - too-long release-number",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"console.log(\"\\n-----  too long release-number -------------------------------\");\r",
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"var OPERATION_KEY;\r",
																			"var applicationName;\r",
																			"var releaseNumber;\r",
																			"var authorization;\r",
																			"var method;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"    let currentOperationServer;\r",
																			"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																			"    \r",
																			"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																			"\r",
																			"    let httpClientLtp;\r",
																			"    httpClientLtp = pm.collectionVariables.get(\"httpClientLtp\");\r",
																			"\r",
																			"    applicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																			"    releaseNumber = FaultyReleaseNumber();\r",
																			"\r",
																			"    authorization = APPLICATION.authorizationCode;\r",
																			"\r",
																			"    method = \"GET\";\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Input Data could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Dummy Parameters\r",
																			"****************************************************************************************/\r",
																			"var USER_NAME;\r",
																			"var ORIGINATOR;\r",
																			"var X_CORRELATOR;\r",
																			"var TRACE_INDICATOR;\r",
																			"var CUSTOMER_JOURNEY;\r",
																			"try {\r",
																			"    USER_NAME = APPLICATION.userName;\r",
																			"    ORIGINATOR = \"Postman\";\r",
																			"    X_CORRELATOR = CreateXCorrelator();\r",
																			"    TRACE_INDICATOR = \"1\";\r",
																			"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																			"    \r",
																			"} catch (error) {\r",
																			"    console.log(\"! Could not define dummy values for parameters. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Request Body\r",
																			"****************************************************************************************/\r",
																			"var REQUEST_BODY;\r",
																			"try {\r",
																			"    REQUEST_BODY = '{'\r",
																			"        + '\"application-name\" : ' + '\"' + applicationName + '\",'\r",
																			"        + '\"release-number\" : ' + '\"' + releaseNumber + '\",'\r",
																			"        + '\"Authorization\" : ' + '\"' + authorization + '\",'\r",
																			"        + '\"method\" : ' + '\"' + method + '\"'\r",
																			"    +'}';\r",
																			"} catch (error) {\r",
																			"    console.log(\"!Could not define request body. \");\r",
																			"}\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + \"/v1/approve-oam-request\";\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																			"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																			"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																			"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																			"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"function CreateXCorrelator() {\r",
																			"    let xCorrelator;\r",
																			"    xCorrelator = \"\";\r",
																			"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(12);\r",
																			"    return xCorrelator;\r",
																			"}\r",
																			"\r",
																			"function GenerateRandomHexString(length) {\r",
																			"    var randomRandomHexString = \"\";\r",
																			"    while (randomRandomHexString.length < length) {\r",
																			"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																			"    }\r",
																			"    return randomRandomHexString.substring(0,length);\r",
																			"}\r",
																			"\r",
																			"function FaultyReleaseNumber() {\r",
																			"    let releaseNumber;\r",
																			"    let releaseNumberParts = [];\r",
																			"    for (let i = 0; i < 4; i++) {\r",
																			"        releaseNumberParts[i] = Math.floor(Math.random() * 10);\r",
																			"    }\r",
																			"    releaseNumber = releaseNumberParts[0] + \".\" + releaseNumberParts[1] + \".\" + releaseNumberParts[2] + \".\" + releaseNumberParts[3];\r",
																			"    return releaseNumber;\r",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var RESPONSE_CODE;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"\r",
																			"    RESPONSE_CODE = parseInt(response.code);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Response Code could not be extracted.\");\r",
																			"}    \r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Testing\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.test(\"POST /v1/approve-oam-request responds 400, because of too long release-number\", function () {\r",
																			"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																			"    });\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Testing could not be executed.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "400",
																		"type": "default"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Expected  /v1/approve-oam-request - letters in release-number",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"console.log(\"\\n-----  letters in release-number -------------------------------\");\r",
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"var OPERATION_KEY;\r",
																			"var applicationName;\r",
																			"var releaseNumber;\r",
																			"var authorization;\r",
																			"var method;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"    let currentOperationServer;\r",
																			"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																			"    \r",
																			"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																			"\r",
																			"    let httpClientLtp;\r",
																			"    httpClientLtp = pm.collectionVariables.get(\"httpClientLtp\");\r",
																			"\r",
																			"    applicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																			"    releaseNumber = FaultyReleaseNumber();\r",
																			"\r",
																			"    authorization = APPLICATION.authorizationCode;\r",
																			"\r",
																			"    method = \"GET\";\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Input Data could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Dummy Parameters\r",
																			"****************************************************************************************/\r",
																			"var USER_NAME;\r",
																			"var ORIGINATOR;\r",
																			"var X_CORRELATOR;\r",
																			"var TRACE_INDICATOR;\r",
																			"var CUSTOMER_JOURNEY;\r",
																			"try {\r",
																			"    USER_NAME = APPLICATION.userName;\r",
																			"    ORIGINATOR = \"Postman\";\r",
																			"    X_CORRELATOR = CreateXCorrelator();\r",
																			"    TRACE_INDICATOR = \"1\";\r",
																			"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																			"    \r",
																			"} catch (error) {\r",
																			"    console.log(\"! Could not define dummy values for parameters. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Request Body\r",
																			"****************************************************************************************/\r",
																			"var REQUEST_BODY;\r",
																			"try {\r",
																			"    REQUEST_BODY = '{'\r",
																			"        + '\"application-name\" : ' + '\"' + applicationName + '\",'\r",
																			"        + '\"release-number\" : ' + '\"' + releaseNumber + '\",'\r",
																			"        + '\"Authorization\" : ' + '\"' + authorization + '\",'\r",
																			"        + '\"method\" : ' + '\"' + method + '\"'\r",
																			"    +'}';\r",
																			"} catch (error) {\r",
																			"    console.log(\"!Could not define request body. \");\r",
																			"}\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + \"/v1/approve-oam-request\";\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																			"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																			"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																			"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																			"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"function CreateXCorrelator() {\r",
																			"    let xCorrelator;\r",
																			"    xCorrelator = \"\";\r",
																			"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(12);\r",
																			"    return xCorrelator;\r",
																			"}\r",
																			"\r",
																			"function GenerateRandomHexString(length) {\r",
																			"    var randomRandomHexString = \"\";\r",
																			"    while (randomRandomHexString.length < length) {\r",
																			"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																			"    }\r",
																			"    return randomRandomHexString.substring(0,length);\r",
																			"}\r",
																			"\r",
																			"function FaultyReleaseNumber() {\r",
																			"    let releaseNumber;\r",
																			"    let releaseNumberParts = [];\r",
																			"    for  (let i=0; i<3 ; i++) {\r",
																			"        releaseNumberParts[i] = Math.floor(Math.random() * 10);\r",
																			"    }\r",
																			"    let characters;\r",
																			"    characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r",
																			"    let charactersLength;\r",
																			"    charactersLength = characters.length;\r",
																			"\r",
																			"    let faultyElement;\r",
																			"    faultyElement = characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																			"\r",
																			"    let faultyreleaseNumberPart;\r",
																			"    faultyreleaseNumberPart = Math.floor(Math.random() * 3);\r",
																			"    releaseNumberParts[faultyreleaseNumberPart] = faultyElement;\r",
																			"\r",
																			"    releaseNumber = releaseNumberParts[0] + \".\" + releaseNumberParts[1] + \".\" + releaseNumberParts[2];\r",
																			"    return releaseNumber;\r",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var RESPONSE_CODE;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"\r",
																			"    RESPONSE_CODE = parseInt(response.code);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Response Code could not be extracted.\");\r",
																			"}    \r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Testing\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.test(\"POST /v1/approve-oam-request responds 400, because of letters in release-number\", function () {\r",
																			"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																			"    });\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Testing could not be executed.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "400",
																		"type": "default"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Expected  /v1/approve-oam-request - sign in release-number",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"console.log(\"\\n-----  sign in release-number -------------------------------\");\r",
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"var OPERATION_KEY;\r",
																			"var applicationName;\r",
																			"var releaseNumber;\r",
																			"var authorization;\r",
																			"var method;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"    let currentOperationServer;\r",
																			"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																			"    \r",
																			"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																			"\r",
																			"    let httpClientLtp;\r",
																			"    httpClientLtp = pm.collectionVariables.get(\"httpClientLtp\");\r",
																			"\r",
																			"    applicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																			"    releaseNumber = FaultyReleaseNumber();\r",
																			"\r",
																			"    authorization = APPLICATION.authorizationCode;\r",
																			"\r",
																			"    method = \"GET\";\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Input Data could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Dummy Parameters\r",
																			"****************************************************************************************/\r",
																			"var USER_NAME;\r",
																			"var ORIGINATOR;\r",
																			"var X_CORRELATOR;\r",
																			"var TRACE_INDICATOR;\r",
																			"var CUSTOMER_JOURNEY;\r",
																			"try {\r",
																			"    USER_NAME = APPLICATION.userName;\r",
																			"    ORIGINATOR = \"Postman\";\r",
																			"    X_CORRELATOR = CreateXCorrelator();\r",
																			"    TRACE_INDICATOR = \"1\";\r",
																			"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																			"    \r",
																			"} catch (error) {\r",
																			"    console.log(\"! Could not define dummy values for parameters. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Request Body\r",
																			"****************************************************************************************/\r",
																			"var REQUEST_BODY;\r",
																			"try {\r",
																			"    REQUEST_BODY = '{'\r",
																			"        + '\"application-name\" : ' + '\"' + applicationName + '\",'\r",
																			"        + '\"release-number\" : ' + '\"' + releaseNumber + '\",'\r",
																			"        + '\"Authorization\" : ' + '\"' + authorization + '\",'\r",
																			"        + '\"method\" : ' + '\"' + method + '\"'\r",
																			"    +'}';\r",
																			"} catch (error) {\r",
																			"    console.log(\"!Could not define request body. \");\r",
																			"}\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + \"/v1/approve-oam-request\";\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																			"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																			"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																			"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																			"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"function CreateXCorrelator() {\r",
																			"    let xCorrelator;\r",
																			"    xCorrelator = \"\";\r",
																			"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(12);\r",
																			"    return xCorrelator;\r",
																			"}\r",
																			"\r",
																			"function GenerateRandomHexString(length) {\r",
																			"    var randomRandomHexString = \"\";\r",
																			"    while (randomRandomHexString.length < length) {\r",
																			"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																			"    }\r",
																			"    return randomRandomHexString.substring(0,length);\r",
																			"}\r",
																			"\r",
																			"function FaultyReleaseNumber() {\r",
																			"    let releaseNumber;\r",
																			"    let releaseNumberParts = [];\r",
																			"    for  (let i=0; i<3 ; i++) {\r",
																			"        releaseNumberParts[i] = Math.floor(Math.random() * 10);\r",
																			"    }\r",
																			"    let faultyElement;\r",
																			"    faultyElement = Math.random() < 0.5 ? '-' : '+' ;\r",
																			"    releaseNumber = faultyElement + releaseNumberParts[0] + \".\" + releaseNumberParts[1] + \".\" + releaseNumberParts[2];\r",
																			"    return releaseNumber;\r",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var RESPONSE_CODE;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"\r",
																			"    RESPONSE_CODE = parseInt(response.code);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Response Code could not be extracted.\");\r",
																			"}    \r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Testing\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.test(\"POST /v1/approve-oam-request responds 400, because of sign in release-number\", function () {\r",
																			"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																			"    });\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Testing could not be executed.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "400",
																		"type": "default"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Expected  /v1/approve-oam-request - incorrect separator in release-number",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"console.log(\"\\n-----  incorrect separators in release-number -------------------------------\");\r",
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"var OPERATION_KEY;\r",
																			"var applicationName;\r",
																			"var releaseNumber;\r",
																			"var authorization;\r",
																			"var method;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"    let currentOperationServer;\r",
																			"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																			"    \r",
																			"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																			"\r",
																			"    let httpClientLtp;\r",
																			"    httpClientLtp = pm.collectionVariables.get(\"httpClientLtp\");\r",
																			"\r",
																			"    applicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																			"    releaseNumber = FaultyReleaseNumber();\r",
																			"\r",
																			"    authorization = APPLICATION.authorizationCode;\r",
																			"\r",
																			"    method = \"GET\";\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Input Data could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Dummy Parameters\r",
																			"****************************************************************************************/\r",
																			"var USER_NAME;\r",
																			"var ORIGINATOR;\r",
																			"var X_CORRELATOR;\r",
																			"var TRACE_INDICATOR;\r",
																			"var CUSTOMER_JOURNEY;\r",
																			"try {\r",
																			"    USER_NAME = APPLICATION.userName;\r",
																			"    ORIGINATOR = \"Postman\";\r",
																			"    X_CORRELATOR = CreateXCorrelator();\r",
																			"    TRACE_INDICATOR = \"1\";\r",
																			"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																			"    \r",
																			"} catch (error) {\r",
																			"    console.log(\"! Could not define dummy values for parameters. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Request Body\r",
																			"****************************************************************************************/\r",
																			"var REQUEST_BODY;\r",
																			"try {\r",
																			"    REQUEST_BODY = '{'\r",
																			"        + '\"application-name\" : ' + '\"' + applicationName + '\",'\r",
																			"        + '\"release-number\" : ' + '\"' + releaseNumber + '\",'\r",
																			"        + '\"Authorization\" : ' + '\"' + authorization + '\",'\r",
																			"        + '\"method\" : ' + '\"' + method + '\"'\r",
																			"    +'}';\r",
																			"} catch (error) {\r",
																			"    console.log(\"!Could not define request body. \");\r",
																			"}\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + \"/v1/approve-oam-request\";\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																			"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																			"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																			"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																			"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"function CreateXCorrelator() {\r",
																			"    let xCorrelator;\r",
																			"    xCorrelator = \"\";\r",
																			"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(12);\r",
																			"    return xCorrelator;\r",
																			"}\r",
																			"\r",
																			"function GenerateRandomHexString(length) {\r",
																			"    var randomRandomHexString = \"\";\r",
																			"    while (randomRandomHexString.length < length) {\r",
																			"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																			"    }\r",
																			"    return randomRandomHexString.substring(0,length);\r",
																			"}\r",
																			"\r",
																			"function FaultyReleaseNumber() {\r",
																			"    let releaseNumber;\r",
																			"    releaseNumber = \"\";\r",
																			"    let releaseNumberParts;\r",
																			"    releaseNumberParts = [];\r",
																			"    for(let i=0; i<3; i++) {\r",
																			"        releaseNumberParts[i] = Math.floor(Math.random() * 10);\r",
																			"    }\r",
																			"    let separators;\r",
																			"    separators = \"-:;/\";\r",
																			"    let separatorsLength;\r",
																			"    separatorsLength = separators.length;\r",
																			"    let faultySeparator;\r",
																			"    faultySeparator = separators.charAt(Math.floor(Math.random() * separatorsLength));\r",
																			"    releaseNumber = releaseNumberParts.join(faultySeparator);\r",
																			"    return releaseNumber;\r",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var RESPONSE_CODE;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"\r",
																			"    RESPONSE_CODE = parseInt(response.code);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Response Code could not be extracted.\");\r",
																			"}    \r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Testing\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.test(\"POST /v1/approve-oam-request responds 400, because of incorrect separator in release-number\", function () {\r",
																			"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																			"    });\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Testing could not be executed.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "400",
																		"type": "default"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Expected  /v1/approve-oam-request - multiple digit in placeholder of release-number",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"console.log(\"\\n-----  multiple digit in placeholder of release-number -------------------------------\");\r",
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"var OPERATION_KEY;\r",
																			"var applicationName;\r",
																			"var releaseNumber;\r",
																			"var authorization;\r",
																			"var method;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"    let currentOperationServer;\r",
																			"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																			"    \r",
																			"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																			"\r",
																			"    let httpClientLtp;\r",
																			"    httpClientLtp = pm.collectionVariables.get(\"httpClientLtp\");\r",
																			"\r",
																			"    applicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																			"    releaseNumber = FaultyReleaseNumber();\r",
																			"\r",
																			"    authorization = APPLICATION.authorizationCode;\r",
																			"\r",
																			"    method = \"GET\";\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Input Data could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Dummy Parameters\r",
																			"****************************************************************************************/\r",
																			"var USER_NAME;\r",
																			"var ORIGINATOR;\r",
																			"var X_CORRELATOR;\r",
																			"var TRACE_INDICATOR;\r",
																			"var CUSTOMER_JOURNEY;\r",
																			"try {\r",
																			"    USER_NAME = APPLICATION.userName;\r",
																			"    ORIGINATOR = \"Postman\";\r",
																			"    X_CORRELATOR = CreateXCorrelator();\r",
																			"    TRACE_INDICATOR = \"1\";\r",
																			"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																			"    \r",
																			"} catch (error) {\r",
																			"    console.log(\"! Could not define dummy values for parameters. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Request Body\r",
																			"****************************************************************************************/\r",
																			"var REQUEST_BODY;\r",
																			"try {\r",
																			"    REQUEST_BODY = '{'\r",
																			"        + '\"application-name\" : ' + '\"' + applicationName + '\",'\r",
																			"        + '\"release-number\" : ' + '\"' + releaseNumber + '\",'\r",
																			"        + '\"Authorization\" : ' + '\"' + authorization + '\",'\r",
																			"        + '\"method\" : ' + '\"' + method + '\"'\r",
																			"    +'}';\r",
																			"} catch (error) {\r",
																			"    console.log(\"!Could not define request body. \");\r",
																			"}\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + \"/v1/approve-oam-request\";\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																			"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																			"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																			"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																			"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"function CreateXCorrelator() {\r",
																			"    let xCorrelator;\r",
																			"    xCorrelator = \"\";\r",
																			"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(12);\r",
																			"    return xCorrelator;\r",
																			"}\r",
																			"\r",
																			"function GenerateRandomHexString(length) {\r",
																			"    var randomRandomHexString = \"\";\r",
																			"    while (randomRandomHexString.length < length) {\r",
																			"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																			"    }\r",
																			"    return randomRandomHexString.substring(0,length);\r",
																			"}\r",
																			"\r",
																			"function FaultyReleaseNumber() {\r",
																			"    let releaseNumber;\r",
																			"    releaseNumber = \"\";\r",
																			"    let releaseNumberParts;\r",
																			"    releaseNumberParts = [];\r",
																			"    for(let i=0; i<3; i++) {\r",
																			"        releaseNumberParts[i] = Math.floor(Math.random() * 10);\r",
																			"    }\r",
																			"    let randomFaultyLength = Math.floor(3 + Math.random() * 7);\r",
																			"    let faultyElement = Math.floor(Math.pow(10, randomFaultyLength-1) + Math.random() * (Math.pow(10, randomFaultyLength) - Math.pow(10, randomFaultyLength-1) - 1));\r",
																			"\r",
																			"    let faultyreleaseNumberPart;\r",
																			"    faultyreleaseNumberPart = Math.floor(Math.random() * 3);\r",
																			"    releaseNumberParts[faultyreleaseNumberPart] = faultyElement;\r",
																			"\r",
																			"    releaseNumber = releaseNumberParts[0] + \".\" + releaseNumberParts[1] + \".\" + releaseNumberParts[2];\r",
																			"    return releaseNumber;\r",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var RESPONSE_CODE;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"\r",
																			"    RESPONSE_CODE = parseInt(response.code);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Response Code could not be extracted.\");\r",
																			"}    \r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Testing\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.test(\"POST /v1/approve-oam-request responds 400, because of multiple digit in placeholder of release-number\", function () {\r",
																			"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																			"    });\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Testing could not be executed.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "400",
																		"type": "default"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														}
													],
													"description": "## Get release-number checked for correctness?\n\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for op-s of /v1/approve-oam-request, storing operation-key\n  - randomly choosing http-c from ltpList\n- POST /v1/approve-oam-request\n  - all attributes filled with chosen values  BUT release-number attribute with random dummy value differing from pattern in different ways\n  - operation-key from above\n  - authorization code from inpu load file\n  - reasonable parameters\n\n#### Testing:\n- checking for ResponseCode==400\n- verify that no changes happened on the configuration\n\n#### Clearing:\n- not applicable"
												},
												{
													"name": "method checked?",
													"item": [
														{
															"name": "reference /core-model-1-4:control-construct",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"console.log(\"\\n----- /v1/approve-oam-request acceptance -- method checked?-------------------------------\");\r",
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Environment variables could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + \"/core-model-1-4:control-construct\";\r",
																			"\r",
																			"    let REQUEST_BODY;\r",
																			"    REQUEST_BODY = \"\";\r",
																			"\r",
																			"    let AUTHORIZATION;\r",
																			"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var ltpList;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"    \r",
																			"    let responseCode;\r",
																			"    responseCode = parseInt(response.code);\r",
																			"    \r",
																			"    if ( Math.floor(responseCode/100) === 2 ) {\r",
																			"        let responseObject;\r",
																			"        responseObject = JSON.parse(response.stream);\r",
																			"        ltpList = responseObject[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
																			"\r",
																			"    } else {\r",
																			"        ltpList = [];\r",
																			"    }\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! ltpList could not be extracted.\");\r",
																			"}\r",
																			"\r",
																			"var currentOperationServer;\r",
																			"var httpClientLtp;\r",
																			"try {\r",
																			"    currentOperationServer = FindOperationServer(\"/v1/approve-oam-request\", ltpList);\r",
																			"    httpClientLtp = FindRandomHttpClientLTP(ltpList);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Reference objects could not be extracted.\");\r",
																			"} \r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.collectionVariables.clear();\r",
																			"    \r",
																			"    pm.collectionVariables.set(\"currentOperationServer\", currentOperationServer);\r",
																			"    pm.collectionVariables.set(\"httpClientLtp\", httpClientLtp);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Collection variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"function FindOperationServer(operationName, ltpList) {\r",
																			"    let operationServer;\r",
																			"    operationServer = \"\";\r",
																			"    try {\r",
																			"        let sampleUuid;\r",
																			"        for(let i=0; i<ltpList.length; i++) {\r",
																			"            sampleUuid = ltpList[i][\"uuid\"];\r",
																			"            if(sampleUuid.includes(\"op-s-\")) {\r",
																			"                let sampleOperationName;\r",
																			"                sampleOperationName = ltpList[i][\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"][\"operation-name\"];\r",
																			"                if(sampleOperationName == operationName) {\r",
																			"                    operationServer = ltpList[i];\r",
																			"                    return operationServer;\r",
																			"                }\r",
																			"            }\r",
																			"        }\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Exception in function : FindOperationServer. \");\r",
																			"    }\r",
																			"    return operationServer;\r",
																			"}\r",
																			"\r",
																			"function FindRandomHttpClientLTP(ltpList) {\r",
																			"    let randomHttpClientLtp;\r",
																			"    randomHttpClientLtp = {};\r",
																			"    let httpClientLtpList;\r",
																			"    httpClientLtpList = [];\r",
																			"    try{\r",
																			"        let sampleUuid;\r",
																			"        for ( let i=0; i<ltpList.length; i++) {\r",
																			"            sampleUuid = ltpList[i][\"uuid\"];\r",
																			"            if(sampleUuid.includes(\"http-c-\")){\r",
																			"                    httpClientLtpList.push(ltpList[i]);\r",
																			"            }\r",
																			"        }\r",
																			"        if ( httpClientLtpList.length > 0 ) {\r",
																			"            const random = Math.floor(Math.random() * httpClientLtpList.length);\r",
																			"            randomHttpClientLtp = httpClientLtpList[random];\r",
																			"        }\r",
																			"    } catch( error ){\r",
																			"        console.log(error);\r",
																			"        console.log(\"! Exception in function : FindRandomHttpClientLTP. \")\r",
																			"    }\r",
																			"    return randomHttpClientLtp;\r",
																			"}\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "GET",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "200",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "Expected /v1/approve-oam-request - incorrect method",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"var APPLICATION;\r",
																			"var OPERATION_KEY;\r",
																			"var applicationName;\r",
																			"var releaseNumber;\r",
																			"var authorization;\r",
																			"var method;\r",
																			"try {\r",
																			"    APPLICATION = pm.environment.get(\"application\");\r",
																			"\r",
																			"    let currentOperationServer;\r",
																			"    currentOperationServer = pm.collectionVariables.get(\"currentOperationServer\");\r",
																			"    \r",
																			"    OPERATION_KEY = currentOperationServer[\"layer-protocol\"][0][\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"][\"operation-key\"];\r",
																			"\r",
																			"    let httpClientLtp;\r",
																			"    httpClientLtp = pm.collectionVariables.get(\"httpClientLtp\");\r",
																			"\r",
																			"    applicationName = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"application-name\"];\r",
																			"    releaseNumber = httpClientLtp[\"layer-protocol\"][0][\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"][\"release-number\"];\r",
																			"\r",
																			"    authorization = APPLICATION.authorizationCode;\r",
																			"\r",
																			"    method = GenerateRandomString(5);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Input Data could not be loaded.\");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Dummy Parameters\r",
																			"****************************************************************************************/\r",
																			"var USER_NAME;\r",
																			"var ORIGINATOR;\r",
																			"var X_CORRELATOR;\r",
																			"var TRACE_INDICATOR;\r",
																			"var CUSTOMER_JOURNEY;\r",
																			"try {\r",
																			"    USER_NAME = APPLICATION.userName;\r",
																			"    ORIGINATOR = \"Postman\";\r",
																			"    X_CORRELATOR = CreateXCorrelator();\r",
																			"    TRACE_INDICATOR = \"1\";\r",
																			"    CUSTOMER_JOURNEY = \"CustomerJourney not yet defined.\";\r",
																			"    \r",
																			"} catch (error) {\r",
																			"    console.log(\"! Could not define dummy values for parameters. \");\r",
																			"}\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Defining Request Body\r",
																			"****************************************************************************************/\r",
																			"var REQUEST_BODY;\r",
																			"try {\r",
																			"    REQUEST_BODY = '{'\r",
																			"        + '\"application-name\" : ' + '\"' + applicationName + '\",'\r",
																			"        + '\"release-number\" : ' + '\"' + releaseNumber + '\",'\r",
																			"        + '\"Authorization\" : ' + '\"' + authorization + '\",'\r",
																			"        + '\"method\" : ' + '\"' + method + '\"'\r",
																			"    +'}';\r",
																			"} catch (error) {\r",
																			"    console.log(\"!Could not define request body. \");\r",
																			"}\r",
																			"/****************************************************************************************\r",
																			"* Setting Collection Variables\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Setting Local Variables and Preparing the Request\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    let URI;\r",
																			"    URI = APPLICATION.serverUrl + \"/v1/approve-oam-request\";\r",
																			"\r",
																			"    let ACCEPT;\r",
																			"    ACCEPT = \"application/json\";\r",
																			"\r",
																			"    let CONTENT_TYPE;\r",
																			"    CONTENT_TYPE = \"application/json\";\r",
																			"\r",
																			"    pm.variables.clear();\r",
																			"\r",
																			"    pm.variables.set(\"uri\", URI);\r",
																			"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"operation-key\", value:OPERATION_KEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"user\", value:USER_NAME});\r",
																			"    pm.request.headers.upsert({key:\"originator\", value:ORIGINATOR});\r",
																			"    pm.request.headers.upsert({key:\"x-correlator\", value:X_CORRELATOR});\r",
																			"    pm.request.headers.upsert({key:\"trace-indicator\", value:TRACE_INDICATOR});\r",
																			"    pm.request.headers.upsert({key:\"customer-journey\", value:CUSTOMER_JOURNEY});\r",
																			"\r",
																			"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
																			"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(error);\r",
																			"    console.log(\"! Local variables could not be set.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"function CreateXCorrelator() {\r",
																			"    let xCorrelator;\r",
																			"    xCorrelator = \"\";\r",
																			"    xCorrelator += GenerateRandomHexString(8) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(4) + \"-\";\r",
																			"    xCorrelator += GenerateRandomHexString(12);\r",
																			"    return xCorrelator;\r",
																			"}\r",
																			"\r",
																			"function GenerateRandomHexString(length) {\r",
																			"    var randomRandomHexString = \"\";\r",
																			"    while (randomRandomHexString.length < length) {\r",
																			"        randomRandomHexString += Math.random().toString(16).substring(2);\r",
																			"    }\r",
																			"    return randomRandomHexString.substring(0,length);\r",
																			"}\r",
																			"\r",
																			"function GenerateRandomString(length) {\r",
																			"    let randomString;\r",
																			"    randomString = \"\";\r",
																			"    try {\r",
																			"        let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r",
																			"        let charactersLength = characters.length;\r",
																			"        for (let i = 0; i < length; i++) {\r",
																			"            randomString += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
																			"        }\r",
																			"    } catch (error) {\r",
																			"        console.log(\"! Could not generate random string. \");\r",
																			"    }\r",
																			"    return randomString;\r",
																			"}"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"/****************************************************************************************\r",
																			"* Loading Input Data\r",
																			"****************************************************************************************/\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Extracting Result\r",
																			"****************************************************************************************/\r",
																			"var RESPONSE_CODE;\r",
																			"try {\r",
																			"    let response;\r",
																			"    response = pm.response;\r",
																			"\r",
																			"    RESPONSE_CODE = parseInt(response.code);\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Response Code could not be extracted.\");\r",
																			"}    \r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Testing\r",
																			"****************************************************************************************/\r",
																			"try {\r",
																			"    pm.test(\"POST /v1/approve-oam-request responds 400, because of incorrect method\", function () {\r",
																			"        pm.expect(RESPONSE_CODE).to.equal(400);\r",
																			"    });\r",
																			"\r",
																			"} catch (error) {\r",
																			"    console.log(\"! Testing could not be executed.\");\r",
																			"}\r",
																			"\r",
																			"\r",
																			"/****************************************************************************************\r",
																			"* Functions\r",
																			"****************************************************************************************/"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "x-mock-response-code",
																		"value": "400",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{{requestBody}}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{uri}}",
																	"host": [
																		"{{uri}}"
																	]
																}
															},
															"response": []
														}
													],
													"description": "## Get method checked for correctness?\n#### Preparation:\n- GETing CC (/core-model-1-4:control-construct)\n  - searching CC for op-s of /v1/approve-oam-request, storing operation-key- randomly choosing http-c from ltpList\n- POST /v1/approve-oam-request\n  - all attributes filled with chosen values  BUT Method with random dummy value (random value not present in enumeration)\n  - operation-key from above\n  - authorization code from input load file\n  - reasonable parameters\n\n#### Testing:\n- Checking for ResponseCode=400\n\n#### Clearing:\n- not applicable"
												}
											]
										}
									]
								},
								{
									"name": "Exit",
									"item": [
										{
											"name": "for exiting /v1/record-service-request",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"/****************************************************************************************\r",
															"* Loading Input Data\r",
															"****************************************************************************************/\r",
															"var URI;\r",
															"try {\r",
															"    URI = pm.environment.get(\"dummyUri\");\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Loading Input Data failed.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Updating Environmental Variables and Determining the next Step\r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    pm.variables.clear();\r",
															"\r",
															"    let REQUEST_BODY;\r",
															"    REQUEST_BODY = \"\";\r",
															"\r",
															"    let AUTHORIZATION;\r",
															"    AUTHORIZATION = \"\";\r",
															"\r",
															"    let OPERATION_KEY;\r",
															"    OPERATION_KEY = \"\";\r",
															"\r",
															"    pm.variables.set(\"uri\", URI);\r",
															"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
															"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
															"    pm.request.headers.upsert({key:\"operationKey\", value:OPERATION_KEY});\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});\r",
															"    pm.request.headers.upsert({key:\"Content-Type\", value:\"application/json\"});\r",
															"\r",
															"} catch (error) {\r",
															"    console.log(\"! Setting Local Variables and Preparing the Request failed.\");\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Termination",
			"item": [
				{
					"name": "=====> JustJumpToTarget =====>",
					"item": [
						{
							"name": "=====> JustJumpToTarget =====>",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(\"\\n----- JustJumpToTarget --------------------------------------------------\");",
											"/****************************************************************************************",
											"* ",
											"* This is a request for daily working with the Validator.",
											"* It just makes the program flow jumping to the Request named \"=====> Target =====>\".",
											"* ",
											"****************************************************************************************/",
											" ",
											" ",
											"/****************************************************************************************",
											"* Loading Input Data",
											"****************************************************************************************/",
											"try {",
											"    var URI;",
											"    URI = pm.environment.get(\"dummyUri\");",
											"",
											"} catch (error) {",
											"    console.log(\"! Environment variables could not be loaded.\");",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Setting up Local Variables and Preparing the Request",
											"****************************************************************************************/",
											"try {",
											"    pm.variables.clear();",
											"",
											"    postman.setNextRequest(\"=====> Target =====>\");",
											"",
											"    pm.variables.set(\"uri\", URI);",
											"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
											"",
											"} catch (error) {",
											"    console.log(\"! Local variables could not be set.\");",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Functions",
											"****************************************************************************************/",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "=====> Target =====>",
					"item": [
						{
							"name": "=====> Target =====>",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(\"\\n----- Target --------------------------------------------------\");",
											"/****************************************************************************************",
											"* ",
											"* Here starts the execution of specific validation tests",
											"* ",
											"****************************************************************************************/",
											"",
											"",
											"/****************************************************************************************",
											"* Loading Input Data",
											"****************************************************************************************/",
											"try {",
											"    var URI;",
											"    URI = pm.environment.get(\"dummyUri\");",
											"",
											"} catch (error) {",
											"    console.log(\"! Environment variables could not be loaded.\");",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Setting up Local Variables and Preparing the Request",
											"****************************************************************************************/",
											"try {",
											"    pm.variables.clear();",
											"",
											"    pm.variables.set(\"uri\", URI);",
											"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
											"",
											"} catch (error) {",
											"    console.log(\"! Local variables could not be set.\");",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Functions",
											"****************************************************************************************/",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "=====> JustJumpToTheEnd =====>",
					"item": [
						{
							"name": "=====> JustJumpToTheEnd =====>",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(\"\\n----- JustJumpToEnd --------------------------------------------------\");",
											"/****************************************************************************************",
											"* ",
											"* This is a request for daily working with the Validator.",
											"* It just makes the program flow jumping to the Request named \"=====> End\".",
											"* ",
											"****************************************************************************************/",
											" ",
											" ",
											"/****************************************************************************************",
											"* Loading Input Data",
											"****************************************************************************************/",
											"try {",
											"    var URI;",
											"    URI = pm.environment.get(\"dummyUri\");",
											"",
											"} catch (error) {",
											"    console.log(\"! Environment variables could not be loaded.\");",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Setting up Local Variables and Preparing the Request",
											"****************************************************************************************/",
											"try {",
											"    pm.variables.clear();",
											"",
											"    postman.setNextRequest(\"=====> End\");",
											"",
											"    pm.variables.set(\"uri\", URI);",
											"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
											"",
											"} catch (error) {",
											"    console.log(\"! Local variables could not be set.\");",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Functions",
											"****************************************************************************************/",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "=====> End",
					"item": [
						{
							"name": "=====> End",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(\"\\n----- End --------------------------------------------------\");",
											"/****************************************************************************************",
											"* ",
											"* Here ends the validation",
											"*",
											"****************************************************************************************/",
											"",
											"",
											"/****************************************************************************************",
											"* Loading Input Data",
											"****************************************************************************************/",
											"try {",
											"    var URI;",
											"    URI = pm.environment.get(\"dummyUri\");",
											"",
											"} catch (error) {",
											"    console.log(\"! Environment variables could not be loaded.\");",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Setting up Local Variables and Preparing the Request",
											"****************************************************************************************/",
											"try {",
											"    pm.variables.clear();",
											"",
											"    pm.variables.set(\"uri\", URI);",
											"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
											"",
											"} catch (error) {",
											"    console.log(\"! Local variables could not be set.\");",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Functions",
											"****************************************************************************************/",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "PostTermination",
			"item": [
				{
					"name": "Deep check of CC for being at initial stage",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"\\n----- GET /core-model-1-4:control-construct - cross verifying with the initial data to make sure initial configurations are maintained after test-suite run -------------------------------\");\r",
									"/****************************************************************************************\r",
									"* Loading Input Data\r",
									"****************************************************************************************/\r",
									"var APPLICATION;\r",
									"var AUTHORIZATION;\r",
									"try {\r",
									"    APPLICATION = pm.environment.get(\"application\");\r",
									"    AUTHORIZATION = APPLICATION.authorizationCode;\r",
									"\r",
									"    oamPath = \"/core-model-1-4:control-construct\";\r",
									"\r",
									"} catch (error) {\r",
									"    console.log(\"! Environment variables could not be loaded.\");\r",
									"}\r",
									"\r",
									"/****************************************************************************************\r",
									"* Defining Request Body\r",
									"****************************************************************************************/\r",
									"var REQUEST_BODY;\r",
									"try {\r",
									"    REQUEST_BODY = \"\";\r",
									"} catch (error) {\r",
									"    console.log(\"!Could not define request body. \");\r",
									"}\r",
									"\r",
									"/****************************************************************************************\r",
									"* Setting Local Variables and Preparing the Request\r",
									"****************************************************************************************/\r",
									"try {\r",
									"    let URI;\r",
									"    URI = APPLICATION.serverUrl + oamPath;\r",
									"\r",
									"    let ACCEPT;\r",
									"    ACCEPT = \"application/json\";\r",
									"\r",
									"    let CONTENT_TYPE;\r",
									"    CONTENT_TYPE = \"application/json\";\r",
									"\r",
									"    pm.variables.clear();\r",
									"\r",
									"    pm.variables.set(\"uri\", URI);\r",
									"    pm.variables.set(\"requestBody\", REQUEST_BODY);\r",
									"\r",
									"    pm.request.headers.upsert({key:\"Authorization\", value:AUTHORIZATION});\r",
									"\r",
									"    pm.request.headers.upsert({key:\"Accept\", value:ACCEPT});\r",
									"    pm.request.headers.upsert({key:\"Content-Type\", value:CONTENT_TYPE});\r",
									"\r",
									"} catch (error) {\r",
									"    console.log(\"! Local variables could not be set.\");\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Functions\r",
									"****************************************************************************************/\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"/****************************************************************************************\r",
									"* Loading Input Data\r",
									"****************************************************************************************/\r",
									"var expectedControlConstruct;\r",
									"let expectedProfileList;\r",
									"var expectedLtpList;\r",
									"var expectedFDList;\r",
									"try {\r",
									"    let APPLICATION;\r",
									"    APPLICATION = pm.environment.get(\"application\");\r",
									"    expectedControlConstruct = APPLICATION[\"core-model-1-4:control-construct\"];\r",
									"    expectedProfileList = expectedControlConstruct[\"profile-collection\"][\"profile\"];\r",
									"    expectedLtpList = expectedControlConstruct[\"logical-termination-point\"];\r",
									"    expectedFDList = expectedControlConstruct[\"forwarding-domain\"];\r",
									"\r",
									"} catch (error) {\r",
									"    console.log(\"! Could not load Input Data. \");\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Extracting Result\r",
									"****************************************************************************************/\r",
									"var RESPONSE_CODE;\r",
									"var actualControlConstruct;\r",
									"try {\r",
									"    let response;\r",
									"    response = pm.response;\r",
									"\r",
									"    RESPONSE_CODE = parseInt(response.code);\r",
									"\r",
									"    if ( Math.floor(RESPONSE_CODE/100) === 2 ) {\r",
									"        actualControlConstruct = JSON.parse(response.stream);\r",
									"    } else {\r",
									"        actualControlConstruct = {};\r",
									"    }\r",
									"\r",
									"} catch (error) {\r",
									"    console.log(\"! Response Code could not be extracted.\");\r",
									"}    \r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Testing\r",
									"****************************************************************************************/\r",
									"try {\r",
									"    pm.test(\"POST /core-model-1-4:control-construct responds 200\", function () {\r",
									"        pm.expect(RESPONSE_CODE).to.equal(200);\r",
									"    });\r",
									"    pm.test(\"Control construct could be found \" , function () {\r",
									"        pm.expect(actualControlConstruct).to.not.equal(undefined);\r",
									"        pm.expect(Object.keys(actualControlConstruct).length).to.not.equal(0);\r",
									"    });\r",
									"\r",
									"    if( actualControlConstruct != undefined ) { \r",
									"                \r",
									"        pm.test(\"control-construct uuid '\" + expectedControlConstruct[\"uuid\"] + \"' could be found \" , function () {\r",
									"            pm.expect(actualControlConstruct[\"core-model-1-4:control-construct\"][\"uuid\"]).to.not.equal(undefined);\r",
									"            pm.expect(actualControlConstruct[\"core-model-1-4:control-construct\"][\"uuid\"]).to.equal(expectedControlConstruct[\"uuid\"]);\r",
									"        });\r",
									"\r",
									"        //testing profile collection\r",
									"\r",
									"        var actualProfileList;\r",
									"        actualProfileList = actualControlConstruct[\"core-model-1-4:control-construct\"][\"profile-collection\"][\"profile\"];\r",
									"        pm.test(\"profile list could be found \" , function () {\r",
									"            pm.expect(actualProfileList).to.not.equal(undefined);\r",
									"            pm.expect(Object.keys(actualProfileList).length).to.not.equal(0);\r",
									"        });\r",
									"        if(actualProfileList!=undefined) {\r",
									"            for ( let expectedProfileIndex=0; expectedProfileIndex<expectedProfileList.length; expectedProfileIndex++ ) {\r",
									"                let expectedProfileInstance;\r",
									"                expectedProfileInstance = expectedProfileList[expectedProfileIndex];\r",
									"                let actualProfileInstance = FindActualInstance(expectedProfileInstance[\"uuid\"], actualProfileList);\r",
									"                pm.test(\"Profile instance '\" + expectedProfileInstance[\"uuid\"] + \"' could be found \" , function () {\r",
									"                    pm.expect(actualProfileInstance).to.not.equal(undefined);\r",
									"                    pm.expect(Object.keys(actualProfileInstance).length).to.not.equal(0);\r",
									"                });\r",
									"                if(actualProfileInstance != undefined) {\r",
									"                    console.log(\"testing \" + expectedProfileInstance[\"uuid\"]);\r",
									"                    pm.test(\"Provides expected profile-name '\" + expectedProfileInstance[\"profile-name\"] + \"' for \" + expectedProfileInstance[\"uuid\"] + \"'\", function () {\r",
									"                            pm.expect(actualProfileInstance[\"profile-name\"]).to.equal(expectedProfileInstance[\"profile-name\"]);\r",
									"                    });\r",
									"                    if(expectedProfileInstance[\"profile-name\"].includes(\"PROFILE_NAME_TYPE_ACTION_PROFILE\")) {\r",
									"                        let expectedActionProfileCapability;\r",
									"                        expectedActionProfileCapability = expectedProfileInstance[\"action-profile-1-0:action-profile-pac\"][\"action-profile-capability\"];\r",
									"                        let actualActionProfileCapability;\r",
									"                        actualActionProfileCapability = actualProfileInstance[\"action-profile-1-0:action-profile-pac\"][\"action-profile-capability\"];\r",
									"                        pm.test(\"action-profile-capability class could be found for '\" + expectedProfileInstance[\"uuid\"] + \"'\" , function () {\r",
									"                            pm.expect(actualActionProfileCapability).to.not.equal(undefined);\r",
									"                            pm.expect(Object.keys(actualActionProfileCapability).length).to.not.equal(0);\r",
									"                        });\r",
									"                        if(actualActionProfileCapability != undefined) {\r",
									"                            pm.test(\"Provides expected properties in capability class for '\" + expectedProfileInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                pm.expect(actualActionProfileCapability[\"operation-name\"]).to.equal(expectedActionProfileCapability[\"operation-name\"]);\r",
									"                                pm.expect(actualActionProfileCapability[\"label\"]).to.equal(expectedActionProfileCapability[\"label\"]);\r",
									"                                pm.expect(actualActionProfileCapability[\"display-in-new-browser-window\"]).to.equal(expectedActionProfileCapability[\"display-in-new-browser-window\"]);\r",
									"                            });\r",
									"                        }\r",
									"                        let expectedActionProfileConfiguration;\r",
									"                        expectedActionProfileConfiguration = expectedProfileInstance[\"action-profile-1-0:action-profile-pac\"][\"action-profile-configuration\"];\r",
									"                        let actualActionProfileConfiguration;\r",
									"                        actualActionProfileConfiguration = actualProfileInstance[\"action-profile-1-0:action-profile-pac\"][\"action-profile-configuration\"];\r",
									"                        pm.test(\"action-profile-configuration class could be found for '\" + expectedProfileInstance[\"uuid\"] + \"'\" , function () {\r",
									"                            pm.expect(actualActionProfileConfiguration).to.not.equal(undefined);\r",
									"                            pm.expect(Object.keys(actualActionProfileConfiguration).length).to.not.equal(0);\r",
									"                        });\r",
									"                        if(actualActionProfileConfiguration != undefined) {\r",
									"                            pm.test(\"Provides expected properties in configuration class for '\" + expectedProfileInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                pm.expect(actualActionProfileConfiguration[\"consequent-operation-reference\"]).to.equal(expectedActionProfileConfiguration[\"consequent-operation-reference\"]);\r",
									"                            });\r",
									"                        }\r",
									"                    } else if (expectedProfileInstance[\"profile-name\"].includes(\"PROFILE_NAME_TYPE_GENERIC_RESPONSE_PROFILE\")) {\r",
									"                        let expectedResponseProfileCapability;\r",
									"                        expectedResponseProfileCapability = expectedProfileInstance[\"response-profile-1-0:response-profile-pac\"][\"response-profile-capability\"];\r",
									"                        let actualResponseProfileCapability;\r",
									"                        actualResponseProfileCapability = actualProfileInstance[\"response-profile-1-0:response-profile-pac\"][\"response-profile-capability\"];\r",
									"                        pm.test(\"response-profile-capability class could be found for '\" + expectedProfileInstance[\"uuid\"] + \"'\" , function () {\r",
									"                            pm.expect(actualResponseProfileCapability).to.not.equal(undefined);\r",
									"                            pm.expect(Object.keys(actualResponseProfileCapability).length).to.not.equal(0);\r",
									"                        });\r",
									"                        if(actualResponseProfileCapability != undefined) {\r",
									"                            pm.test(\"Provides expected properties in capability class for '\" + expectedProfileInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                pm.expect(actualResponseProfileCapability[\"operation-name\"]).to.equal(expectedResponseProfileCapability[\"operation-name\"]);\r",
									"                                pm.expect(JSON.stringify(actualResponseProfileCapability[\"field-name\"])).to.equal(JSON.stringify(expectedResponseProfileCapability[\"field-name\"]));\r",
									"                                pm.expect(actualResponseProfileCapability[\"datatype\"]).to.equal(expectedResponseProfileCapability[\"datatype\"]);\r",
									"                            });\r",
									"                        }\r",
									"                        let expectedResponseProfileConfiguration;\r",
									"                        expectedResponseProfileConfiguration = expectedProfileInstance[\"response-profile-1-0:response-profile-pac\"][\"response-profile-configuration\"];\r",
									"                        let actualResponseProfileConfiguration;\r",
									"                        actualResponseProfileConfiguration = actualProfileInstance[\"response-profile-1-0:response-profile-pac\"][\"response-profile-configuration\"];\r",
									"                        pm.test(\"response-profile-configuration class could be found for '\" + expectedProfileInstance[\"uuid\"] + \"'\" , function () {\r",
									"                            pm.expect(actualResponseProfileConfiguration).to.not.equal(undefined);\r",
									"                            pm.expect(Object.keys(actualResponseProfileConfiguration).length).to.not.equal(0);\r",
									"                        });\r",
									"                        if(actualResponseProfileConfiguration != undefined) {\r",
									"                            pm.test(\"Provides expected properties in configuration class for '\" + expectedProfileInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                pm.expect(JSON.stringify(actualResponseProfileConfiguration[\"value\"])).to.equal(JSON.stringify(expectedResponseProfileConfiguration[\"value\"]));\r",
									"                            });\r",
									"                        }\r",
									"                    } else if (expectedProfileInstance[\"profile-name\"].includes(\"PROFILE_NAME_TYPE_FILE_PROFILE\")) {\r",
									"                        let expectedFileProfileCapability;\r",
									"                        expectedFileProfileCapability = expectedProfileInstance[\"file-profile-1-0:file-profile-pac\"][\"file-profile-capability\"];\r",
									"                        let actualFileProfileCapability;\r",
									"                        actualFileProfileCapability = actualProfileInstance[\"file-profile-1-0:file-profile-pac\"][\"file-profile-capability\"];\r",
									"                        pm.test(\"file-profile-capability class could be found for '\" + expectedProfileInstance[\"uuid\"] + \"'\" , function () {\r",
									"                            pm.expect(actualFileProfileCapability).to.not.equal(undefined);\r",
									"                            pm.expect(Object.keys(actualFileProfileCapability).length).to.not.equal(0);\r",
									"                        });\r",
									"                        if(actualFileProfileCapability != undefined) {\r",
									"                            pm.test(\"Provides expected properties in capability class for '\" + expectedProfileInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                pm.expect(actualFileProfileCapability[\"file-identifier\"]).to.equal(expectedFileProfileCapability[\"file-identifier\"]);\r",
									"                                pm.expect(actualFileProfileCapability[\"file-description\"]).to.equal(expectedFileProfileCapability[\"file-description\"]);\r",
									"                            });\r",
									"                        }\r",
									"                        let expectedFileProfileConfiguration;\r",
									"                        expectedFileProfileConfiguration = expectedProfileInstance[\"file-profile-1-0:file-profile-pac\"][\"file-profile-configuration\"];\r",
									"                        let actualFileProfileConfiguration;\r",
									"                        actualFileProfileConfiguration = actualProfileInstance[\"file-profile-1-0:file-profile-pac\"][\"file-profile-configuration\"];\r",
									"                        pm.test(\"file-profile-configuration class could be found for '\" + expectedProfileInstance[\"uuid\"] + \"'\" , function () {\r",
									"                            pm.expect(actualFileProfileConfiguration).to.not.equal(undefined);\r",
									"                            pm.expect(Object.keys(actualFileProfileConfiguration).length).to.not.equal(0);\r",
									"                        });\r",
									"                        if(actualFileProfileConfiguration != undefined) {\r",
									"                            pm.test(\"Provides expected properties in configuration class for '\" + expectedProfileInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                pm.expect(actualFileProfileConfiguration[\"value\"]).to.equal(expectedFileProfileConfiguration[\"value\"]);\r",
									"                            });\r",
									"                            if(expectedFileProfileConfiguration.hasOwnProperty(\"user-name\")) {\r",
									"                                pm.expect(actualFileProfileConfiguration[\"user-name\"]).to.equal(expectedFileProfileConfiguration[\"user-name\"]);\r",
									"                            }\r",
									"                            if(expectedFileProfileConfiguration.hasOwnProperty(\"password\")) {\r",
									"                                pm.expect(actualFileProfileConfiguration[\"password\"]).to.equal(expectedFileProfileConfiguration[\"password\"]);\r",
									"                            }\r",
									"                            if(expectedFileProfileConfiguration.hasOwnProperty(\"operation\")) {\r",
									"                                pm.expect(actualFileProfileConfiguration[\"operation\"]).to.equal(expectedFileProfileConfiguration[\"operation\"]);\r",
									"                            }\r",
									"                        }\r",
									"                    } else if (expectedProfileInstance[\"profile-name\"].includes(\"PROFILE_NAME_TYPE_INTEGER_PROFILE\")) {\r",
									"                        let expectedIntegerProfileCapability;\r",
									"                        expectedIntegerProfileCapability = expectedProfileInstance[\"integer-profile-1-0:integer-profile-pac\"][\"integer-profile-capability\"];\r",
									"                        let actualIntegerProfileCapability;\r",
									"                        actualIntegerProfileCapability = actualProfileInstance[\"integer-profile-1-0:integer-profile-pac\"][\"integer-profile-capability\"];\r",
									"                        pm.test(\"integer-profile-capability class could be found for '\" + expectedProfileInstance[\"uuid\"] + \"'\" , function () {\r",
									"                            pm.expect(actualIntegerProfileCapability).to.not.equal(undefined);\r",
									"                            pm.expect(Object.keys(actualIntegerProfileCapability).length).to.not.equal(0);\r",
									"                        });\r",
									"                        if(actualIntegerProfileCapability != undefined) {\r",
									"                            pm.test(\"Provides expected properties in capability class for '\" + expectedProfileInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                pm.expect(actualIntegerProfileCapability[\"integer-name\"]).to.equal(expectedIntegerProfileCapability[\"integer-name\"]);\r",
									"                                if(expectedIntegerProfileCapability.hasOwnProperty(\"unit\")) {\r",
									"                                    pm.expect(actualIntegerProfileCapability[\"unit\"]).to.equal(expectedIntegerProfileCapability[\"unit\"]);\r",
									"                                }\r",
									"                                if(expectedIntegerProfileCapability.hasOwnProperty(\"minimum\")) {\r",
									"                                    pm.expect(actualIntegerProfileCapability[\"minimum\"]).to.equal(expectedIntegerProfileCapability[\"minimum\"]);\r",
									"                                }\r",
									"                                if(expectedIntegerProfileCapability.hasOwnProperty(\"maximum\")) {\r",
									"                                    pm.expect(actualIntegerProfileCapability[\"maximum\"]).to.equal(expectedIntegerProfileCapability[\"maximum\"]);\r",
									"                                }\r",
									"                            });\r",
									"                        }\r",
									"                        let expectedIntegerProfileConfiguration;\r",
									"                        expectedIntegerProfileConfiguration = expectedProfileInstance[\"integer-profile-1-0:integer-profile-pac\"][\"integer-profile-configuration\"];\r",
									"                        let actualIntegerProfileConfiguration;\r",
									"                        actualIntegerProfileConfiguration = actualProfileInstance[\"integer-profile-1-0:integer-profile-pac\"][\"integer-profile-configuration\"];\r",
									"                        pm.test(\"integer-profile-configuration class could be found for '\" + expectedProfileInstance[\"uuid\"] + \"'\" , function () {\r",
									"                            pm.expect(actualIntegerProfileConfiguration).to.not.equal(undefined);\r",
									"                            pm.expect(Object.keys(actualIntegerProfileConfiguration).length).to.not.equal(0);\r",
									"                        });\r",
									"                        if(actualIntegerProfileConfiguration != undefined) {\r",
									"                            pm.test(\"Provides expected properties in configuration class for '\" + expectedProfileInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                pm.expect(actualIntegerProfileConfiguration[\"integer-value\"]).to.equal(expectedIntegerProfileConfiguration[\"integer-value\"]);\r",
									"                            });\r",
									"                        }\r",
									"                    } else if (expectedProfileInstance[\"profile-name\"].includes(\"PROFILE_NAME_TYPE_STRING_PROFILE\")) {\r",
									"                        let expectedStringProfileCapability;\r",
									"                        expectedStringProfileCapability = expectedProfileInstance[\"string-profile-1-0:string-profile-pac\"][\"string-profile-capability\"];\r",
									"                        let actualStringProfileCapability;\r",
									"                        actualStringProfileCapability = actualProfileInstance[\"string-profile-1-0:string-profile-pac\"][\"string-profile-capability\"];\r",
									"                        pm.test(\"string-profile-capability class could be found for '\" + expectedProfileInstance[\"uuid\"] + \"'\" , function () {\r",
									"                            pm.expect(actualStringProfileCapability).to.not.equal(undefined);\r",
									"                            pm.expect(Object.keys(actualStringProfileCapability).length).to.not.equal(0);\r",
									"                        });\r",
									"                        if(actualStringProfileCapability != undefined) {\r",
									"                            pm.test(\"Provides expected properties in capability class for '\" + expectedProfileInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                pm.expect(actualStringProfileCapability[\"string-name\"]).to.equal(expectedStringProfileCapability[\"string-name\"]);\r",
									"                                if(expectedStringProfileCapability.hasOwnProperty(\"enumeration\")) {\r",
									"                                    pm.expect(JSON.stringify(actualStringProfileCapability[\"enumeration\"])).to.equal(JSON.stringify(expectedStringProfileCapability[\"enumeration\"]));\r",
									"                                }\r",
									"                                if(expectedStringProfileCapability.hasOwnProperty(\"pattern\")) {\r",
									"                                    pm.expect(actualStringProfileCapability[\"pattern\"]).to.equal(expectedStringProfileCapability[\"pattern\"]);\r",
									"                                }\r",
									"                            });\r",
									"                        }\r",
									"                        let expectedStringProfileConfiguration;\r",
									"                        expectedStringProfileConfiguration = expectedProfileInstance[\"string-profile-1-0:string-profile-pac\"][\"string-profile-configuration\"];\r",
									"                        let actualStringProfileConfiguration;\r",
									"                        actualStringProfileConfiguration = actualProfileInstance[\"string-profile-1-0:string-profile-pac\"][\"string-profile-configuration\"];\r",
									"                        pm.test(\"string-profile-configuration class could be found for '\" + expectedProfileInstance[\"uuid\"] + \"'\" , function () {\r",
									"                            pm.expect(actualStringProfileConfiguration).to.not.equal(undefined);\r",
									"                            pm.expect(Object.keys(actualStringProfileConfiguration).length).to.not.equal(0);\r",
									"                        });\r",
									"                        if(actualStringProfileConfiguration != undefined) {\r",
									"                            pm.test(\"Provides expected properties in configuration class for '\" + expectedProfileInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                pm.expect(actualStringProfileConfiguration[\"string-value\"]).to.equal(expectedStringProfileConfiguration[\"string-value\"]);\r",
									"                            });\r",
									"                        }\r",
									"                    }\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"\r",
									"        // testcases for logical termination point\r",
									"\r",
									"        var actualLtpList;\r",
									"        actualLtpList = actualControlConstruct[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
									"        pm.test(\"Logical termination point list could be found \" , function () {\r",
									"            pm.expect(actualLtpList).to.not.equal(undefined);\r",
									"            pm.expect(Object.keys(actualLtpList).length).to.not.equal(0);\r",
									"        });\r",
									"        if(actualLtpList != undefined) {\r",
									"            for ( let expectedLtpIndex=0; expectedLtpIndex<expectedLtpList.length; expectedLtpIndex++ ) {\r",
									"                let expectedLtpInstance;\r",
									"                expectedLtpInstance = expectedLtpList[expectedLtpIndex];\r",
									"                let actualLtpInstance = FindActualInstance(expectedLtpInstance[\"uuid\"], actualLtpList);\r",
									"                pm.test(\"LTP instance '\" + expectedLtpInstance[\"uuid\"] + \"' could be found \" , function () {\r",
									"                    pm.expect(actualLtpInstance).to.not.equal(undefined);\r",
									"                    pm.expect(Object.keys(actualLtpInstance).length).to.not.equal(0);\r",
									"                });\r",
									"                if( actualLtpInstance != undefined ) {\r",
									"                    console.log(\"testing \"+ actualLtpInstance[\"uuid\"]);\r",
									"                    pm.test(\"Provides expected ltp-direction '\" + expectedLtpInstance[\"ltp-direction\"] + \"' for '\" + expectedLtpInstance[\"uuid\"] + \"'\", function () {\r",
									"                        pm.expect(actualLtpInstance[\"ltp-direction\"]).to.equal(expectedLtpInstance[\"ltp-direction\"]);\r",
									"                    });\r",
									"                    if(expectedLtpInstance[\"client-ltp\"].length != actualLtpInstance[\"client-ltp\"].length) {\r",
									"                        pm.test(\"Provides expected length of client-ltp list for '\" + expectedLtpInstance[\"uuid\"] + \"'\", function () {\r",
									"                            pm.expect(actualLtpInstance[\"client-ltp\"].length).to.equal(expectedLtpInstance[\"client-ltp\"].length);\r",
									"                        });\r",
									"                    } else {\r",
									"                        if(expectedLtpInstance[\"client-ltp\"].length != 0) {\r",
									"                            let isClientLtpListEqual;\r",
									"                            isClientLtpListEqual = areEqual(actualLtpInstance[\"client-ltp\"], expectedLtpInstance[\"client-ltp\"]); \r",
									"                            pm.test(\"Provides expected client-ltp list for '\" + expectedLtpInstance[\"uuid\"] + \"'\", function () {\r",
									"                                pm.expect(isClientLtpListEqual).to.be.true;\r",
									"                            });\r",
									"                        }\r",
									"                    }\r",
									"                    if(expectedLtpInstance[\"server-ltp\"].length != actualLtpInstance[\"server-ltp\"].length) {\r",
									"                        pm.test(\"Provides expected length of server-ltp list for '\" + expectedLtpInstance[\"uuid\"] + \"'\", function () {\r",
									"                            pm.expect(actualLtpInstance[\"server-ltp\"].length).to.equal(expectedLtpInstance[\"server-ltp\"].length);\r",
									"                        });\r",
									"                    } else {\r",
									"                        if(expectedLtpInstance[\"server-ltp\"].length != 0) {\r",
									"                            let isServerLtpListEqual;\r",
									"                            isServerLtpListEqual = areEqual(actualLtpInstance[\"server-ltp\"], expectedLtpInstance[\"server-ltp\"]); \r",
									"                            pm.test(\"Provides expected server-ltp list for '\" + expectedLtpInstance[\"uuid\"] + \"'\", function () {\r",
									"                                pm.expect(isServerLtpListEqual).to.be.true;\r",
									"                            });\r",
									"                        }\r",
									"                    }\r",
									"                    let expectedLayerProtocol;\r",
									"                    expectedLayerProtocol = expectedLtpInstance[\"layer-protocol\"][0];\r",
									"                    let actualLayerProtocol;\r",
									"                    actualLayerProtocol = actualLtpInstance[\"layer-protocol\"][0];\r",
									"                    pm.test(\"layer-protocol could be found in ltp instance '\" + expectedLtpInstance[\"uuid\"] + \"'\", function () {\r",
									"                        pm.expect(actualLayerProtocol).to.not.equal(undefined);\r",
									"                        pm.expect(Object.keys(actualLayerProtocol).length).to.not.equal(0);\r",
									"                    });\r",
									"                    if( actualLayerProtocol != undefined ) {\r",
									"                         pm.test(\"Provides expected local-id '\" + expectedLayerProtocol[\"local-id\"] + \"' for instance '\" + expectedLtpInstance[\"uuid\"] + \"'\", function () {\r",
									"                            pm.expect(actualLayerProtocol[\"local-id\"]).to.equal(expectedLayerProtocol[\"local-id\"]);\r",
									"                        });\r",
									"                        pm.test(\"Provides expected layer-protocol-name '\" + expectedLayerProtocol[\"layer-protocol-name\"] + \"' for '\" + expectedLtpInstance[\"uuid\"] + \"'\", function () {\r",
									"                            pm.expect(actualLayerProtocol[\"layer-protocol-name\"]).to.equal(expectedLayerProtocol[\"layer-protocol-name\"]);\r",
									"                        });\r",
									"                        if ( expectedLayerProtocol[\"layer-protocol-name\"].includes(\"operation-server-interface-1-0:LAYER_PROTOCOL_NAME_TYPE_OPERATION_LAYER\")) {\r",
									"                            let expectedOperationServerCapability;\r",
									"                            expectedOperationServerCapability = expectedLayerProtocol[\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"];\r",
									"                            let actualOperationServerCapability;\r",
									"                            actualOperationServerCapability = actualLayerProtocol[\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-capability\"];\r",
									"                            pm.test(\"operation-server-capability class could be foundfor '\" + expectedLtpInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                pm.expect(actualOperationServerCapability).to.not.equal(undefined);\r",
									"                                pm.expect(Object.keys(actualOperationServerCapability).length).to.not.equal(0);\r",
									"                            });\r",
									"                            if(actualOperationServerCapability != undefined) {\r",
									"                                pm.test(\"Provides expected properties in capability class for '\" + expectedLtpInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                    pm.expect(actualOperationServerCapability[\"operation-name\"]).to.equal(expectedOperationServerCapability[\"operation-name\"]);\r",
									"                                });\r",
									"                            }\r",
									"                            let expectedOperationServerConfiguration;\r",
									"                            expectedOperationServerConfiguration = expectedLayerProtocol[\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"];\r",
									"                            let actualOperationServerConfiguration;\r",
									"                            actualOperationServerConfiguration = actualLayerProtocol[\"operation-server-interface-1-0:operation-server-interface-pac\"][\"operation-server-interface-configuration\"];\r",
									"                            pm.test(\"operation-server-configuration class could be found for '\" + expectedLtpInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                pm.expect(actualOperationServerConfiguration).to.not.equal(undefined);\r",
									"                                pm.expect(Object.keys(actualOperationServerConfiguration).length).to.not.equal(0);\r",
									"                            });\r",
									"                            if(actualOperationServerConfiguration != undefined) {\r",
									"                                pm.test(\"Provides expected properties in configuration class for '\" + expectedLtpInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                    pm.expect(actualOperationServerConfiguration[\"life-cycle-state\"]).to.equal(expectedOperationServerConfiguration[\"life-cycle-state\"]);\r",
									"                                    pm.expect(actualOperationServerConfiguration[\"operation-key\"]).to.equal(expectedOperationServerConfiguration[\"operation-key\"]);\r",
									"                                });\r",
									"                            }\r",
									"                        } else if( expectedLayerProtocol[\"layer-protocol-name\"].includes(\"http-server-interface-1-0:LAYER_PROTOCOL_NAME_TYPE_HTTP_LAYER\") ) {\r",
									"                            let expectedHttpServerCapability;\r",
									"                            expectedHttpServerCapability = expectedLayerProtocol[\"http-server-interface-1-0:http-server-interface-pac\"][\"http-server-interface-capability\"];\r",
									"                            let actualHttpServerCapability;\r",
									"                            actualHttpServerCapability = actualLayerProtocol[\"http-server-interface-1-0:http-server-interface-pac\"][\"http-server-interface-capability\"];\r",
									"                            pm.test(\"http-server-capability class could be found for '\" + expectedLtpInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                pm.expect(actualHttpServerCapability).to.not.equal(undefined);\r",
									"                                pm.expect(Object.keys(actualHttpServerCapability).length).to.not.equal(0);\r",
									"                            });\r",
									"                            if(actualHttpServerCapability != undefined) {\r",
									"                                pm.test(\"Provides expected properties in capability class for '\" + expectedLtpInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                    pm.expect(actualHttpServerCapability[\"application-name\"]).to.equal(expectedHttpServerCapability[\"application-name\"]);\r",
									"                                    pm.expect(actualHttpServerCapability[\"release-number\"]).to.equal(expectedHttpServerCapability[\"release-number\"]);\r",
									"                                    pm.expect(actualHttpServerCapability[\"application-purpose\"]).to.equal(expectedHttpServerCapability[\"application-purpose\"]);\r",
									"                                    pm.expect(actualHttpServerCapability[\"data-update-period\"]).to.equal(expectedHttpServerCapability[\"data-update-period\"]);\r",
									"                                    pm.expect(actualHttpServerCapability[\"owner-name\"]).to.equal(expectedHttpServerCapability[\"owner-name\"]);\r",
									"                                    pm.expect(actualHttpServerCapability[\"owner-email-address\"]).to.equal(expectedHttpServerCapability[\"owner-email-address\"]);\r",
									"                                    pm.expect(JSON.stringify(actualHttpServerCapability[\"release-list\"])).to.equal(JSON.stringify(expectedHttpServerCapability[\"release-list\"]));\r",
									"                                });\r",
									"                            }\r",
									"                        } else if (expectedLayerProtocol[\"layer-protocol-name\"].includes(\"tcp-server-interface-1-0:LAYER_PROTOCOL_NAME_TYPE_TCP_LAYER\") ) {\r",
									"                            let expectedTcpServerConfiguration;\r",
									"                            expectedTcpServerConfiguration = expectedLayerProtocol[\"tcp-server-interface-1-0:tcp-server-interface-pac\"][\"tcp-server-interface-configuration\"];\r",
									"                            let actualTcpServerConfiguration;\r",
									"                            actualTcpServerConfiguration = actualLayerProtocol[\"tcp-server-interface-1-0:tcp-server-interface-pac\"][\"tcp-server-interface-configuration\"];\r",
									"                            pm.test(\"tcp-server-configuration class could be found for '\" + expectedLtpInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                pm.expect(actualTcpServerConfiguration).to.not.equal(undefined);\r",
									"                                pm.expect(Object.keys(actualTcpServerConfiguration).length).to.not.equal(0);\r",
									"                            });\r",
									"                            if(actualTcpServerConfiguration != undefined) {\r",
									"                                pm.test(\"Provides expected properties in configuration class for '\" + expectedLtpInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                    pm.expect(actualTcpServerConfiguration[\"description\"]).to.equal(expectedTcpServerConfiguration[\"description\"]);\r",
									"                                    pm.expect(actualTcpServerConfiguration[\"local-protocol\"]).to.equal(expectedTcpServerConfiguration[\"local-protocol\"]);\r",
									"                                    let addressAttributePresent;\r",
									"                                    addressAttributePresent = expectedTcpServerConfiguration[\"local-address\"].hasOwnProperty(\"ipv-4-address\") || expectedTcpServerConfiguration[\"local-address\"].hasOwnProperty(\"domain-name\");\r",
									"                                    if(addressAttributePresent) {\r",
									"                                        if(expectedTcpServerConfiguration[\"local-address\"].hasOwnProperty(\"ipv-4-address\")) {\r",
									"                                            pm.expect(actualTcpServerConfiguration[\"local-address\"][\"ipv-4-address\"]).to.equal(expectedTcpServerConfiguration[\"local-address\"][\"ipv-4-address\"]);\r",
									"                                        } else if(expectedTcpServerConfiguration[\"local-address\"].hasOwnProperty(\"domain-name\")){\r",
									"                                            pm.expect(actualTcpServerConfiguration[\"local-address\"][\"domain-name\"]).to.equal(expectedTcpServerConfiguration[\"local-address\"][\"domain-name\"]);\r",
									"                                        }\r",
									"                                    } else {\r",
									"                                        pm.expect(addressAttributePresent).to.be.true;\r",
									"                                    }\r",
									"                                    pm.expect(actualTcpServerConfiguration[\"local-port\"]).to.equal(expectedTcpServerConfiguration[\"local-port\"]);\r",
									"                                });\r",
									"                            }\r",
									"                        } else if ( expectedLayerProtocol[\"layer-protocol-name\"].includes(\"operation-client-interface-1-0:LAYER_PROTOCOL_NAME_TYPE_OPERATION_LAYER\") ) {\r",
									"                            let expectedOperationClientConfiguration;\r",
									"                            expectedOperationClientConfiguration = expectedLayerProtocol[\"operation-client-interface-1-0:operation-client-interface-pac\"][\"operation-client-interface-configuration\"];\r",
									"                            let actualOperationClientConfiguration;\r",
									"                            actualOperationClientConfiguration = actualLayerProtocol[\"operation-client-interface-1-0:operation-client-interface-pac\"][\"operation-client-interface-configuration\"];\r",
									"                            pm.test(\"operation-client-configuration class could be found for '\" + expectedLtpInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                pm.expect(actualOperationClientConfiguration).to.not.equal(undefined);\r",
									"                                pm.expect(Object.keys(actualOperationClientConfiguration).length).to.not.equal(0);\r",
									"                            });\r",
									"                            if(actualOperationClientConfiguration != undefined) {\r",
									"                                pm.test(\"Provides expected properties in configuration class for '\" + expectedLtpInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                    pm.expect(actualOperationClientConfiguration[\"operation-name\"]).to.equal(expectedOperationClientConfiguration[\"operation-name\"]);\r",
									"                                    pm.expect(actualOperationClientConfiguration[\"operation-key\"]).to.equal(expectedOperationClientConfiguration[\"operation-key\"]);\r",
									"                                    if(expectedOperationClientConfiguration.hasOwnProperty(\"detailed-logging-is-on\")) {\r",
									"                                        pm.expect(actualOperationClientConfiguration[\"detailed-logging-is-on\"]).to.equal(expectedOperationClientConfiguration[\"detailed-logging-is-on\"]);\r",
									"                                    }\r",
									"                                });\r",
									"                            }\r",
									"                            let expectedOperationClientStatus;\r",
									"                            expectedOperationClientStatus = expectedLayerProtocol[\"operation-client-interface-1-0:operation-client-interface-pac\"][\"operation-client-interface-status\"];\r",
									"                            let actualOperationClientStatus;\r",
									"                            actualOperationClientStatus = actualLayerProtocol[\"operation-client-interface-1-0:operation-client-interface-pac\"][\"operation-client-interface-status\"];\r",
									"                            pm.test(\"operation-client-status class could be found for '\" + expectedLtpInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                pm.expect(actualOperationClientStatus).to.not.equal(undefined);\r",
									"                                pm.expect(Object.keys(actualOperationClientStatus).length).to.not.equal(0);\r",
									"                            });\r",
									"                            if(actualOperationClientStatus != undefined) {\r",
									"                                pm.test(\"Provides expected properties in status class  for '\" + expectedLtpInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                    pm.expect(actualOperationClientStatus[\"operational-state\"]).to.equal(expectedOperationClientStatus[\"operational-state\"]);\r",
									"                                    pm.expect(actualOperationClientStatus[\"life-cycle-state\"]).to.equal(expectedOperationClientStatus[\"life-cycle-state\"]);\r",
									"                                });\r",
									"                            }\r",
									"                        } else if ( expectedLayerProtocol[\"layer-protocol-name\"].includes(\"elasticsearch-client-interface-1-0:LAYER_PROTOCOL_NAME_TYPE_ELASTICSEARCH_LAYER\") ) {\r",
									"                            let expectedElasticSearchClientConfiguration;\r",
									"                            expectedElasticSearchClientConfiguration = expectedLayerProtocol[\"elasticsearch-client-interface-1-0:elasticsearch-client-interface-pac\"][\"elasticsearch-client-interface-configuration\"];\r",
									"                            let actualElasticSearchClientConfiguration;\r",
									"                            actualElasticSearchClientConfiguration = actualLayerProtocol[\"elasticsearch-client-interface-1-0:elasticsearch-client-interface-pac\"][\"elasticsearch-client-interface-configuration\"];\r",
									"                            pm.test(\"elasticsearch-client-configuration class could be found for '\" + expectedLtpInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                pm.expect(actualElasticSearchClientConfiguration).to.not.equal(undefined);\r",
									"                                pm.expect(Object.keys(actualElasticSearchClientConfiguration).length).to.not.equal(0);\r",
									"                            });\r",
									"                            if(actualElasticSearchClientConfiguration != undefined) {\r",
									"                                pm.test(\"Provides expected properties in configuration class for '\" + expectedLtpInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                    pm.expect(actualElasticSearchClientConfiguration[\"auth\"][\"api-key\"]).to.equal(expectedElasticSearchClientConfiguration[\"auth\"][\"api-key\"]);\r",
									"                                    pm.expect(actualElasticSearchClientConfiguration[\"index-alias\"]).to.equal(expectedElasticSearchClientConfiguration[\"index-alias\"]);\r",
									"                                    if(expectedElasticSearchClientConfiguration.hasOwnProperty(\"service-records-policy\")) {\r",
									"                                        pm.expect(JSON.stringify(actualElasticSearchClientConfiguration[\"service-records-policy\"])).to.equal(JSON.stringify(expectedElasticSearchClientConfiguration[\"service-records-policy\"]));\r",
									"                                    }\r",
									"                                });\r",
									"                            }\r",
									"                            let expectedElasticSearchClientStatus;\r",
									"                            expectedElasticSearchClientStatus = expectedLayerProtocol[\"elasticsearch-client-interface-1-0:elasticsearch-client-interface-pac\"][\"elasticsearch-client-interface-configuration\"];\r",
									"                            let actualElasticSearchClientStatus;\r",
									"                            actualElasticSearchClientStatus = actualLayerProtocol[\"elasticsearch-client-interface-1-0:elasticsearch-client-interface-pac\"][\"elasticsearch-client-interface-configuration\"];\r",
									"                            pm.test(\"elasticsearch-client-status class could be found for '\" + expectedLtpInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                pm.expect(actualElasticSearchClientStatus).to.not.equal(undefined);\r",
									"                                pm.expect(Object.keys(actualElasticSearchClientStatus).length).to.not.equal(0);\r",
									"                            });\r",
									"                            if(actualElasticSearchClientStatus != undefined) {\r",
									"                                pm.test(\"Provides expected properties in status class  for '\" + expectedLtpInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                    pm.expect(actualElasticSearchClientStatus[\"operational-state\"]).to.equal(expectedElasticSearchClientStatus[\"operational-state\"]);\r",
									"                                    pm.expect(actualElasticSearchClientStatus[\"life-cycle-state\"]).to.equal(expectedElasticSearchClientStatus[\"life-cycle-state\"]);\r",
									"                                });\r",
									"                            }\r",
									"                        } else if ( expectedLayerProtocol[\"layer-protocol-name\"].includes(\"http-client-interface-1-0:LAYER_PROTOCOL_NAME_TYPE_HTTP_LAYER\") ) {\r",
									"                            let expectedHttpClientConfiguration;\r",
									"                            expectedHttpClientConfiguration = expectedLayerProtocol[\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"];\r",
									"                            let actualHttpClientConfiguration;\r",
									"                            actualHttpClientConfiguration = actualLayerProtocol[\"http-client-interface-1-0:http-client-interface-pac\"][\"http-client-interface-configuration\"];\r",
									"                            pm.test(\"http-client-configuration class could be found for '\" + expectedLtpInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                pm.expect(actualHttpClientConfiguration).to.not.equal(undefined);\r",
									"                                pm.expect(Object.keys(actualHttpClientConfiguration).length).to.not.equal(0);\r",
									"                            });\r",
									"                            if(actualHttpClientConfiguration != undefined) {\r",
									"                                pm.test(\"Provides expected properties in configuration class for '\" + expectedLtpInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                    pm.expect(actualHttpClientConfiguration[\"application-name\"]).to.equal(expectedHttpClientConfiguration[\"application-name\"]);\r",
									"                                    pm.expect(actualHttpClientConfiguration[\"release-number\"]).to.equal(expectedHttpClientConfiguration[\"release-number\"]);\r",
									"                                });\r",
									"                            }\r",
									"                        } else if (expectedLayerProtocol[\"layer-protocol-name\"].includes(\"tcp-client-interface-1-0:LAYER_PROTOCOL_NAME_TYPE_TCP_LAYER\") ) {\r",
									"                            let expectedTcpClientConfiguration;\r",
									"                            expectedTcpClientConfiguration = expectedLayerProtocol[\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"];\r",
									"                            let actualTcpClientConfiguration;\r",
									"                            actualTcpClientConfiguration = actualLayerProtocol[\"tcp-client-interface-1-0:tcp-client-interface-pac\"][\"tcp-client-interface-configuration\"];\r",
									"                            pm.test(\"tcp-client-configuration class could be found for '\" + expectedLtpInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                pm.expect(actualTcpClientConfiguration).to.not.equal(undefined);\r",
									"                                pm.expect(Object.keys(actualTcpClientConfiguration).length).to.not.equal(0);\r",
									"                            });\r",
									"                            if(actualTcpClientConfiguration != undefined) {\r",
									"                                pm.test(\"Provides expected properties in configuration class for '\" + expectedLtpInstance[\"uuid\"] + \"'\" , function () {\r",
									"                                    pm.expect(actualTcpClientConfiguration[\"remote-protocol\"]).to.equal(expectedTcpClientConfiguration[\"remote-protocol\"]);\r",
									"                                    pm.expect(JSON.stringify(actualTcpClientConfiguration[\"remote-address\"])).to.equal(JSON.stringify(expectedTcpClientConfiguration[\"remote-address\"]));\r",
									"                                    pm.expect(actualTcpClientConfiguration[\"remote-port\"]).to.equal(expectedTcpClientConfiguration[\"remote-port\"]);\r",
									"                                });\r",
									"                            }\r",
									"                        }\r",
									"                    }\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"\r",
									"\r",
									"\r",
									"        // testcases for forwarding domain\r",
									"\r",
									"        var actualFDList;\r",
									"        actualFDList = actualControlConstruct[\"core-model-1-4:control-construct\"][\"forwarding-domain\"];\r",
									"        pm.test(\"Forwarding domain could be found \" , function () {\r",
									"            pm.expect(actualFDList).to.not.equal(undefined);\r",
									"            pm.expect(Object.keys(actualFDList).length).to.not.equal(0);\r",
									"        });\r",
									"        if(actualFDList != undefined) {\r",
									"            pm.test(\"Provides invariant number (1) of attributes in forwarding-domain\", function () {\r",
									"                pm.expect(Object.keys(actualFDList).length).to.equal(1);\r",
									"            });\r",
									"            pm.test(\"Provides expected uuid '\" + expectedFDList[0][\"uuid\"] +\"' in forwarding-domain\", function () {\r",
									"                pm.expect(actualFDList[0][\"uuid\"]).to.not.equal(undefined);\r",
									"                pm.expect(actualFDList[0][\"uuid\"]).to.equal(expectedFDList[0][\"uuid\"]);\r",
									"                pm.expect(actualFDList[0][\"uuid\"]).to.be.a(\"String\");\r",
									"            });\r",
									"            var expectedForwardingConstructList;\r",
									"            expectedForwardingConstructList = expectedFDList[0][\"forwarding-construct\"];\r",
									"            var actualForwardingConstructList;\r",
									"            actualForwardingConstructList = actualFDList[0][\"forwarding-construct\"];\r",
									"            pm.test(\"Forwarding construct List could be found \" , function () {\r",
									"                pm.expect(actualForwardingConstructList).to.not.equal(undefined);\r",
									"                pm.expect(Object.keys(actualForwardingConstructList).length).to.not.equal(0);\r",
									"            });\r",
									"\r",
									"            if(actualForwardingConstructList != undefined) {\r",
									"                for(let expectedFCIndex=0; expectedFCIndex<expectedForwardingConstructList.length; expectedFCIndex++) {\r",
									"                    let expectedFCInstance;\r",
									"                    expectedFCInstance = expectedForwardingConstructList[expectedFCIndex];\r",
									"                    let expectedFCInstanceForwardingName;\r",
									"                    for(let i=0;i<expectedFCInstance[\"name\"].length;i++) {\r",
									"                        if(expectedFCInstance[\"name\"][i][\"value-name\"] == \"ForwardingName\") {\r",
									"                            expectedFCInstanceForwardingName = expectedFCInstance[\"name\"][i][\"value\"];\r",
									"                        }\r",
									"                    }\r",
									"                    let actualFCInstance;\r",
									"                    actualFCInstance = FindActualFCInstance(expectedFCInstanceForwardingName, actualForwardingConstructList);\r",
									"                    pm.test(\"Forwarding construct '\" + expectedFCInstanceForwardingName + \"' could be found \" , function () {\r",
									"                        pm.expect(actualFCInstance).to.not.equal(undefined);\r",
									"                        pm.expect(Object.keys(actualFCInstance).length).to.not.equal(0);\r",
									"                    });\r",
									"                    if(actualFCInstance != undefined) {\r",
									"                        console.log(\"testing \" + actualFCInstance[\"uuid\"]);\r",
									"                        pm.test(\"Provides expected uuid '\" + expectedFCInstance[\"uuid\"] +\"' in forwarding-construct\", function () {\r",
									"                            pm.expect(actualFCInstance[\"uuid\"]).to.not.equal(undefined);\r",
									"                            pm.expect(actualFCInstance[\"uuid\"]).to.equal(expectedFCInstance[\"uuid\"]);\r",
									"                            pm.expect(actualFCInstance[\"uuid\"]).to.be.a(\"String\");\r",
									"                        });\r",
									"                        let expectedForwardingKindName;\r",
									"                        for(let i=0;i<expectedFCInstance[\"name\"].length;i++) {\r",
									"                            if(expectedFCInstance[\"name\"][i][\"value-name\"] == \"ForwardingKind\") {\r",
									"                                expectedForwardingKindName = expectedFCInstance[\"name\"][i][\"value\"];\r",
									"                            }\r",
									"                        }\r",
									"                        let actualForwardingKindName;\r",
									"                        for(let i=0;i<actualFCInstance[\"name\"].length;i++) {\r",
									"                            if(actualFCInstance[\"name\"][i][\"value-name\"] == \"ForwardingKind\") {\r",
									"                                actualForwardingKindName = actualFCInstance[\"name\"][i][\"value\"];\r",
									"                            }\r",
									"                        }\r",
									"                        pm.test(\"Provides expected forwarding kind '\" + expectedForwardingKindName +\"' in forwarding-construct\", function () {\r",
									"                            pm.expect(actualForwardingKindName).to.not.equal(undefined);\r",
									"                            pm.expect(actualForwardingKindName).to.equal(expectedForwardingKindName);\r",
									"                            pm.expect(actualForwardingKindName).to.be.a(\"String\");\r",
									"                        });\r",
									"                        pm.test(\"FC port could be found in the forwarding-construct '\" + actualFCInstance[\"uuid\"] + \"'\", function () {\r",
									"                            pm.expect(actualFCInstance[\"fc-port\"]).to.not.equal(undefined);\r",
									"                            pm.expect(Object.keys(actualFCInstance[\"fc-port\"]).length).to.not.equal(0);\r",
									"                        });\r",
									"                        pm.test(\"Provides expected number of fc-port instances '\" + expectedFCInstance[\"fc-port\"].length +\"' in forwarding-construct\", function () {\r",
									"                            pm.expect(actualFCInstance[\"fc-port\"].length).to.equal(expectedFCInstance[\"fc-port\"].length);\r",
									"                        });\r",
									"                        if( actualFCInstance[\"fc-port\"] != undefined ) {\r",
									"                            let actualFcPortList;\r",
									"                            actualFcPortList = actualFCInstance[\"fc-port\"];\r",
									"                            for ( let expectedFcPortIndex=0; expectedFcPortIndex<expectedFCInstance[\"fc-port\"].length; expectedFcPortIndex++ ) {\r",
									"                                let expectedFCPortInstance;\r",
									"                                expectedFCPortInstance = expectedFCInstance[\"fc-port\"][expectedFcPortIndex];\r",
									"                                let expectedFCPortLocalId;\r",
									"                                expectedFCPortLocalId = expectedFCPortInstance[\"local-id\"];\r",
									"                                let actualFcPortInstance;\r",
									"                                actualFcPortInstance = FindActualFCPortInstance(expectedFCPortLocalId, actualFcPortList);\r",
									"                                pm.test(\"Fc-port of local-id '\" + expectedFCPortLocalId + \"' could be found in actual \" , function () {\r",
									"                                    pm.expect(actualFcPortInstance).to.not.equal(undefined);\r",
									"                                    pm.expect(Object.keys(actualFcPortInstance).length).to.not.equal(0);\r",
									"                                });\r",
									"                                if(actualFcPortInstance!=undefined) {\r",
									"                                    pm.test(\"Provides expected port-direction '\" + expectedFCPortInstance[\"port-direction\"] +\"'\", function () {\r",
									"                                        pm.expect(actualFcPortInstance[\"port-direction\"]).to.not.equal(undefined);\r",
									"                                        pm.expect(actualFcPortInstance[\"port-direction\"]).to.equal(expectedFCPortInstance[\"port-direction\"]);\r",
									"                                    });\r",
									"                                    pm.test(\"Provides expected logical-termination-point '\" + expectedFCPortInstance[\"logical-termination-point\"] +\"'\", function () {\r",
									"                                        pm.expect(actualFcPortInstance[\"logical-termination-point\"]).to.not.equal(undefined);\r",
									"                                        pm.expect(actualFcPortInstance[\"logical-termination-point\"]).to.equal(expectedFCPortInstance[\"logical-termination-point\"]);\r",
									"                                    });\r",
									"                                }\r",
									"                            }\r",
									"                        }\r",
									"                    }\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"\r",
									"} catch (error) {\r",
									"    console.log(error)\r",
									"    console.log(\"! Testing could not be executed.\");\r",
									"}\r",
									"\r",
									"/****************************************************************************************\r",
									"* Functions\r",
									"****************************************************************************************/\r",
									"function FindActualInstance(expectedUuid, listToBeFiltered) {\r",
									"    let actualInstance;\r",
									"    actualInstance = {};\r",
									"    try {\r",
									"        for( let i=0; i<listToBeFiltered.length; i++ ) {\r",
									"            let sampleUuid;\r",
									"            sampleUuid = listToBeFiltered[i][\"uuid\"];\r",
									"            if(sampleUuid == expectedUuid) {\r",
									"                actualInstance = listToBeFiltered[i];\r",
									"                return actualInstance;\r",
									"            }\r",
									"        }\r",
									"    } catch (error) {\r",
									"        console.log(error);\r",
									"        console.log(\"! Exception in function FindActualInstance. \");\r",
									"    }\r",
									"    return undefined;\r",
									"}\r",
									"\r",
									"function FindActualFCInstance(expectedFCInstanceForwardingName, actualForwardingConstructList) {\r",
									"    let actualFCInstance;\r",
									"    actualFCInstance = {};\r",
									"    try {\r",
									"        for( let i=0; i<actualForwardingConstructList.length; i++ ) {\r",
									"            for(let j=0; j<actualForwardingConstructList[i][\"name\"].length; j++) {               \r",
									"                if(actualForwardingConstructList[i][\"name\"][j][\"value\"] == expectedFCInstanceForwardingName) {\r",
									"                    actualFCInstance = actualForwardingConstructList[i];\r",
									"                    return actualFCInstance;\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    } catch (error) {\r",
									"        console.log(\"! Exception in function FindActualFCInstance. \");\r",
									"    }\r",
									"    return undefined;\r",
									"}\r",
									"\r",
									"function FindActualFCPortInstance(localId, fcPortList) {\r",
									"    let fcPortInstance;\r",
									"    fcPortInstance = {};\r",
									"    try {\r",
									"        let sampleLocalId;\r",
									"        for( let i=0; i<fcPortList.length; i++ ) {\r",
									"            sampleLocalId = fcPortList[i][\"local-id\"];\r",
									"            if(sampleLocalId == localId) {\r",
									"                fcPortInstance = fcPortList[i];\r",
									"                return fcPortInstance; \r",
									"            }\r",
									"        }\r",
									"    } catch (error) {\r",
									"        console.log(\"! Exception in function FindActualFCPortInstance. \");\r",
									"    }\r",
									"}\r",
									"\r",
									"function areEqual(array1, array2) {\r",
									"  if (array1.length === array2.length) {\r",
									"    return array1.every(element => {\r",
									"      if (array2.includes(element)) {\r",
									"        return true;\r",
									"      }\r",
									"      return false;\r",
									"    });\r",
									"  }\r",
									"  return false;\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-mock-response-code",
								"value": "200",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{requestBody}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{uri}}",
							"host": [
								"{{uri}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Clearing collection data",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"====================================== Clearing collection data ====================================\");\r",
									"console.log(\"==========================================================================================\");\r",
									"\r",
									"/****************************************************************************************\r",
									"* Setting Local Variables and Preparing the Request\r",
									"****************************************************************************************/\r",
									"try {\r",
									"    \r",
									"    let URI;\r",
									"    URI = pm.environment.get(\"dummyUri\");\r",
									"\r",
									"    pm.variables.set(\"uri\", URI);\r",
									"    pm.request.headers.upsert({ key: \"Authorization\", value: \"\" });\r",
									"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
									"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" });\r",
									"\r",
									"} catch (error) {\r",
									"    console.log(\"! Local variables could not be set.\");\r",
									"}\r",
									"\r",
									"/****************************************************************************************\r",
									"* Functions\r",
									"****************************************************************************************/\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"/****************************************************************************************\r",
									"* Clearing Variables \r",
									"****************************************************************************************/\r",
									"try {\r",
									"    pm.environment.clear();\r",
									"    pm.collectionVariables.clear();\r",
									"    pm.variables.clear();\r",
									"\r",
									"} catch (error) {\r",
									"    console.log(\"! Collection variables could not be set.\");\r",
									"}\r",
									"console.log(pm.collectionVariables)\r",
									"console.log(pm.environment)\r",
									"console.log(pm.variables)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{uri}}",
							"host": [
								"{{uri}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// pm.request.headers.upsert({ ",
					"//     key: \"Connection\",",
					"//     value: \"Close\" ",
					"// });"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "currentOperationServer",
			"value": ""
		},
		{
			"key": "httpClientLtp",
			"value": ""
		}
	]
}